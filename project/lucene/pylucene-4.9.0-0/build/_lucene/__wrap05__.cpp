#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/text/Collator.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeQuery::class$ = NULL;
          jmethodID *SlowCollatedTermRangeQuery::mids$ = NULL;
          bool SlowCollatedTermRangeQuery::live$ = false;

          jclass SlowCollatedTermRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeQuery::SlowCollatedTermRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          jboolean SlowCollatedTermRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::field() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
          }

          ::java::text::Collator SlowCollatedTermRangeQuery::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jint SlowCollatedTermRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SlowCollatedTermRangeQuery::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeQuery::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, upperTerm),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, field, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesUpper, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery_init_, 0, 0, t_SlowCollatedTermRangeQuery__fields_, 0, 0);

          void t_SlowCollatedTermRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeQuery), module, "SlowCollatedTermRangeQuery", 0);
          }

          void t_SlowCollatedTermRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeQuery::wrap_Object(SlowCollatedTermRangeQuery(((t_SlowCollatedTermRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeQuery(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.field());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ArrayUtil::class$ = NULL;
        jmethodID *ArrayUtil::mids$ = NULL;
        bool ArrayUtil::live$ = false;
        jint ArrayUtil::MAX_ARRAY_LENGTH = (jint) 0;

        jclass ArrayUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ArrayUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_082119cc] = env->getStaticMethodID(cls, "equals", "([II[III)Z");
            mids$[mid_equals_8c28d07c] = env->getStaticMethodID(cls, "equals", "([CI[CII)Z");
            mids$[mid_equals_06f361be] = env->getStaticMethodID(cls, "equals", "([BI[BII)Z");
            mids$[mid_getShrinkSize_d3236abb] = env->getStaticMethodID(cls, "getShrinkSize", "(III)I");
            mids$[mid_grow_4ea7c525] = env->getStaticMethodID(cls, "grow", "([F)[F");
            mids$[mid_grow_607a9cf1] = env->getStaticMethodID(cls, "grow", "([D)[D");
            mids$[mid_grow_21fe49ab] = env->getStaticMethodID(cls, "grow", "([[I)[[I");
            mids$[mid_grow_6dd1ed5d] = env->getStaticMethodID(cls, "grow", "([J)[J");
            mids$[mid_grow_fc3c604f] = env->getStaticMethodID(cls, "grow", "([I)[I");
            mids$[mid_grow_e08af67d] = env->getStaticMethodID(cls, "grow", "([Z)[Z");
            mids$[mid_grow_12f49f5f] = env->getStaticMethodID(cls, "grow", "([C)[C");
            mids$[mid_grow_27787b8f] = env->getStaticMethodID(cls, "grow", "([[F)[[F");
            mids$[mid_grow_3de5243f] = env->getStaticMethodID(cls, "grow", "([S)[S");
            mids$[mid_grow_1193226d] = env->getStaticMethodID(cls, "grow", "([B)[B");
            mids$[mid_grow_e2c1f835] = env->getStaticMethodID(cls, "grow", "([DI)[D");
            mids$[mid_grow_d090ee39] = env->getStaticMethodID(cls, "grow", "([SI)[S");
            mids$[mid_grow_1fbccced] = env->getStaticMethodID(cls, "grow", "([ZI)[Z");
            mids$[mid_grow_62111365] = env->getStaticMethodID(cls, "grow", "([[II)[[I");
            mids$[mid_grow_6bd5869d] = env->getStaticMethodID(cls, "grow", "([BI)[B");
            mids$[mid_grow_91cb90f9] = env->getStaticMethodID(cls, "grow", "([CI)[C");
            mids$[mid_grow_0f9a030d] = env->getStaticMethodID(cls, "grow", "([JI)[J");
            mids$[mid_grow_d766d189] = env->getStaticMethodID(cls, "grow", "([II)[I");
            mids$[mid_grow_92d373eb] = env->getStaticMethodID(cls, "grow", "([[FI)[[F");
            mids$[mid_grow_a415095d] = env->getStaticMethodID(cls, "grow", "([FI)[F");
            mids$[mid_hashCode_6f0bb349] = env->getStaticMethodID(cls, "hashCode", "([CII)I");
            mids$[mid_hashCode_86f44340] = env->getStaticMethodID(cls, "hashCode", "([BII)I");
            mids$[mid_introSort_01dac18d] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_introSort_8c46d789] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_introSort_266f4139] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_introSort_7c263389] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_naturalComparator_5a7ff2fc] = env->getStaticMethodID(cls, "naturalComparator", "()Ljava/util/Comparator;");
            mids$[mid_oversize_d8d154b9] = env->getStaticMethodID(cls, "oversize", "(II)I");
            mids$[mid_parseInt_700e23c9] = env->getStaticMethodID(cls, "parseInt", "([C)I");
            mids$[mid_parseInt_6f0bb349] = env->getStaticMethodID(cls, "parseInt", "([CII)I");
            mids$[mid_parseInt_afe81cab] = env->getStaticMethodID(cls, "parseInt", "([CIII)I");
            mids$[mid_shrink_92d373eb] = env->getStaticMethodID(cls, "shrink", "([[FI)[[F");
            mids$[mid_shrink_0f9a030d] = env->getStaticMethodID(cls, "shrink", "([JI)[J");
            mids$[mid_shrink_1fbccced] = env->getStaticMethodID(cls, "shrink", "([ZI)[Z");
            mids$[mid_shrink_6bd5869d] = env->getStaticMethodID(cls, "shrink", "([BI)[B");
            mids$[mid_shrink_d766d189] = env->getStaticMethodID(cls, "shrink", "([II)[I");
            mids$[mid_shrink_91cb90f9] = env->getStaticMethodID(cls, "shrink", "([CI)[C");
            mids$[mid_shrink_62111365] = env->getStaticMethodID(cls, "shrink", "([[II)[[I");
            mids$[mid_shrink_d090ee39] = env->getStaticMethodID(cls, "shrink", "([SI)[S");
            mids$[mid_swap_4172dade] = env->getStaticMethodID(cls, "swap", "([Ljava/lang/Object;II)V");
            mids$[mid_timSort_01dac18d] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_timSort_8c46d789] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_timSort_266f4139] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_timSort_7c263389] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_toIntArray_d16addd8] = env->getStaticMethodID(cls, "toIntArray", "(Ljava/util/Collection;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_ARRAY_LENGTH = env->getStaticIntField(cls, "MAX_ARRAY_LENGTH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ArrayUtil::equals(const JArray< jint > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_082119cc], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_8c28d07c], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jbyte > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_06f361be], a0.this$, a1, a2.this$, a3, a4);
        }

        jint ArrayUtil::getShrinkSize(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getShrinkSize_d3236abb], a0, a1, a2);
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_4ea7c525], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_607a9cf1], a0.this$));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_21fe49ab], a0.this$));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_6dd1ed5d], a0.this$));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_fc3c604f], a0.this$));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_e08af67d], a0.this$));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_12f49f5f], a0.this$));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_27787b8f], a0.this$));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_3de5243f], a0.this$));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_1193226d], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_e2c1f835], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_d090ee39], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_1fbccced], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_62111365], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_6bd5869d], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_91cb90f9], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_0f9a030d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_d766d189], a0.this$, a1));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_92d373eb], a0.this$, a1));
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_a415095d], a0.this$, a1));
        }

        jint ArrayUtil::hashCode(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::hashCode(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_86f44340], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_01dac18d], a0.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        ::java::util::Comparator ArrayUtil::naturalComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_naturalComparator_5a7ff2fc]));
        }

        jint ArrayUtil::oversize(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_oversize_d8d154b9], a0, a1);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_700e23c9], a0.this$);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_afe81cab], a0.this$, a1, a2, a3);
        }

        JArray< JArray< jfloat > > ArrayUtil::shrink(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_92d373eb], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::shrink(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_shrink_0f9a030d], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::shrink(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_shrink_1fbccced], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::shrink(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_shrink_6bd5869d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::shrink(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d766d189], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::shrink(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_shrink_91cb90f9], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::shrink(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_62111365], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::shrink(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d090ee39], a0.this$, a1));
        }

        void ArrayUtil::swap(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_swap_4172dade], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_01dac18d], a0.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        JArray< jint > ArrayUtil::toIntArray(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_toIntArray_d16addd8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type);
        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ArrayUtil__methods_[] = {
          DECLARE_METHOD(t_ArrayUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, getShrinkSize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, grow, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, hashCode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, naturalComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, oversize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, parseInt, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, shrink, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, swap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, timSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, toIntArray, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArrayUtil, t_ArrayUtil, ::java::lang::Object, ArrayUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ArrayUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ArrayUtil), module, "ArrayUtil", 0);
        }

        void t_ArrayUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "class_", make_descriptor(ArrayUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "wrapfn_", make_descriptor(t_ArrayUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ArrayUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "MAX_ARRAY_LENGTH", make_descriptor(ArrayUtil::MAX_ARRAY_LENGTH));
        }

        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArrayUtil::initializeClass, 1)))
            return NULL;
          return t_ArrayUtil::wrap_Object(ArrayUtil(((t_ArrayUtil *) arg)->object.this$));
        }
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArrayUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[II[III", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[BI[BII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::getShrinkSize(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getShrinkSize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jfloat > a0((jobject) NULL);
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "grow", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(type, "hashCode", args, 2);
        }

        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::naturalComparator());
          return ::java::util::t_Comparator::wrap_Object(result);
        }

        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::oversize(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "oversize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jchar > a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "parseInt", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "shrink", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::ArrayUtil::swap(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "swap", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::toIntArray(a0));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "toIntArray", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *CharStream::class$ = NULL;
            jmethodID *CharStream::mids$ = NULL;
            bool CharStream::live$ = false;

            jclass CharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/CharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jchar CharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void CharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String CharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > CharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void CharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint CharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint CharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint CharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint CharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint CharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint CharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar CharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_BeginToken(t_CharStream *self);
            static PyObject *t_CharStream_Done(t_CharStream *self);
            static PyObject *t_CharStream_GetImage(t_CharStream *self);
            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
            static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
            static PyObject *t_CharStream_getColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndLine(t_CharStream *self);
            static PyObject *t_CharStream_getLine(t_CharStream *self);
            static PyObject *t_CharStream_readChar(t_CharStream *self);
            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
            static PyGetSetDef t_CharStream__fields_[] = {
              DECLARE_GET_FIELD(t_CharStream, beginColumn),
              DECLARE_GET_FIELD(t_CharStream, beginLine),
              DECLARE_GET_FIELD(t_CharStream, column),
              DECLARE_GET_FIELD(t_CharStream, endColumn),
              DECLARE_GET_FIELD(t_CharStream, endLine),
              DECLARE_GET_FIELD(t_CharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharStream__methods_[] = {
              DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_CharStream, backup, METH_O),
              DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

            void t_CharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(CharStream), module, "CharStream", 0);
            }

            void t_CharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                return NULL;
              return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
            }
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharStream_BeginToken(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_Done(t_CharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharStream_GetImage(t_CharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_readChar(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator$InputIteratorWrapper::class$ = NULL;
          jmethodID *InputIterator$InputIteratorWrapper::mids$ = NULL;
          bool InputIterator$InputIteratorWrapper::live$ = false;

          jclass InputIterator$InputIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InputIterator$InputIteratorWrapper::InputIterator$InputIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Set InputIterator$InputIteratorWrapper::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator InputIterator$InputIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean InputIterator$InputIteratorWrapper::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator$InputIteratorWrapper::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator$InputIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data);
          static PyGetSetDef t_InputIterator$InputIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_InputIterator$InputIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InputIterator$InputIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper, ::java::lang::Object, InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_InputIterator$InputIteratorWrapper *)) get_next< t_InputIterator$InputIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_InputIterator$InputIteratorWrapper__fields_, 0, 0);

          void t_InputIterator$InputIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator$InputIteratorWrapper), module, "InputIterator$InputIteratorWrapper", 0);
          }

          void t_InputIterator$InputIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "class_", make_descriptor(InputIterator$InputIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_InputIterator$InputIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_InputIterator$InputIteratorWrapper::wrap_Object(InputIterator$InputIteratorWrapper(((t_InputIterator$InputIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            InputIterator$InputIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = InputIterator$InputIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/StringBuffer.h"
#include "java/io/Serializable.h"
#include "java/util/Comparator.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *String::class$ = NULL;
    jmethodID *String::mids$ = NULL;
    bool String::live$ = false;
    ::java::util::Comparator *String::CASE_INSENSITIVE_ORDER = NULL;

    jclass String::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/String");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
        mids$[mid_init$_9f94ae34] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
        mids$[mid_init$_44634788] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
        mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
        mids$[mid_init$_1a0c6fd5] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
        mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
        mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
        mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
        mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
        mids$[mid_init$_5ab96441] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
        mids$[mid_init$_96a25f0b] = env->getMethodID(cls, "<init>", "([BIII)V");
        mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
        mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
        mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
        mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
        mids$[mid_compareTo_5fdc3f57] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
        mids$[mid_compareToIgnoreCase_5fdc3f57] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
        mids$[mid_concat_97a5258f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_a8afc646] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_44634784] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
        mids$[mid_copyValueOf_c783d655] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
        mids$[mid_copyValueOf_ddb60785] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
        mids$[mid_endsWith_5fdc3f44] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equalsIgnoreCase_5fdc3f44] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
        mids$[mid_format_0fb26e3b] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_format_84ed7d06] = env->getStaticMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_getBytes_dab10e7e] = env->getMethodID(cls, "getBytes", "()[B");
        mids$[mid_getBytes_94a731a4] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
        mids$[mid_getBytes_fdf97d27] = env->getMethodID(cls, "getBytes", "(II[BI)V");
        mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_indexOf_39c7bd23] = env->getMethodID(cls, "indexOf", "(I)I");
        mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
        mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
        mids$[mid_indexOf_d8d154b9] = env->getMethodID(cls, "indexOf", "(II)I");
        mids$[mid_intern_14c7b5c5] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_lastIndexOf_39c7bd23] = env->getMethodID(cls, "lastIndexOf", "(I)I");
        mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
        mids$[mid_lastIndexOf_d8d154b9] = env->getMethodID(cls, "lastIndexOf", "(II)I");
        mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
        mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
        mids$[mid_matches_5fdc3f44] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
        mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
        mids$[mid_regionMatches_344d8cb6] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
        mids$[mid_regionMatches_35f2560d] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
        mids$[mid_replace_f1c62e0d] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
        mids$[mid_replace_103b702d] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_replaceAll_aacea7e9] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_replaceFirst_aacea7e9] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_split_1f6a174f] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
        mids$[mid_split_3384fe85] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
        mids$[mid_startsWith_5fdc3f44] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
        mids$[mid_startsWith_6e53ccca] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
        mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
        mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
        mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
        mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
        mids$[mid_toLowerCase_14c7b5c5] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
        mids$[mid_toLowerCase_c0fb304e] = env->getMethodID(cls, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_14c7b5c5] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_c0fb304e] = env->getMethodID(cls, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_trim_14c7b5c5] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
        mids$[mid_valueOf_445a175e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_c9db4eed] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_valueOf_5ded254a] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_1b4624f8] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_141401b3] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
        mids$[mid_valueOf_c783d655] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
        mids$[mid_valueOf_7611a535] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
        mids$[mid_valueOf_3e02f30e] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
        mids$[mid_valueOf_ddb60785] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CASE_INSENSITIVE_ORDER = new ::java::util::Comparator(env->getStaticObjectField(cls, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

    String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f94ae34, a0.this$)) {}

    String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44634788, a0.this$)) {}

    String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

    String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a0c6fd5, a0.this$, a1.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

    String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

    String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab96441, a0.this$, a1, a2, a3.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_96a25f0b, a0.this$, a1, a2, a3)) {}

    jchar String::charAt(jint a0) const
    {
      return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
    }

    jint String::codePointAt(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
    }

    jint String::codePointBefore(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
    }

    jint String::codePointCount(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
    }

    jint String::compareTo(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_5fdc3f57], a0.this$);
    }

    jint String::compareToIgnoreCase(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_5fdc3f57], a0.this$);
    }

    String String::concat(const String & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_concat_97a5258f], a0.this$));
    }

    jboolean String::contains(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_44634784], a0.this$);
    }

    String String::copyValueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_c783d655], a0.this$));
    }

    String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_ddb60785], a0.this$, a1, a2));
    }

    jboolean String::endsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_endsWith_5fdc3f44], a0.this$);
    }

    jboolean String::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean String::equalsIgnoreCase(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_5fdc3f44], a0.this$);
    }

    String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_0fb26e3b], a0.this$, a1.this$));
    }

    String String::format(const ::java::util::Locale & a0, const String & a1, const JArray< ::java::lang::Object > & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_84ed7d06], a0.this$, a1.this$, a2.this$));
    }

    JArray< jbyte > String::getBytes() const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_dab10e7e]));
    }

    JArray< jbyte > String::getBytes(const String & a0) const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_94a731a4], a0.this$));
    }

    void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getBytes_fdf97d27], a0, a1, a2.this$, a3);
    }

    void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
    }

    jint String::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint String::indexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_39c7bd23], a0);
    }

    jint String::indexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
    }

    jint String::indexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::indexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_d8d154b9], a0, a1);
    }

    String String::intern() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_intern_14c7b5c5]));
    }

    jboolean String::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    jint String::lastIndexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_39c7bd23], a0);
    }

    jint String::lastIndexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
    }

    jint String::lastIndexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_d8d154b9], a0, a1);
    }

    jint String::lastIndexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::length() const
    {
      return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
    }

    jboolean String::matches(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_matches_5fdc3f44], a0.this$);
    }

    jint String::offsetByCodePoints(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
    }

    jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_344d8cb6], a0, a1.this$, a2, a3);
    }

    jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_35f2560d], a0, a1, a2.this$, a3, a4);
    }

    String String::replace(jchar a0, jchar a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_f1c62e0d], a0, a1));
    }

    String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_103b702d], a0.this$, a1.this$));
    }

    String String::replaceAll(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceAll_aacea7e9], a0.this$, a1.this$));
    }

    String String::replaceFirst(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_aacea7e9], a0.this$, a1.this$));
    }

    JArray< String > String::split(const String & a0) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1f6a174f], a0.this$));
    }

    JArray< String > String::split(const String & a0, jint a1) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_3384fe85], a0.this$, a1));
    }

    jboolean String::startsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_5fdc3f44], a0.this$);
    }

    jboolean String::startsWith(const String & a0, jint a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_6e53ccca], a0.this$, a1);
    }

    ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
    {
      return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
    }

    String String::substring(jint a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
    }

    String String::substring(jint a0, jint a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
    }

    JArray< jchar > String::toCharArray() const
    {
      return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
    }

    String String::toLowerCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_14c7b5c5]));
    }

    String String::toLowerCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_c0fb304e], a0.this$));
    }

    String String::toString() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    String String::toUpperCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_14c7b5c5]));
    }

    String String::toUpperCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_c0fb304e], a0.this$));
    }

    String String::trim() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_trim_14c7b5c5]));
    }

    String String::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_445a175e], a0));
    }

    String String::valueOf(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c9db4eed], a0.this$));
    }

    String String::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ded254a], a0));
    }

    String String::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1b4624f8], a0));
    }

    String String::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_141401b3], a0));
    }

    String String::valueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c783d655], a0.this$));
    }

    String String::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7611a535], a0));
    }

    String String::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3e02f30e], a0));
    }

    String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ddb60785], a0.this$, a1, a2));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
    static PyObject *t_String_charAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
    static PyObject *t_String_compareTo(t_String *self, PyObject *arg);
    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_concat(t_String *self, PyObject *arg);
    static PyObject *t_String_contains(t_String *self, PyObject *arg);
    static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
    static PyObject *t_String_equals(t_String *self, PyObject *args);
    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_getBytes(t_String *self, PyObject *args);
    static PyObject *t_String_getChars(t_String *self, PyObject *args);
    static PyObject *t_String_hashCode(t_String *self, PyObject *args);
    static PyObject *t_String_indexOf(t_String *self, PyObject *args);
    static PyObject *t_String_intern(t_String *self);
    static PyObject *t_String_isEmpty(t_String *self);
    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
    static PyObject *t_String_length(t_String *self);
    static PyObject *t_String_matches(t_String *self, PyObject *arg);
    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
    static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
    static PyObject *t_String_replace(t_String *self, PyObject *args);
    static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
    static PyObject *t_String_split(t_String *self, PyObject *args);
    static PyObject *t_String_startsWith(t_String *self, PyObject *args);
    static PyObject *t_String_subSequence(t_String *self, PyObject *args);
    static PyObject *t_String_substring(t_String *self, PyObject *args);
    static PyObject *t_String_toCharArray(t_String *self);
    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args);
    static PyObject *t_String_toString(t_String *self, PyObject *args);
    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args);
    static PyObject *t_String_trim(t_String *self);
    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_get__bytes(t_String *self, void *data);
    static PyObject *t_String_get__empty(t_String *self, void *data);
    static PyGetSetDef t_String__fields_[] = {
      DECLARE_GET_FIELD(t_String, bytes),
      DECLARE_GET_FIELD(t_String, empty),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_String__methods_[] = {
      DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, charAt, METH_O),
      DECLARE_METHOD(t_String, codePointAt, METH_O),
      DECLARE_METHOD(t_String, codePointBefore, METH_O),
      DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
      DECLARE_METHOD(t_String, compareTo, METH_O),
      DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, concat, METH_O),
      DECLARE_METHOD(t_String, contains, METH_O),
      DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
      DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, endsWith, METH_O),
      DECLARE_METHOD(t_String, equals, METH_VARARGS),
      DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
      DECLARE_METHOD(t_String, getChars, METH_VARARGS),
      DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, intern, METH_NOARGS),
      DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, length, METH_NOARGS),
      DECLARE_METHOD(t_String, matches, METH_O),
      DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
      DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
      DECLARE_METHOD(t_String, replace, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
      DECLARE_METHOD(t_String, split, METH_VARARGS),
      DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
      DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
      DECLARE_METHOD(t_String, substring, METH_VARARGS),
      DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
      DECLARE_METHOD(t_String, toLowerCase, METH_VARARGS),
      DECLARE_METHOD(t_String, toString, METH_VARARGS),
      DECLARE_METHOD(t_String, toUpperCase, METH_VARARGS),
      DECLARE_METHOD(t_String, trim, METH_NOARGS),
      DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(String, t_String, ::java::lang::Object, String, t_String_init_, 0, 0, t_String__fields_, 0, 0);

    void t_String::install(PyObject *module)
    {
      installType(&PY_TYPE(String), module, "String", 0);
    }

    void t_String::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "class_", make_descriptor(String::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "wrapfn_", make_descriptor(unboxString));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "boxfn_", make_descriptor(boxString));
      env->getClass(String::initializeClass);
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "CASE_INSENSITIVE_ORDER", make_descriptor(::java::util::t_Comparator::wrap_Object(*String::CASE_INSENSITIVE_ORDER)));
    }

    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, String::initializeClass, 1)))
        return NULL;
      return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
    }
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, String::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String object((jobject) NULL);

          INT_CALL(object = String());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          String a1((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[Bs", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String a3((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_String_charAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.charAt(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError((PyObject *) self, "charAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointAt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointBefore(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
      return NULL;
    }

    static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.codePointCount(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_String_compareTo(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_concat(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.concat(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "concat", arg);
      return NULL;
    }

    static PyObject *t_String_contains(t_String *self, PyObject *arg)
    {
      ::java::lang::CharSequence a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
      return NULL;
    }

    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "copyValueOf", args);
      return NULL;
    }

    static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.endsWith(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
      return NULL;
    }

    static PyObject *t_String_equals(t_String *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "format", args);
      return NULL;
    }

    static PyObject *t_String_getBytes(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }
        break;
       case 1:
        {
          String a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBytes(a0));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          jint a3;

          if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "getBytes", args);
      return NULL;
    }

    static PyObject *t_String_getChars(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      JArray< jchar > a2((jobject) NULL);
      jint a3;

      if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "getChars", args);
      return NULL;
    }

    static PyObject *t_String_hashCode(t_String *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_String_indexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "indexOf", args);
      return NULL;
    }

    static PyObject *t_String_intern(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.intern());
      return j2p(result);
    }

    static PyObject *t_String_isEmpty(t_String *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
      return NULL;
    }

    static PyObject *t_String_length(t_String *self)
    {
      jint result;
      OBJ_CALL(result = self->object.length());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_String_matches(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.matches(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "matches", arg);
      return NULL;
    }

    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 4:
        {
          jint a0;
          String a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean result;

          if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 5:
        {
          jboolean a0;
          jint a1;
          String a2((jobject) NULL);
          jint a3;
          jint a4;
          jboolean result;

          if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
      return NULL;
    }

    static PyObject *t_String_replace(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jchar a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "CC", &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::CharSequence a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "replace", args);
      return NULL;
    }

    static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceAll(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceFirst(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
      return NULL;
    }

    static PyObject *t_String_split(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.split(a0));
            return JArray<jstring>(result.this$).wrap();
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.split(a0, a1));
            return JArray<jstring>(result.this$).wrap();
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "split", args);
      return NULL;
    }

    static PyObject *t_String_startsWith(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.startsWith(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "startsWith", args);
      return NULL;
    }

    static PyObject *t_String_subSequence(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      ::java::lang::CharSequence result((jobject) NULL);

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.subSequence(a0, a1));
        return ::java::lang::t_CharSequence::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "subSequence", args);
      return NULL;
    }

    static PyObject *t_String_substring(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.substring(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.substring(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "substring", args);
      return NULL;
    }

    static PyObject *t_String_toCharArray(t_String *self)
    {
      JArray< jchar > result((jobject) NULL);
      OBJ_CALL(result = self->object.toCharArray());
      return result.wrap();
    }

    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toLowerCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toLowerCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_String_toString(t_String *self, PyObject *args)
    {
      String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toUpperCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toUpperCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_String_trim(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.trim());
      return j2p(result);
    }

    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jfloat a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jdouble a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jchar a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_String_get__bytes(t_String *self, void *data)
    {
      JArray< jbyte > value((jobject) NULL);
      OBJ_CALL(value = self->object.getBytes());
      return value.wrap();
    }

    static PyObject *t_String_get__empty(t_String *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermsFilter.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermsFilter::class$ = NULL;
        jmethodID *TermsFilter::mids$ = NULL;
        bool TermsFilter::live$ = false;

        jclass TermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9f85e01] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_04719c9d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsFilter::TermsFilter(const JArray< ::org::apache::lucene::index::Term > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_c9f85e01, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::util::List & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const ::java::util::List & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_04719c9d, a0.this$, a1.this$)) {}

        jboolean TermsFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint TermsFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermsFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args);

        static PyMethodDef t_TermsFilter__methods_[] = {
          DECLARE_METHOD(t_TermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsFilter, t_TermsFilter, ::org::apache::lucene::search::Filter, TermsFilter, t_TermsFilter_init_, 0, 0, 0, 0, 0);

        void t_TermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsFilter), module, "TermsFilter", 0);
        }

        void t_TermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "class_", make_descriptor(TermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "wrapfn_", make_descriptor(t_TermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsFilter::initializeClass, 1)))
            return NULL;
          return t_TermsFilter::wrap_Object(TermsFilter(((t_TermsFilter *) arg)->object.this$));
        }
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedGrowableWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedGrowableWriter::class$ = NULL;
          jmethodID *PagedGrowableWriter::mids$ = NULL;
          bool PagedGrowableWriter::live$ = false;

          jclass PagedGrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedGrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_b730b410] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedGrowableWriter;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedGrowableWriter::PagedGrowableWriter(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args);
          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data);
          static PyGetSetDef t_PagedGrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_PagedGrowableWriter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedGrowableWriter__methods_[] = {
            DECLARE_METHOD(t_PagedGrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedGrowableWriter, t_PagedGrowableWriter, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedGrowableWriter, t_PagedGrowableWriter_init_, 0, 0, t_PagedGrowableWriter__fields_, 0, 0);
          PyObject *t_PagedGrowableWriter::wrap_Object(const PagedGrowableWriter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedGrowableWriter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedGrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedGrowableWriter), module, "PagedGrowableWriter", 0);
          }

          void t_PagedGrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "class_", make_descriptor(PagedGrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_PagedGrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedGrowableWriter::initializeClass, 1)))
              return NULL;
            return t_PagedGrowableWriter::wrap_Object(PagedGrowableWriter(((t_PagedGrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedGrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedGrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedGrowableWriter(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedGrowableWriter);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphen.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphen::class$ = NULL;
            jmethodID *Hyphen::mids$ = NULL;
            jfieldID *Hyphen::fids$ = NULL;
            bool Hyphen::live$ = false;

            jclass Hyphen::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphen");

                mids$ = new jmethodID[max_mid];
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_noBreak] = env->getFieldID(cls, "noBreak", "Ljava/lang/String;");
                fids$[fid_postBreak] = env->getFieldID(cls, "postBreak", "Ljava/lang/String;");
                fids$[fid_preBreak] = env->getFieldID(cls, "preBreak", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String Hyphen::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String Hyphen::_get_noBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_noBreak]));
            }

            void Hyphen::_set_noBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_noBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_postBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_postBreak]));
            }

            void Hyphen::_set_postBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_postBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_preBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_preBreak]));
            }

            void Hyphen::_set_preBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_preBreak], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args);
            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data);

            static PyGetSetDef t_Hyphen__fields_[] = {
              DECLARE_GETSET_FIELD(t_Hyphen, noBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, postBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, preBreak),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphen__methods_[] = {
              DECLARE_METHOD(t_Hyphen, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphen, t_Hyphen, ::java::lang::Object, Hyphen, abstract_init, 0, 0, t_Hyphen__fields_, 0, 0);

            void t_Hyphen::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphen), module, "Hyphen", 0);
            }

            void t_Hyphen::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "class_", make_descriptor(Hyphen::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "wrapfn_", make_descriptor(t_Hyphen::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphen::initializeClass, 1)))
                return NULL;
              return t_Hyphen::wrap_Object(Hyphen(((t_Hyphen *) arg)->object.this$));
            }
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphen::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Hyphen), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_noBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_noBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "noBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_postBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_postBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "postBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_preBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_preBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "preBreak", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharFilterFactory::class$ = NULL;
          jmethodID *CharFilterFactory::mids$ = NULL;
          bool CharFilterFactory::live$ = false;

          jclass CharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableCharFilters_03e99967] = env->getStaticMethodID(cls, "availableCharFilters", "()Ljava/util/Set;");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_forName_75151912] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadCharFilters_9110048d] = env->getStaticMethodID(cls, "reloadCharFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set CharFilterFactory::availableCharFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCharFilters_03e99967]));
          }

          ::java::io::Reader CharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          CharFilterFactory CharFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_75151912], a0.this$, a1.this$));
          }

          ::java::lang::Class CharFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void CharFilterFactory::reloadCharFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadCharFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type);
          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg);
          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_CharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, availableCharFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, create, METH_O),
            DECLARE_METHOD(t_CharFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, reloadCharFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharFilterFactory, t_CharFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, CharFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_CharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CharFilterFactory), module, "CharFilterFactory", 0);
          }

          void t_CharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "class_", make_descriptor(CharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CharFilterFactory::wrap_Object(CharFilterFactory(((t_CharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::availableCharFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::forName(a0, a1));
              return t_CharFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::CharFilterFactory::reloadCharFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadCharFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilter::class$ = NULL;
          jmethodID *UpperCaseFilter::mids$ = NULL;
          bool UpperCaseFilter::live$ = false;

          jclass UpperCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilter::UpperCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean UpperCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args);

          static PyMethodDef t_UpperCaseFilter__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilter, t_UpperCaseFilter, ::org::apache::lucene::analysis::TokenFilter, UpperCaseFilter, t_UpperCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_UpperCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilter), module, "UpperCaseFilter", 0);
          }

          void t_UpperCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "class_", make_descriptor(UpperCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilter::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilter::wrap_Object(UpperCaseFilter(((t_UpperCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            UpperCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = UpperCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$Builder::class$ = NULL;
        jmethodID *WAH8DocIdSet$Builder::mids$ = NULL;
        bool WAH8DocIdSet$Builder::live$ = false;

        jclass WAH8DocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_f8a06644] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_add_7ac30ded] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_7ac30ded] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WAH8DocIdSet$Builder::WAH8DocIdSet$Builder() : ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_f8a06644], a0.this$));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_7ac30ded], a0));
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_7ac30ded], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, build, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, setIndexInterval, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder, ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder, WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder_init_, 0, 0, t_WAH8DocIdSet$Builder__fields_, 0, 0);

        void t_WAH8DocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$Builder), module, "WAH8DocIdSet$Builder", 0);
        }

        void t_WAH8DocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$Builder::wrap_Object(WAH8DocIdSet$Builder(((t_WAH8DocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          WAH8DocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = WAH8DocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "build", args, 2);
        }

        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          jint a0;
          WAH8DocIdSet$Builder result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$Builder::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "setIndexInterval", args, 2);
        }

        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *ConfigurationKey::class$ = NULL;
              jmethodID *ConfigurationKey::mids$ = NULL;
              bool ConfigurationKey::live$ = false;

              jclass ConfigurationKey::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_newInstance_ac28c1ca] = env->getStaticMethodID(cls, "newInstance", "()Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ConfigurationKey ConfigurationKey::newInstance()
              {
                jclass cls = env->getClass(initializeClass);
                return ConfigurationKey(env->callStaticObjectMethod(cls, mids$[mid_newInstance_ac28c1ca]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args);
              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type);
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data);
              static PyGetSetDef t_ConfigurationKey__fields_[] = {
                DECLARE_GET_FIELD(t_ConfigurationKey, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ConfigurationKey__methods_[] = {
                DECLARE_METHOD(t_ConfigurationKey, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, of_, METH_VARARGS),
                DECLARE_METHOD(t_ConfigurationKey, newInstance, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ConfigurationKey, t_ConfigurationKey, ::java::lang::Object, ConfigurationKey, abstract_init, 0, 0, t_ConfigurationKey__fields_, 0, 0);
              PyObject *t_ConfigurationKey::wrap_Object(const ConfigurationKey& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ConfigurationKey::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ConfigurationKey::install(PyObject *module)
              {
                installType(&PY_TYPE(ConfigurationKey), module, "ConfigurationKey", 0);
              }

              void t_ConfigurationKey::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "class_", make_descriptor(ConfigurationKey::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "wrapfn_", make_descriptor(t_ConfigurationKey::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ConfigurationKey::initializeClass, 1)))
                  return NULL;
                return t_ConfigurationKey::wrap_Object(ConfigurationKey(((t_ConfigurationKey *) arg)->object.this$));
              }
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ConfigurationKey::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type)
              {
                ConfigurationKey result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::newInstance());
                return t_ConfigurationKey::wrap_Object(result);
              }
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimWeight::class$ = NULL;
          jmethodID *Similarity$SimWeight::mids$ = NULL;
          bool Similarity$SimWeight::live$ = false;

          jclass Similarity$SimWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimWeight::Similarity$SimWeight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void Similarity$SimWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self);
          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args);
          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data);
          static PyGetSetDef t_Similarity$SimWeight__fields_[] = {
            DECLARE_GET_FIELD(t_Similarity$SimWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Similarity$SimWeight__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, getValueForNormalization, METH_NOARGS),
            DECLARE_METHOD(t_Similarity$SimWeight, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimWeight, t_Similarity$SimWeight, ::java::lang::Object, Similarity$SimWeight, t_Similarity$SimWeight_init_, 0, 0, t_Similarity$SimWeight__fields_, 0, 0);

          void t_Similarity$SimWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimWeight), module, "Similarity$SimWeight", 0);
          }

          void t_Similarity$SimWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "class_", make_descriptor(Similarity$SimWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimWeight::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimWeight::wrap_Object(Similarity$SimWeight(((t_Similarity$SimWeight *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimWeight object((jobject) NULL);

            INT_CALL(object = Similarity$SimWeight());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimerThread::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimerThread::mids$ = NULL;
        bool TimeLimitingCollector$TimerThread::live$ = false;
        jint TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION = (jint) 0;
        ::java::lang::String *TimeLimitingCollector$TimerThread::THREAD_NAME = NULL;

        jclass TimeLimitingCollector$TimerThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimerThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_dfcea312] = env->getMethodID(cls, "<init>", "(JLorg/apache/lucene/util/Counter;)V");
            mids$[mid_getMilliseconds_54c6a17a] = env->getMethodID(cls, "getMilliseconds", "()J");
            mids$[mid_getResolution_54c6a17a] = env->getMethodID(cls, "getResolution", "()J");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_setResolution_0ee6df2f] = env->getMethodID(cls, "setResolution", "(J)V");
            mids$[mid_stopTimer_54c6a166] = env->getMethodID(cls, "stopTimer", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_RESOLUTION = env->getStaticIntField(cls, "DEFAULT_RESOLUTION");
            THREAD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "THREAD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(jlong a0, const ::org::apache::lucene::util::Counter & a1) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_dfcea312, a0, a1.this$)) {}

        jlong TimeLimitingCollector$TimerThread::getMilliseconds() const
        {
          return env->callLongMethod(this$, mids$[mid_getMilliseconds_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimerThread::getResolution() const
        {
          return env->callLongMethod(this$, mids$[mid_getResolution_54c6a17a]);
        }

        void TimeLimitingCollector$TimerThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void TimeLimitingCollector$TimerThread::setResolution(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setResolution_0ee6df2f], a0);
        }

        void TimeLimitingCollector$TimerThread::stopTimer() const
        {
          env->callVoidMethod(this$, mids$[mid_stopTimer_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data);
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimerThread__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimerThread, milliseconds),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector$TimerThread, resolution),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimerThread__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getMilliseconds, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getResolution, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, run, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, setResolution, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, stopTimer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread, ::java::lang::Thread, TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread_init_, 0, 0, t_TimeLimitingCollector$TimerThread__fields_, 0, 0);

        void t_TimeLimitingCollector$TimerThread::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimerThread), module, "TimeLimitingCollector$TimerThread", 0);
        }

        void t_TimeLimitingCollector$TimerThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimerThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimerThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TimeLimitingCollector$TimerThread::initializeClass);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "DEFAULT_RESOLUTION", make_descriptor(TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "THREAD_NAME", make_descriptor(j2p(*TimeLimitingCollector$TimerThread::THREAD_NAME)));
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimerThread::wrap_Object(TimeLimitingCollector$TimerThread(((t_TimeLimitingCollector$TimerThread *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jlong a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "Jk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector$TimerThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setResolution(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setResolution", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self)
        {
          OBJ_CALL(self->object.stopTimer());
          Py_RETURN_NONE;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setResolution(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "resolution", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedMutable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedMutable::class$ = NULL;
          jmethodID *PagedMutable::mids$ = NULL;
          bool PagedMutable::live$ = false;

          jclass PagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_79c554c1] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedMutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedMutable::PagedMutable(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args);
          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data);
          static PyGetSetDef t_PagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_PagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedMutable__methods_[] = {
            DECLARE_METHOD(t_PagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedMutable, t_PagedMutable, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedMutable, t_PagedMutable_init_, 0, 0, t_PagedMutable__fields_, 0, 0);
          PyObject *t_PagedMutable::wrap_Object(const PagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedMutable), module, "PagedMutable", 0);
          }

          void t_PagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "class_", make_descriptor(PagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "wrapfn_", make_descriptor(t_PagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedMutable::initializeClass, 1)))
              return NULL;
            return t_PagedMutable::wrap_Object(PagedMutable(((t_PagedMutable *) arg)->object.this$));
          }
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedMutable object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedMutable(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedMutable);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsFilterBuilder::class$ = NULL;
            jmethodID *TermsFilterBuilder::mids$ = NULL;
            bool TermsFilterBuilder::live$ = false;

            jclass TermsFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsFilterBuilder::TermsFilterBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsFilterBuilder, t_TermsFilterBuilder, ::java::lang::Object, TermsFilterBuilder, t_TermsFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsFilterBuilder), module, "TermsFilterBuilder", 0);
            }

            void t_TermsFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "class_", make_descriptor(TermsFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsFilterBuilder::wrap_Object(TermsFilterBuilder(((t_TermsFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MergeInfo::class$ = NULL;
        jmethodID *MergeInfo::mids$ = NULL;
        jfieldID *MergeInfo::fids$ = NULL;
        bool MergeInfo::live$ = false;

        jclass MergeInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MergeInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1629c044] = env->getMethodID(cls, "<init>", "(IJZI)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_isExternal] = env->getFieldID(cls, "isExternal", "Z");
            fids$[fid_mergeMaxNumSegments] = env->getFieldID(cls, "mergeMaxNumSegments", "I");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeInfo::MergeInfo(jint a0, jlong a1, jboolean a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1629c044, a0, a1, a2, a3)) {}

        jboolean MergeInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint MergeInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MergeInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MergeInfo::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        jboolean MergeInfo::_get_isExternal() const
        {
          return env->getBooleanField(this$, fids$[fid_isExternal]);
        }

        jint MergeInfo::_get_mergeMaxNumSegments() const
        {
          return env->getIntField(this$, fids$[fid_mergeMaxNumSegments]);
        }

        jint MergeInfo::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data);

        static PyGetSetDef t_MergeInfo__fields_[] = {
          DECLARE_GET_FIELD(t_MergeInfo, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergeInfo, isExternal),
          DECLARE_GET_FIELD(t_MergeInfo, mergeMaxNumSegments),
          DECLARE_GET_FIELD(t_MergeInfo, totalDocCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeInfo__methods_[] = {
          DECLARE_METHOD(t_MergeInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeInfo, t_MergeInfo, ::java::lang::Object, MergeInfo, t_MergeInfo_init_, 0, 0, t_MergeInfo__fields_, 0, 0);

        void t_MergeInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeInfo), module, "MergeInfo", 0);
        }

        void t_MergeInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "class_", make_descriptor(MergeInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "wrapfn_", make_descriptor(t_MergeInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeInfo::initializeClass, 1)))
            return NULL;
          return t_MergeInfo::wrap_Object(MergeInfo(((t_MergeInfo *) arg)->object.this$));
        }
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          jboolean a2;
          jint a3;
          MergeInfo object((jobject) NULL);

          if (!parseArgs(args, "IJZI", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MergeInfo(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isExternal());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeMaxNumSegments());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {

          ::java::lang::Class *ComplexPhraseQueryParser::class$ = NULL;
          jmethodID *ComplexPhraseQueryParser::mids$ = NULL;
          bool ComplexPhraseQueryParser::live$ = false;

          jclass ComplexPhraseQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setInOrder_bb0c767f] = env->getMethodID(cls, "setInOrder", "(Z)V");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ComplexPhraseQueryParser::ComplexPhraseQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query ComplexPhraseQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void ComplexPhraseQueryParser::setInOrder(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInOrder_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {
          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args);
          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg);
          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_ComplexPhraseQueryParser__fields_[] = {
            DECLARE_SET_FIELD(t_ComplexPhraseQueryParser, inOrder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ComplexPhraseQueryParser__methods_[] = {
            DECLARE_METHOD(t_ComplexPhraseQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, parse, METH_VARARGS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, setInOrder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ComplexPhraseQueryParser, t_ComplexPhraseQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ComplexPhraseQueryParser, t_ComplexPhraseQueryParser_init_, 0, 0, t_ComplexPhraseQueryParser__fields_, 0, 0);

          void t_ComplexPhraseQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ComplexPhraseQueryParser), module, "ComplexPhraseQueryParser", 0);
          }

          void t_ComplexPhraseQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "class_", make_descriptor(ComplexPhraseQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ComplexPhraseQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ComplexPhraseQueryParser::initializeClass, 1)))
              return NULL;
            return t_ComplexPhraseQueryParser::wrap_Object(ComplexPhraseQueryParser(((t_ComplexPhraseQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ComplexPhraseQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ComplexPhraseQueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = ComplexPhraseQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ComplexPhraseQueryParser), (PyObject *) self, "parse", args, 2);
          }

          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setInOrder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInOrder", arg);
            return NULL;
          }

          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setInOrder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "inOrder", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource$ScoreValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource$ScoreValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource$ScoreValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource$ScoreValueSource::TaxonomyFacetSumValueSource$ScoreValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String TaxonomyFacetSumValueSource$ScoreValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean TaxonomyFacetSumValueSource$ScoreValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::queries::function::FunctionValues TaxonomyFacetSumValueSource$ScoreValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint TaxonomyFacetSumValueSource$ScoreValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacetSumValueSource$ScoreValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, description, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource, ::org::apache::lucene::queries::function::ValueSource, TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), module, "TaxonomyFacetSumValueSource$ScoreValueSource", 0);
          }

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_Object(TaxonomyFacetSumValueSource$ScoreValueSource(((t_TaxonomyFacetSumValueSource$ScoreValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyFacetSumValueSource$ScoreValueSource object((jobject) NULL);

            INT_CALL(object = TaxonomyFacetSumValueSource$ScoreValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.description());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "description", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "getValues", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$DocValuesStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$DocValuesStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$DocValuesStatus::fids$ = NULL;
        bool CheckIndex$Status$DocValuesStatus::live$ = false;

        jclass CheckIndex$Status$DocValuesStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$DocValuesStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totalBinaryFields] = env->getFieldID(cls, "totalBinaryFields", "J");
            fids$[fid_totalNumericFields] = env->getFieldID(cls, "totalNumericFields", "J");
            fids$[fid_totalSortedFields] = env->getFieldID(cls, "totalSortedFields", "J");
            fids$[fid_totalSortedNumericFields] = env->getFieldID(cls, "totalSortedNumericFields", "J");
            fids$[fid_totalSortedSetFields] = env->getFieldID(cls, "totalSortedSetFields", "J");
            fids$[fid_totalValueFields] = env->getFieldID(cls, "totalValueFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$DocValuesStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$DocValuesStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalBinaryFields() const
        {
          return env->getLongField(this$, fids$[fid_totalBinaryFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalBinaryFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalBinaryFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedSetFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedSetFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedSetFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedSetFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalValueFields() const
        {
          return env->getLongField(this$, fids$[fid_totalValueFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalValueFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalValueFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$DocValuesStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalBinaryFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedSetFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalValueFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$DocValuesStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$DocValuesStatus, t_CheckIndex$Status$DocValuesStatus, ::java::lang::Object, CheckIndex$Status$DocValuesStatus, abstract_init, 0, 0, t_CheckIndex$Status$DocValuesStatus__fields_, 0, 0);

        void t_CheckIndex$Status$DocValuesStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$DocValuesStatus), module, "CheckIndex$Status$DocValuesStatus", 0);
        }

        void t_CheckIndex$Status$DocValuesStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$DocValuesStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$DocValuesStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$DocValuesStatus::wrap_Object(CheckIndex$Status$DocValuesStatus(((t_CheckIndex$Status$DocValuesStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalBinaryFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalBinaryFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalBinaryFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedSetFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedSetFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedSetFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalValueFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalValueFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValueFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilter::class$ = NULL;
          jmethodID *HungarianLightStemFilter::mids$ = NULL;
          bool HungarianLightStemFilter::live$ = false;

          jclass HungarianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilter::HungarianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HungarianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilter, t_HungarianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, HungarianLightStemFilter, t_HungarianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilter), module, "HungarianLightStemFilter", 0);
          }

          void t_HungarianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "class_", make_descriptor(HungarianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilter::wrap_Object(HungarianLightStemFilter(((t_HungarianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HungarianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HungarianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *BytesRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *BytesRefFSTEnum$InputOutput::fids$ = NULL;
          bool BytesRefFSTEnum$InputOutput::live$ = false;

          jclass BytesRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum$InputOutput::BytesRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef BytesRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void BytesRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object BytesRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void BytesRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_BytesRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput, ::java::lang::Object, BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput_init_, 0, 0, t_BytesRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_Object(const BytesRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum$InputOutput), module, "BytesRefFSTEnum$InputOutput", 0);
          }

          void t_BytesRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(BytesRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum$InputOutput::wrap_Object(BytesRefFSTEnum$InputOutput(((t_BytesRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            BytesRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = BytesRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsFormat::class$ = NULL;
        jmethodID *NormsFormat::mids$ = NULL;
        bool NormsFormat::live$ = false;

        jclass NormsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesConsumer NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg);
        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg);

        static PyMethodDef t_NormsFormat__methods_[] = {
          DECLARE_METHOD(t_NormsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, normsConsumer, METH_O),
          DECLARE_METHOD(t_NormsFormat, normsProducer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NormsFormat, t_NormsFormat, ::java::lang::Object, NormsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_NormsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsFormat), module, "NormsFormat", 0);
        }

        void t_NormsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "class_", make_descriptor(NormsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_NormsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsFormat::initializeClass, 1)))
            return NULL;
          return t_NormsFormat::wrap_Object(NormsFormat(((t_NormsFormat *) arg)->object.this$));
        }
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsConsumer", arg);
          return NULL;
        }

        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsProducer", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/text/DateFormat.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumberDateFormat::class$ = NULL;
              jmethodID *NumberDateFormat::mids$ = NULL;
              bool NumberDateFormat::live$ = false;

              jclass NumberDateFormat::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumberDateFormat::NumberDateFormat(const ::java::text::DateFormat & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumberDateFormat__methods_[] = {
                DECLARE_METHOD(t_NumberDateFormat, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumberDateFormat, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumberDateFormat, t_NumberDateFormat, ::java::text::NumberFormat, NumberDateFormat, t_NumberDateFormat_init_, 0, 0, 0, 0, 0);

              void t_NumberDateFormat::install(PyObject *module)
              {
                installType(&PY_TYPE(NumberDateFormat), module, "NumberDateFormat", 0);
              }

              void t_NumberDateFormat::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "class_", make_descriptor(NumberDateFormat::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberDateFormat::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumberDateFormat::initializeClass, 1)))
                  return NULL;
                return t_NumberDateFormat::wrap_Object(NumberDateFormat(((t_NumberDateFormat *) arg)->object.this$));
              }
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumberDateFormat::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds)
              {
                ::java::text::DateFormat a0((jobject) NULL);
                NumberDateFormat object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = NumberDateFormat(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiAnalyzer::class$ = NULL;
          jmethodID *HindiAnalyzer::mids$ = NULL;
          bool HindiAnalyzer::live$ = false;
          ::java::lang::String *HindiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HindiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HindiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data);
          static PyGetSetDef t_HindiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HindiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HindiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiAnalyzer, t_HindiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HindiAnalyzer, t_HindiAnalyzer_init_, 0, 0, t_HindiAnalyzer__fields_, 0, 0);

          void t_HindiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiAnalyzer), module, "HindiAnalyzer", 0);
          }

          void t_HindiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "class_", make_descriptor(HindiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HindiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HindiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HindiAnalyzer::wrap_Object(HindiAnalyzer(((t_HindiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hi::HindiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilter::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilter::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilter::live$ = false;

          jclass DictionaryCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_42fe450d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_42fe450d, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DictionaryCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilter), module, "DictionaryCompoundWordTokenFilter", 0);
          }

          void t_DictionaryCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilter::wrap_Object(DictionaryCompoundWordTokenFilter(((t_DictionaryCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TokenizedPhraseQueryNode::class$ = NULL;
              jmethodID *TokenizedPhraseQueryNode::mids$ = NULL;
              bool TokenizedPhraseQueryNode::live$ = false;

              jclass TokenizedPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenizedPhraseQueryNode::TokenizedPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode TokenizedPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void TokenizedPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String TokenizedPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self);
              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data);
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TokenizedPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TokenizedPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenizedPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode_init_, 0, 0, t_TokenizedPhraseQueryNode__fields_, 0, 0);

              void t_TokenizedPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenizedPhraseQueryNode), module, "TokenizedPhraseQueryNode", 0);
              }

              void t_TokenizedPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "class_", make_descriptor(TokenizedPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TokenizedPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TokenizedPhraseQueryNode::wrap_Object(TokenizedPhraseQueryNode(((t_TokenizedPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                TokenizedPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = TokenizedPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchAllDocsQueryNode::class$ = NULL;
              jmethodID *MatchAllDocsQueryNode::mids$ = NULL;
              bool MatchAllDocsQueryNode::live$ = false;

              jclass MatchAllDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_54ec1c5f] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNode::MatchAllDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              MatchAllDocsQueryNode MatchAllDocsQueryNode::cloneTree() const
              {
                return MatchAllDocsQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_54ec1c5f]));
              }

              ::java::lang::CharSequence MatchAllDocsQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MatchAllDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchAllDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNode, t_MatchAllDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MatchAllDocsQueryNode, t_MatchAllDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNode), module, "MatchAllDocsQueryNode", 0);
              }

              void t_MatchAllDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNode::wrap_Object(MatchAllDocsQueryNode(((t_MatchAllDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                MatchAllDocsQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_MatchAllDocsQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizerFactory::class$ = NULL;
          jmethodID *PathHierarchyTokenizerFactory::mids$ = NULL;
          bool PathHierarchyTokenizerFactory::live$ = false;

          jclass PathHierarchyTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizerFactory::PathHierarchyTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer PathHierarchyTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizerFactory), module, "PathHierarchyTokenizerFactory", 0);
          }

          void t_PathHierarchyTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "class_", make_descriptor(PathHierarchyTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizerFactory::wrap_Object(PathHierarchyTokenizerFactory(((t_PathHierarchyTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PathHierarchyTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PathHierarchyTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMOutputStream::class$ = NULL;
        jmethodID *RAMOutputStream::mids$ = NULL;
        bool RAMOutputStream::live$ = false;

        jclass RAMOutputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMOutputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca7ad9be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/RAMFile;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeTo_27875f57] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_writeTo_b8354c43] = env->getMethodID(cls, "writeTo", "([BI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMOutputStream::RAMOutputStream() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMOutputStream::RAMOutputStream(const ::org::apache::lucene::store::RAMFile & a0, jboolean a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_ca7ad9be, a0.this$, a1)) {}

        void RAMOutputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void RAMOutputStream::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong RAMOutputStream::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong RAMOutputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMOutputStream::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMOutputStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void RAMOutputStream::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void RAMOutputStream::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMOutputStream::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_27875f57], a0.this$);
        }

        void RAMOutputStream::writeTo(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_b8354c43], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data);
        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data);
        static PyGetSetDef t_RAMOutputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMOutputStream, checksum),
          DECLARE_GET_FIELD(t_RAMOutputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMOutputStream__methods_[] = {
          DECLARE_METHOD(t_RAMOutputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, flush, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, reset, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeTo, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMOutputStream, t_RAMOutputStream, ::org::apache::lucene::store::IndexOutput, RAMOutputStream, t_RAMOutputStream_init_, 0, 0, t_RAMOutputStream__fields_, 0, 0);

        void t_RAMOutputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMOutputStream), module, "RAMOutputStream", 0);
        }

        void t_RAMOutputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "class_", make_descriptor(RAMOutputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMOutputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMOutputStream::initializeClass, 1)))
            return NULL;
          return t_RAMOutputStream::wrap_Object(RAMOutputStream(((t_RAMOutputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMOutputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMOutputStream object((jobject) NULL);

              INT_CALL(object = RAMOutputStream());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::RAMFile a0((jobject) NULL);
              jboolean a1;
              RAMOutputStream object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMOutputStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(self->object.writeTo(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeTo(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeTo", args);
          return NULL;
        }

        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Decompressor::class$ = NULL;
          jmethodID *Decompressor::mids$ = NULL;
          bool Decompressor::live$ = false;

          jclass Decompressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Decompressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_7b8f1b1d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_decompress_3188de91] = env->getMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;IIILorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Decompressor Decompressor::clone() const
          {
            return Decompressor(env->callObjectMethod(this$, mids$[mid_clone_7b8f1b1d]));
          }

          void Decompressor::decompress(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::util::BytesRef & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decompress_3188de91], a0.this$, a1, a2, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_clone(t_Decompressor *self);
          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args);

          static PyMethodDef t_Decompressor__methods_[] = {
            DECLARE_METHOD(t_Decompressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, clone, METH_NOARGS),
            DECLARE_METHOD(t_Decompressor, decompress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Decompressor, t_Decompressor, ::java::lang::Object, Decompressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Decompressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Decompressor), module, "Decompressor", 0);
          }

          void t_Decompressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "class_", make_descriptor(Decompressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "wrapfn_", make_descriptor(t_Decompressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Decompressor::initializeClass, 1)))
              return NULL;
            return t_Decompressor::wrap_Object(Decompressor(((t_Decompressor *) arg)->object.this$));
          }
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Decompressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Decompressor_clone(t_Decompressor *self)
          {
            Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Decompressor::wrap_Object(result);
          }

          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::util::BytesRef a4((jobject) NULL);

            if (!parseArgs(args, "kIIIk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decompress(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Compressor::class$ = NULL;
          jmethodID *Compressor::mids$ = NULL;
          bool Compressor::live$ = false;

          jclass Compressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Compressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_13c9f1ba] = env->getMethodID(cls, "compress", "([BIILorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void Compressor::compress(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::store::DataOutput & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_compress_13c9f1ba], a0.this$, a1, a2, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args);

          static PyMethodDef t_Compressor__methods_[] = {
            DECLARE_METHOD(t_Compressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, compress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Compressor, t_Compressor, ::java::lang::Object, Compressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Compressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Compressor), module, "Compressor", 0);
          }

          void t_Compressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "class_", make_descriptor(Compressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "wrapfn_", make_descriptor(t_Compressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Compressor::initializeClass, 1)))
              return NULL;
            return t_Compressor::wrap_Object(Compressor(((t_Compressor *) arg)->object.this$));
          }
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Compressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);

            if (!parseArgs(args, "[BIIk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.compress(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "compress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseStemFilterFactory::mids$ = NULL;
          bool PortugueseStemFilterFactory::live$ = false;

          jclass PortugueseStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilterFactory::PortugueseStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilterFactory, t_PortugueseStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseStemFilterFactory, t_PortugueseStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilterFactory), module, "PortugueseStemFilterFactory", 0);
          }

          void t_PortugueseStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilterFactory::wrap_Object(PortugueseStemFilterFactory(((t_PortugueseStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *MultiPhraseQueryNode::class$ = NULL;
              jmethodID *MultiPhraseQueryNode::mids$ = NULL;
              bool MultiPhraseQueryNode::live$ = false;

              jclass MultiPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNode::MultiPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode MultiPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void MultiPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MultiPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self);
              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data);
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_MultiPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_MultiPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_MultiPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNode, t_MultiPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MultiPhraseQueryNode, t_MultiPhraseQueryNode_init_, 0, 0, t_MultiPhraseQueryNode__fields_, 0, 0);

              void t_MultiPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNode), module, "MultiPhraseQueryNode", 0);
              }

              void t_MultiPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "class_", make_descriptor(MultiPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNode::wrap_Object(MultiPhraseQueryNode(((t_MultiPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizer::class$ = NULL;
          jmethodID *WikipediaTokenizer::mids$ = NULL;
          bool WikipediaTokenizer::live$ = false;
          jint WikipediaTokenizer::ACRONYM_ID = (jint) 0;
          jint WikipediaTokenizer::ALPHANUM_ID = (jint) 0;
          jint WikipediaTokenizer::APOSTROPHE_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD = NULL;
          jint WikipediaTokenizer::BOLD_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD_ITALICS = NULL;
          jint WikipediaTokenizer::BOLD_ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::BOTH = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CATEGORY = NULL;
          jint WikipediaTokenizer::CATEGORY_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CITATION = NULL;
          jint WikipediaTokenizer::CITATION_ID = (jint) 0;
          jint WikipediaTokenizer::CJ_ID = (jint) 0;
          jint WikipediaTokenizer::COMPANY_ID = (jint) 0;
          jint WikipediaTokenizer::EMAIL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK_URL = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_URL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::HEADING = NULL;
          jint WikipediaTokenizer::HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::HOST_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::INTERNAL_LINK = NULL;
          jint WikipediaTokenizer::INTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::ITALICS = NULL;
          jint WikipediaTokenizer::ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::NUM_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::SUB_HEADING = NULL;
          jint WikipediaTokenizer::SUB_HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::TOKENS_ONLY = (jint) 0;
          JArray< ::java::lang::String > *WikipediaTokenizer::TOKEN_TYPES = NULL;
          jint WikipediaTokenizer::UNTOKENIZED_ONLY = (jint) 0;
          jint WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG = (jint) 0;

          jclass WikipediaTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_ef926df6] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_init$_60b8ae4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM_ID = env->getStaticIntField(cls, "ACRONYM_ID");
              ALPHANUM_ID = env->getStaticIntField(cls, "ALPHANUM_ID");
              APOSTROPHE_ID = env->getStaticIntField(cls, "APOSTROPHE_ID");
              BOLD = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD", "Ljava/lang/String;"));
              BOLD_ID = env->getStaticIntField(cls, "BOLD_ID");
              BOLD_ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD_ITALICS", "Ljava/lang/String;"));
              BOLD_ITALICS_ID = env->getStaticIntField(cls, "BOLD_ITALICS_ID");
              BOTH = env->getStaticIntField(cls, "BOTH");
              CATEGORY = new ::java::lang::String(env->getStaticObjectField(cls, "CATEGORY", "Ljava/lang/String;"));
              CATEGORY_ID = env->getStaticIntField(cls, "CATEGORY_ID");
              CITATION = new ::java::lang::String(env->getStaticObjectField(cls, "CITATION", "Ljava/lang/String;"));
              CITATION_ID = env->getStaticIntField(cls, "CITATION_ID");
              CJ_ID = env->getStaticIntField(cls, "CJ_ID");
              COMPANY_ID = env->getStaticIntField(cls, "COMPANY_ID");
              EMAIL_ID = env->getStaticIntField(cls, "EMAIL_ID");
              EXTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK", "Ljava/lang/String;"));
              EXTERNAL_LINK_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_ID");
              EXTERNAL_LINK_URL = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK_URL", "Ljava/lang/String;"));
              EXTERNAL_LINK_URL_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_URL_ID");
              HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "HEADING", "Ljava/lang/String;"));
              HEADING_ID = env->getStaticIntField(cls, "HEADING_ID");
              HOST_ID = env->getStaticIntField(cls, "HOST_ID");
              INTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "INTERNAL_LINK", "Ljava/lang/String;"));
              INTERNAL_LINK_ID = env->getStaticIntField(cls, "INTERNAL_LINK_ID");
              ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "ITALICS", "Ljava/lang/String;"));
              ITALICS_ID = env->getStaticIntField(cls, "ITALICS_ID");
              NUM_ID = env->getStaticIntField(cls, "NUM_ID");
              SUB_HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "SUB_HEADING", "Ljava/lang/String;"));
              SUB_HEADING_ID = env->getStaticIntField(cls, "SUB_HEADING_ID");
              TOKENS_ONLY = env->getStaticIntField(cls, "TOKENS_ONLY");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              UNTOKENIZED_ONLY = env->getStaticIntField(cls, "UNTOKENIZED_ONLY");
              UNTOKENIZED_TOKEN_FLAG = env->getStaticIntField(cls, "UNTOKENIZED_TOKEN_FLAG");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0, jint a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_ef926df6, a0.this$, a1, a2.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_60b8ae4e, a0.this$, a1.this$, a2, a3.this$)) {}

          void WikipediaTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void WikipediaTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean WikipediaTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WikipediaTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizer__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizer, t_WikipediaTokenizer, ::org::apache::lucene::analysis::Tokenizer, WikipediaTokenizer, t_WikipediaTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizer), module, "WikipediaTokenizer", 0);
          }

          void t_WikipediaTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "class_", make_descriptor(WikipediaTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WikipediaTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ACRONYM_ID", make_descriptor(WikipediaTokenizer::ACRONYM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ALPHANUM_ID", make_descriptor(WikipediaTokenizer::ALPHANUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "APOSTROPHE_ID", make_descriptor(WikipediaTokenizer::APOSTROPHE_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD", make_descriptor(j2p(*WikipediaTokenizer::BOLD)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ID", make_descriptor(WikipediaTokenizer::BOLD_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS", make_descriptor(j2p(*WikipediaTokenizer::BOLD_ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS_ID", make_descriptor(WikipediaTokenizer::BOLD_ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOTH", make_descriptor(WikipediaTokenizer::BOTH));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY", make_descriptor(j2p(*WikipediaTokenizer::CATEGORY)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY_ID", make_descriptor(WikipediaTokenizer::CATEGORY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION", make_descriptor(j2p(*WikipediaTokenizer::CITATION)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION_ID", make_descriptor(WikipediaTokenizer::CITATION_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CJ_ID", make_descriptor(WikipediaTokenizer::CJ_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "COMPANY_ID", make_descriptor(WikipediaTokenizer::COMPANY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EMAIL_ID", make_descriptor(WikipediaTokenizer::EMAIL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK_URL)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_URL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING", make_descriptor(j2p(*WikipediaTokenizer::HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING_ID", make_descriptor(WikipediaTokenizer::HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HOST_ID", make_descriptor(WikipediaTokenizer::HOST_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::INTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::INTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS", make_descriptor(j2p(*WikipediaTokenizer::ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS_ID", make_descriptor(WikipediaTokenizer::ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "NUM_ID", make_descriptor(WikipediaTokenizer::NUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING", make_descriptor(j2p(*WikipediaTokenizer::SUB_HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING_ID", make_descriptor(WikipediaTokenizer::SUB_HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKENS_ONLY", make_descriptor(WikipediaTokenizer::TOKENS_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(WikipediaTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_ONLY", make_descriptor(WikipediaTokenizer::UNTOKENIZED_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_TOKEN_FLAG", make_descriptor(WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG));
          }

          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizer::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizer::wrap_Object(WikipediaTokenizer(((t_WikipediaTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = WikipediaTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkIK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *ByteRunAutomaton::class$ = NULL;
          jmethodID *ByteRunAutomaton::mids$ = NULL;
          bool ByteRunAutomaton::live$ = false;

          jclass ByteRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/ByteRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_465e1031] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Z)V");
              mids$[mid_run_86f44353] = env->getMethodID(cls, "run", "([BII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jboolean a1) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_465e1031, a0.this$, a1)) {}

          jboolean ByteRunAutomaton::run(const JArray< jbyte > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_86f44353], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args);

          static PyMethodDef t_ByteRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_ByteRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteRunAutomaton, t_ByteRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, ByteRunAutomaton, t_ByteRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_ByteRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteRunAutomaton), module, "ByteRunAutomaton", 0);
          }

          void t_ByteRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "class_", make_descriptor(ByteRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_ByteRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_ByteRunAutomaton::wrap_Object(ByteRunAutomaton(((t_ByteRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = ByteRunAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jboolean a1;
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ByteRunAutomaton(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jboolean result;

            if (!parseArgs(args, "[BII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.run(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$LongParser::class$ = NULL;
        jmethodID *FieldCache$LongParser::mids$ = NULL;
        bool FieldCache$LongParser::live$ = false;

        jclass FieldCache$LongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$LongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong FieldCache$LongParser::parseLong(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_parseLong_7bc03dd8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$LongParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$LongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, parseLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$LongParser, t_FieldCache$LongParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$LongParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$LongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$LongParser), module, "FieldCache$LongParser", 0);
        }

        void t_FieldCache$LongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "class_", make_descriptor(FieldCache$LongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$LongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$LongParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$LongParser::wrap_Object(FieldCache$LongParser(((t_FieldCache$LongParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$LongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLEncoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLEncoder::class$ = NULL;
          jmethodID *SimpleHTMLEncoder::mids$ = NULL;
          bool SimpleHTMLEncoder::live$ = false;

          jclass SimpleHTMLEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_htmlEncode_97a5258f] = env->getStaticMethodID(cls, "htmlEncode", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLEncoder::SimpleHTMLEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String SimpleHTMLEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }

          ::java::lang::String SimpleHTMLEncoder::htmlEncode(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_htmlEncode_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SimpleHTMLEncoder__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, encodeText, METH_O),
            DECLARE_METHOD(t_SimpleHTMLEncoder, htmlEncode, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLEncoder, t_SimpleHTMLEncoder, ::java::lang::Object, SimpleHTMLEncoder, t_SimpleHTMLEncoder_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLEncoder), module, "SimpleHTMLEncoder", 0);
          }

          void t_SimpleHTMLEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "class_", make_descriptor(SimpleHTMLEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLEncoder::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLEncoder::wrap_Object(SimpleHTMLEncoder(((t_SimpleHTMLEncoder *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds)
          {
            SimpleHTMLEncoder object((jobject) NULL);

            INT_CALL(object = SimpleHTMLEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }

          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::SimpleHTMLEncoder::htmlEncode(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "htmlEncode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttribute::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttribute::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttribute::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttribute::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttribute__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, automata, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute, t_FuzzyTermsEnum$LevenshteinAutomataAttribute, ::org::apache::lucene::util::Attribute, FuzzyTermsEnum$LevenshteinAutomataAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute), module, "FuzzyTermsEnum$LevenshteinAutomataAttribute", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttribute(((t_FuzzyTermsEnum$LevenshteinAutomataAttribute *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermStats::class$ = NULL;
        jmethodID *TermStats::mids$ = NULL;
        jfieldID *TermStats::fids$ = NULL;
        bool TermStats::live$ = false;

        jclass TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStats::TermStats(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jint TermStats::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        jlong TermStats::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data);
        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data);

        static PyGetSetDef t_TermStats__fields_[] = {
          DECLARE_GET_FIELD(t_TermStats, docFreq),
          DECLARE_GET_FIELD(t_TermStats, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermStats__methods_[] = {
          DECLARE_METHOD(t_TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStats, t_TermStats, ::java::lang::Object, TermStats, t_TermStats_init_, 0, 0, t_TermStats__fields_, 0, 0);

        void t_TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStats), module, "TermStats", 0);
        }

        void t_TermStats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "class_", make_descriptor(TermStats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "wrapfn_", make_descriptor(t_TermStats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStats::initializeClass, 1)))
            return NULL;
          return t_TermStats::wrap_Object(TermStats(((t_TermStats *) arg)->object.this$));
        }
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          TermStats object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = TermStats(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryScorer::class$ = NULL;
          jmethodID *QueryScorer::mids$ = NULL;
          bool QueryScorer::live$ = false;

          jclass QueryScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_848b72aa] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_19eb1b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_init$_b85926ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_getWeightedSpanTerm_0ac17355] = env->getMethodID(cls, "getWeightedSpanTerm", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_isExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "isExpandMultiTermQuery", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_newTermExtractor_109a36a0] = env->getMethodID(cls, "newTermExtractor", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTermExtractor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryScorer::QueryScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_848b72aa, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_19eb1b37, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b85926ce, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jfloat QueryScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::search::highlight::WeightedSpanTerm QueryScorer::getWeightedSpanTerm(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::highlight::WeightedSpanTerm(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerm_0ac17355], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream QueryScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          jboolean QueryScorer::isExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExpandMultiTermQuery_54c6a16a]);
          }

          void QueryScorer::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void QueryScorer::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void QueryScorer::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }

          void QueryScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self);
          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data);
          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryScorer__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryScorer, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_QueryScorer, fragmentScore),
            DECLARE_SET_FIELD(t_QueryScorer, maxDocCharsToAnalyze),
            DECLARE_GET_FIELD(t_QueryScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryScorer, tokenScore),
            DECLARE_SET_FIELD(t_QueryScorer, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryScorer__methods_[] = {
            DECLARE_METHOD(t_QueryScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getWeightedSpanTerm, METH_O),
            DECLARE_METHOD(t_QueryScorer, init, METH_O),
            DECLARE_METHOD(t_QueryScorer, isExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_QueryScorer, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_QueryScorer, setWrapIfNotCachingTokenFilter, METH_O),
            DECLARE_METHOD(t_QueryScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryScorer, t_QueryScorer, ::java::lang::Object, QueryScorer, t_QueryScorer_init_, 0, 0, t_QueryScorer__fields_, 0, 0);

          void t_QueryScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryScorer), module, "QueryScorer", 0);
          }

          void t_QueryScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "class_", make_descriptor(QueryScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryScorer::initializeClass, 1)))
              return NULL;
            return t_QueryScorer::wrap_Object(QueryScorer(((t_QueryScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedSpanTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kkss", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::WeightedSpanTerm result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTerm(a0));
              return ::org::apache::lucene::search::highlight::t_WeightedSpanTerm::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerm", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CompactLabelToOrdinal::class$ = NULL;
            jmethodID *CompactLabelToOrdinal::mids$ = NULL;
            bool CompactLabelToOrdinal::live$ = false;
            jfloat CompactLabelToOrdinal::DefaultLoadFactor = (jfloat) 0;

            jclass CompactLabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_sizeOfMap_54c6a179] = env->getMethodID(cls, "sizeOfMap", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DefaultLoadFactor = env->getStaticFloatField(cls, "DefaultLoadFactor");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompactLabelToOrdinal::CompactLabelToOrdinal(jint a0, jfloat a1, jint a2) : ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void CompactLabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint CompactLabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            jint CompactLabelToOrdinal::sizeOfMap() const
            {
              return env->callIntMethod(this$, mids$[mid_sizeOfMap_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self);

            static PyMethodDef t_CompactLabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_CompactLabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, sizeOfMap, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CompactLabelToOrdinal, t_CompactLabelToOrdinal, ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal, CompactLabelToOrdinal, t_CompactLabelToOrdinal_init_, 0, 0, 0, 0, 0);

            void t_CompactLabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(CompactLabelToOrdinal), module, "CompactLabelToOrdinal", 0);
            }

            void t_CompactLabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "class_", make_descriptor(CompactLabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_CompactLabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(CompactLabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "DefaultLoadFactor", make_descriptor(CompactLabelToOrdinal::DefaultLoadFactor));
            }

            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompactLabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_CompactLabelToOrdinal::wrap_Object(CompactLabelToOrdinal(((t_CompactLabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompactLabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              CompactLabelToOrdinal object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = CompactLabelToOrdinal(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "addLabel", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.sizeOfMap());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *ModifierQueryNodeBuilder::class$ = NULL;
              jmethodID *ModifierQueryNodeBuilder::mids$ = NULL;
              bool ModifierQueryNodeBuilder::live$ = false;

              jclass ModifierQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNodeBuilder::ModifierQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query ModifierQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_ModifierQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder, ::java::lang::Object, ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_ModifierQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNodeBuilder), module, "ModifierQueryNodeBuilder", 0);
              }

              void t_ModifierQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "class_", make_descriptor(ModifierQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNodeBuilder::wrap_Object(ModifierQueryNodeBuilder(((t_ModifierQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                ModifierQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = ModifierQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool::class$ = NULL;
        jmethodID *IntBlockPool::mids$ = NULL;
        jfieldID *IntBlockPool::fids$ = NULL;
        bool IntBlockPool::live$ = false;
        jint IntBlockPool::INT_BLOCK_MASK = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SHIFT = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SIZE = (jint) 0;

        jclass IntBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_112445b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool$Allocator;)V");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[I");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[I");
            fids$[fid_intOffset] = env->getFieldID(cls, "intOffset", "I");
            fids$[fid_intUpto] = env->getFieldID(cls, "intUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INT_BLOCK_MASK = env->getStaticIntField(cls, "INT_BLOCK_MASK");
            INT_BLOCK_SHIFT = env->getStaticIntField(cls, "INT_BLOCK_SHIFT");
            INT_BLOCK_SIZE = env->getStaticIntField(cls, "INT_BLOCK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool::IntBlockPool() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntBlockPool::IntBlockPool(const ::org::apache::lucene::util::IntBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_112445b3, a0.this$)) {}

        void IntBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void IntBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void IntBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        JArray< jint > IntBlockPool::_get_buffer() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void IntBlockPool::_set_buffer(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jint > > IntBlockPool::_get_buffers() const
        {
          return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void IntBlockPool::_set_buffers(const JArray< JArray< jint > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint IntBlockPool::_get_intOffset() const
        {
          return env->getIntField(this$, fids$[fid_intOffset]);
        }

        void IntBlockPool::_set_intOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intOffset], a0);
        }

        jint IntBlockPool::_get_intUpto() const
        {
          return env->getIntField(this$, fids$[fid_intUpto]);
        }

        void IntBlockPool::_set_intUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self);
        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args);
        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_IntBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intOffset),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool, t_IntBlockPool, ::java::lang::Object, IntBlockPool, t_IntBlockPool_init_, 0, 0, t_IntBlockPool__fields_, 0, 0);

        void t_IntBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool), module, "IntBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceReader", make_descriptor(&PY_TYPE(IntBlockPool$SliceReader)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceWriter", make_descriptor(&PY_TYPE(IntBlockPool$SliceWriter)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(IntBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(IntBlockPool$Allocator)));
        }

        void t_IntBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "class_", make_descriptor(IntBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_MASK", make_descriptor(IntBlockPool::INT_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SHIFT", make_descriptor(IntBlockPool::INT_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SIZE", make_descriptor(IntBlockPool::INT_BLOCK_SIZE));
        }

        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool::wrap_Object(IntBlockPool(((t_IntBlockPool *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntBlockPool object((jobject) NULL);

              INT_CALL(object = IntBlockPool());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::IntBlockPool$Allocator a0((jobject) NULL);
              IntBlockPool object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool$Allocator::initializeClass, &a0))
              {
                INT_CALL(object = IntBlockPool(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          if (!parseArg(arg, "[[I", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intOffset", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermStatistics::class$ = NULL;
        jmethodID *TermStatistics::mids$ = NULL;
        bool TermStatistics::live$ = false;

        jclass TermStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b78af156] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;JJ)V");
            mids$[mid_docFreq_54c6a17a] = env->getMethodID(cls, "docFreq", "()J");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStatistics::TermStatistics(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b78af156, a0.this$, a1, a2)) {}

        jlong TermStatistics::docFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_docFreq_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef TermStatistics::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong TermStatistics::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self);
        static PyObject *t_TermStatistics_term(t_TermStatistics *self);
        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self);

        static PyMethodDef t_TermStatistics__methods_[] = {
          DECLARE_METHOD(t_TermStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, term, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStatistics, t_TermStatistics, ::java::lang::Object, TermStatistics, t_TermStatistics_init_, 0, 0, 0, 0, 0);

        void t_TermStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStatistics), module, "TermStatistics", 0);
        }

        void t_TermStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "class_", make_descriptor(TermStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "wrapfn_", make_descriptor(t_TermStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStatistics::initializeClass, 1)))
            return NULL;
          return t_TermStatistics::wrap_Object(TermStatistics(((t_TermStatistics *) arg)->object.this$));
        }
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jlong a2;
          TermStatistics object((jobject) NULL);

          if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TermStatistics(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermStatistics_term(t_TermStatistics *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiTermRewriteMethodProcessor::class$ = NULL;
              jmethodID *MultiTermRewriteMethodProcessor::mids$ = NULL;
              bool MultiTermRewriteMethodProcessor::live$ = false;
              ::java::lang::String *MultiTermRewriteMethodProcessor::TAG_ID = NULL;

              jclass MultiTermRewriteMethodProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  TAG_ID = new ::java::lang::String(env->getStaticObjectField(cls, "TAG_ID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiTermRewriteMethodProcessor::MultiTermRewriteMethodProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiTermRewriteMethodProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiTermRewriteMethodProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiTermRewriteMethodProcessor), module, "MultiTermRewriteMethodProcessor", 0);
              }

              void t_MultiTermRewriteMethodProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "class_", make_descriptor(MultiTermRewriteMethodProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiTermRewriteMethodProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(MultiTermRewriteMethodProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "TAG_ID", make_descriptor(j2p(*MultiTermRewriteMethodProcessor::TAG_ID)));
              }

              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiTermRewriteMethodProcessor::wrap_Object(MultiTermRewriteMethodProcessor(((t_MultiTermRewriteMethodProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiTermRewriteMethodProcessor object((jobject) NULL);

                INT_CALL(object = MultiTermRewriteMethodProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49DocValuesFormat::class$ = NULL;
          jmethodID *Lucene49DocValuesFormat::mids$ = NULL;
          bool Lucene49DocValuesFormat::live$ = false;

          jclass Lucene49DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49DocValuesFormat::Lucene49DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49DocValuesFormat, t_Lucene49DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene49DocValuesFormat, t_Lucene49DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49DocValuesFormat), module, "Lucene49DocValuesFormat", 0);
          }

          void t_Lucene49DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene49DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49DocValuesFormat::wrap_Object(Lucene49DocValuesFormat(((t_Lucene49DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene49DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/PowFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *PowFloatFunction::class$ = NULL;
            jmethodID *PowFloatFunction::mids$ = NULL;
            bool PowFloatFunction::live$ = false;

            jclass PowFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/PowFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PowFloatFunction::PowFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PowFloatFunction__methods_[] = {
              DECLARE_METHOD(t_PowFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PowFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PowFloatFunction, t_PowFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, PowFloatFunction, t_PowFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_PowFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(PowFloatFunction), module, "PowFloatFunction", 0);
            }

            void t_PowFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "class_", make_descriptor(PowFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_PowFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PowFloatFunction::initializeClass, 1)))
                return NULL;
              return t_PowFloatFunction::wrap_Object(PowFloatFunction(((t_PowFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PowFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              PowFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PowFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexTermsEnum::class$ = NULL;
            jmethodID *RegexTermsEnum::mids$ = NULL;
            bool RegexTermsEnum::live$ = false;

            jclass RegexTermsEnum::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexTermsEnum");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d12accc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexTermsEnum::RegexTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a2) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_d12accc0, a0.this$, a1.this$, a2.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RegexTermsEnum__methods_[] = {
              DECLARE_METHOD(t_RegexTermsEnum, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexTermsEnum, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexTermsEnum, t_RegexTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, RegexTermsEnum, t_RegexTermsEnum_init_, 0, 0, 0, 0, 0);

            void t_RegexTermsEnum::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexTermsEnum), module, "RegexTermsEnum", 0);
            }

            void t_RegexTermsEnum::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "class_", make_descriptor(RegexTermsEnum::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_RegexTermsEnum::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexTermsEnum::initializeClass, 1)))
                return NULL;
              return t_RegexTermsEnum::wrap_Object(RegexTermsEnum(((t_RegexTermsEnum *) arg)->object.this$));
            }
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexTermsEnum::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              ::org::apache::lucene::index::Term a1((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a2((jobject) NULL);
              RegexTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexTermsEnum(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IndexableBinaryStringTools.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IndexableBinaryStringTools::class$ = NULL;
        jmethodID *IndexableBinaryStringTools::mids$ = NULL;
        bool IndexableBinaryStringTools::live$ = false;

        jclass IndexableBinaryStringTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IndexableBinaryStringTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_decode_af6092ff] = env->getStaticMethodID(cls, "decode", "([CII[BII)V");
            mids$[mid_encode_f24ebb03] = env->getStaticMethodID(cls, "encode", "([BII[CII)V");
            mids$[mid_getDecodedLength_6f0bb349] = env->getStaticMethodID(cls, "getDecodedLength", "([CII)I");
            mids$[mid_getEncodedLength_86f44340] = env->getStaticMethodID(cls, "getEncodedLength", "([BII)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexableBinaryStringTools::decode(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_decode_af6092ff], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        void IndexableBinaryStringTools::encode(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encode_f24ebb03], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint IndexableBinaryStringTools::getDecodedLength(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDecodedLength_6f0bb349], a0.this$, a1, a2);
        }

        jint IndexableBinaryStringTools::getEncodedLength(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getEncodedLength_86f44340], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_IndexableBinaryStringTools__methods_[] = {
          DECLARE_METHOD(t_IndexableBinaryStringTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, decode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, encode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getDecodedLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getEncodedLength, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableBinaryStringTools, t_IndexableBinaryStringTools, ::java::lang::Object, IndexableBinaryStringTools, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableBinaryStringTools::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableBinaryStringTools), module, "IndexableBinaryStringTools", 0);
        }

        void t_IndexableBinaryStringTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "class_", make_descriptor(IndexableBinaryStringTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "wrapfn_", make_descriptor(t_IndexableBinaryStringTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableBinaryStringTools::initializeClass, 1)))
            return NULL;
          return t_IndexableBinaryStringTools::wrap_Object(IndexableBinaryStringTools(((t_IndexableBinaryStringTools *) arg)->object.this$));
        }
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableBinaryStringTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[CII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::decode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "decode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[BII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::encode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getDecodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getDecodedLength", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getEncodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getEncodedLength", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemmer::class$ = NULL;
          jmethodID *PortugueseLightStemmer::mids$ = NULL;
          bool PortugueseLightStemmer::live$ = false;

          jclass PortugueseLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemmer::PortugueseLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemmer, t_PortugueseLightStemmer, ::java::lang::Object, PortugueseLightStemmer, t_PortugueseLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemmer), module, "PortugueseLightStemmer", 0);
          }

          void t_PortugueseLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "class_", make_descriptor(PortugueseLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemmer::wrap_Object(PortugueseLightStemmer(((t_PortugueseLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseLightStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *ByteVector::class$ = NULL;
            jmethodID *ByteVector::mids$ = NULL;
            bool ByteVector::live$ = false;

            jclass ByteVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/ByteVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");
                mids$[mid_getArray_dab10e7e] = env->getMethodID(cls, "getArray", "()[B");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_58d0da5d] = env->getMethodID(cls, "put", "(IB)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteVector::ByteVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

            ByteVector::ByteVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

            jint ByteVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint ByteVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jbyte ByteVector::get(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
            }

            JArray< jbyte > ByteVector::getArray() const
            {
              return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7e]));
            }

            jint ByteVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void ByteVector::put(jint a0, jbyte a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_58d0da5d], a0, a1);
            }

            void ByteVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_capacity(t_ByteVector *self);
            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_getArray(t_ByteVector *self);
            static PyObject *t_ByteVector_length(t_ByteVector *self);
            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args);
            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self);
            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data);
            static PyGetSetDef t_ByteVector__fields_[] = {
              DECLARE_GET_FIELD(t_ByteVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ByteVector__methods_[] = {
              DECLARE_METHOD(t_ByteVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, alloc, METH_O),
              DECLARE_METHOD(t_ByteVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, get, METH_O),
              DECLARE_METHOD(t_ByteVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, length, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, put, METH_VARARGS),
              DECLARE_METHOD(t_ByteVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteVector, t_ByteVector, ::java::lang::Object, ByteVector, t_ByteVector_init_, 0, 0, t_ByteVector__fields_, 0, 0);

            void t_ByteVector::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteVector), module, "ByteVector", 0);
            }

            void t_ByteVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "class_", make_descriptor(ByteVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "wrapfn_", make_descriptor(t_ByteVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteVector::initializeClass, 1)))
                return NULL;
              return t_ByteVector::wrap_Object(ByteVector(((t_ByteVector *) arg)->object.this$));
            }
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ByteVector object((jobject) NULL);

                  INT_CALL(object = ByteVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[B", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  jint a1;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[BI", &a0, &a1))
                  {
                    INT_CALL(object = ByteVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_capacity(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jbyte result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_getArray(t_ByteVector *self)
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_ByteVector_length(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args)
            {
              jint a0;
              jbyte a1;

              if (!parseArgs(args, "IB", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data)
            {
              JArray< jbyte > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues$DocTermsIndexException::class$ = NULL;
            jmethodID *DocTermsIndexDocValues$DocTermsIndexException::mids$ = NULL;
            bool DocTermsIndexDocValues$DocTermsIndexException::live$ = false;

            jclass DocTermsIndexDocValues$DocTermsIndexException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_df97be8c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/RuntimeException;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues$DocTermsIndexException::DocTermsIndexDocValues$DocTermsIndexException(const ::java::lang::String & a0, const ::java::lang::RuntimeException & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_df97be8c, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DocTermsIndexDocValues$DocTermsIndexException__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException, ::java::lang::RuntimeException, DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException_init_, 0, 0, 0, 0, 0);

            void t_DocTermsIndexDocValues$DocTermsIndexException::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), module, "DocTermsIndexDocValues$DocTermsIndexException", 0);
            }

            void t_DocTermsIndexDocValues$DocTermsIndexException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues$DocTermsIndexException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues$DocTermsIndexException::wrap_Object(DocTermsIndexDocValues$DocTermsIndexException(((t_DocTermsIndexDocValues$DocTermsIndexException *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::RuntimeException a1((jobject) NULL);
              DocTermsIndexDocValues$DocTermsIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::RuntimeException::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocTermsIndexDocValues$DocTermsIndexException(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DivFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DivFloatFunction::class$ = NULL;
            jmethodID *DivFloatFunction::mids$ = NULL;
            bool DivFloatFunction::live$ = false;

            jclass DivFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DivFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DivFloatFunction::DivFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DivFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DivFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DivFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DivFloatFunction, t_DivFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, DivFloatFunction, t_DivFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DivFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DivFloatFunction), module, "DivFloatFunction", 0);
            }

            void t_DivFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "class_", make_descriptor(DivFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DivFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DivFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DivFloatFunction::wrap_Object(DivFloatFunction(((t_DivFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DivFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DivFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DivFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *AlreadyClosedException::class$ = NULL;
        jmethodID *AlreadyClosedException::mids$ = NULL;
        bool AlreadyClosedException::live$ = false;

        jclass AlreadyClosedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/AlreadyClosedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_AlreadyClosedException__methods_[] = {
          DECLARE_METHOD(t_AlreadyClosedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AlreadyClosedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AlreadyClosedException, t_AlreadyClosedException, ::java::lang::IllegalStateException, AlreadyClosedException, t_AlreadyClosedException_init_, 0, 0, 0, 0, 0);

        void t_AlreadyClosedException::install(PyObject *module)
        {
          installType(&PY_TYPE(AlreadyClosedException), module, "AlreadyClosedException", 0);
        }

        void t_AlreadyClosedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "class_", make_descriptor(AlreadyClosedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "wrapfn_", make_descriptor(t_AlreadyClosedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AlreadyClosedException::initializeClass, 1)))
            return NULL;
          return t_AlreadyClosedException::wrap_Object(AlreadyClosedException(((t_AlreadyClosedException *) arg)->object.this$));
        }
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AlreadyClosedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          AlreadyClosedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = AlreadyClosedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/PackedLongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *PackedLongDocValuesField::class$ = NULL;
        jmethodID *PackedLongDocValuesField::mids$ = NULL;
        bool PackedLongDocValuesField::live$ = false;

        jclass PackedLongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/PackedLongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PackedLongDocValuesField::PackedLongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PackedLongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_PackedLongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PackedLongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PackedLongDocValuesField, t_PackedLongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, PackedLongDocValuesField, t_PackedLongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_PackedLongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(PackedLongDocValuesField), module, "PackedLongDocValuesField", 0);
        }

        void t_PackedLongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "class_", make_descriptor(PackedLongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_PackedLongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PackedLongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_PackedLongDocValuesField::wrap_Object(PackedLongDocValuesField(((t_PackedLongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PackedLongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          PackedLongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = PackedLongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/BasicOperations.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *BasicOperations::class$ = NULL;
          jmethodID *BasicOperations::mids$ = NULL;
          bool BasicOperations::live$ = false;

          jclass BasicOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/BasicOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addEpsilons_c3f38587] = env->getStaticMethodID(cls, "addEpsilons", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/util/Collection;)V");
              mids$[mid_complement_7aca8e1f] = env->getStaticMethodID(cls, "complement", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_fa852915] = env->getStaticMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_fc7cf394] = env->getStaticMethodID(cls, "determinize", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_intersection_fa852915] = env->getStaticMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isEmpty_fc7cf398] = env->getStaticMethodID(cls, "isEmpty", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isEmptyString_fc7cf398] = env->getStaticMethodID(cls, "isEmptyString", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isTotal_fc7cf398] = env->getStaticMethodID(cls, "isTotal", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_minus_fa852915] = env->getStaticMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_7aca8e1f] = env->getStaticMethodID(cls, "optional", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_7aca8e1f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_df52766d] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_6e1cfc6f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_run_b3a03722] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/String;)Z");
              mids$[mid_sameLanguage_7d21690e] = env->getStaticMethodID(cls, "sameLanguage", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_subsetOf_7d21690e] = env->getStaticMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_fa852915] = env->getStaticMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void BasicOperations::addEpsilons(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::util::Collection & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_addEpsilons_c3f38587], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::complement(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_complement_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::concatenate(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_fa852915], a0.this$, a1.this$));
          }

          void BasicOperations::determinize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_determinize_fc7cf394], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::intersection(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_intersection_fa852915], a0.this$, a1.this$));
          }

          jboolean BasicOperations::isEmpty(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmpty_fc7cf398], a0.this$);
          }

          jboolean BasicOperations::isEmptyString(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmptyString_fc7cf398], a0.this$);
          }

          jboolean BasicOperations::isTotal(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isTotal_fc7cf398], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::minus(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minus_fa852915], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::optional(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_optional_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_df52766d], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_6e1cfc6f], a0.this$, a1, a2));
          }

          jboolean BasicOperations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_b3a03722], a0.this$, a1.this$);
          }

          jboolean BasicOperations::sameLanguage(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sameLanguage_7d21690e], a0.this$, a1.this$);
          }

          jboolean BasicOperations::subsetOf(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_subsetOf_7d21690e], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::union$(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_fa852915], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_BasicOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_addEpsilons(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_complement(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_concatenate(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_determinize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_intersection(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_isEmpty(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_isEmptyString(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_isTotal(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_minus(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_optional(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_repeat(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_run(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_sameLanguage(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_subsetOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_union(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_BasicOperations__methods_[] = {
            DECLARE_METHOD(t_BasicOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, addEpsilons, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, complement, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, concatenate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, determinize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, intersection, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isEmpty, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isEmptyString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isTotal, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, minus, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, optional, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, repeat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, run, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, sameLanguage, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, subsetOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, union, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicOperations, t_BasicOperations, ::java::lang::Object, BasicOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_BasicOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicOperations), module, "BasicOperations", 0);
          }

          void t_BasicOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "class_", make_descriptor(BasicOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "wrapfn_", make_descriptor(t_BasicOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicOperations::initializeClass, 1)))
              return NULL;
            return t_BasicOperations::wrap_Object(BasicOperations(((t_BasicOperations *) arg)->object.this$));
          }
          static PyObject *t_BasicOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BasicOperations_addEpsilons(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::BasicOperations::addEpsilons(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "addEpsilons", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_complement(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::complement(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "complement", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_concatenate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::concatenate(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::concatenate(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "concatenate", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_determinize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::BasicOperations::determinize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "determinize", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_intersection(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::intersection(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intersection", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_isEmpty(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isEmpty(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmpty", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_isEmptyString(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isEmptyString(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmptyString", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_isTotal(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isTotal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isTotal", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_minus(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::minus(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minus", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_optional(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::optional(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "optional", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_repeat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "repeat", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_run(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::run(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "run", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_sameLanguage(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::sameLanguage(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sameLanguage", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_subsetOf(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::subsetOf(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "subsetOf", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_union(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::union$(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::union$(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "union", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups::class$ = NULL;
          jmethodID *TopGroups::mids$ = NULL;
          jfieldID *TopGroups::fids$ = NULL;
          bool TopGroups::live$ = false;

          jclass TopGroups::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056bd231] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/TopGroups;Ljava/lang/Integer;)V");
              mids$[mid_init$_5e81883d] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;[Lorg/apache/lucene/search/SortField;II[Lorg/apache/lucene/search/grouping/GroupDocs;F)V");
              mids$[mid_merge_abb30a8c] = env->getStaticMethodID(cls, "merge", "([Lorg/apache/lucene/search/grouping/TopGroups;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IILorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;)Lorg/apache/lucene/search/grouping/TopGroups;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSort] = env->getFieldID(cls, "groupSort", "[Lorg/apache/lucene/search/SortField;");
              fids$[fid_groups] = env->getFieldID(cls, "groups", "[Lorg/apache/lucene/search/grouping/GroupDocs;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_totalGroupCount] = env->getFieldID(cls, "totalGroupCount", "Ljava/lang/Integer;");
              fids$[fid_totalGroupedHitCount] = env->getFieldID(cls, "totalGroupedHitCount", "I");
              fids$[fid_totalHitCount] = env->getFieldID(cls, "totalHitCount", "I");
              fids$[fid_withinGroupSort] = env->getFieldID(cls, "withinGroupSort", "[Lorg/apache/lucene/search/SortField;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups::TopGroups(const TopGroups & a0, const ::java::lang::Integer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_056bd231, a0.this$, a1.this$)) {}

          TopGroups::TopGroups(const JArray< ::org::apache::lucene::search::SortField > & a0, const JArray< ::org::apache::lucene::search::SortField > & a1, jint a2, jint a3, const JArray< ::org::apache::lucene::search::grouping::GroupDocs > & a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5e81883d, a0.this$, a1.this$, a2, a3, a4.this$, a5)) {}

          TopGroups TopGroups::merge(const JArray< TopGroups > & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jint a4, const ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups(env->callStaticObjectMethod(cls, mids$[mid_merge_abb30a8c], a0.this$, a1.this$, a2.this$, a3, a4, a5.this$));
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_groupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_groupSort]));
          }

          JArray< ::org::apache::lucene::search::grouping::GroupDocs > TopGroups::_get_groups() const
          {
            return JArray< ::org::apache::lucene::search::grouping::GroupDocs >(env->getObjectField(this$, fids$[fid_groups]));
          }

          jfloat TopGroups::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          ::java::lang::Integer TopGroups::_get_totalGroupCount() const
          {
            return ::java::lang::Integer(env->getObjectField(this$, fids$[fid_totalGroupCount]));
          }

          jint TopGroups::_get_totalGroupedHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalGroupedHitCount]);
          }

          jint TopGroups::_get_totalHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalHitCount]);
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_withinGroupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_withinGroupSort]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args);
          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data);

          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data);
          static PyGetSetDef t_TopGroups__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups, groupSort),
            DECLARE_GET_FIELD(t_TopGroups, groups),
            DECLARE_GET_FIELD(t_TopGroups, maxScore),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupCount),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupedHitCount),
            DECLARE_GET_FIELD(t_TopGroups, totalHitCount),
            DECLARE_GET_FIELD(t_TopGroups, withinGroupSort),
            DECLARE_GET_FIELD(t_TopGroups, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups__methods_[] = {
            DECLARE_METHOD(t_TopGroups, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups, t_TopGroups, ::java::lang::Object, TopGroups, t_TopGroups_init_, 0, 0, t_TopGroups__fields_, 0, 0);
          PyObject *t_TopGroups::wrap_Object(const TopGroups& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups), module, "TopGroups", 0);
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "ScoreMergeMode", make_descriptor(&PY_TYPE(TopGroups$ScoreMergeMode)));
          }

          void t_TopGroups::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "class_", make_descriptor(TopGroups::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "wrapfn_", make_descriptor(t_TopGroups::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups::initializeClass, 1)))
              return NULL;
            return t_TopGroups::wrap_Object(TopGroups(((t_TopGroups *) arg)->object.this$));
          }
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                TopGroups a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Integer a1((jobject) NULL);
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "KO", TopGroups::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &p0, t_TopGroups::parameters_, &a1))
                {
                  INT_CALL(object = TopGroups(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::SortField > a1((jobject) NULL);
                jint a2;
                jint a3;
                JArray< ::org::apache::lucene::search::grouping::GroupDocs > a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "[k[kII[KF", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::grouping::GroupDocs::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::grouping::t_GroupDocs::parameters_, &a5))
                {
                  INT_CALL(object = TopGroups(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args)
          {
            JArray< TopGroups > a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jint a4;
            ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode a5((jobject) NULL);
            PyTypeObject **p5;
            TopGroups result((jobject) NULL);

            if (!parseArgs(args, "[KkkIIK", TopGroups::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::initializeClass, &a0, &p0, t_TopGroups::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::grouping::t_TopGroups$ScoreMergeMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups::merge(a0, a1, a2, a3, a4, a5));
              return t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::grouping::GroupDocs > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groups());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::grouping::t_GroupDocs::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data)
          {
            ::java::lang::Integer value((jobject) NULL);
            OBJ_CALL(value = self->object._get_totalGroupCount());
            return ::java::lang::t_Integer::wrap_Object(value);
          }

          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalGroupedHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_withinGroupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OrQueryNode::class$ = NULL;
              jmethodID *OrQueryNode::mids$ = NULL;
              bool OrQueryNode::live$ = false;

              jclass OrQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OrQueryNode::OrQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence OrQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OrQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args);
              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args);

              static PyMethodDef t_OrQueryNode__methods_[] = {
                DECLARE_METHOD(t_OrQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OrQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OrQueryNode, t_OrQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, OrQueryNode, t_OrQueryNode_init_, 0, 0, 0, 0, 0);

              void t_OrQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OrQueryNode), module, "OrQueryNode", 0);
              }

              void t_OrQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "class_", make_descriptor(OrQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OrQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OrQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OrQueryNode::wrap_Object(OrQueryNode(((t_OrQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OrQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                OrQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = OrQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader$CoreClosedListener::class$ = NULL;
        jmethodID *AtomicReader$CoreClosedListener::mids$ = NULL;
        bool AtomicReader$CoreClosedListener::live$ = false;

        jclass AtomicReader$CoreClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader$CoreClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_290588ee] = env->getMethodID(cls, "onClose", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader$CoreClosedListener::onClose(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg);

        static PyMethodDef t_AtomicReader$CoreClosedListener__methods_[] = {
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader$CoreClosedListener, t_AtomicReader$CoreClosedListener, ::java::lang::Object, AtomicReader$CoreClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_AtomicReader$CoreClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader$CoreClosedListener), module, "AtomicReader$CoreClosedListener", 0);
        }

        void t_AtomicReader$CoreClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "class_", make_descriptor(AtomicReader$CoreClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader$CoreClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 1)))
            return NULL;
          return t_AtomicReader$CoreClosedListener::wrap_Object(AtomicReader$CoreClosedListener(((t_AtomicReader$CoreClosedListener *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaTTF.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaTTF::class$ = NULL;
          jmethodID *LambdaTTF::mids$ = NULL;
          bool LambdaTTF::live$ = false;

          jclass LambdaTTF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaTTF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaTTF::LambdaTTF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaTTF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaTTF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaTTF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args);

          static PyMethodDef t_LambdaTTF__methods_[] = {
            DECLARE_METHOD(t_LambdaTTF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaTTF, t_LambdaTTF, ::org::apache::lucene::search::similarities::Lambda, LambdaTTF, t_LambdaTTF_init_, 0, 0, 0, 0, 0);

          void t_LambdaTTF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaTTF), module, "LambdaTTF", 0);
          }

          void t_LambdaTTF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "class_", make_descriptor(LambdaTTF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "wrapfn_", make_descriptor(t_LambdaTTF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaTTF::initializeClass, 1)))
              return NULL;
            return t_LambdaTTF::wrap_Object(LambdaTTF(((t_LambdaTTF *) arg)->object.this$));
          }
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaTTF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds)
          {
            LambdaTTF object((jobject) NULL);

            INT_CALL(object = LambdaTTF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermsConsumer::class$ = NULL;
        jmethodID *TermsConsumer::mids$ = NULL;
        bool TermsConsumer::live$ = false;

        jclass TermsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_finish_42663baa] = env->getMethodID(cls, "finish", "(JJI)V");
            mids$[mid_finishTerm_e998e763] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_90e0102b] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_startTerm_0765d42f] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/codecs/PostingsConsumer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermsConsumer::finish(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_42663baa], a0, a1, a2);
        }

        void TermsConsumer::finishTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_e998e763], a0.this$, a1.this$);
        }

        ::java::util::Comparator TermsConsumer::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        void TermsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::TermsEnum & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_90e0102b], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::codecs::PostingsConsumer TermsConsumer::startTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsConsumer(env->callObjectMethod(this$, mids$[mid_startTerm_0765d42f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self);
        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg);
        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data);
        static PyGetSetDef t_TermsConsumer__fields_[] = {
          DECLARE_GET_FIELD(t_TermsConsumer, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsConsumer__methods_[] = {
          DECLARE_METHOD(t_TermsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, finishTerm, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, startTerm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsConsumer, t_TermsConsumer, ::java::lang::Object, TermsConsumer, abstract_init, 0, 0, t_TermsConsumer__fields_, 0, 0);

        void t_TermsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsConsumer), module, "TermsConsumer", 0);
        }

        void t_TermsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "class_", make_descriptor(TermsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "wrapfn_", make_descriptor(t_TermsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsConsumer::initializeClass, 1)))
            return NULL;
          return t_TermsConsumer::wrap_Object(TermsConsumer(((t_TermsConsumer *) arg)->object.this$));
        }
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jint a2;

          if (!parseArgs(args, "JJI", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.finish(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finishTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::TermsEnum a2((jobject) NULL);

          if (!parseArgs(args, "kKk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.startTerm(a0));
            return ::org::apache::lucene::codecs::t_PostingsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", arg);
          return NULL;
        }

        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizerFactory::class$ = NULL;
          jmethodID *RussianLetterTokenizerFactory::mids$ = NULL;
          bool RussianLetterTokenizerFactory::live$ = false;

          jclass RussianLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ef75db74] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ru/RussianLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizerFactory::RussianLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ru::RussianLetterTokenizer RussianLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ru::RussianLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ef75db74], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_RussianLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizerFactory), module, "RussianLetterTokenizerFactory", 0);
          }

          void t_RussianLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "class_", make_descriptor(RussianLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizerFactory::wrap_Object(RussianLetterTokenizerFactory(((t_RussianLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ru::RussianLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ru::t_RussianLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeTermsEnum::class$ = NULL;
        jmethodID *TermRangeTermsEnum::mids$ = NULL;
        bool TermRangeTermsEnum::live$ = false;

        jclass TermRangeTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf65bdfc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeTermsEnum::TermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_cf65bdfc, a0.this$, a1.this$, a2.this$, a3, a4)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TermRangeTermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermRangeTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeTermsEnum, t_TermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, TermRangeTermsEnum, t_TermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_TermRangeTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeTermsEnum), module, "TermRangeTermsEnum", 0);
        }

        void t_TermRangeTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "class_", make_descriptor(TermRangeTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermRangeTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeTermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermRangeTermsEnum::wrap_Object(TermRangeTermsEnum(((t_TermRangeTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkZZ", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeTermsEnum(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsConsumer::class$ = NULL;
        jmethodID *FieldsConsumer::mids$ = NULL;
        bool FieldsConsumer::live$ = false;

        jclass FieldsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_f282c82a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/Fields;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermsConsumer FieldsConsumer::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
        }

        void FieldsConsumer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void FieldsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::Fields & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_f282c82a], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg);
        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self);
        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args);

        static PyMethodDef t_FieldsConsumer__methods_[] = {
          DECLARE_METHOD(t_FieldsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, addField, METH_O),
          DECLARE_METHOD(t_FieldsConsumer, close, METH_NOARGS),
          DECLARE_METHOD(t_FieldsConsumer, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsConsumer, t_FieldsConsumer, ::java::lang::Object, FieldsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsConsumer), module, "FieldsConsumer", 0);
        }

        void t_FieldsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "class_", make_descriptor(FieldsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "wrapfn_", make_descriptor(t_FieldsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsConsumer::initializeClass, 1)))
            return NULL;
          return t_FieldsConsumer::wrap_Object(FieldsConsumer(((t_FieldsConsumer *) arg)->object.this$));
        }
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addField(a0));
            return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addField", arg);
          return NULL;
        }

        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::Fields a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::Fields::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilter::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilter::mids$ = NULL;
          bool DelimitedPayloadTokenFilter::live$ = false;
          jchar DelimitedPayloadTokenFilter::DEFAULT_DELIMITER = (jchar) 0;

          jclass DelimitedPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_037fe9e9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;CLorg/apache/lucene/analysis/payloads/PayloadEncoder;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilter::DelimitedPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1, const ::org::apache::lucene::analysis::payloads::PayloadEncoder & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_037fe9e9, a0.this$, a1, a2.this$)) {}

          jboolean DelimitedPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilter), module, "DelimitedPayloadTokenFilter", 0);
          }

          void t_DelimitedPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "DEFAULT_DELIMITER", make_descriptor(DelimitedPayloadTokenFilter::DEFAULT_DELIMITER));
          }

          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilter::wrap_Object(DelimitedPayloadTokenFilter(((t_DelimitedPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jchar a1;
            ::org::apache::lucene::analysis::payloads::PayloadEncoder a2((jobject) NULL);
            DelimitedPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kCk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::payloads::PayloadEncoder::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DelimitedPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupPriorityQueue::class$ = NULL;
          jmethodID *Lookup$LookupPriorityQueue::mids$ = NULL;
          bool Lookup$LookupPriorityQueue::live$ = false;

          jclass Lookup$LookupPriorityQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getResults_95554974] = env->getMethodID(cls, "getResults", "()[Lorg/apache/lucene/search/suggest/Lookup$LookupResult;");
              mids$[mid_lessThan_4deadb0a] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupPriorityQueue::Lookup$LookupPriorityQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > Lookup$LookupPriorityQueue::getResults() const
          {
            return JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult >(env->callObjectMethod(this$, mids$[mid_getResults_95554974]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args);
          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self);
          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyGetSetDef t_Lookup$LookupPriorityQueue__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, results),
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupPriorityQueue__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, getResults, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue, ::org::apache::lucene::util::PriorityQueue, Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue_init_, 0, 0, t_Lookup$LookupPriorityQueue__fields_, 0, 0);
          PyObject *t_Lookup$LookupPriorityQueue::wrap_Object(const Lookup$LookupPriorityQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lookup$LookupPriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lookup$LookupPriorityQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupPriorityQueue), module, "Lookup$LookupPriorityQueue", 0);
          }

          void t_Lookup$LookupPriorityQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "class_", make_descriptor(Lookup$LookupPriorityQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupPriorityQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupPriorityQueue::wrap_Object(Lookup$LookupPriorityQueue(((t_Lookup$LookupPriorityQueue *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            Lookup$LookupPriorityQueue object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = Lookup$LookupPriorityQueue(a0));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > result((jobject) NULL);
            OBJ_CALL(result = self->object.getResults());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > value((jobject) NULL);
            OBJ_CALL(value = self->object.getResults());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Accountable::class$ = NULL;
        jmethodID *Accountable::mids$ = NULL;
        bool Accountable::live$ = false;

        jclass Accountable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Accountable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Accountable::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self);

        static PyMethodDef t_Accountable__methods_[] = {
          DECLARE_METHOD(t_Accountable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Accountable, t_Accountable, ::java::lang::Object, Accountable, abstract_init, 0, 0, 0, 0, 0);

        void t_Accountable::install(PyObject *module)
        {
          installType(&PY_TYPE(Accountable), module, "Accountable", 0);
        }

        void t_Accountable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "class_", make_descriptor(Accountable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "wrapfn_", make_descriptor(t_Accountable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Accountable::initializeClass, 1)))
            return NULL;
          return t_Accountable::wrap_Object(Accountable(((t_Accountable *) arg)->object.this$));
        }
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Accountable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/InputStreamDataInput.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *InputStreamDataInput::class$ = NULL;
        jmethodID *InputStreamDataInput::mids$ = NULL;
        bool InputStreamDataInput::live$ = false;

        jclass InputStreamDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/InputStreamDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InputStreamDataInput::InputStreamDataInput(const ::java::io::InputStream & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

        void InputStreamDataInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jbyte InputStreamDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void InputStreamDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self);
        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args);
        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args);

        static PyMethodDef t_InputStreamDataInput__methods_[] = {
          DECLARE_METHOD(t_InputStreamDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, close, METH_NOARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InputStreamDataInput, t_InputStreamDataInput, ::org::apache::lucene::store::DataInput, InputStreamDataInput, t_InputStreamDataInput_init_, 0, 0, 0, 0, 0);

        void t_InputStreamDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(InputStreamDataInput), module, "InputStreamDataInput", 0);
        }

        void t_InputStreamDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "class_", make_descriptor(InputStreamDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "wrapfn_", make_descriptor(t_InputStreamDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InputStreamDataInput::initializeClass, 1)))
            return NULL;
          return t_InputStreamDataInput::wrap_Object(InputStreamDataInput(((t_InputStreamDataInput *) arg)->object.this$));
        }
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InputStreamDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamDataInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamDataInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PerFieldSimilarityWrapper::class$ = NULL;
          jmethodID *PerFieldSimilarityWrapper::mids$ = NULL;
          bool PerFieldSimilarityWrapper::live$ = false;

          jclass PerFieldSimilarityWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/PerFieldSimilarityWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_get_951784a9] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldSimilarityWrapper::PerFieldSimilarityWrapper() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong PerFieldSimilarityWrapper::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight PerFieldSimilarityWrapper::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity PerFieldSimilarityWrapper::get(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_get_951784a9], a0.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer PerFieldSimilarityWrapper::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldSimilarityWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, get, METH_O),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper, ::org::apache::lucene::search::similarities::Similarity, PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldSimilarityWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldSimilarityWrapper), module, "PerFieldSimilarityWrapper", 0);
          }

          void t_PerFieldSimilarityWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "class_", make_descriptor(PerFieldSimilarityWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldSimilarityWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldSimilarityWrapper::wrap_Object(PerFieldSimilarityWrapper(((t_PerFieldSimilarityWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds)
          {
            PerFieldSimilarityWrapper object((jobject) NULL);

            INT_CALL(object = PerFieldSimilarityWrapper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
          }

          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsQueryBuilder::class$ = NULL;
            jmethodID *TermsQueryBuilder::mids$ = NULL;
            bool TermsQueryBuilder::live$ = false;

            jclass TermsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsQueryBuilder::TermsQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsQueryBuilder, t_TermsQueryBuilder, ::java::lang::Object, TermsQueryBuilder, t_TermsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsQueryBuilder), module, "TermsQueryBuilder", 0);
            }

            void t_TermsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "class_", make_descriptor(TermsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsQueryBuilder::wrap_Object(TermsQueryBuilder(((t_TermsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilterFactory::class$ = NULL;
          jmethodID *ScandinavianFoldingFilterFactory::mids$ = NULL;
          bool ScandinavianFoldingFilterFactory::live$ = false;

          jclass ScandinavianFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_507bf659] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilterFactory::ScandinavianFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter ScandinavianFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_507bf659], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilterFactory), module, "ScandinavianFoldingFilterFactory", 0);
          }

          void t_ScandinavianFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilterFactory::wrap_Object(ScandinavianFoldingFilterFactory(((t_ScandinavianFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilterFactory::class$ = NULL;
          jmethodID *RussianLightStemFilterFactory::mids$ = NULL;
          bool RussianLightStemFilterFactory::live$ = false;

          jclass RussianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilterFactory::RussianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream RussianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilterFactory, t_RussianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RussianLightStemFilterFactory, t_RussianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilterFactory), module, "RussianLightStemFilterFactory", 0);
          }

          void t_RussianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "class_", make_descriptor(RussianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilterFactory::wrap_Object(RussianLightStemFilterFactory(((t_RussianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RandomAccessInput::class$ = NULL;
        jmethodID *RandomAccessInput::mids$ = NULL;
        bool RandomAccessInput::live$ = false;

        jclass RandomAccessInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RandomAccessInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte RandomAccessInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        jint RandomAccessInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong RandomAccessInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort RandomAccessInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg);

        static PyMethodDef t_RandomAccessInput__methods_[] = {
          DECLARE_METHOD(t_RandomAccessInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, readByte, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readInt, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readLong, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessInput, t_RandomAccessInput, ::java::lang::Object, RandomAccessInput, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessInput::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessInput), module, "RandomAccessInput", 0);
        }

        void t_RandomAccessInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "class_", make_descriptor(RandomAccessInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessInput::initializeClass, 1)))
            return NULL;
          return t_RandomAccessInput::wrap_Object(RandomAccessInput(((t_RandomAccessInput *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jbyte result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readByte", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readInt", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLong", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jshort result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector::mids$ = NULL;
            bool FunctionDistinctValuesCollector::live$ = false;

            jclass FunctionDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_86fd8007] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionDistinctValuesCollector::FunctionDistinctValuesCollector(const ::java::util::Map & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::util::Collection & a3) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_86fd8007, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void FunctionDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List FunctionDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void FunctionDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data);
            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_FunctionDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector_init_, 0, 0, t_FunctionDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector::wrap_Object(const FunctionDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector), module, "FunctionDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount)));
            }

            void t_FunctionDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector::wrap_Object(FunctionDistinctValuesCollector(((t_FunctionDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              ::java::util::Collection a3((jobject) NULL);
              PyTypeObject **p3;
              FunctionDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkK", ::java::util::Map::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = FunctionDistinctValuesCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TieredMergePolicy::class$ = NULL;
        jmethodID *TieredMergePolicy::mids$ = NULL;
        bool TieredMergePolicy::live$ = false;
        jdouble TieredMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;

        jclass TieredMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TieredMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getFloorSegmentMB_54c6a174] = env->getMethodID(cls, "getFloorSegmentMB", "()D");
            mids$[mid_getForceMergeDeletesPctAllowed_54c6a174] = env->getMethodID(cls, "getForceMergeDeletesPctAllowed", "()D");
            mids$[mid_getMaxMergeAtOnce_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnce", "()I");
            mids$[mid_getMaxMergeAtOnceExplicit_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnceExplicit", "()I");
            mids$[mid_getMaxMergedSegmentMB_54c6a174] = env->getMethodID(cls, "getMaxMergedSegmentMB", "()D");
            mids$[mid_getReclaimDeletesWeight_54c6a174] = env->getMethodID(cls, "getReclaimDeletesWeight", "()D");
            mids$[mid_getSegmentsPerTier_54c6a174] = env->getMethodID(cls, "getSegmentsPerTier", "()D");
            mids$[mid_setFloorSegmentMB_e09c6d07] = env->getMethodID(cls, "setFloorSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07] = env->getMethodID(cls, "setForceMergeDeletesPctAllowed", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnce_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnce", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnceExplicit", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergedSegmentMB_e09c6d07] = env->getMethodID(cls, "setMaxMergedSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setReclaimDeletesWeight_e09c6d07] = env->getMethodID(cls, "setReclaimDeletesWeight", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setSegmentsPerTier_e09c6d07] = env->getMethodID(cls, "setSegmentsPerTier", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_score_178499e5] = env->getMethodID(cls, "score", "(Ljava/util/List;ZJLorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/TieredMergePolicy$MergeScore;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TieredMergePolicy::TieredMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TieredMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble TieredMergePolicy::getFloorSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getFloorSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getForceMergeDeletesPctAllowed() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getForceMergeDeletesPctAllowed_54c6a174]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnce() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnce_54c6a179]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnceExplicit() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnceExplicit_54c6a179]);
        }

        jdouble TieredMergePolicy::getMaxMergedSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergedSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getReclaimDeletesWeight() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getReclaimDeletesWeight_54c6a174]);
        }

        jdouble TieredMergePolicy::getSegmentsPerTier() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSegmentsPerTier_54c6a174]);
        }

        TieredMergePolicy TieredMergePolicy::setFloorSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setFloorSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setForceMergeDeletesPctAllowed(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnce(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnce_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnceExplicit(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergedSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergedSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setReclaimDeletesWeight(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setReclaimDeletesWeight_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setSegmentsPerTier(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setSegmentsPerTier_e09c6d07], a0));
        }

        ::java::lang::String TieredMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TieredMergePolicy_close(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_TieredMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, floorSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, forceMergeDeletesPctAllowed),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnce),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnceExplicit),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergedSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, reclaimDeletesWeight),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, segmentsPerTier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TieredMergePolicy__methods_[] = {
          DECLARE_METHOD(t_TieredMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getFloorSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getForceMergeDeletesPctAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnce, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnceExplicit, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergedSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getReclaimDeletesWeight, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getSegmentsPerTier, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, setFloorSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setForceMergeDeletesPctAllowed, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnce, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnceExplicit, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergedSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setReclaimDeletesWeight, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setSegmentsPerTier, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TieredMergePolicy, t_TieredMergePolicy, ::org::apache::lucene::index::MergePolicy, TieredMergePolicy, t_TieredMergePolicy_init_, 0, 0, t_TieredMergePolicy__fields_, 0, 0);

        void t_TieredMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(TieredMergePolicy), module, "TieredMergePolicy", 0);
        }

        void t_TieredMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "class_", make_descriptor(TieredMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_TieredMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TieredMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(TieredMergePolicy::DEFAULT_NO_CFS_RATIO));
        }

        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TieredMergePolicy::initializeClass, 1)))
            return NULL;
          return t_TieredMergePolicy::wrap_Object(TieredMergePolicy(((t_TieredMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TieredMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          TieredMergePolicy object((jobject) NULL);

          INT_CALL(object = TieredMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_TieredMergePolicy_close(t_TieredMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setFloorSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloorSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setForceMergeDeletesPctAllowed(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setForceMergeDeletesPctAllowed", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnce(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnce", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnceExplicit(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnceExplicit", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergedSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergedSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setReclaimDeletesWeight(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReclaimDeletesWeight", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setSegmentsPerTier(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSegmentsPerTier", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setFloorSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floorSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setForceMergeDeletesPctAllowed(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletesPctAllowed", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnce(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnce", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnceExplicit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnceExplicit", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergedSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergedSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setReclaimDeletesWeight(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reclaimDeletesWeight", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setSegmentsPerTier(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsPerTier", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternAnalyzer::class$ = NULL;
          jmethodID *PatternAnalyzer::mids$ = NULL;
          bool PatternAnalyzer::live$ = false;
          PatternAnalyzer *PatternAnalyzer::DEFAULT_ANALYZER = NULL;
          PatternAnalyzer *PatternAnalyzer::EXTENDED_ANALYZER = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::NON_WORD_PATTERN = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::WHITESPACE_PATTERN = NULL;

          jclass PatternAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed1ef6b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/regex/Pattern;ZLorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_createComponents_317b7f84] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "DEFAULT_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              EXTENDED_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "EXTENDED_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              NON_WORD_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "NON_WORD_PATTERN", "Ljava/util/regex/Pattern;"));
              WHITESPACE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "WHITESPACE_PATTERN", "Ljava/util/regex/Pattern;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternAnalyzer::PatternAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::util::regex::Pattern & a1, jboolean a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_ed1ef6b5, a0.this$, a1.this$, a2, a3.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_317b7f84], a0.this$, a1.this$, a2.this$));
          }

          jboolean PatternAnalyzer::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PatternAnalyzer::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args);

          static PyMethodDef t_PatternAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PatternAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, equals, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternAnalyzer, t_PatternAnalyzer, ::org::apache::lucene::analysis::Analyzer, PatternAnalyzer, t_PatternAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_PatternAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternAnalyzer), module, "PatternAnalyzer", 0);
          }

          void t_PatternAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "class_", make_descriptor(PatternAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PatternAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "DEFAULT_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::DEFAULT_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "EXTENDED_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::EXTENDED_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "NON_WORD_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::NON_WORD_PATTERN)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "WHITESPACE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::WHITESPACE_PATTERN)));
          }

          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PatternAnalyzer::wrap_Object(PatternAnalyzer(((t_PatternAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::regex::Pattern a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
            PyTypeObject **p3;
            PatternAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "KkZK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::regex::Pattern::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = PatternAnalyzer(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sks", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectL.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectL::class$ = NULL;
          jmethodID *AfterEffectL::mids$ = NULL;
          bool AfterEffectL::live$ = false;

          jclass AfterEffectL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectL::AfterEffectL() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectL::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args);

          static PyMethodDef t_AfterEffectL__methods_[] = {
            DECLARE_METHOD(t_AfterEffectL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectL, t_AfterEffectL, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectL, t_AfterEffectL_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectL::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectL), module, "AfterEffectL", 0);
          }

          void t_AfterEffectL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "class_", make_descriptor(AfterEffectL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectL::initializeClass, 1)))
              return NULL;
            return t_AfterEffectL::wrap_Object(AfterEffectL(((t_AfterEffectL *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectL object((jobject) NULL);

            INT_CALL(object = AfterEffectL());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilter::class$ = NULL;
          jmethodID *KeepWordFilter::mids$ = NULL;
          bool KeepWordFilter::live$ = false;

          jclass KeepWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c97b7f85] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c97b7f85, a0.this$, a1, a2.this$, a3.this$)) {}

          jboolean KeepWordFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self);

          static PyMethodDef t_KeepWordFilter__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilter, t_KeepWordFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, KeepWordFilter, t_KeepWordFilter_init_, 0, 0, 0, 0, 0);

          void t_KeepWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilter), module, "KeepWordFilter", 0);
          }

          void t_KeepWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "class_", make_descriptor(KeepWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilter::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilter::wrap_Object(KeepWordFilter(((t_KeepWordFilter *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermState::class$ = NULL;
        jmethodID *TermState::mids$ = NULL;
        bool TermState::live$ = false;

        jclass TermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_3e41fede] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermState TermState::clone() const
        {
          return TermState(env->callObjectMethod(this$, mids$[mid_clone_3e41fede]));
        }

        void TermState::copyFrom(const TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String TermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_clone(t_TermState *self);
        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg);
        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args);

        static PyMethodDef t_TermState__methods_[] = {
          DECLARE_METHOD(t_TermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermState, copyFrom, METH_O),
          DECLARE_METHOD(t_TermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermState, t_TermState, ::java::lang::Object, TermState, abstract_init, 0, 0, 0, 0, 0);

        void t_TermState::install(PyObject *module)
        {
          installType(&PY_TYPE(TermState), module, "TermState", 0);
        }

        void t_TermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "class_", make_descriptor(TermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "wrapfn_", make_descriptor(t_TermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermState::initializeClass, 1)))
            return NULL;
          return t_TermState::wrap_Object(TermState(((t_TermState *) arg)->object.this$));
        }
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermState_clone(t_TermState *self)
        {
          TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg)
        {
          TermState a0((jobject) NULL);

          if (!parseArg(arg, "k", TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
          return NULL;
        }

        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldBoostMapFCListener::class$ = NULL;
              jmethodID *FieldBoostMapFCListener::mids$ = NULL;
              bool FieldBoostMapFCListener::live$ = false;

              jclass FieldBoostMapFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldBoostMapFCListener::FieldBoostMapFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldBoostMapFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldBoostMapFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldBoostMapFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldBoostMapFCListener, t_FieldBoostMapFCListener, ::java::lang::Object, FieldBoostMapFCListener, t_FieldBoostMapFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldBoostMapFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldBoostMapFCListener), module, "FieldBoostMapFCListener", 0);
              }

              void t_FieldBoostMapFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "class_", make_descriptor(FieldBoostMapFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldBoostMapFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldBoostMapFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldBoostMapFCListener::wrap_Object(FieldBoostMapFCListener(((t_FieldBoostMapFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldBoostMapFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldBoostMapFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldBoostMapFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$IntRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$IntRangeBuilder::mids$ = NULL;
        bool NumericUtils$IntRangeBuilder::live$ = false;

        jclass NumericUtils$IntRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$IntRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_d3236aa4] = env->getMethodID(cls, "addRange", "(III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$IntRangeBuilder::NumericUtils$IntRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$IntRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$IntRangeBuilder::addRange(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_d3236aa4], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$IntRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder, ::java::lang::Object, NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$IntRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$IntRangeBuilder), module, "NumericUtils$IntRangeBuilder", 0);
        }

        void t_NumericUtils$IntRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$IntRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$IntRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$IntRangeBuilder::wrap_Object(NumericUtils$IntRangeBuilder(((t_NumericUtils$IntRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$IntRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$IntRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonLongParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonLongParser::class$ = NULL;
        jmethodID *PythonLongParser::mids$ = NULL;
        bool PythonLongParser::live$ = false;

        jclass PythonLongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonLongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLongParser::PythonLongParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLongParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLongParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLongParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self);
        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args);
        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data);
        static PyGetSetDef t_PythonLongParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLongParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLongParser__methods_[] = {
          DECLARE_METHOD(t_PythonLongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLongParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLongParser, t_PythonLongParser, ::java::lang::Object, PythonLongParser, t_PythonLongParser_init_, 0, 0, t_PythonLongParser__fields_, 0, 0);

        void t_PythonLongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLongParser), module, "PythonLongParser", 1);
        }

        void t_PythonLongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "class_", make_descriptor(PythonLongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "wrapfn_", make_descriptor(t_PythonLongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLongParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J", (void *) t_PythonLongParser_parseLong0 },
            { "pythonDecRef", "()V", (void *) t_PythonLongParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonLongParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLongParser::initializeClass, 1)))
            return NULL;
          return t_PythonLongParser::wrap_Object(PythonLongParser(((t_PythonLongParser *) arg)->object.this$));
        }
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds)
        {
          PythonLongParser object((jobject) NULL);

          INT_CALL(object = PythonLongParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseLong", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("parseLong", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchNoBits::class$ = NULL;
        jmethodID *Bits$MatchNoBits::mids$ = NULL;
        bool Bits$MatchNoBits::live$ = false;

        jclass Bits$MatchNoBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchNoBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchNoBits::Bits$MatchNoBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchNoBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchNoBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self);

        static PyMethodDef t_Bits$MatchNoBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchNoBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchNoBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchNoBits, t_Bits$MatchNoBits, ::java::lang::Object, Bits$MatchNoBits, t_Bits$MatchNoBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchNoBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchNoBits), module, "Bits$MatchNoBits", 0);
        }

        void t_Bits$MatchNoBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "class_", make_descriptor(Bits$MatchNoBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchNoBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchNoBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchNoBits::wrap_Object(Bits$MatchNoBits(((t_Bits$MatchNoBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchNoBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchNoBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchNoBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballPorterFilterFactory::class$ = NULL;
          jmethodID *SnowballPorterFilterFactory::mids$ = NULL;
          bool SnowballPorterFilterFactory::live$ = false;
          ::java::lang::String *SnowballPorterFilterFactory::PROTECTED_TOKENS = NULL;

          jclass SnowballPorterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballPorterFilterFactory::SnowballPorterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter SnowballPorterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void SnowballPorterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args);
          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SnowballPorterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SnowballPorterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballPorterFilterFactory, t_SnowballPorterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SnowballPorterFilterFactory, t_SnowballPorterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SnowballPorterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballPorterFilterFactory), module, "SnowballPorterFilterFactory", 0);
          }

          void t_SnowballPorterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "class_", make_descriptor(SnowballPorterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SnowballPorterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SnowballPorterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*SnowballPorterFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballPorterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SnowballPorterFilterFactory::wrap_Object(SnowballPorterFilterFactory(((t_SnowballPorterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballPorterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SnowballPorterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SnowballPorterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SnowballPorterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Tokenizer::class$ = NULL;
        jmethodID *Tokenizer::mids$ = NULL;
        bool Tokenizer::live$ = false;

        jclass Tokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Tokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Tokenizer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Tokenizer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void Tokenizer::setReader(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReader_cf2e3c10], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg);
        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Tokenizer__fields_[] = {
          DECLARE_SET_FIELD(t_Tokenizer, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Tokenizer__methods_[] = {
          DECLARE_METHOD(t_Tokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, close, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, reset, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, setReader, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Tokenizer, t_Tokenizer, ::org::apache::lucene::analysis::TokenStream, Tokenizer, abstract_init, 0, 0, t_Tokenizer__fields_, 0, 0);

        void t_Tokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(Tokenizer), module, "Tokenizer", 0);
        }

        void t_Tokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "class_", make_descriptor(Tokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "wrapfn_", make_descriptor(t_Tokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tokenizer::initializeClass, 1)))
            return NULL;
          return t_Tokenizer::wrap_Object(Tokenizer(((t_Tokenizer *) arg)->object.this$));
        }
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReader", arg);
          return NULL;
        }

        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data)
        {
          {
            ::java::io::Reader value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &value))
            {
              INT_CALL(self->object.setReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilter::class$ = NULL;
          jmethodID *PersianCharFilter::mids$ = NULL;
          bool PersianCharFilter::live$ = false;

          jclass PersianCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilter::PersianCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint PersianCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PersianCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args);

          static PyMethodDef t_PersianCharFilter__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilter, t_PersianCharFilter, ::org::apache::lucene::analysis::CharFilter, PersianCharFilter, t_PersianCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilter), module, "PersianCharFilter", 0);
          }

          void t_PersianCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "class_", make_descriptor(PersianCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilter::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilter::wrap_Object(PersianCharFilter(((t_PersianCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            PersianCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = PersianCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PersianCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory::mids$ = NULL;
        bool AttributeFactory::live$ = false;
        AttributeFactory *AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_getStaticImplementation_223064f9] = env->getStaticMethodID(cls, "getStaticImplementation", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeFactory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory::AttributeFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        AttributeFactory AttributeFactory::getStaticImplementation(const AttributeFactory & a0, const ::java::lang::Class & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return AttributeFactory(env->callStaticObjectMethod(cls, mids$[mid_getStaticImplementation_223064f9], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg);
        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_AttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, createAttributeInstance, METH_O),
          DECLARE_METHOD(t_AttributeFactory, getStaticImplementation, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory, t_AttributeFactory, ::java::lang::Object, AttributeFactory, t_AttributeFactory_init_, 0, 0, 0, 0, 0);

        void t_AttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory), module, "AttributeFactory", 0);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "StaticImplementationAttributeFactory", make_descriptor(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory)));
        }

        void t_AttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeFactory::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(t_AttributeFactory::wrap_Object(*AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory::wrap_Object(AttributeFactory(((t_AttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          AttributeFactory object((jobject) NULL);

          INT_CALL(object = AttributeFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createAttributeInstance", arg);
          return NULL;
        }

        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args)
        {
          AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory result((jobject) NULL);

          if (!parseArgs(args, "kK", AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::AttributeFactory::getStaticImplementation(a0, a1));
            return t_AttributeFactory::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getStaticImplementation", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballFilter.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballFilter::class$ = NULL;
          jmethodID *SnowballFilter::mids$ = NULL;
          bool SnowballFilter::live$ = false;

          jclass SnowballFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7671c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/tartarus/snowball/SnowballProgram;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::tartarus::snowball::SnowballProgram & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a7671c33, a0.this$, a1.this$)) {}

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          jboolean SnowballFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args);

          static PyMethodDef t_SnowballFilter__methods_[] = {
            DECLARE_METHOD(t_SnowballFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballFilter, t_SnowballFilter, ::org::apache::lucene::analysis::TokenFilter, SnowballFilter, t_SnowballFilter_init_, 0, 0, 0, 0, 0);

          void t_SnowballFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballFilter), module, "SnowballFilter", 0);
          }

          void t_SnowballFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "class_", make_descriptor(SnowballFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "wrapfn_", make_descriptor(t_SnowballFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballFilter::initializeClass, 1)))
              return NULL;
            return t_SnowballFilter::wrap_Object(SnowballFilter(((t_SnowballFilter *) arg)->object.this$));
          }
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::tartarus::snowball::SnowballProgram a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SnowballFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsFormat::class$ = NULL;
        jmethodID *PostingsFormat::mids$ = NULL;
        bool PostingsFormat::live$ = false;
        JArray< PostingsFormat > *PostingsFormat::EMPTY = NULL;

        jclass PostingsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availablePostingsFormats_03e99967] = env->getStaticMethodID(cls, "availablePostingsFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
            mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_forName_19d2f1c6] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadPostingsFormats_9110048d] = env->getStaticMethodID(cls, "reloadPostingsFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new JArray< PostingsFormat >(env->getStaticObjectField(cls, "EMPTY", "[Lorg/apache/lucene/codecs/PostingsFormat;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set PostingsFormat::availablePostingsFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availablePostingsFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::FieldsConsumer PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
        }

        ::org::apache::lucene::codecs::FieldsProducer PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
        }

        PostingsFormat PostingsFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return PostingsFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_19d2f1c6], a0.this$));
        }

        ::java::lang::String PostingsFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void PostingsFormat::reloadPostingsFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadPostingsFormats_9110048d], a0.this$);
        }

        ::java::lang::String PostingsFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type);
        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self);
        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args);
        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data);
        static PyGetSetDef t_PostingsFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, availablePostingsFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_PostingsFormat, reloadPostingsFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsFormat, t_PostingsFormat, ::java::lang::Object, PostingsFormat, abstract_init, 0, 0, t_PostingsFormat__fields_, 0, 0);

        void t_PostingsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsFormat), module, "PostingsFormat", 0);
        }

        void t_PostingsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "class_", make_descriptor(PostingsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PostingsFormat::initializeClass);
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "EMPTY", make_descriptor(JArray<jobject>(PostingsFormat::EMPTY->this$).wrap(t_PostingsFormat::wrap_jobject)));
        }

        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsFormat::wrap_Object(PostingsFormat(((t_PostingsFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::availablePostingsFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          PostingsFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::forName(a0));
            return t_PostingsFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::PostingsFormat::reloadPostingsFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadPostingsFormats", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PostingsFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilterFactory::class$ = NULL;
          jmethodID *TruncateTokenFilterFactory::mids$ = NULL;
          bool TruncateTokenFilterFactory::live$ = false;
          ::java::lang::String *TruncateTokenFilterFactory::PREFIX_LENGTH_KEY = NULL;

          jclass TruncateTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PREFIX_LENGTH_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PREFIX_LENGTH_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilterFactory::TruncateTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TruncateTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilterFactory, t_TruncateTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TruncateTokenFilterFactory, t_TruncateTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilterFactory), module, "TruncateTokenFilterFactory", 0);
          }

          void t_TruncateTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "class_", make_descriptor(TruncateTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TruncateTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "PREFIX_LENGTH_KEY", make_descriptor(j2p(*TruncateTokenFilterFactory::PREFIX_LENGTH_KEY)));
          }

          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilterFactory::wrap_Object(TruncateTokenFilterFactory(((t_TruncateTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TruncateTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TruncateTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizerFactory::class$ = NULL;
          jmethodID *PatternTokenizerFactory::mids$ = NULL;
          bool PatternTokenizerFactory::live$ = false;
          ::java::lang::String *PatternTokenizerFactory::GROUP = NULL;
          ::java::lang::String *PatternTokenizerFactory::PATTERN = NULL;

          jclass PatternTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_79576cd1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/pattern/PatternTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GROUP = new ::java::lang::String(env->getStaticObjectField(cls, "GROUP", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizerFactory::PatternTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternTokenizer PatternTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternTokenizer(env->callObjectMethod(this$, mids$[mid_create_79576cd1], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PatternTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizerFactory, t_PatternTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PatternTokenizerFactory, t_PatternTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizerFactory), module, "PatternTokenizerFactory", 0);
          }

          void t_PatternTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "class_", make_descriptor(PatternTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternTokenizerFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "GROUP", make_descriptor(j2p(*PatternTokenizerFactory::GROUP)));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "PATTERN", make_descriptor(j2p(*PatternTokenizerFactory::PATTERN)));
          }

          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizerFactory::wrap_Object(PatternTokenizerFactory(((t_PatternTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::pattern::t_PatternTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyQuery::class$ = NULL;
          jmethodID *SlowFuzzyQuery::mids$ = NULL;
          bool SlowFuzzyQuery::live$ = false;
          jint SlowFuzzyQuery::defaultMaxExpansions = (jint) 0;
          jfloat SlowFuzzyQuery::defaultMinSimilarity = (jfloat) 0;
          jint SlowFuzzyQuery::defaultPrefixLength = (jint) 0;

          jclass SlowFuzzyQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_init$_286d05ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;F)V");
              mids$[mid_init$_6199618c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_init$_b597dde2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FII)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
              mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
              defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
              defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_286d05ee, a0.this$, a1)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_6199618c, a0.this$, a1, a2)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2, jint a3) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_b597dde2, a0.this$, a1, a2, a3)) {}

          jboolean SlowFuzzyQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat SlowFuzzyQuery::getMinSimilarity() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
          }

          jint SlowFuzzyQuery::getPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
          }

          ::org::apache::lucene::index::Term SlowFuzzyQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SlowFuzzyQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SlowFuzzyQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data);
          static PyGetSetDef t_SlowFuzzyQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, minSimilarity),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, prefixLength),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowFuzzyQuery__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getMinSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyQuery, t_SlowFuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, SlowFuzzyQuery, t_SlowFuzzyQuery_init_, 0, 0, t_SlowFuzzyQuery__fields_, 0, 0);

          void t_SlowFuzzyQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyQuery), module, "SlowFuzzyQuery", 0);
          }

          void t_SlowFuzzyQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "class_", make_descriptor(SlowFuzzyQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SlowFuzzyQuery::initializeClass);
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(SlowFuzzyQuery::defaultMaxExpansions));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(SlowFuzzyQuery::defaultMinSimilarity));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(SlowFuzzyQuery::defaultPrefixLength));
          }

          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyQuery::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyQuery::wrap_Object(SlowFuzzyQuery(((t_SlowFuzzyQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                jint a3;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPrefixLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *StatePair::class$ = NULL;
          jmethodID *StatePair::mids$ = NULL;
          bool StatePair::live$ = false;

          jclass StatePair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/StatePair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e6e20846] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFirstState_0b46b0b2] = env->getMethodID(cls, "getFirstState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getSecondState_0b46b0b2] = env->getMethodID(cls, "getSecondState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StatePair::StatePair(const ::org::apache::lucene::util::automaton::State & a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e6e20846, a0.this$, a1.this$)) {}

          jboolean StatePair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::automaton::State StatePair::getFirstState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getFirstState_0b46b0b2]));
          }

          ::org::apache::lucene::util::automaton::State StatePair::getSecondState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getSecondState_0b46b0b2]));
          }

          jint StatePair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_getFirstState(t_StatePair *self);
          static PyObject *t_StatePair_getSecondState(t_StatePair *self);
          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_get__firstState(t_StatePair *self, void *data);
          static PyObject *t_StatePair_get__secondState(t_StatePair *self, void *data);
          static PyGetSetDef t_StatePair__fields_[] = {
            DECLARE_GET_FIELD(t_StatePair, firstState),
            DECLARE_GET_FIELD(t_StatePair, secondState),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StatePair__methods_[] = {
            DECLARE_METHOD(t_StatePair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, equals, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, getFirstState, METH_NOARGS),
            DECLARE_METHOD(t_StatePair, getSecondState, METH_NOARGS),
            DECLARE_METHOD(t_StatePair, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StatePair, t_StatePair, ::java::lang::Object, StatePair, t_StatePair_init_, 0, 0, t_StatePair__fields_, 0, 0);

          void t_StatePair::install(PyObject *module)
          {
            installType(&PY_TYPE(StatePair), module, "StatePair", 0);
          }

          void t_StatePair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "class_", make_descriptor(StatePair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "wrapfn_", make_descriptor(t_StatePair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StatePair::initializeClass, 1)))
              return NULL;
            return t_StatePair::wrap_Object(StatePair(((t_StatePair *) arg)->object.this$));
          }
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StatePair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
            StatePair object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::State::initializeClass, ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StatePair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_StatePair_getFirstState(t_StatePair *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getFirstState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_StatePair_getSecondState(t_StatePair *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getSecondState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_StatePair_get__firstState(t_StatePair *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getFirstState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static PyObject *t_StatePair_get__secondState(t_StatePair *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getSecondState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimeExceededException::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimeExceededException::mids$ = NULL;
        bool TimeLimitingCollector$TimeExceededException::live$ = false;

        jclass TimeLimitingCollector$TimeExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimeExceededException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLastDocCollected_54c6a179] = env->getMethodID(cls, "getLastDocCollected", "()I");
            mids$[mid_getTimeAllowed_54c6a17a] = env->getMethodID(cls, "getTimeAllowed", "()J");
            mids$[mid_getTimeElapsed_54c6a17a] = env->getMethodID(cls, "getTimeElapsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TimeLimitingCollector$TimeExceededException::getLastDocCollected() const
        {
          return env->callIntMethod(this$, mids$[mid_getLastDocCollected_54c6a179]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeAllowed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeAllowed_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeElapsed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeElapsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimeExceededException__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, lastDocCollected),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeAllowed),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeElapsed),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimeExceededException__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getLastDocCollected, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeElapsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimeExceededException, t_TimeLimitingCollector$TimeExceededException, ::java::lang::RuntimeException, TimeLimitingCollector$TimeExceededException, abstract_init, 0, 0, t_TimeLimitingCollector$TimeExceededException__fields_, 0, 0);

        void t_TimeLimitingCollector$TimeExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimeExceededException), module, "TimeLimitingCollector$TimeExceededException", 0);
        }

        void t_TimeLimitingCollector$TimeExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimeExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimeExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimeExceededException::wrap_Object(TimeLimitingCollector$TimeExceededException(((t_TimeLimitingCollector$TimeExceededException *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLastDocCollected());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLastDocCollected());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragListBuilder::class$ = NULL;
          jmethodID *SimpleFragListBuilder::mids$ = NULL;
          bool SimpleFragListBuilder::live$ = false;

          jclass SimpleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragListBuilder::SimpleFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragListBuilder::SimpleFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SimpleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragListBuilder, t_SimpleFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, SimpleFragListBuilder, t_SimpleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragListBuilder), module, "SimpleFragListBuilder", 0);
          }

          void t_SimpleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "class_", make_descriptor(SimpleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragListBuilder::wrap_Object(SimpleFragListBuilder(((t_SimpleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragListBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimpleFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyQuery::class$ = NULL;
        jmethodID *FuzzyQuery::mids$ = NULL;
        bool FuzzyQuery::live$ = false;
        jint FuzzyQuery::defaultMaxEdits = (jint) 0;
        jint FuzzyQuery::defaultMaxExpansions = (jint) 0;
        jfloat FuzzyQuery::defaultMinSimilarity = (jfloat) 0;
        jint FuzzyQuery::defaultPrefixLength = (jint) 0;
        jboolean FuzzyQuery::defaultTranspositions = (jboolean) 0;

        jclass FuzzyQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_10c66029] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
            mids$[mid_init$_12e80fe2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IIIZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_floatToEdits_77691edc] = env->getStaticMethodID(cls, "floatToEdits", "(FI)I");
            mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
            mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_getTranspositions_54c6a16a] = env->getMethodID(cls, "getTranspositions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            defaultMaxEdits = env->getStaticIntField(cls, "defaultMaxEdits");
            defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
            defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
            defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
            defaultTranspositions = env->getStaticBooleanField(cls, "defaultTranspositions");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_10c66029, a0.this$, a1, a2)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_12e80fe2, a0.this$, a1, a2, a3, a4)) {}

        jboolean FuzzyQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyQuery::floatToEdits(jfloat a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToEdits_77691edc], a0, a1);
        }

        jint FuzzyQuery::getMaxEdits() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
        }

        jint FuzzyQuery::getPrefixLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
        }

        ::org::apache::lucene::index::Term FuzzyQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jboolean FuzzyQuery::getTranspositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getTranspositions_54c6a16a]);
        }

        jint FuzzyQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FuzzyQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args);
        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data);
        static PyGetSetDef t_FuzzyQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyQuery, maxEdits),
          DECLARE_GET_FIELD(t_FuzzyQuery, prefixLength),
          DECLARE_GET_FIELD(t_FuzzyQuery, term),
          DECLARE_GET_FIELD(t_FuzzyQuery, transpositions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyQuery__methods_[] = {
          DECLARE_METHOD(t_FuzzyQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, floatToEdits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, getMaxEdits, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getPrefixLength, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTranspositions, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyQuery, t_FuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, FuzzyQuery, t_FuzzyQuery_init_, 0, 0, t_FuzzyQuery__fields_, 0, 0);

        void t_FuzzyQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyQuery), module, "FuzzyQuery", 0);
        }

        void t_FuzzyQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "class_", make_descriptor(FuzzyQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FuzzyQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxEdits", make_descriptor(FuzzyQuery::defaultMaxEdits));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(FuzzyQuery::defaultMaxExpansions));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(FuzzyQuery::defaultMinSimilarity));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(FuzzyQuery::defaultPrefixLength));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultTranspositions", make_descriptor(FuzzyQuery::defaultTranspositions));
        }

        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyQuery::initializeClass, 1)))
            return NULL;
          return t_FuzzyQuery::wrap_Object(FuzzyQuery(((t_FuzzyQuery *) arg)->object.this$));
        }
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FuzzyQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jboolean a4;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "FI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FuzzyQuery::floatToEdits(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToEdits", args);
          return NULL;
        }

        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxEdits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrefixLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getTranspositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxEdits());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrefixLength());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }

        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getTranspositions());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterScorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterScorer::class$ = NULL;
        jmethodID *FilterScorer::mids$ = NULL;
        bool FilterScorer::live$ = false;

        jclass FilterScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterScorer::FilterScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        jint FilterScorer::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterScorer::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterScorer::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterScorer::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::java::util::Collection FilterScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jint FilterScorer::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jfloat FilterScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_getChildren(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_get__children(t_FilterScorer *self, void *data);
        static PyGetSetDef t_FilterScorer__fields_[] = {
          DECLARE_GET_FIELD(t_FilterScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterScorer__methods_[] = {
          DECLARE_METHOD(t_FilterScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterScorer, t_FilterScorer, ::org::apache::lucene::search::Scorer, FilterScorer, t_FilterScorer_init_, 0, 0, t_FilterScorer__fields_, 0, 0);

        void t_FilterScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterScorer), module, "FilterScorer", 0);
        }

        void t_FilterScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "class_", make_descriptor(FilterScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "wrapfn_", make_descriptor(t_FilterScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterScorer::initializeClass, 1)))
            return NULL;
          return t_FilterScorer::wrap_Object(FilterScorer(((t_FilterScorer *) arg)->object.this$));
        }
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          FilterScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = FilterScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterScorer_getChildren(t_FilterScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_FilterScorer_get__children(t_FilterScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/BasqueStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *BasqueStemmer::class$ = NULL;
        jmethodID *BasqueStemmer::mids$ = NULL;
        bool BasqueStemmer::live$ = false;

        jclass BasqueStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/BasqueStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BasqueStemmer::BasqueStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean BasqueStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BasqueStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BasqueStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args);

        static PyMethodDef t_BasqueStemmer__methods_[] = {
          DECLARE_METHOD(t_BasqueStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BasqueStemmer, t_BasqueStemmer, ::org::tartarus::snowball::SnowballProgram, BasqueStemmer, t_BasqueStemmer_init_, 0, 0, 0, 0, 0);

        void t_BasqueStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(BasqueStemmer), module, "BasqueStemmer", 0);
        }

        void t_BasqueStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "class_", make_descriptor(BasqueStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "wrapfn_", make_descriptor(t_BasqueStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BasqueStemmer::initializeClass, 1)))
            return NULL;
          return t_BasqueStemmer::wrap_Object(BasqueStemmer(((t_BasqueStemmer *) arg)->object.this$));
        }
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BasqueStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds)
        {
          BasqueStemmer object((jobject) NULL);

          INT_CALL(object = BasqueStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergePolicy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergePolicy::class$ = NULL;
        jmethodID *NoMergePolicy::mids$ = NULL;
        bool NoMergePolicy::live$ = false;
        ::org::apache::lucene::index::MergePolicy *NoMergePolicy::INSTANCE = NULL;

        jclass NoMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergePolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergePolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String NoMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean NoMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_close(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args);

        static PyMethodDef t_NoMergePolicy__methods_[] = {
          DECLARE_METHOD(t_NoMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergePolicy, t_NoMergePolicy, ::org::apache::lucene::index::MergePolicy, NoMergePolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergePolicy), module, "NoMergePolicy", 0);
        }

        void t_NoMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "class_", make_descriptor(NoMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_NoMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergePolicy::wrap_Object(*NoMergePolicy::INSTANCE)));
        }

        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergePolicy::initializeClass, 1)))
            return NULL;
          return t_NoMergePolicy::wrap_Object(NoMergePolicy(((t_NoMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergePolicy_close(t_NoMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$equality_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$equality_return::class$ = NULL;
          jmethodID *JavascriptParser$equality_return::mids$ = NULL;
          bool JavascriptParser$equality_return::live$ = false;

          jclass JavascriptParser$equality_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$equality_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$equality_return::JavascriptParser$equality_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$equality_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$equality_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$equality_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$equality_return, t_JavascriptParser$equality_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$equality_return, t_JavascriptParser$equality_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$equality_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$equality_return), module, "JavascriptParser$equality_return", 0);
          }

          void t_JavascriptParser$equality_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "class_", make_descriptor(JavascriptParser$equality_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$equality_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$equality_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$equality_return::wrap_Object(JavascriptParser$equality_return(((t_JavascriptParser$equality_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$equality_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$equality_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$equality_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonShortParser.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonShortParser::class$ = NULL;
        jmethodID *PythonShortParser::mids$ = NULL;
        bool PythonShortParser::live$ = false;

        jclass PythonShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonShortParser::PythonShortParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonShortParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonShortParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonShortParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self);
        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args);
        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data);
        static PyGetSetDef t_PythonShortParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonShortParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonShortParser__methods_[] = {
          DECLARE_METHOD(t_PythonShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonShortParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonShortParser, t_PythonShortParser, ::java::lang::Object, PythonShortParser, t_PythonShortParser_init_, 0, 0, t_PythonShortParser__fields_, 0, 0);

        void t_PythonShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonShortParser), module, "PythonShortParser", 1);
        }

        void t_PythonShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "class_", make_descriptor(PythonShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "wrapfn_", make_descriptor(t_PythonShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonShortParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S", (void *) t_PythonShortParser_parseShort0 },
            { "pythonDecRef", "()V", (void *) t_PythonShortParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonShortParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonShortParser::initializeClass, 1)))
            return NULL;
          return t_PythonShortParser::wrap_Object(PythonShortParser(((t_PythonShortParser *) arg)->object.this$));
        }
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds)
        {
          PythonShortParser object((jobject) NULL);

          INT_CALL(object = PythonShortParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jshort value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseShort", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "S", &value))
          {
            throwTypeError("parseShort", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jshort) 0;
        }

        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataInput::class$ = NULL;
        jmethodID *ByteArrayDataInput::mids$ = NULL;
        bool ByteArrayDataInput::live$ = false;

        jclass ByteArrayDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_eof_54c6a16a] = env->getMethodID(cls, "eof", "()Z");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");
            mids$[mid_setPosition_39c7bd3c] = env->getMethodID(cls, "setPosition", "(I)V");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataInput::ByteArrayDataInput() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jboolean ByteArrayDataInput::eof() const
        {
          return env->callBooleanMethod(this$, mids$[mid_eof_54c6a16a]);
        }

        jint ByteArrayDataInput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint ByteArrayDataInput::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jbyte ByteArrayDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void ByteArrayDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        jint ByteArrayDataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort ByteArrayDataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jint ByteArrayDataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataInput::rewind() const
        {
          env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
        }

        void ByteArrayDataInput::setPosition(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_39c7bd3c], a0);
        }

        void ByteArrayDataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data);
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteArrayDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteArrayDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataInput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, eof, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, length, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, rewind, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, setPosition, METH_O),
          DECLARE_METHOD(t_ByteArrayDataInput, skipBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataInput, t_ByteArrayDataInput, ::org::apache::lucene::store::DataInput, ByteArrayDataInput, t_ByteArrayDataInput_init_, 0, 0, t_ByteArrayDataInput__fields_, 0, 0);

        void t_ByteArrayDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataInput), module, "ByteArrayDataInput", 0);
        }

        void t_ByteArrayDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "class_", make_descriptor(ByteArrayDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataInput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataInput::wrap_Object(ByteArrayDataInput(((t_ByteArrayDataInput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataInput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataInput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataInput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.eof());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args)
        {
          jshort result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readShort());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self)
        {
          OBJ_CALL(self->object.rewind());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "skipBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$PrepareCommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$PrepareCommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$PrepareCommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$PrepareCommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$PrepareCommitFailException::TwoPhaseCommitTool$PrepareCommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$PrepareCommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException, ::java::io::IOException, TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$PrepareCommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), module, "TwoPhaseCommitTool$PrepareCommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$PrepareCommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_Object(TwoPhaseCommitTool$PrepareCommitFailException(((t_TwoPhaseCommitTool$PrepareCommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$PrepareCommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$PrepareCommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollector.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollector::class$ = NULL;
        jmethodID *MultiCollector::mids$ = NULL;
        bool MultiCollector::live$ = false;

        jclass MultiCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_wrap_e0c58317] = env->getStaticMethodID(cls, "wrap", "([Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/Collector;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void MultiCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void MultiCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void MultiCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        ::org::apache::lucene::search::Collector MultiCollector::wrap(const JArray< ::org::apache::lucene::search::Collector > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Collector(env->callStaticObjectMethod(cls, mids$[mid_wrap_e0c58317], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg);
        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data);
        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiCollector__fields_[] = {
          DECLARE_SET_FIELD(t_MultiCollector, nextReader),
          DECLARE_SET_FIELD(t_MultiCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiCollector__methods_[] = {
          DECLARE_METHOD(t_MultiCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiCollector, t_MultiCollector, ::org::apache::lucene::search::Collector, MultiCollector, abstract_init, 0, 0, t_MultiCollector__fields_, 0, 0);

        void t_MultiCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollector), module, "MultiCollector", 0);
        }

        void t_MultiCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "class_", make_descriptor(MultiCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "wrapfn_", make_descriptor(t_MultiCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollector::initializeClass, 1)))
            return NULL;
          return t_MultiCollector::wrap_Object(MultiCollector(((t_MultiCollector *) arg)->object.this$));
        }
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::Collector > a0((jobject) NULL);
          ::org::apache::lucene::search::Collector result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::MultiCollector::wrap(a0));
            return ::org::apache::lucene::search::t_Collector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetCounts::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetCounts::mids$ = NULL;
          bool SortedSetDocValuesFacetCounts::live$ = false;

          jclass SortedSetDocValuesFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2661b27e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetCounts::SortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_2661b27e, a0.this$, a1.this$)) {}

          ::java::util::List SortedSetDocValuesFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number SortedSetDocValuesFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult SortedSetDocValuesFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args);

          static PyMethodDef t_SortedSetDocValuesFacetCounts__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts, ::org::apache::lucene::facet::Facets, SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_SortedSetDocValuesFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetCounts), module, "SortedSetDocValuesFacetCounts", 0);
          }

          void t_SortedSetDocValuesFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetCounts::wrap_Object(SortedSetDocValuesFacetCounts(((t_SortedSetDocValuesFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
            SortedSetDocValuesFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetCounts(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *TermDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool TermDistinctValuesCollector$GroupCount::live$ = false;

            jclass TermDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector$GroupCount, t_TermDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, TermDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_TermDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_Object(const TermDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector$GroupCount), module, "TermDistinctValuesCollector$GroupCount", 0);
            }

            void t_TermDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector$GroupCount::wrap_Object(TermDistinctValuesCollector$GroupCount(((t_TermDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/index/PythonIndexDeletionPolicy.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {

        ::java::lang::Class *PythonIndexDeletionPolicy::class$ = NULL;
        jmethodID *PythonIndexDeletionPolicy::mids$ = NULL;
        bool PythonIndexDeletionPolicy::live$ = false;

        jclass PythonIndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/index/PythonIndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexDeletionPolicy::PythonIndexDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexDeletionPolicy::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexDeletionPolicy::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexDeletionPolicy::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {
        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self);
        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args);
        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data);
        static PyGetSetDef t_PythonIndexDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexDeletionPolicy, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy_init_, 0, 0, t_PythonIndexDeletionPolicy__fields_, 0, 0);

        void t_PythonIndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexDeletionPolicy), module, "PythonIndexDeletionPolicy", 1);
        }

        void t_PythonIndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "class_", make_descriptor(PythonIndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexDeletionPolicy::initializeClass);
          JNINativeMethod methods[] = {
            { "onCommit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onCommit0 },
            { "onInit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onInit1 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexDeletionPolicy_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PythonIndexDeletionPolicy::wrap_Object(PythonIndexDeletionPolicy(((t_PythonIndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexDeletionPolicy object((jobject) NULL);

          INT_CALL(object = PythonIndexDeletionPolicy());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onCommit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onInit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchAllDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchAllDocsQueryNodeBuilder::live$ = false;

              jclass MatchAllDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_94b64688] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MatchAllDocsQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeBuilder::MatchAllDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MatchAllDocsQuery MatchAllDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MatchAllDocsQuery(env->callObjectMethod(this$, mids$[mid_build_94b64688], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchAllDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder, ::java::lang::Object, MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeBuilder), module, "MatchAllDocsQueryNodeBuilder", 0);
              }

              void t_MatchAllDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeBuilder::wrap_Object(MatchAllDocsQueryNodeBuilder(((t_MatchAllDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MatchAllDocsQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MatchAllDocsQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilter::class$ = NULL;
          jmethodID *CodepointCountFilter::mids$ = NULL;
          bool CodepointCountFilter::live$ = false;

          jclass CodepointCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilter::CodepointCountFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean CodepointCountFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self);

          static PyMethodDef t_CodepointCountFilter__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilter, t_CodepointCountFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, CodepointCountFilter, t_CodepointCountFilter_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilter), module, "CodepointCountFilter", 0);
          }

          void t_CodepointCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "class_", make_descriptor(CodepointCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilter::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilter::wrap_Object(CodepointCountFilter(((t_CodepointCountFilter *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            jint a2;
            jint a3;
            CodepointCountFilter object((jobject) NULL);

            if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = CodepointCountFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Sort::class$ = NULL;
        jmethodID *Sort::mids$ = NULL;
        bool Sort::live$ = false;
        Sort *Sort::INDEXORDER = NULL;
        Sort *Sort::RELEVANCE = NULL;

        jclass Sort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Sort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4176baab] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_init$_3578f7bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSort_4fd90036] = env->getMethodID(cls, "getSort", "()[Lorg/apache/lucene/search/SortField;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_11e86a55] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Sort;");
            mids$[mid_setSort_3578f7bf] = env->getMethodID(cls, "setSort", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_setSort_4176baab] = env->getMethodID(cls, "setSort", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INDEXORDER = new Sort(env->getStaticObjectField(cls, "INDEXORDER", "Lorg/apache/lucene/search/Sort;"));
            RELEVANCE = new Sort(env->getStaticObjectField(cls, "RELEVANCE", "Lorg/apache/lucene/search/Sort;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Sort::Sort() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Sort::Sort(const JArray< ::org::apache::lucene::search::SortField > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4176baab, a0.this$)) {}

        Sort::Sort(const ::org::apache::lucene::search::SortField & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3578f7bf, a0.this$)) {}

        jboolean Sort::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        JArray< ::org::apache::lucene::search::SortField > Sort::getSort() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->callObjectMethod(this$, mids$[mid_getSort_4fd90036]));
        }

        jint Sort::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Sort::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        Sort Sort::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return Sort(env->callObjectMethod(this$, mids$[mid_rewrite_11e86a55], a0.this$));
        }

        void Sort::setSort(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_3578f7bf], a0.this$);
        }

        void Sort::setSort(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_4176baab], a0.this$);
        }

        ::java::lang::String Sort::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_getSort(t_Sort *self);
        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_needsScores(t_Sort *self);
        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg);
        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_get__sort(t_Sort *self, void *data);
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data);
        static PyGetSetDef t_Sort__fields_[] = {
          DECLARE_GETSET_FIELD(t_Sort, sort),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Sort__methods_[] = {
          DECLARE_METHOD(t_Sort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, equals, METH_VARARGS),
          DECLARE_METHOD(t_Sort, getSort, METH_NOARGS),
          DECLARE_METHOD(t_Sort, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Sort, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_Sort, rewrite, METH_O),
          DECLARE_METHOD(t_Sort, setSort, METH_VARARGS),
          DECLARE_METHOD(t_Sort, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sort, t_Sort, ::java::lang::Object, Sort, t_Sort_init_, 0, 0, t_Sort__fields_, 0, 0);

        void t_Sort::install(PyObject *module)
        {
          installType(&PY_TYPE(Sort), module, "Sort", 0);
        }

        void t_Sort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "class_", make_descriptor(Sort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "wrapfn_", make_descriptor(t_Sort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Sort::initializeClass);
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "INDEXORDER", make_descriptor(t_Sort::wrap_Object(*Sort::INDEXORDER)));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "RELEVANCE", make_descriptor(t_Sort::wrap_Object(*Sort::RELEVANCE)));
        }

        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sort::initializeClass, 1)))
            return NULL;
          return t_Sort::wrap_Object(Sort(((t_Sort *) arg)->object.this$));
        }
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Sort object((jobject) NULL);

              INT_CALL(object = Sort());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Sort_getSort(t_Sort *self)
        {
          JArray< ::org::apache::lucene::search::SortField > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSort());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }

        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Sort_needsScores(t_Sort *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          Sort result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Sort::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setSort", args);
          return NULL;
        }

        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Sort_get__sort(t_Sort *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSort());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::SortField value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *SortedTermFreqIteratorWrapper::mids$ = NULL;
          bool SortedTermFreqIteratorWrapper::live$ = false;

          jclass SortedTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_init$_dbfb1d96] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;Ljava/util/Comparator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_d3114f43] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dbfb1d96, a0.this$, a1.this$)) {}

          ::java::util::Comparator SortedTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef SortedTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong SortedTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_SortedTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SortedTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper, ::java::lang::Object, SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedTermFreqIteratorWrapper *)) get_next< t_SortedTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedTermFreqIteratorWrapper__fields_, 0, 0);

          void t_SortedTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedTermFreqIteratorWrapper), module, "SortedTermFreqIteratorWrapper", 0);
          }

          void t_SortedTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(SortedTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_SortedTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_SortedTermFreqIteratorWrapper::wrap_Object(SortedTermFreqIteratorWrapper(((t_SortedTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternParser::class$ = NULL;
            jmethodID *PatternParser::mids$ = NULL;
            bool PatternParser::live$ = false;

            jclass PatternParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_f6e11b3c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
                mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_parse_5fdc3f48] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)V");
                mids$[mid_parse_c3dacf57] = env->getMethodID(cls, "parse", "(Ljava/io/File;)V");
                mids$[mid_setConsumer_f6e11b3c] = env->getMethodID(cls, "setConsumer", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_getPattern_97a5258f] = env->getStaticMethodID(cls, "getPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_readToken_7614059b] = env->getMethodID(cls, "readToken", "(Ljava/lang/StringBuilder;)Ljava/lang/String;");
                mids$[mid_normalizeException_27b9ce2f] = env->getMethodID(cls, "normalizeException", "(Ljava/util/ArrayList;)Ljava/util/ArrayList;");
                mids$[mid_getExceptionWord_0c7b6c64] = env->getMethodID(cls, "getExceptionWord", "(Ljava/util/ArrayList;)Ljava/lang/String;");
                mids$[mid_getInterletterValues_97a5258f] = env->getStaticMethodID(cls, "getInterletterValues", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PatternParser::PatternParser() : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PatternParser::PatternParser(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_f6e11b3c, a0.this$)) {}

            void PatternParser::characters(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
            }

            void PatternParser::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
            }

            void PatternParser::parse(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_5fdc3f48], a0.this$);
            }

            void PatternParser::parse(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_c3dacf57], a0.this$);
            }

            void PatternParser::setConsumer(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setConsumer_f6e11b3c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg);
            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_PatternParser__fields_[] = {
              DECLARE_SET_FIELD(t_PatternParser, consumer),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PatternParser__methods_[] = {
              DECLARE_METHOD(t_PatternParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, characters, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, endElement, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, setConsumer, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternParser, t_PatternParser, ::org::xml::sax::helpers::DefaultHandler, PatternParser, t_PatternParser_init_, 0, 0, t_PatternParser__fields_, 0, 0);

            void t_PatternParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternParser), module, "PatternParser", 0);
            }

            void t_PatternParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "class_", make_descriptor(PatternParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "wrapfn_", make_descriptor(t_PatternParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternParser::initializeClass, 1)))
                return NULL;
              return t_PatternParser::wrap_Object(PatternParser(((t_PatternParser *) arg)->object.this$));
            }
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PatternParser object((jobject) NULL);

                  INT_CALL(object = PatternParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);
                  PatternParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
                  {
                    INT_CALL(object = PatternParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.characters(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "characters", args, 2);
            }

            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "sss", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.endElement(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "endElement", args, 2);
            }

            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::io::File a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setConsumer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setConsumer", arg);
              return NULL;
            }

            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &value))
                {
                  INT_CALL(self->object.setConsumer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "consumer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractCollection::class$ = NULL;
    jmethodID *AbstractCollection::mids$ = NULL;
    bool AbstractCollection::live$ = false;

    jclass AbstractCollection::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractCollection");

        mids$ = new jmethodID[max_mid];
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
        mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
        mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractCollection::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean AbstractCollection::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    void AbstractCollection::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractCollection::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean AbstractCollection::containsAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator AbstractCollection::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean AbstractCollection::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jboolean AbstractCollection::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::retainAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
    }

    jint AbstractCollection::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray(const JArray< ::java::lang::Object > & a0) const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
    }

    ::java::lang::String AbstractCollection::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data);
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data);
    static PyGetSetDef t_AbstractCollection__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractCollection, empty),
      DECLARE_GET_FIELD(t_AbstractCollection, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractCollection__methods_[] = {
      DECLARE_METHOD(t_AbstractCollection, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, add, METH_O),
      DECLARE_METHOD(t_AbstractCollection, addAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, contains, METH_O),
      DECLARE_METHOD(t_AbstractCollection, containsAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, iterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, remove, METH_O),
      DECLARE_METHOD(t_AbstractCollection, removeAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, retainAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, toArray, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractCollection, t_AbstractCollection, ::java::lang::Object, AbstractCollection, abstract_init, ((PyObject *(*)(t_AbstractCollection *)) get_generic_iterator< t_AbstractCollection >), 0, t_AbstractCollection__fields_, 0, 0);
    PyObject *t_AbstractCollection::wrap_Object(const AbstractCollection& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractCollection::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractCollection::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractCollection), module, "AbstractCollection", 0);
    }

    void t_AbstractCollection::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "class_", make_descriptor(AbstractCollection::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "wrapfn_", make_descriptor(t_AbstractCollection::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractCollection::initializeClass, 1)))
        return NULL;
      return t_AbstractCollection::wrap_Object(AbstractCollection(((t_AbstractCollection *) arg)->object.this$));
    }
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractCollection::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "add", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "addAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.containsAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.iterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.retainAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< ::java::lang::Object > result((jobject) NULL);
          OBJ_CALL(result = self->object.toArray());
          return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        break;
       case 1:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toArray", args);
      return NULL;
    }

    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/ChainedFilter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *ChainedFilter::class$ = NULL;
        jmethodID *ChainedFilter::mids$ = NULL;
        bool ChainedFilter::live$ = false;
        jint ChainedFilter::AND = (jint) 0;
        jint ChainedFilter::ANDNOT = (jint) 0;
        jint ChainedFilter::DEFAULT = (jint) 0;
        jint ChainedFilter::OR = (jint) 0;
        jint ChainedFilter::XOR = (jint) 0;

        jclass ChainedFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/ChainedFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cbb0d6f6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_571f09d4] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;I)V");
            mids$[mid_init$_fa4768a0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;[I)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            AND = env->getStaticIntField(cls, "AND");
            ANDNOT = env->getStaticIntField(cls, "ANDNOT");
            DEFAULT = env->getStaticIntField(cls, "DEFAULT");
            OR = env->getStaticIntField(cls, "OR");
            XOR = env->getStaticIntField(cls, "XOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_cbb0d6f6, a0.this$)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, jint a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_571f09d4, a0.this$, a1)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, const JArray< jint > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_fa4768a0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet ChainedFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String ChainedFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args);
        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args);

        static PyMethodDef t_ChainedFilter__methods_[] = {
          DECLARE_METHOD(t_ChainedFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_ChainedFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChainedFilter, t_ChainedFilter, ::org::apache::lucene::search::Filter, ChainedFilter, t_ChainedFilter_init_, 0, 0, 0, 0, 0);

        void t_ChainedFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(ChainedFilter), module, "ChainedFilter", 0);
        }

        void t_ChainedFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "class_", make_descriptor(ChainedFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "wrapfn_", make_descriptor(t_ChainedFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ChainedFilter::initializeClass);
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "AND", make_descriptor(ChainedFilter::AND));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "ANDNOT", make_descriptor(ChainedFilter::ANDNOT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "DEFAULT", make_descriptor(ChainedFilter::DEFAULT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "OR", make_descriptor(ChainedFilter::OR));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "XOR", make_descriptor(ChainedFilter::XOR));
        }

        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChainedFilter::initializeClass, 1)))
            return NULL;
          return t_ChainedFilter::wrap_Object(ChainedFilter(((t_ChainedFilter *) arg)->object.this$));
        }
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChainedFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ChainedFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              jint a1;
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[kI", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              JArray< jint > a1((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k[I", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *JavaUtilRegexCapabilities::class$ = NULL;
            jmethodID *JavaUtilRegexCapabilities::mids$ = NULL;
            bool JavaUtilRegexCapabilities::live$ = false;
            jint JavaUtilRegexCapabilities::FLAG_CANON_EQ = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_COMMENTS = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_DOTALL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_LITERAL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_MULTILINE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNICODE_CASE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNIX_LINES = (jint) 0;

            jclass JavaUtilRegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                FLAG_CANON_EQ = env->getStaticIntField(cls, "FLAG_CANON_EQ");
                FLAG_CASE_INSENSITIVE = env->getStaticIntField(cls, "FLAG_CASE_INSENSITIVE");
                FLAG_COMMENTS = env->getStaticIntField(cls, "FLAG_COMMENTS");
                FLAG_DOTALL = env->getStaticIntField(cls, "FLAG_DOTALL");
                FLAG_LITERAL = env->getStaticIntField(cls, "FLAG_LITERAL");
                FLAG_MULTILINE = env->getStaticIntField(cls, "FLAG_MULTILINE");
                FLAG_UNICODE_CASE = env->getStaticIntField(cls, "FLAG_UNICODE_CASE");
                FLAG_UNIX_LINES = env->getStaticIntField(cls, "FLAG_UNIX_LINES");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher JavaUtilRegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }

            jboolean JavaUtilRegexCapabilities::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint JavaUtilRegexCapabilities::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args);
            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args);

            static PyMethodDef t_JavaUtilRegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, compile, METH_O),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, equals, METH_VARARGS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities, ::java::lang::Object, JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities_init_, 0, 0, 0, 0, 0);

            void t_JavaUtilRegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(JavaUtilRegexCapabilities), module, "JavaUtilRegexCapabilities", 0);
            }

            void t_JavaUtilRegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "class_", make_descriptor(JavaUtilRegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_JavaUtilRegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JavaUtilRegexCapabilities::initializeClass);
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CANON_EQ", make_descriptor(JavaUtilRegexCapabilities::FLAG_CANON_EQ));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CASE_INSENSITIVE", make_descriptor(JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_COMMENTS", make_descriptor(JavaUtilRegexCapabilities::FLAG_COMMENTS));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_DOTALL", make_descriptor(JavaUtilRegexCapabilities::FLAG_DOTALL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_LITERAL", make_descriptor(JavaUtilRegexCapabilities::FLAG_LITERAL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_MULTILINE", make_descriptor(JavaUtilRegexCapabilities::FLAG_MULTILINE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNICODE_CASE", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNICODE_CASE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNIX_LINES", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNIX_LINES));
            }

            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_JavaUtilRegexCapabilities::wrap_Object(JavaUtilRegexCapabilities(((t_JavaUtilRegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  INT_CALL(object = JavaUtilRegexCapabilities());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = JavaUtilRegexCapabilities(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }

            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SPIClassIterator.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SPIClassIterator::class$ = NULL;
        jmethodID *SPIClassIterator::mids$ = NULL;
        bool SPIClassIterator::live$ = false;

        jclass SPIClassIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SPIClassIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_d529caef] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_get_9dc4dbcc] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_isParentClassLoader_7f5616f8] = env->getStaticMethodID(cls, "isParentClassLoader", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z");
            mids$[mid_next_44a5f2c9] = env->getMethodID(cls, "next", "()Ljava/lang/Class;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_d529caef], a0.this$));
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_9dc4dbcc], a0.this$, a1.this$));
        }

        jboolean SPIClassIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        jboolean SPIClassIterator::isParentClassLoader(const ::java::lang::ClassLoader & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isParentClassLoader_7f5616f8], a0.this$, a1.this$);
        }

        ::java::lang::Class SPIClassIterator::next() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_next_44a5f2c9]));
        }

        void SPIClassIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args);
        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data);
        static PyGetSetDef t_SPIClassIterator__fields_[] = {
          DECLARE_GET_FIELD(t_SPIClassIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SPIClassIterator__methods_[] = {
          DECLARE_METHOD(t_SPIClassIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_SPIClassIterator, get, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, isParentClassLoader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SPIClassIterator, t_SPIClassIterator, ::java::lang::Object, SPIClassIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Class >), t_SPIClassIterator__fields_, 0, 0);
        PyObject *t_SPIClassIterator::wrap_Object(const SPIClassIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SPIClassIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SPIClassIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(SPIClassIterator), module, "SPIClassIterator", 0);
        }

        void t_SPIClassIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "class_", make_descriptor(SPIClassIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "wrapfn_", make_descriptor(t_SPIClassIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SPIClassIterator::initializeClass, 1)))
            return NULL;
          return t_SPIClassIterator::wrap_Object(SPIClassIterator(((t_SPIClassIterator *) arg)->object.this$));
        }
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SPIClassIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0, a1));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "get", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);
          ::java::lang::ClassLoader a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::java::lang::ClassLoader::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::isParentClassLoader(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isParentClassLoader", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ByteComparator::class$ = NULL;
        jmethodID *FieldComparator$ByteComparator::mids$ = NULL;
        bool FieldComparator$ByteComparator::live$ = false;

        jclass FieldComparator$ByteComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ByteComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_c2b89a85] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Byte;)V");
            mids$[mid_value_b801bfbe] = env->getMethodID(cls, "value", "(I)Ljava/lang/Byte;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ByteComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ByteComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ByteComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ByteComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ByteComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ByteComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ByteComparator::setTopValue(const ::java::lang::Byte & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_c2b89a85], a0.this$);
        }

        ::java::lang::Byte FieldComparator$ByteComparator::value(jint a0) const
        {
          return ::java::lang::Byte(env->callObjectMethod(this$, mids$[mid_value_b801bfbe], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args);
        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ByteComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ByteComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ByteComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ByteComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ByteComparator, t_FieldComparator$ByteComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ByteComparator, abstract_init, 0, 0, t_FieldComparator$ByteComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ByteComparator::wrap_Object(const FieldComparator$ByteComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ByteComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ByteComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ByteComparator), module, "FieldComparator$ByteComparator", 0);
        }

        void t_FieldComparator$ByteComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "class_", make_descriptor(FieldComparator$ByteComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ByteComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ByteComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ByteComparator::wrap_Object(FieldComparator$ByteComparator(((t_FieldComparator$ByteComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ByteComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::java::lang::Byte a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Byte), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Byte result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Byte::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Byte value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator::class$ = NULL;
          jmethodID *InputIterator::mids$ = NULL;
          bool InputIterator::live$ = false;
          InputIterator *InputIterator::EMPTY = NULL;

          jclass InputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new InputIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/suggest/InputIterator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set InputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          jboolean InputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_contexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self);
          static PyObject *t_InputIterator_payload(t_InputIterator *self);
          static PyObject *t_InputIterator_weight(t_InputIterator *self);

          static PyMethodDef t_InputIterator__methods_[] = {
            DECLARE_METHOD(t_InputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator, t_InputIterator, ::org::apache::lucene::util::BytesRefIterator, InputIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_InputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator), module, "InputIterator", 0);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "InputIteratorWrapper", make_descriptor(&PY_TYPE(InputIterator$InputIteratorWrapper)));
          }

          void t_InputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "class_", make_descriptor(InputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "wrapfn_", make_descriptor(t_InputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(InputIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "EMPTY", make_descriptor(t_InputIterator::wrap_Object(*InputIterator::EMPTY)));
          }

          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator::initializeClass, 1)))
              return NULL;
            return t_InputIterator::wrap_Object(InputIterator(((t_InputIterator *) arg)->object.this$));
          }
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_InputIterator_contexts(t_InputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_payload(t_InputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator_weight(t_InputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TermFreqValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TermFreqValueSource::class$ = NULL;
            jmethodID *TermFreqValueSource::mids$ = NULL;
            bool TermFreqValueSource::live$ = false;

            jclass TermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFreqValueSource::TermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args);
            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args);

            static PyMethodDef t_TermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TermFreqValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFreqValueSource, t_TermFreqValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, TermFreqValueSource, t_TermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFreqValueSource), module, "TermFreqValueSource", 0);
            }

            void t_TermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "class_", make_descriptor(TermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TermFreqValueSource::wrap_Object(TermFreqValueSource(((t_TermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SentinelIntSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SentinelIntSet::class$ = NULL;
        jmethodID *SentinelIntSet::mids$ = NULL;
        jfieldID *SentinelIntSet::fids$ = NULL;
        bool SentinelIntSet::live$ = false;

        jclass SentinelIntSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SentinelIntSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
            mids$[mid_find_39c7bd23] = env->getMethodID(cls, "find", "(I)I");
            mids$[mid_getSlot_39c7bd23] = env->getMethodID(cls, "getSlot", "(I)I");
            mids$[mid_hash_39c7bd23] = env->getMethodID(cls, "hash", "(I)I");
            mids$[mid_put_39c7bd23] = env->getMethodID(cls, "put", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rehash_54c6a166] = env->getMethodID(cls, "rehash", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_count] = env->getFieldID(cls, "count", "I");
            fids$[fid_emptyVal] = env->getFieldID(cls, "emptyVal", "I");
            fids$[fid_keys] = env->getFieldID(cls, "keys", "[I");
            fids$[fid_rehashCount] = env->getFieldID(cls, "rehashCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SentinelIntSet::SentinelIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        void SentinelIntSet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean SentinelIntSet::exists(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
        }

        jint SentinelIntSet::find(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_39c7bd23], a0);
        }

        jint SentinelIntSet::getSlot(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getSlot_39c7bd23], a0);
        }

        jint SentinelIntSet::hash(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_hash_39c7bd23], a0);
        }

        jint SentinelIntSet::put(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_put_39c7bd23], a0);
        }

        jlong SentinelIntSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SentinelIntSet::rehash() const
        {
          env->callVoidMethod(this$, mids$[mid_rehash_54c6a166]);
        }

        jint SentinelIntSet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        jint SentinelIntSet::_get_count() const
        {
          return env->getIntField(this$, fids$[fid_count]);
        }

        void SentinelIntSet::_set_count(jint a0) const
        {
          env->setIntField(this$, fids$[fid_count], a0);
        }

        jint SentinelIntSet::_get_emptyVal() const
        {
          return env->getIntField(this$, fids$[fid_emptyVal]);
        }

        JArray< jint > SentinelIntSet::_get_keys() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_keys]));
        }

        void SentinelIntSet::_set_keys(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_keys], a0.this$);
        }

        jint SentinelIntSet::_get_rehashCount() const
        {
          return env->getIntField(this$, fids$[fid_rehashCount]);
        }

        void SentinelIntSet::_set_rehashCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_rehashCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data);
        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data);

        static PyGetSetDef t_SentinelIntSet__fields_[] = {
          DECLARE_GETSET_FIELD(t_SentinelIntSet, count),
          DECLARE_GET_FIELD(t_SentinelIntSet, emptyVal),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, keys),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, rehashCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SentinelIntSet__methods_[] = {
          DECLARE_METHOD(t_SentinelIntSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, clear, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, exists, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, find, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, getSlot, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, hash, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, put, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, rehash, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SentinelIntSet, t_SentinelIntSet, ::java::lang::Object, SentinelIntSet, t_SentinelIntSet_init_, 0, 0, t_SentinelIntSet__fields_, 0, 0);

        void t_SentinelIntSet::install(PyObject *module)
        {
          installType(&PY_TYPE(SentinelIntSet), module, "SentinelIntSet", 0);
        }

        void t_SentinelIntSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "class_", make_descriptor(SentinelIntSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "wrapfn_", make_descriptor(t_SentinelIntSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SentinelIntSet::initializeClass, 1)))
            return NULL;
          return t_SentinelIntSet::wrap_Object(SentinelIntSet(((t_SentinelIntSet *) arg)->object.this$));
        }
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SentinelIntSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          SentinelIntSet object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = SentinelIntSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.exists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "exists", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getSlot(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSlot", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.hash(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "hash", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.put(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.rehash());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_count());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_count(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "count", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_emptyVal());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_keys());
          return value.wrap();
        }
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_keys(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "keys", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_rehashCount());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_rehashCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "rehashCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_return::mids$ = NULL;
          bool JavascriptParser$unary_return::live$ = false;

          jclass JavascriptParser$unary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_return::JavascriptParser$unary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_return, t_JavascriptParser$unary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_return, t_JavascriptParser$unary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_return), module, "JavascriptParser$unary_return", 0);
          }

          void t_JavascriptParser$unary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_return::wrap_Object(JavascriptParser$unary_return(((t_JavascriptParser$unary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemmer::class$ = NULL;
          jmethodID *GermanLightStemmer::mids$ = NULL;
          bool GermanLightStemmer::live$ = false;

          jclass GermanLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemmer::GermanLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args);

          static PyMethodDef t_GermanLightStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemmer, t_GermanLightStemmer, ::java::lang::Object, GermanLightStemmer, t_GermanLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemmer), module, "GermanLightStemmer", 0);
          }

          void t_GermanLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "class_", make_descriptor(GermanLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemmer::wrap_Object(GermanLightStemmer(((t_GermanLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanLightStemmer object((jobject) NULL);

            INT_CALL(object = GermanLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SpecialOperations.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SpecialOperations::class$ = NULL;
          jmethodID *SpecialOperations::mids$ = NULL;
          bool SpecialOperations::live$ = false;

          jclass SpecialOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SpecialOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getCommonPrefix_c2342f4b] = env->getStaticMethodID(cls, "getCommonPrefix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonPrefixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonPrefixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getCommonSuffix_c2342f4b] = env->getStaticMethodID(cls, "getCommonSuffix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonSuffixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonSuffixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getFiniteStrings_4e50ce8f] = env->getStaticMethodID(cls, "getFiniteStrings", "(Lorg/apache/lucene/util/automaton/Automaton;I)Ljava/util/Set;");
              mids$[mid_isFinite_fc7cf398] = env->getStaticMethodID(cls, "isFinite", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_reverse_f8f6971d] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String SpecialOperations::getCommonPrefix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef SpecialOperations::getCommonPrefixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefixBytesRef_b889220f], a0.this$));
          }

          ::java::lang::String SpecialOperations::getCommonSuffix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef SpecialOperations::getCommonSuffixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffixBytesRef_b889220f], a0.this$));
          }

          ::java::util::Set SpecialOperations::getFiniteStrings(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getFiniteStrings_4e50ce8f], a0.this$, a1));
          }

          jboolean SpecialOperations::isFinite(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_fc7cf398], a0.this$);
          }

          ::java::util::Set SpecialOperations::reverse(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_reverse_f8f6971d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SpecialOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonPrefix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonSuffix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getFiniteStrings(PyTypeObject *type, PyObject *args);
          static PyObject *t_SpecialOperations_isFinite(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_reverse(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SpecialOperations__methods_[] = {
            DECLARE_METHOD(t_SpecialOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonPrefix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonPrefixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonSuffix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonSuffixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getFiniteStrings, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, isFinite, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, reverse, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpecialOperations, t_SpecialOperations, ::java::lang::Object, SpecialOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_SpecialOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(SpecialOperations), module, "SpecialOperations", 0);
          }

          void t_SpecialOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "class_", make_descriptor(SpecialOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "wrapfn_", make_descriptor(t_SpecialOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpecialOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpecialOperations::initializeClass, 1)))
              return NULL;
            return t_SpecialOperations::wrap_Object(SpecialOperations(((t_SpecialOperations *) arg)->object.this$));
          }
          static PyObject *t_SpecialOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpecialOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpecialOperations_getCommonPrefix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonPrefix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefix", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonPrefixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonSuffix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonSuffix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffix", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonSuffixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getFiniteStrings(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getFiniteStrings(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(IntsRef));
            }

            PyErr_SetArgsError(type, "getFiniteStrings", args);
            return NULL;
          }

          static PyObject *t_SpecialOperations_isFinite(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::isFinite(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isFinite", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_reverse(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::reverse(a0));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(State));
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode::class$ = NULL;
              jmethodID *ModifierQueryNode::mids$ = NULL;
              bool ModifierQueryNode::live$ = false;

              jclass ModifierQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getModifier_511690a9] = env->getMethodID(cls, "getModifier", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNode::ModifierQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier ModifierQueryNode::getModifier() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_getModifier_511690a9]));
              }

              void ModifierQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence ModifierQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ModifierQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg);
              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data);
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data);
              static PyGetSetDef t_ModifierQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ModifierQueryNode, child),
                DECLARE_GET_FIELD(t_ModifierQueryNode, modifier),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getModifier, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_ModifierQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode, t_ModifierQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, ModifierQueryNode, t_ModifierQueryNode_init_, 0, 0, t_ModifierQueryNode__fields_, 0, 0);

              void t_ModifierQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode), module, "ModifierQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "Modifier", make_descriptor(&PY_TYPE(ModifierQueryNode$Modifier)));
              }

              void t_ModifierQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "class_", make_descriptor(ModifierQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode::wrap_Object(ModifierQueryNode(((t_ModifierQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                ModifierQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = ModifierQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }

              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier value((jobject) NULL);
                OBJ_CALL(value = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilterFactory::class$ = NULL;
          jmethodID *StandardFilterFactory::mids$ = NULL;
          bool StandardFilterFactory::live$ = false;

          jclass StandardFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2a39d447] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/standard/StandardFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilterFactory::StandardFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardFilter StandardFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::standard::StandardFilter(env->callObjectMethod(this$, mids$[mid_create_2a39d447], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args);

          static PyMethodDef t_StandardFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StandardFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilterFactory, t_StandardFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StandardFilterFactory, t_StandardFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilterFactory), module, "StandardFilterFactory", 0);
          }

          void t_StandardFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "class_", make_descriptor(StandardFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StandardFilterFactory::wrap_Object(StandardFilterFactory(((t_StandardFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_StandardFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemmer::class$ = NULL;
          jmethodID *PortugueseMinimalStemmer::mids$ = NULL;
          bool PortugueseMinimalStemmer::live$ = false;

          jclass PortugueseMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemmer::PortugueseMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemmer, t_PortugueseMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseMinimalStemmer, t_PortugueseMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemmer), module, "PortugueseMinimalStemmer", 0);
          }

          void t_PortugueseMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "class_", make_descriptor(PortugueseMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemmer::wrap_Object(PortugueseMinimalStemmer(((t_PortugueseMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseMinimalStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene41StoredFieldsFormat::mids$ = NULL;
          bool Lucene41StoredFieldsFormat::live$ = false;

          jclass Lucene41StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41StoredFieldsFormat::Lucene41StoredFieldsFormat() : ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene41StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat, ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat, Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41StoredFieldsFormat), module, "Lucene41StoredFieldsFormat", 0);
          }

          void t_Lucene41StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene41StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41StoredFieldsFormat::wrap_Object(Lucene41StoredFieldsFormat(((t_Lucene41StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene41StoredFieldsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsFormat::class$ = NULL;
        jmethodID *StoredFieldsFormat::mids$ = NULL;
        bool StoredFieldsFormat::live$ = false;

        jclass StoredFieldsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::StoredFieldsReader StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::StoredFieldsWriter StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args);
        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args);

        static PyMethodDef t_StoredFieldsFormat__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsFormat, t_StoredFieldsFormat, ::java::lang::Object, StoredFieldsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsFormat), module, "StoredFieldsFormat", 0);
        }

        void t_StoredFieldsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "class_", make_descriptor(StoredFieldsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsFormat::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsFormat::wrap_Object(StoredFieldsFormat(((t_StoredFieldsFormat *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsReader", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/text/NumberFormat.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericConfig::class$ = NULL;
              jmethodID *NumericConfig::mids$ = NULL;
              bool NumericConfig::live$ = false;

              jclass NumericConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_09c28ef7] = env->getMethodID(cls, "<init>", "(ILjava/text/NumberFormat;Lorg/apache/lucene/document/FieldType$NumericType;)V");
                  mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
                  mids$[mid_getType_81bd17c2] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setPrecisionStep", "(I)V");
                  mids$[mid_setType_d9029e47] = env->getMethodID(cls, "setType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericConfig::NumericConfig(jint a0, const ::java::text::NumberFormat & a1, const ::org::apache::lucene::document::FieldType$NumericType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09c28ef7, a0, a1.this$, a2.this$)) {}

              jboolean NumericConfig::equals(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
              }

              ::java::text::NumberFormat NumericConfig::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              jint NumericConfig::getPrecisionStep() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
              }

              ::org::apache::lucene::document::FieldType$NumericType NumericConfig::getType() const
              {
                return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_getType_81bd17c2]));
              }

              void NumericConfig::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericConfig::setPrecisionStep(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrecisionStep_39c7bd3c], a0);
              }

              void NumericConfig::setType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setType_d9029e47], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args);
              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getType(t_NumericConfig *self);
              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericConfig, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericConfig, precisionStep),
                DECLARE_GETSET_FIELD(t_NumericConfig, type),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericConfig__methods_[] = {
                DECLARE_METHOD(t_NumericConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, equals, METH_VARARGS),
                DECLARE_METHOD(t_NumericConfig, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getPrecisionStep, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getType, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericConfig, setPrecisionStep, METH_O),
                DECLARE_METHOD(t_NumericConfig, setType, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericConfig, t_NumericConfig, ::java::lang::Object, NumericConfig, t_NumericConfig_init_, 0, 0, t_NumericConfig__fields_, 0, 0);

              void t_NumericConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericConfig), module, "NumericConfig", 0);
              }

              void t_NumericConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "class_", make_descriptor(NumericConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "wrapfn_", make_descriptor(t_NumericConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericConfig::initializeClass, 1)))
                  return NULL;
                return t_NumericConfig::wrap_Object(NumericConfig(((t_NumericConfig *) arg)->object.this$));
              }
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds)
              {
                jint a0;
                ::java::text::NumberFormat a1((jobject) NULL);
                ::org::apache::lucene::document::FieldType$NumericType a2((jobject) NULL);
                PyTypeObject **p2;
                NumericConfig object((jobject) NULL);

                if (!parseArgs(args, "IkK", ::java::text::NumberFormat::initializeClass, ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  INT_CALL(object = NumericConfig(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.equals(a0));
                  Py_RETURN_BOOL(result);
                }

                return callSuper(&PY_TYPE(NumericConfig), (PyObject *) self, "equals", args, 2);
              }

              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrecisionStep());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_NumericConfig_getType(t_NumericConfig *self)
              {
                ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
                OBJ_CALL(result = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrecisionStep(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrecisionStep", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  OBJ_CALL(self->object.setType(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setType", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrecisionStep());
                return PyInt_FromLong((long) value);
              }
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrecisionStep(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "precisionStep", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data)
              {
                ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                OBJ_CALL(value = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(value);
              }
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &value))
                  {
                    INT_CALL(self->object.setType(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "type", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion$Completion::class$ = NULL;
            jmethodID *FSTCompletion$Completion::mids$ = NULL;
            jfieldID *FSTCompletion$Completion::fids$ = NULL;
            bool FSTCompletion$Completion::live$ = false;

            jclass FSTCompletion$Completion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion$Completion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_2db77dab] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion$Completion;)I");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_bucket] = env->getFieldID(cls, "bucket", "I");
                fids$[fid_utf8] = env->getFieldID(cls, "utf8", "Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FSTCompletion$Completion::compareTo(const FSTCompletion$Completion & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_2db77dab], a0.this$);
            }

            ::java::lang::String FSTCompletion$Completion::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint FSTCompletion$Completion::_get_bucket() const
            {
              return env->getIntField(this$, fids$[fid_bucket]);
            }

            ::org::apache::lucene::util::BytesRef FSTCompletion$Completion::_get_utf8() const
            {
              return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_utf8]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args);
            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data);
            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data);

            static PyGetSetDef t_FSTCompletion$Completion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, bucket),
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, utf8),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion$Completion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion$Completion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, compareTo, METH_O),
              DECLARE_METHOD(t_FSTCompletion$Completion, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion$Completion, t_FSTCompletion$Completion, ::java::lang::Object, FSTCompletion$Completion, abstract_init, 0, 0, t_FSTCompletion$Completion__fields_, 0, 0);

            void t_FSTCompletion$Completion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion$Completion), module, "FSTCompletion$Completion", 0);
            }

            void t_FSTCompletion$Completion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "class_", make_descriptor(FSTCompletion$Completion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion$Completion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion$Completion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion$Completion::wrap_Object(FSTCompletion$Completion(((t_FSTCompletion$Completion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion$Completion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg)
            {
              FSTCompletion$Completion a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", FSTCompletion$Completion::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FSTCompletion$Completion), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_bucket());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data)
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_utf8());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl36::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl36::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl36::live$ = false;
            jint UAX29URLEmailTokenizerImpl36::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl36::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl36::UAX29URLEmailTokenizerImpl36(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl36::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl36::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl36::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl36::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl36::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl36::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl36::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {
            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl36__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl36, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl36__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36, ::java::lang::Object, UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36_init_, 0, 0, t_UAX29URLEmailTokenizerImpl36__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl36::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl36), module, "UAX29URLEmailTokenizerImpl36", 0);
            }

            void t_UAX29URLEmailTokenizerImpl36::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl36::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl36::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl36::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl36::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl36::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl36::wrap_Object(UAX29URLEmailTokenizerImpl36(((t_UAX29URLEmailTokenizerImpl36 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl36 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl36(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericFieldConfigListener::class$ = NULL;
              jmethodID *NumericFieldConfigListener::mids$ = NULL;
              bool NumericFieldConfigListener::live$ = false;

              jclass NumericFieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericFieldConfigListener::NumericFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void NumericFieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_NumericFieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_NumericFieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericFieldConfigListener, t_NumericFieldConfigListener, ::java::lang::Object, NumericFieldConfigListener, t_NumericFieldConfigListener_init_, 0, 0, 0, 0, 0);

              void t_NumericFieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericFieldConfigListener), module, "NumericFieldConfigListener", 0);
              }

              void t_NumericFieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "class_", make_descriptor(NumericFieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_NumericFieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericFieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_NumericFieldConfigListener::wrap_Object(NumericFieldConfigListener(((t_NumericFieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericFieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                NumericFieldConfigListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = NumericFieldConfigListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilter::class$ = NULL;
          jmethodID *CzechStemFilter::mids$ = NULL;
          bool CzechStemFilter::live$ = false;

          jclass CzechStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilter::CzechStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CzechStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args);

          static PyMethodDef t_CzechStemFilter__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilter, t_CzechStemFilter, ::org::apache::lucene::analysis::TokenFilter, CzechStemFilter, t_CzechStemFilter_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilter), module, "CzechStemFilter", 0);
          }

          void t_CzechStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "class_", make_descriptor(CzechStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilter::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilter::wrap_Object(CzechStemFilter(((t_CzechStemFilter *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CzechStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CzechStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Document.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Document::class$ = NULL;
        jmethodID *Document::mids$ = NULL;
        bool Document::live$ = false;

        jclass Document::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Document");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_d86aadad] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_get_97a5258f] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getBinaryValue_14551a1f] = env->getMethodID(cls, "getBinaryValue", "(Ljava/lang/String;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getBinaryValues_eb7e4f07] = env->getMethodID(cls, "getBinaryValues", "(Ljava/lang/String;)[Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getField_3e59ba6e] = env->getMethodID(cls, "getField", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getFields_87851566] = env->getMethodID(cls, "getFields", "()Ljava/util/List;");
            mids$[mid_getFields_0aa85a96] = env->getMethodID(cls, "getFields", "(Ljava/lang/String;)[Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getValues_1f6a174f] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_removeField_5fdc3f48] = env->getMethodID(cls, "removeField", "(Ljava/lang/String;)V");
            mids$[mid_removeFields_5fdc3f48] = env->getMethodID(cls, "removeFields", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Document::Document() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Document::add(const ::org::apache::lucene::index::IndexableField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_d86aadad], a0.this$);
        }

        ::java::lang::String Document::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_97a5258f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef Document::getBinaryValue(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBinaryValue_14551a1f], a0.this$));
        }

        JArray< ::org::apache::lucene::util::BytesRef > Document::getBinaryValues(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getBinaryValues_eb7e4f07], a0.this$));
        }

        ::org::apache::lucene::index::IndexableField Document::getField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::IndexableField(env->callObjectMethod(this$, mids$[mid_getField_3e59ba6e], a0.this$));
        }

        ::java::util::List Document::getFields() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFields_87851566]));
        }

        JArray< ::org::apache::lucene::index::IndexableField > Document::getFields(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexableField >(env->callObjectMethod(this$, mids$[mid_getFields_0aa85a96], a0.this$));
        }

        JArray< ::java::lang::String > Document::getValues(const ::java::lang::String & a0) const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getValues_1f6a174f], a0.this$));
        }

        ::java::util::Iterator Document::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void Document::removeField(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeField_5fdc3f48], a0.this$);
        }

        void Document::removeFields(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeFields_5fdc3f48], a0.this$);
        }

        ::java::lang::String Document::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Document_add(t_Document *self, PyObject *arg);
        static PyObject *t_Document_get(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getFields(t_Document *self, PyObject *args);
        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_iterator(t_Document *self);
        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg);
        static PyObject *t_Document_toString(t_Document *self, PyObject *args);
        static PyObject *t_Document_get__fields(t_Document *self, void *data);
        static PyGetSetDef t_Document__fields_[] = {
          DECLARE_GET_FIELD(t_Document, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Document__methods_[] = {
          DECLARE_METHOD(t_Document, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, add, METH_O),
          DECLARE_METHOD(t_Document, get, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValue, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValues, METH_O),
          DECLARE_METHOD(t_Document, getField, METH_O),
          DECLARE_METHOD(t_Document, getFields, METH_VARARGS),
          DECLARE_METHOD(t_Document, getValues, METH_O),
          DECLARE_METHOD(t_Document, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Document, removeField, METH_O),
          DECLARE_METHOD(t_Document, removeFields, METH_O),
          DECLARE_METHOD(t_Document, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyMappingMethods t_Document_as_mapping = {
          0,
          (binaryfunc) t_Document_get,
          0,
        };

        DECLARE_TYPE(Document, t_Document, ::java::lang::Object, Document, t_Document_init_, ((PyObject *(*)(t_Document *)) get_iterator< t_Document >), 0, t_Document__fields_, &t_Document_as_mapping, 0);

        void t_Document::install(PyObject *module)
        {
          installType(&PY_TYPE(Document), module, "Document", 0);
        }

        void t_Document::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "class_", make_descriptor(Document::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "wrapfn_", make_descriptor(t_Document::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Document::initializeClass, 1)))
            return NULL;
          return t_Document::wrap_Object(Document(((t_Document *) arg)->object.this$));
        }
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Document::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds)
        {
          Document object((jobject) NULL);

          INT_CALL(object = Document());
          self->object = object;

          return 0;
        }

        static PyObject *t_Document_add(t_Document *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexableField a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexableField::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_Document_get(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValue(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValue", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValues(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValues", arg);
          return NULL;
        }

        static PyObject *t_Document_getField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getField(a0));
            return ::org::apache::lucene::index::t_IndexableField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getField", arg);
          return NULL;
        }

        static PyObject *t_Document_getFields(t_Document *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFields());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::IndexableField > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getFields(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexableField::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFields", args);
          return NULL;
        }

        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValues(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", arg);
          return NULL;
        }

        static PyObject *t_Document_iterator(t_Document *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
        }

        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeField(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeField", arg);
          return NULL;
        }

        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeFields(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeFields", arg);
          return NULL;
        }

        static PyObject *t_Document_toString(t_Document *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Document), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Document_get__fields(t_Document *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getFields());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionLL.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionLL::class$ = NULL;
          jmethodID *DistributionLL::mids$ = NULL;
          bool DistributionLL::live$ = false;

          jclass DistributionLL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionLL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionLL::DistributionLL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionLL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionLL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args);
          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args);

          static PyMethodDef t_DistributionLL__methods_[] = {
            DECLARE_METHOD(t_DistributionLL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionLL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionLL, t_DistributionLL, ::org::apache::lucene::search::similarities::Distribution, DistributionLL, t_DistributionLL_init_, 0, 0, 0, 0, 0);

          void t_DistributionLL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionLL), module, "DistributionLL", 0);
          }

          void t_DistributionLL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "class_", make_descriptor(DistributionLL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "wrapfn_", make_descriptor(t_DistributionLL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionLL::initializeClass, 1)))
              return NULL;
            return t_DistributionLL::wrap_Object(DistributionLL(((t_DistributionLL *) arg)->object.this$));
          }
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionLL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds)
          {
            DistributionLL object((jobject) NULL);

            INT_CALL(object = DistributionLL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *BasicQueryFactory::class$ = NULL;
            jmethodID *BasicQueryFactory::mids$ = NULL;
            bool BasicQueryFactory::live$ = false;

            jclass BasicQueryFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/BasicQueryFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getMaxBasicQueries_54c6a179] = env->getMethodID(cls, "getMaxBasicQueries", "()I");
                mids$[mid_getNrQueriesMade_54c6a179] = env->getMethodID(cls, "getNrQueriesMade", "()I");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_newSpanTermQuery_538d14f1] = env->getMethodID(cls, "newSpanTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/spans/SpanTermQuery;");
                mids$[mid_newTermQuery_ab5e03f9] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/TermQuery;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_checkMax_54c6a166] = env->getMethodID(cls, "checkMax", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BasicQueryFactory::BasicQueryFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            BasicQueryFactory::BasicQueryFactory(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            jboolean BasicQueryFactory::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint BasicQueryFactory::getMaxBasicQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxBasicQueries_54c6a179]);
            }

            jint BasicQueryFactory::getNrQueriesMade() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrQueriesMade_54c6a179]);
            }

            jint BasicQueryFactory::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::org::apache::lucene::search::spans::SpanTermQuery BasicQueryFactory::newSpanTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::spans::SpanTermQuery(env->callObjectMethod(this$, mids$[mid_newSpanTermQuery_538d14f1], a0.this$));
            }

            ::org::apache::lucene::search::TermQuery BasicQueryFactory::newTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_newTermQuery_ab5e03f9], a0.this$));
            }

            ::java::lang::String BasicQueryFactory::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data);
            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data);
            static PyGetSetDef t_BasicQueryFactory__fields_[] = {
              DECLARE_GET_FIELD(t_BasicQueryFactory, maxBasicQueries),
              DECLARE_GET_FIELD(t_BasicQueryFactory, nrQueriesMade),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BasicQueryFactory__methods_[] = {
              DECLARE_METHOD(t_BasicQueryFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, equals, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getMaxBasicQueries, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getNrQueriesMade, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, newSpanTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, newTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BasicQueryFactory, t_BasicQueryFactory, ::java::lang::Object, BasicQueryFactory, t_BasicQueryFactory_init_, 0, 0, t_BasicQueryFactory__fields_, 0, 0);

            void t_BasicQueryFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(BasicQueryFactory), module, "BasicQueryFactory", 0);
            }

            void t_BasicQueryFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "class_", make_descriptor(BasicQueryFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "wrapfn_", make_descriptor(t_BasicQueryFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BasicQueryFactory::initializeClass, 1)))
                return NULL;
              return t_BasicQueryFactory::wrap_Object(BasicQueryFactory(((t_BasicQueryFactory *) arg)->object.this$));
            }
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BasicQueryFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  BasicQueryFactory object((jobject) NULL);

                  INT_CALL(object = BasicQueryFactory());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  BasicQueryFactory object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = BasicQueryFactory(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::spans::SpanTermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newSpanTermQuery(a0));
                return ::org::apache::lucene::search::spans::t_SpanTermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newSpanTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::TermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newTermQuery(a0));
                return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *WildcardQueryNodeProcessor::class$ = NULL;
              jmethodID *WildcardQueryNodeProcessor::mids$ = NULL;
              bool WildcardQueryNodeProcessor::live$ = false;

              jclass WildcardQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeProcessor::WildcardQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_WildcardQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeProcessor), module, "WildcardQueryNodeProcessor", 0);
              }

              void t_WildcardQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "class_", make_descriptor(WildcardQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeProcessor::wrap_Object(WildcardQueryNodeProcessor(((t_WildcardQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilterFactory::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilterFactory::live$ = false;

          jclass DictionaryCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilterFactory::DictionaryCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DictionaryCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void DictionaryCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DictionaryCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), module, "DictionaryCompoundWordTokenFilterFactory", 0);
          }

          void t_DictionaryCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilterFactory::wrap_Object(DictionaryCompoundWordTokenFilterFactory(((t_DictionaryCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DictionaryCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DictionaryCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker::class$ = NULL;
        jmethodID *FieldCacheSanityChecker::mids$ = NULL;
        bool FieldCacheSanityChecker::live$ = false;

        jclass FieldCacheSanityChecker::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_check_d93a601e] = env->getMethodID(cls, "check", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_ad442ffd] = env->getStaticMethodID(cls, "checkSanity", "(Lorg/apache/lucene/search/FieldCache;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_d93a601e] = env->getStaticMethodID(cls, "checkSanity", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker::FieldCacheSanityChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::check(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0) const
        {
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callObjectMethod(this$, mids$[mid_check_d93a601e], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const ::org::apache::lucene::search::FieldCache & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_ad442ffd], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_d93a601e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, check, METH_O),
          DECLARE_METHOD(t_FieldCacheSanityChecker, checkSanity, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker, t_FieldCacheSanityChecker, ::java::lang::Object, FieldCacheSanityChecker, t_FieldCacheSanityChecker_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker), module, "FieldCacheSanityChecker", 0);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "InsanityType", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$InsanityType)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "Insanity", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$Insanity)));
        }

        void t_FieldCacheSanityChecker::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker::wrap_Object(FieldCacheSanityChecker(((t_FieldCacheSanityChecker *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheSanityChecker object((jobject) NULL);

          INT_CALL(object = FieldCacheSanityChecker());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.check(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "check", arg);
          return NULL;
        }

        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::FieldCache a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::FieldCache::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
            {
              JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError(type, "checkSanity", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/da/DanishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {

          ::java::lang::Class *DanishAnalyzer::class$ = NULL;
          jmethodID *DanishAnalyzer::mids$ = NULL;
          bool DanishAnalyzer::live$ = false;
          ::java::lang::String *DanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/da/DanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {
          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data);
          static PyGetSetDef t_DanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DanishAnalyzer, t_DanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, DanishAnalyzer, t_DanishAnalyzer_init_, 0, 0, t_DanishAnalyzer__fields_, 0, 0);

          void t_DanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DanishAnalyzer), module, "DanishAnalyzer", 0);
          }

          void t_DanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "class_", make_descriptor(DanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DanishAnalyzer::wrap_Object(DanishAnalyzer(((t_DanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::da::DanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizer::class$ = NULL;
          jmethodID *EdgeNGramTokenizer::mids$ = NULL;
          bool EdgeNGramTokenizer::live$ = false;
          jint EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;

          jclass EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizer, t_EdgeNGramTokenizer, ::org::apache::lucene::analysis::ngram::NGramTokenizer, EdgeNGramTokenizer, t_EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizer), module, "EdgeNGramTokenizer", 0);
          }

          void t_EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
          }

          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizer::wrap_Object(EdgeNGramTokenizer(((t_EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Directory::class$ = NULL;
        jmethodID *Directory::mids$ = NULL;
        bool Directory::live$ = false;

        jclass Directory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Directory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openChecksumInput_dab98306] = env->getMethodID(cls, "openChecksumInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/ChecksumIndexInput;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Directory::Directory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Directory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void Directory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Directory::copy(const Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput Directory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void Directory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean Directory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong Directory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory Directory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String Directory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > Directory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock Directory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::ChecksumIndexInput Directory::openChecksumInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::ChecksumIndexInput(env->callObjectMethod(this$, mids$[mid_openChecksumInput_dab98306], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexInput Directory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void Directory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void Directory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String Directory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_close(t_Directory *self);
        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_getLockFactory(t_Directory *self);
        static PyObject *t_Directory_getLockID(t_Directory *self);
        static PyObject *t_Directory_listAll(t_Directory *self);
        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data);
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data);
        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data);
        static PyGetSetDef t_Directory__fields_[] = {
          DECLARE_GETSET_FIELD(t_Directory, lockFactory),
          DECLARE_GET_FIELD(t_Directory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Directory__methods_[] = {
          DECLARE_METHOD(t_Directory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, clearLock, METH_O),
          DECLARE_METHOD(t_Directory, close, METH_NOARGS),
          DECLARE_METHOD(t_Directory, copy, METH_VARARGS),
          DECLARE_METHOD(t_Directory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, deleteFile, METH_O),
          DECLARE_METHOD(t_Directory, fileExists, METH_O),
          DECLARE_METHOD(t_Directory, fileLength, METH_O),
          DECLARE_METHOD(t_Directory, getLockFactory, METH_NOARGS),
          DECLARE_METHOD(t_Directory, getLockID, METH_NOARGS),
          DECLARE_METHOD(t_Directory, listAll, METH_NOARGS),
          DECLARE_METHOD(t_Directory, makeLock, METH_O),
          DECLARE_METHOD(t_Directory, openChecksumInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, setLockFactory, METH_O),
          DECLARE_METHOD(t_Directory, sync, METH_O),
          DECLARE_METHOD(t_Directory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Directory, t_Directory, ::java::lang::Object, Directory, t_Directory_init_, 0, 0, t_Directory__fields_, 0, 0);

        void t_Directory::install(PyObject *module)
        {
          installType(&PY_TYPE(Directory), module, "Directory", 0);
        }

        void t_Directory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "class_", make_descriptor(Directory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "wrapfn_", make_descriptor(t_Directory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Directory::initializeClass, 1)))
            return NULL;
          return t_Directory::wrap_Object(Directory(((t_Directory *) arg)->object.this$));
        }
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Directory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds)
        {
          Directory object((jobject) NULL);

          INT_CALL(object = Directory());
          self->object = object;

          return 0;
        }

        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_close(t_Directory *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args)
        {
          Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createOutput", args);
          return NULL;
        }

        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "deleteFile", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileExists", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileLength", arg);
          return NULL;
        }

        static PyObject *t_Directory_getLockFactory(t_Directory *self)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
        }

        static PyObject *t_Directory_getLockID(t_Directory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockID());
          return j2p(result);
        }

        static PyObject *t_Directory_listAll(t_Directory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listAll());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::ChecksumIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openChecksumInput(a0, a1));
            return ::org::apache::lucene::store::t_ChecksumIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openChecksumInput", args);
          return NULL;
        }

        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openInput", args);
          return NULL;
        }

        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockFactory", arg);
          return NULL;
        }

        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sync", arg);
          return NULL;
        }

        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Directory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer::live$ = false;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer::DEFAULT_SIDE = NULL;

          jclass Lucene43EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_6fc4da21] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_init$_9a7df2b7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_3a1c54b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_1623557f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_6fc4da21, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9a7df2b7, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::java::lang::String & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_3a1c54b5, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_1623557f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          void Lucene43EdgeNGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43EdgeNGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43EdgeNGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer), module, "Lucene43EdgeNGramTokenizer", 0);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "Side", make_descriptor(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side)));
          }

          void t_Lucene43EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer::DEFAULT_SIDE)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer::wrap_Object(Lucene43EdgeNGramTokenizer(((t_Lucene43EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkKII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KksII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$InsanityType::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$InsanityType::mids$ = NULL;
        bool FieldCacheSanityChecker$InsanityType::live$ = false;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::EXPECTED = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::SUBREADER = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::VALUEMISMATCH = NULL;

        jclass FieldCacheSanityChecker$InsanityType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$InsanityType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EXPECTED = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "EXPECTED", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            SUBREADER = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "SUBREADER", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            VALUEMISMATCH = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "VALUEMISMATCH", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String FieldCacheSanityChecker$InsanityType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker$InsanityType__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$InsanityType, t_FieldCacheSanityChecker$InsanityType, ::java::lang::Object, FieldCacheSanityChecker$InsanityType, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker$InsanityType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$InsanityType), module, "FieldCacheSanityChecker$InsanityType", 0);
        }

        void t_FieldCacheSanityChecker$InsanityType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$InsanityType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCacheSanityChecker$InsanityType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "EXPECTED", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::EXPECTED)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "SUBREADER", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::SUBREADER)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "VALUEMISMATCH", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::VALUEMISMATCH)));
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$InsanityType::wrap_Object(FieldCacheSanityChecker$InsanityType(((t_FieldCacheSanityChecker$InsanityType *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$InsanityType), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicAppendingLongBuffer::class$ = NULL;
          jmethodID *MonotonicAppendingLongBuffer::mids$ = NULL;
          bool MonotonicAppendingLongBuffer::live$ = false;

          jclass MonotonicAppendingLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicAppendingLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          jlong MonotonicAppendingLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicAppendingLongBuffer_init_(t_MonotonicAppendingLongBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicAppendingLongBuffer_ramBytesUsed(t_MonotonicAppendingLongBuffer *self, PyObject *args);

          static PyMethodDef t_MonotonicAppendingLongBuffer__methods_[] = {
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicAppendingLongBuffer, t_MonotonicAppendingLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, MonotonicAppendingLongBuffer, t_MonotonicAppendingLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_MonotonicAppendingLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicAppendingLongBuffer), module, "MonotonicAppendingLongBuffer", 0);
          }

          void t_MonotonicAppendingLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "class_", make_descriptor(MonotonicAppendingLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_MonotonicAppendingLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicAppendingLongBuffer::initializeClass, 1)))
              return NULL;
            return t_MonotonicAppendingLongBuffer::wrap_Object(MonotonicAppendingLongBuffer(((t_MonotonicAppendingLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_MonotonicAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicAppendingLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicAppendingLongBuffer_init_(t_MonotonicAppendingLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MonotonicAppendingLongBuffer object((jobject) NULL);

                INT_CALL(object = MonotonicAppendingLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                MonotonicAppendingLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = MonotonicAppendingLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                MonotonicAppendingLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = MonotonicAppendingLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicAppendingLongBuffer_ramBytesUsed(t_MonotonicAppendingLongBuffer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicAppendingLongBuffer), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester$BlenderType::class$ = NULL;
            jmethodID *BlendedInfixSuggester$BlenderType::mids$ = NULL;
            bool BlendedInfixSuggester$BlenderType::live$ = false;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::CUSTOM = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_LINEAR = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL = NULL;

            jclass BlendedInfixSuggester$BlenderType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_ff583aba] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");
                mids$[mid_values_c5f82234] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                CUSTOM = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_LINEAR = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_LINEAR", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_RECIPROCAL = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_RECIPROCAL", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester$BlenderType BlendedInfixSuggester$BlenderType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BlendedInfixSuggester$BlenderType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ff583aba], a0.this$));
            }

            JArray< BlendedInfixSuggester$BlenderType > BlendedInfixSuggester$BlenderType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BlendedInfixSuggester$BlenderType >(env->callStaticObjectMethod(cls, mids$[mid_values_c5f82234]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type);
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data);
            static PyGetSetDef t_BlendedInfixSuggester$BlenderType__fields_[] = {
              DECLARE_GET_FIELD(t_BlendedInfixSuggester$BlenderType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BlendedInfixSuggester$BlenderType__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, of_, METH_VARARGS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester$BlenderType, t_BlendedInfixSuggester$BlenderType, ::java::lang::Enum, BlendedInfixSuggester$BlenderType, abstract_init, 0, 0, t_BlendedInfixSuggester$BlenderType__fields_, 0, 0);
            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_Object(const BlendedInfixSuggester$BlenderType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BlendedInfixSuggester$BlenderType::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester$BlenderType), module, "BlendedInfixSuggester$BlenderType", 0);
            }

            void t_BlendedInfixSuggester$BlenderType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "class_", make_descriptor(BlendedInfixSuggester$BlenderType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester$BlenderType::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "CUSTOM", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::CUSTOM)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_LINEAR", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_LINEAR)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_RECIPROCAL", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL)));
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester$BlenderType::wrap_Object(BlendedInfixSuggester$BlenderType(((t_BlendedInfixSuggester$BlenderType *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BlendedInfixSuggester$BlenderType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::valueOf(a0));
                return t_BlendedInfixSuggester$BlenderType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type)
            {
              JArray< BlendedInfixSuggester$BlenderType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::values());
              return JArray<jobject>(result.this$).wrap(t_BlendedInfixSuggester$BlenderType::wrap_jobject);
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene46SegmentInfoReader::mids$ = NULL;
          bool Lucene46SegmentInfoReader::live$ = false;

          jclass Lucene46SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoReader::Lucene46SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene46SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoReader), module, "Lucene46SegmentInfoReader", 0);
          }

          void t_Lucene46SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoReader::wrap_Object(Lucene46SegmentInfoReader(((t_Lucene46SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode::class$ = NULL;
              jmethodID *PathQueryNode::mids$ = NULL;
              bool PathQueryNode::live$ = false;

              jclass PathQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getFirstPathElement_e0adba2f] = env->getMethodID(cls, "getFirstPathElement", "()Ljava/lang/CharSequence;");
                  mids$[mid_getPathElement_989d102c] = env->getMethodID(cls, "getPathElement", "(I)Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getPathElements_87851566] = env->getMethodID(cls, "getPathElements", "()Ljava/util/List;");
                  mids$[mid_getPathElements_cdc2a528] = env->getMethodID(cls, "getPathElements", "(I)Ljava/util/List;");
                  mids$[mid_setPathElements_1fde8fc3] = env->getMethodID(cls, "setPathElements", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode::PathQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PathQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence PathQueryNode::getFirstPathElement() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFirstPathElement_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText PathQueryNode::getPathElement(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_getPathElement_989d102c], a0));
              }

              ::java::util::List PathQueryNode::getPathElements() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_87851566]));
              }

              ::java::util::List PathQueryNode::getPathElements(jint a0) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_cdc2a528], a0));
              }

              void PathQueryNode::setPathElements(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPathElements_1fde8fc3], a0.this$);
              }

              ::java::lang::CharSequence PathQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PathQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self);
              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data);
              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data);
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_PathQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode, firstPathElement),
                DECLARE_GETSET_FIELD(t_PathQueryNode, pathElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, getFirstPathElement, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode, getPathElement, METH_O),
                DECLARE_METHOD(t_PathQueryNode, getPathElements, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, setPathElements, METH_O),
                DECLARE_METHOD(t_PathQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode, t_PathQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PathQueryNode, t_PathQueryNode_init_, 0, 0, t_PathQueryNode__fields_, 0, 0);

              void t_PathQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode), module, "PathQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "QueryText", make_descriptor(&PY_TYPE(PathQueryNode$QueryText)));
              }

              void t_PathQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "class_", make_descriptor(PathQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode::wrap_Object(PathQueryNode(((t_PathQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                PathQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = PathQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getPathElement(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_PathQueryNode$QueryText::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElement", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::List result((jobject) NULL);
                    OBJ_CALL(result = self->object.getPathElements());
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::List result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.getPathElements(a0));
                      return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElements", args);
                return NULL;
              }

              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.setPathElements(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPathElements", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getPathElements());
                return ::java::util::t_List::wrap_Object(value);
              }
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::util::List value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
                  {
                    INT_CALL(self->object.setPathElements(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "pathElements", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CodecUtil::class$ = NULL;
        jmethodID *CodecUtil::mids$ = NULL;
        bool CodecUtil::live$ = false;
        jint CodecUtil::CODEC_MAGIC = (jint) 0;
        jint CodecUtil::FOOTER_MAGIC = (jint) 0;

        jclass CodecUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CodecUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkEOF_0441f0b2] = env->getStaticMethodID(cls, "checkEOF", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_checkFooter_f5e506b9] = env->getStaticMethodID(cls, "checkFooter", "(Lorg/apache/lucene/store/ChecksumIndexInput;)J");
            mids$[mid_checkHeader_128b127c] = env->getStaticMethodID(cls, "checkHeader", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checkHeaderNoMagic_128b127c] = env->getStaticMethodID(cls, "checkHeaderNoMagic", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checksumEntireFile_0441f0ae] = env->getStaticMethodID(cls, "checksumEntireFile", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_footerLength_54c6a179] = env->getStaticMethodID(cls, "footerLength", "()I");
            mids$[mid_headerLength_5fdc3f57] = env->getStaticMethodID(cls, "headerLength", "(Ljava/lang/String;)I");
            mids$[mid_retrieveChecksum_0441f0ae] = env->getStaticMethodID(cls, "retrieveChecksum", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_writeFooter_faad620a] = env->getStaticMethodID(cls, "writeFooter", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_writeHeader_6b5c1111] = env->getStaticMethodID(cls, "writeHeader", "(Lorg/apache/lucene/store/DataOutput;Ljava/lang/String;I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_MAGIC = env->getStaticIntField(cls, "CODEC_MAGIC");
            FOOTER_MAGIC = env->getStaticIntField(cls, "FOOTER_MAGIC");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CodecUtil::checkEOF(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkEOF_0441f0b2], a0.this$);
        }

        jlong CodecUtil::checkFooter(const ::org::apache::lucene::store::ChecksumIndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checkFooter_f5e506b9], a0.this$);
        }

        jint CodecUtil::checkHeader(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeader_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jint CodecUtil::checkHeaderNoMagic(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeaderNoMagic_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jlong CodecUtil::checksumEntireFile(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checksumEntireFile_0441f0ae], a0.this$);
        }

        jint CodecUtil::footerLength()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_footerLength_54c6a179]);
        }

        jint CodecUtil::headerLength(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_headerLength_5fdc3f57], a0.this$);
        }

        jlong CodecUtil::retrieveChecksum(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_retrieveChecksum_0441f0ae], a0.this$);
        }

        void CodecUtil::writeFooter(const ::org::apache::lucene::store::IndexOutput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeFooter_faad620a], a0.this$);
        }

        void CodecUtil::writeHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::java::lang::String & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeHeader_6b5c1111], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type);
        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CodecUtil__methods_[] = {
          DECLARE_METHOD(t_CodecUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkEOF, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeaderNoMagic, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checksumEntireFile, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, footerLength, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, headerLength, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, retrieveChecksum, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeHeader, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CodecUtil, t_CodecUtil, ::java::lang::Object, CodecUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CodecUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CodecUtil), module, "CodecUtil", 0);
        }

        void t_CodecUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "class_", make_descriptor(CodecUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "wrapfn_", make_descriptor(t_CodecUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CodecUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "CODEC_MAGIC", make_descriptor(CodecUtil::CODEC_MAGIC));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "FOOTER_MAGIC", make_descriptor(CodecUtil::FOOTER_MAGIC));
        }

        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CodecUtil::initializeClass, 1)))
            return NULL;
          return t_CodecUtil::wrap_Object(CodecUtil(((t_CodecUtil *) arg)->object.this$));
        }
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CodecUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::checkEOF(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkEOF", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkFooter(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checkFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeader(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeaderNoMagic(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeaderNoMagic", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checksumEntireFile(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checksumEntireFile", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::footerLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::headerLength(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "headerLength", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::retrieveChecksum(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "retrieveChecksum", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeFooter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "ksI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeHeader(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeHeader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery$TooManyClauses::class$ = NULL;
        jmethodID *BooleanQuery$TooManyClauses::mids$ = NULL;
        bool BooleanQuery$TooManyClauses::live$ = false;

        jclass BooleanQuery$TooManyClauses::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery$TooManyClauses");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery$TooManyClauses::BooleanQuery$TooManyClauses() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BooleanQuery$TooManyClauses__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses, ::java::lang::RuntimeException, BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses_init_, 0, 0, 0, 0, 0);

        void t_BooleanQuery$TooManyClauses::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery$TooManyClauses), module, "BooleanQuery$TooManyClauses", 0);
        }

        void t_BooleanQuery$TooManyClauses::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "class_", make_descriptor(BooleanQuery$TooManyClauses::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery$TooManyClauses::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery$TooManyClauses::wrap_Object(BooleanQuery$TooManyClauses(((t_BooleanQuery$TooManyClauses *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds)
        {
          BooleanQuery$TooManyClauses object((jobject) NULL);

          INT_CALL(object = BooleanQuery$TooManyClauses());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker$BreakSuggestionSortMethod::class$ = NULL;
          jmethodID *WordBreakSpellChecker$BreakSuggestionSortMethod::mids$ = NULL;
          bool WordBreakSpellChecker$BreakSuggestionSortMethod::live$ = false;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY = NULL;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY = NULL;

          jclass WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_771dff8d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");
              mids$[mid_values_39c0a317] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NUM_CHANGES_THEN_MAX_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_MAX_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              NUM_CHANGES_THEN_SUMMED_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker$BreakSuggestionSortMethod WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return WordBreakSpellChecker$BreakSuggestionSortMethod(env->callStaticObjectMethod(cls, mids$[mid_valueOf_771dff8d], a0.this$));
          }

          JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > WordBreakSpellChecker$BreakSuggestionSortMethod::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< WordBreakSpellChecker$BreakSuggestionSortMethod >(env->callStaticObjectMethod(cls, mids$[mid_values_39c0a317]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data);
          static PyGetSetDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_[] = {
            DECLARE_GET_FIELD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod, t_WordBreakSpellChecker$BreakSuggestionSortMethod, ::java::lang::Enum, WordBreakSpellChecker$BreakSuggestionSortMethod, abstract_init, 0, 0, t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_, 0, 0);
          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(const WordBreakSpellChecker$BreakSuggestionSortMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), module, "WordBreakSpellChecker$BreakSuggestionSortMethod", 0);
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "class_", make_descriptor(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_MAX_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY)));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY)));
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(WordBreakSpellChecker$BreakSuggestionSortMethod(((t_WordBreakSpellChecker$BreakSuggestionSortMethod *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            WordBreakSpellChecker$BreakSuggestionSortMethod result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(a0));
              return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type)
          {
            JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::values());
            return JArray<jobject>(result.this$).wrap(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject);
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager$RefreshListener::class$ = NULL;
        jmethodID *ReferenceManager$RefreshListener::mids$ = NULL;
        bool ReferenceManager$RefreshListener::live$ = false;

        jclass ReferenceManager$RefreshListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager$RefreshListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ReferenceManager$RefreshListener::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void ReferenceManager$RefreshListener::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args);
        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self);
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data);
        static PyGetSetDef t_ReferenceManager$RefreshListener__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager$RefreshListener, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager$RefreshListener__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, afterRefresh, METH_O),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, beforeRefresh, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager$RefreshListener, t_ReferenceManager$RefreshListener, ::java::lang::Object, ReferenceManager$RefreshListener, abstract_init, 0, 0, t_ReferenceManager$RefreshListener__fields_, 0, 0);
        PyObject *t_ReferenceManager$RefreshListener::wrap_Object(const ReferenceManager$RefreshListener& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager$RefreshListener::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager$RefreshListener::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager$RefreshListener), module, "ReferenceManager$RefreshListener", 0);
        }

        void t_ReferenceManager$RefreshListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "class_", make_descriptor(ReferenceManager$RefreshListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager$RefreshListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager$RefreshListener::wrap_Object(ReferenceManager$RefreshListener(((t_ReferenceManager$RefreshListener *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleBoolFunction::class$ = NULL;
            jmethodID *SimpleBoolFunction::mids$ = NULL;
            bool SimpleBoolFunction::live$ = false;

            jclass SimpleBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_2223df3d] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleBoolFunction::SimpleBoolFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SimpleBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SimpleBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SimpleBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues SimpleBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint SimpleBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args);

            static PyMethodDef t_SimpleBoolFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleBoolFunction, t_SimpleBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, SimpleBoolFunction, t_SimpleBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleBoolFunction), module, "SimpleBoolFunction", 0);
            }

            void t_SimpleBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "class_", make_descriptor(SimpleBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleBoolFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleBoolFunction::wrap_Object(SimpleBoolFunction(((t_SimpleBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OpaqueQueryNode::class$ = NULL;
              jmethodID *OpaqueQueryNode::mids$ = NULL;
              bool OpaqueQueryNode::live$ = false;

              jclass OpaqueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_db1d05ae] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getSchema_e0adba2f] = env->getMethodID(cls, "getSchema", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpaqueQueryNode::OpaqueQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_db1d05ae, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode OpaqueQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getSchema() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getSchema_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OpaqueQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data);
              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data);
              static PyGetSetDef t_OpaqueQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_OpaqueQueryNode, schema),
                DECLARE_GET_FIELD(t_OpaqueQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_OpaqueQueryNode__methods_[] = {
                DECLARE_METHOD(t_OpaqueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getSchema, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpaqueQueryNode, t_OpaqueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, OpaqueQueryNode, t_OpaqueQueryNode_init_, 0, 0, t_OpaqueQueryNode__fields_, 0, 0);

              void t_OpaqueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OpaqueQueryNode), module, "OpaqueQueryNode", 0);
              }

              void t_OpaqueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "class_", make_descriptor(OpaqueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OpaqueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpaqueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OpaqueQueryNode::wrap_Object(OpaqueQueryNode(((t_OpaqueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpaqueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                OpaqueQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = OpaqueQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyAnalyzer.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyAnalyzer::class$ = NULL;
        jmethodID *CollationKeyAnalyzer::mids$ = NULL;
        bool CollationKeyAnalyzer::live$ = false;

        jclass CollationKeyAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_09eedbb5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/text/Collator;)V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_09eedbb5, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollationKeyAnalyzer__methods_[] = {
          DECLARE_METHOD(t_CollationKeyAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyAnalyzer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyAnalyzer, t_CollationKeyAnalyzer, ::org::apache::lucene::analysis::Analyzer, CollationKeyAnalyzer, t_CollationKeyAnalyzer_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyAnalyzer), module, "CollationKeyAnalyzer", 0);
        }

        void t_CollationKeyAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "class_", make_descriptor(CollationKeyAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyAnalyzer::initializeClass, 1)))
            return NULL;
          return t_CollationKeyAnalyzer::wrap_Object(CollationKeyAnalyzer(((t_CollationKeyAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::Version a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::text::Collator a1((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::text::Collator::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *WildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *WildcardQueryNodeBuilder::mids$ = NULL;
              bool WildcardQueryNodeBuilder::live$ = false;

              jclass WildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_143b8b5f] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/WildcardQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeBuilder::WildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::WildcardQuery WildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::WildcardQuery(env->callObjectMethod(this$, mids$[mid_build_143b8b5f], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_WildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder, ::java::lang::Object, WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeBuilder), module, "WildcardQueryNodeBuilder", 0);
              }

              void t_WildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(WildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeBuilder::wrap_Object(WildcardQueryNodeBuilder(((t_WildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::WildcardQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_WildcardQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$CollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$CollectionModel::mids$ = NULL;
          bool LMSimilarity$CollectionModel::live$ = false;

          jclass LMSimilarity$CollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$CollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat LMSimilarity$CollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$CollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self);
          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$CollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$CollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$CollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$CollectionModel, t_LMSimilarity$CollectionModel, ::java::lang::Object, LMSimilarity$CollectionModel, abstract_init, 0, 0, t_LMSimilarity$CollectionModel__fields_, 0, 0);

          void t_LMSimilarity$CollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$CollectionModel), module, "LMSimilarity$CollectionModel", 0);
          }

          void t_LMSimilarity$CollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$CollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$CollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$CollectionModel::wrap_Object(LMSimilarity$CollectionModel(((t_LMSimilarity$CollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *TFIDFSimilarity::class$ = NULL;
          jmethodID *TFIDFSimilarity::mids$ = NULL;
          bool TFIDFSimilarity::live$ = false;

          jclass TFIDFSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/TFIDFSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TFIDFSimilarity::TFIDFSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong TFIDFSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight TFIDFSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat TFIDFSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat TFIDFSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong TFIDFSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jfloat TFIDFSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat TFIDFSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat TFIDFSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer TFIDFSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat TFIDFSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg);

          static PyMethodDef t_TFIDFSimilarity__methods_[] = {
            DECLARE_METHOD(t_TFIDFSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, decodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, encodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, lengthNorm, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, sloppyFreq, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, tf, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TFIDFSimilarity, t_TFIDFSimilarity, ::org::apache::lucene::search::similarities::Similarity, TFIDFSimilarity, t_TFIDFSimilarity_init_, 0, 0, 0, 0, 0);

          void t_TFIDFSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(TFIDFSimilarity), module, "TFIDFSimilarity", 0);
          }

          void t_TFIDFSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "class_", make_descriptor(TFIDFSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "wrapfn_", make_descriptor(t_TFIDFSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TFIDFSimilarity::initializeClass, 1)))
              return NULL;
            return t_TFIDFSimilarity::wrap_Object(TFIDFSimilarity(((t_TFIDFSimilarity *) arg)->object.this$));
          }
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TFIDFSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds)
          {
            TFIDFSimilarity object((jobject) NULL);

            INT_CALL(object = TFIDFSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jlong a0;
            jfloat result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jlong result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "idf", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lengthNorm", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "scorePayload", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "sloppyFreq", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacets::class$ = NULL;
          jmethodID *TaxonomyFacets::mids$ = NULL;
          bool TaxonomyFacets::live$ = false;

          jclass TaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_verifyDim_7d95dc61] = env->getMethodID(cls, "verifyDim", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List TaxonomyFacets::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, getAllDims, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacets, t_TaxonomyFacets, ::org::apache::lucene::facet::Facets, TaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacets), module, "TaxonomyFacets", 0);
          }

          void t_TaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "class_", make_descriptor(TaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacets::wrap_Object(TaxonomyFacets(((t_TaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(TaxonomyFacets), (PyObject *) self, "getAllDims", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilterFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/Reader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilterFactory::class$ = NULL;
          jmethodID *PersianCharFilterFactory::mids$ = NULL;
          bool PersianCharFilterFactory::live$ = false;

          jclass PersianCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilterFactory::PersianCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PersianCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args);
          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self);
          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data);
          static PyGetSetDef t_PersianCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilterFactory, t_PersianCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PersianCharFilterFactory, t_PersianCharFilterFactory_init_, 0, 0, t_PersianCharFilterFactory__fields_, 0, 0);

          void t_PersianCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilterFactory), module, "PersianCharFilterFactory", 0);
          }

          void t_PersianCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "class_", make_descriptor(PersianCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilterFactory::wrap_Object(PersianCharFilterFactory(((t_PersianCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/UTF32ToUTF8.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *UTF32ToUTF8::class$ = NULL;
          jmethodID *UTF32ToUTF8::mids$ = NULL;
          bool UTF32ToUTF8::live$ = false;

          jclass UTF32ToUTF8::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/UTF32ToUTF8");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_convert_7aca8e1f] = env->getMethodID(cls, "convert", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UTF32ToUTF8::UTF32ToUTF8() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::automaton::Automaton UTF32ToUTF8::convert(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_convert_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg);

          static PyMethodDef t_UTF32ToUTF8__methods_[] = {
            DECLARE_METHOD(t_UTF32ToUTF8, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, convert, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UTF32ToUTF8, t_UTF32ToUTF8, ::java::lang::Object, UTF32ToUTF8, t_UTF32ToUTF8_init_, 0, 0, 0, 0, 0);

          void t_UTF32ToUTF8::install(PyObject *module)
          {
            installType(&PY_TYPE(UTF32ToUTF8), module, "UTF32ToUTF8", 0);
          }

          void t_UTF32ToUTF8::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "class_", make_descriptor(UTF32ToUTF8::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "wrapfn_", make_descriptor(t_UTF32ToUTF8::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UTF32ToUTF8::initializeClass, 1)))
              return NULL;
            return t_UTF32ToUTF8::wrap_Object(UTF32ToUTF8(((t_UTF32ToUTF8 *) arg)->object.this$));
          }
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UTF32ToUTF8::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds)
          {
            UTF32ToUTF8 object((jobject) NULL);

            INT_CALL(object = UTF32ToUTF8());
            self->object = object;

            return 0;
          }

          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.convert(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "convert", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilterFactory::class$ = NULL;
          jmethodID *ClassicFilterFactory::mids$ = NULL;
          bool ClassicFilterFactory::live$ = false;

          jclass ClassicFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilterFactory::ClassicFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter ClassicFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args);

          static PyMethodDef t_ClassicFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilterFactory, t_ClassicFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ClassicFilterFactory, t_ClassicFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilterFactory), module, "ClassicFilterFactory", 0);
          }

          void t_ClassicFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "class_", make_descriptor(ClassicFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicFilterFactory::wrap_Object(ClassicFilterFactory(((t_ClassicFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Parser::class$ = NULL;
          jmethodID *SynonymMap$Parser::mids$ = NULL;
          bool SynonymMap$Parser::live$ = false;

          jclass SynonymMap$Parser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Parser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8ce78b37] = env->getMethodID(cls, "<init>", "(ZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_analyze_f51a472d] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Parser::SynonymMap$Parser(jboolean a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::analysis::synonym::SynonymMap$Builder(env->newObject(initializeClass, &mids$, mid_init$_8ce78b37, a0, a1.this$)) {}

          ::org::apache::lucene::util::CharsRef SynonymMap$Parser::analyze(const ::java::lang::String & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_analyze_f51a472d], a0.this$, a1.this$));
          }

          void SynonymMap$Parser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args);
          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg);

          static PyMethodDef t_SynonymMap$Parser__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Parser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, analyze, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Parser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Parser, t_SynonymMap$Parser, ::org::apache::lucene::analysis::synonym::SynonymMap$Builder, SynonymMap$Parser, t_SynonymMap$Parser_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Parser::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Parser), module, "SynonymMap$Parser", 0);
          }

          void t_SynonymMap$Parser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "class_", make_descriptor(SynonymMap$Parser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Parser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Parser::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Parser::wrap_Object(SynonymMap$Parser(((t_SynonymMap$Parser *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Parser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            SynonymMap$Parser object((jobject) NULL);

            if (!parseArgs(args, "Zk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SynonymMap$Parser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.analyze(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "analyze", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *FilterClause::class$ = NULL;
        jmethodID *FilterClause::mids$ = NULL;
        bool FilterClause::live$ = false;

        jclass FilterClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/FilterClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7373f548] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterClause::FilterClause(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7373f548, a0.this$, a1.this$)) {}

        jboolean FilterClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilterClause::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::BooleanClause$Occur FilterClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        jint FilterClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FilterClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_getFilter(t_FilterClause *self);
        static PyObject *t_FilterClause_getOccur(t_FilterClause *self);
        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data);
        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data);
        static PyGetSetDef t_FilterClause__fields_[] = {
          DECLARE_GET_FIELD(t_FilterClause, filter),
          DECLARE_GET_FIELD(t_FilterClause, occur),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterClause__methods_[] = {
          DECLARE_METHOD(t_FilterClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterClause, t_FilterClause, ::java::lang::Object, FilterClause, t_FilterClause_init_, 0, 0, t_FilterClause__fields_, 0, 0);

        void t_FilterClause::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterClause), module, "FilterClause", 0);
        }

        void t_FilterClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "class_", make_descriptor(FilterClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "wrapfn_", make_descriptor(t_FilterClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterClause::initializeClass, 1)))
            return NULL;
          return t_FilterClause::wrap_Object(FilterClause(((t_FilterClause *) arg)->object.this$));
        }
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          FilterClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = FilterClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilterClause_getFilter(t_FilterClause *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilterClause_getOccur(t_FilterClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$ReaderClosedListener::class$ = NULL;
        jmethodID *IndexReader$ReaderClosedListener::mids$ = NULL;
        bool IndexReader$ReaderClosedListener::live$ = false;

        jclass IndexReader$ReaderClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$ReaderClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_7d7eaea9] = env->getMethodID(cls, "onClose", "(Lorg/apache/lucene/index/IndexReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader$ReaderClosedListener::onClose(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_7d7eaea9], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg);

        static PyMethodDef t_IndexReader$ReaderClosedListener__methods_[] = {
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader$ReaderClosedListener, t_IndexReader$ReaderClosedListener, ::java::lang::Object, IndexReader$ReaderClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexReader$ReaderClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$ReaderClosedListener), module, "IndexReader$ReaderClosedListener", 0);
        }

        void t_IndexReader$ReaderClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "class_", make_descriptor(IndexReader$ReaderClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "wrapfn_", make_descriptor(t_IndexReader$ReaderClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 1)))
            return NULL;
          return t_IndexReader$ReaderClosedListener::wrap_Object(IndexReader$ReaderClosedListener(((t_IndexReader$ReaderClosedListener *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *JaroWinklerDistance::class$ = NULL;
          jmethodID *JaroWinklerDistance::mids$ = NULL;
          bool JaroWinklerDistance::live$ = false;

          jclass JaroWinklerDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/JaroWinklerDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_getThreshold_54c6a176] = env->getMethodID(cls, "getThreshold", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setThreshold_06298cab] = env->getMethodID(cls, "setThreshold", "(F)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JaroWinklerDistance::JaroWinklerDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean JaroWinklerDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat JaroWinklerDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jfloat JaroWinklerDistance::getThreshold() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThreshold_54c6a176]);
          }

          jint JaroWinklerDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void JaroWinklerDistance::setThreshold(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThreshold_06298cab], a0);
          }

          ::java::lang::String JaroWinklerDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self);
          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data);
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data);
          static PyGetSetDef t_JaroWinklerDistance__fields_[] = {
            DECLARE_GETSET_FIELD(t_JaroWinklerDistance, threshold),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JaroWinklerDistance__methods_[] = {
            DECLARE_METHOD(t_JaroWinklerDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getThreshold, METH_NOARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, setThreshold, METH_O),
            DECLARE_METHOD(t_JaroWinklerDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JaroWinklerDistance, t_JaroWinklerDistance, ::java::lang::Object, JaroWinklerDistance, t_JaroWinklerDistance_init_, 0, 0, t_JaroWinklerDistance__fields_, 0, 0);

          void t_JaroWinklerDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(JaroWinklerDistance), module, "JaroWinklerDistance", 0);
          }

          void t_JaroWinklerDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "class_", make_descriptor(JaroWinklerDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "wrapfn_", make_descriptor(t_JaroWinklerDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JaroWinklerDistance::initializeClass, 1)))
              return NULL;
            return t_JaroWinklerDistance::wrap_Object(JaroWinklerDistance(((t_JaroWinklerDistance *) arg)->object.this$));
          }
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JaroWinklerDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds)
          {
            JaroWinklerDistance object((jobject) NULL);

            INT_CALL(object = JaroWinklerDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThreshold());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThreshold(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThreshold", arg);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThreshold());
            return PyFloat_FromDouble((double) value);
          }
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThreshold(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "threshold", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways::class$ = NULL;
        jmethodID *DrillSideways::mids$ = NULL;
        bool DrillSideways::live$ = false;

        jclass DrillSideways::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47a6ec5e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_init$_f1ca4e8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)V");
            mids$[mid_init$_0ea4c17f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_search_f5942c04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_37cfd26e] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_32a5c782] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_8da44ba0] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_scoreSubDocsAtOnce_54c6a16a] = env->getMethodID(cls, "scoreSubDocsAtOnce", "()Z");
            mids$[mid_buildFacetsResult_3bbe989f] = env->getMethodID(cls, "buildFacetsResult", "(Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/FacetsCollector;[Ljava/lang/String;)Lorg/apache/lucene/facet/Facets;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47a6ec5e, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1ca4e8d, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ea4c17f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_f5942c04], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, jint a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_37cfd26e], a0.this$, a1));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::facet::DrillDownQuery & a1, jint a2) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_32a5c782], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_8da44ba0], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args);

        static PyMethodDef t_DrillSideways__methods_[] = {
          DECLARE_METHOD(t_DrillSideways, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, search, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways, t_DrillSideways, ::java::lang::Object, DrillSideways, t_DrillSideways_init_, 0, 0, 0, 0, 0);

        void t_DrillSideways::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways), module, "DrillSideways", 0);
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "DrillSidewaysResult", make_descriptor(&PY_TYPE(DrillSideways$DrillSidewaysResult)));
        }

        void t_DrillSideways::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "class_", make_descriptor(DrillSideways::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways::initializeClass, 1)))
            return NULL;
          return t_DrillSideways::wrap_Object(DrillSideways(((t_DrillSideways *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a3((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::facet::DrillDownQuery a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase::class$ = NULL;
          jmethodID *QueryParserBase::mids$ = NULL;
          bool QueryParserBase::live$ = false;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::AND_OPERATOR = NULL;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::OR_OPERATOR = NULL;

          jclass QueryParserBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
              mids$[mid_getAnalyzeRangeTerms_54c6a16a] = env->getMethodID(cls, "getAnalyzeRangeTerms", "()Z");
              mids$[mid_getAutoGeneratePhraseQueries_54c6a16a] = env->getMethodID(cls, "getAutoGeneratePhraseQueries", "()Z");
              mids$[mid_getDateResolution_65edc44f] = env->getMethodID(cls, "getDateResolution", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
              mids$[mid_getDefaultOperator_cb1232dd] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
              mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
              mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
              mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
              mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
              mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
              mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
              mids$[mid_init_504c192d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
              mids$[mid_setAnalyzeRangeTerms_bb0c767f] = env->getMethodID(cls, "setAnalyzeRangeTerms", "(Z)V");
              mids$[mid_setAutoGeneratePhraseQueries_bb0c767f] = env->getMethodID(cls, "setAutoGeneratePhraseQueries", "(Z)V");
              mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDateResolution_04dea022] = env->getMethodID(cls, "setDateResolution", "(Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDefaultOperator_67ef4614] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;)V");
              mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
              mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
              mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
              mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
              mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
              mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
              mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_addClause_fea8e09e] = env->getMethodID(cls, "addClause", "(Ljava/util/List;IILorg/apache/lucene/search/Query;)V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getBooleanQuery_bdd36d85] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFieldQuery_1840ef4b] = env->getMethodID(cls, "newFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_newBooleanClause_e4ef4efe] = env->getMethodID(cls, "newBooleanClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/BooleanClause;");
              mids$[mid_newPrefixQuery_c8bbbdc7] = env->getMethodID(cls, "newPrefixQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRegexpQuery_c8bbbdc7] = env->getMethodID(cls, "newRegexpQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_6ce03264] = env->getMethodID(cls, "newFuzzyQuery", "(Lorg/apache/lucene/index/Term;FI)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeMultitermTerm_e6160577] = env->getMethodID(cls, "analyzeMultitermTerm", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_newMatchAllDocsQuery_97e3851a] = env->getMethodID(cls, "newMatchAllDocsQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_newWildcardQuery_c8bbbdc7] = env->getMethodID(cls, "newWildcardQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "AND_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "OR_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void QueryParserBase::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          ::java::lang::String QueryParserBase::escape(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
          }

          jboolean QueryParserBase::getAllowLeadingWildcard() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
          }

          jboolean QueryParserBase::getAnalyzeRangeTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAnalyzeRangeTerms_54c6a16a]);
          }

          jboolean QueryParserBase::getAutoGeneratePhraseQueries() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAutoGeneratePhraseQueries_54c6a16a]);
          }

          ::org::apache::lucene::document::DateTools$Resolution QueryParserBase::getDateResolution(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_65edc44f], a0.this$));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser$Operator QueryParserBase::getDefaultOperator() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_cb1232dd]));
          }

          ::java::lang::String QueryParserBase::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jfloat QueryParserBase::getFuzzyMinSim() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
          }

          jint QueryParserBase::getFuzzyPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
          }

          ::java::util::Locale QueryParserBase::getLocale() const
          {
            return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
          }

          jboolean QueryParserBase::getLowercaseExpandedTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
          }

          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod QueryParserBase::getMultiTermRewriteMethod() const
          {
            return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
          }

          jint QueryParserBase::getPhraseSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
          }

          ::java::util::TimeZone QueryParserBase::getTimeZone() const
          {
            return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
          }

          void QueryParserBase::init(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_init_504c192d], a0.this$, a1.this$, a2.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void QueryParserBase::setAllowLeadingWildcard(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
          }

          void QueryParserBase::setAnalyzeRangeTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzeRangeTerms_bb0c767f], a0);
          }

          void QueryParserBase::setAutoGeneratePhraseQueries(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAutoGeneratePhraseQueries_bb0c767f], a0);
          }

          void QueryParserBase::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
          }

          void QueryParserBase::setDateResolution(const ::java::lang::String & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_04dea022], a0.this$, a1.this$);
          }

          void QueryParserBase::setDefaultOperator(const ::org::apache::lucene::queryparser::classic::QueryParser$Operator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_67ef4614], a0.this$);
          }

          void QueryParserBase::setFuzzyMinSim(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
          }

          void QueryParserBase::setFuzzyPrefixLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
          }

          void QueryParserBase::setLocale(const ::java::util::Locale & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
          }

          void QueryParserBase::setLowercaseExpandedTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
          }

          void QueryParserBase::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
          }

          void QueryParserBase::setPhraseSlop(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
          }

          void QueryParserBase::setTimeZone(const ::java::util::TimeZone & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data);
          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryParserBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParserBase, allowLeadingWildcard),
            DECLARE_GETSET_FIELD(t_QueryParserBase, analyzeRangeTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, autoGeneratePhraseQueries),
            DECLARE_SET_FIELD(t_QueryParserBase, dateResolution),
            DECLARE_GETSET_FIELD(t_QueryParserBase, defaultOperator),
            DECLARE_GET_FIELD(t_QueryParserBase, field),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyMinSim),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyPrefixLength),
            DECLARE_GETSET_FIELD(t_QueryParserBase, locale),
            DECLARE_GETSET_FIELD(t_QueryParserBase, lowercaseExpandedTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, multiTermRewriteMethod),
            DECLARE_GETSET_FIELD(t_QueryParserBase, phraseSlop),
            DECLARE_GETSET_FIELD(t_QueryParserBase, timeZone),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserBase__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, ReInit, METH_O),
            DECLARE_METHOD(t_QueryParserBase, TopLevelQuery, METH_O),
            DECLARE_METHOD(t_QueryParserBase, escape, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, getAllowLeadingWildcard, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAnalyzeRangeTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAutoGeneratePhraseQueries, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getDateResolution, METH_O),
            DECLARE_METHOD(t_QueryParserBase, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getField, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyMinSim, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLocale, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLowercaseExpandedTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getMultiTermRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getPhraseSlop, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getTimeZone, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, init, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, parse, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAllowLeadingWildcard, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAnalyzeRangeTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAutoGeneratePhraseQueries, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setDateResolution, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, setDefaultOperator, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyMinSim, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyPrefixLength, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLocale, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLowercaseExpandedTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setMultiTermRewriteMethod, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setPhraseSlop, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setTimeZone, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase, t_QueryParserBase, ::org::apache::lucene::util::QueryBuilder, QueryParserBase, abstract_init, 0, 0, t_QueryParserBase__fields_, 0, 0);

          void t_QueryParserBase::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase), module, "QueryParserBase", 0);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "MethodRemovedUseAnother", make_descriptor(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother)));
          }

          void t_QueryParserBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "class_", make_descriptor(QueryParserBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "AND_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::AND_OPERATOR)));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "OR_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::OR_OPERATOR)));
          }

          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase::wrap_Object(QueryParserBase(((t_QueryParserBase *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.ReInit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParserBase::escape(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "escape", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDateResolution(a0));
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDateResolution", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self)
          {
            ::java::util::Locale result((jobject) NULL);
            OBJ_CALL(result = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self)
          {
            ::java::util::TimeZone result((jobject) NULL);
            OBJ_CALL(result = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              OBJ_CALL(self->object.init(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAnalyzeRangeTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzeRangeTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAutoGeneratePhraseQueries(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAutoGeneratePhraseQueries", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "sK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setFuzzyMinSim(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::Locale a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setLocale(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseSlop(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::TimeZone a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTimeZone(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowLeadingWildcard(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAnalyzeRangeTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzeRangeTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAutoGeneratePhraseQueries(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "autoGeneratePhraseQueries", arg);
            return -1;
          }

          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
              {
                INT_CALL(self->object.setDateResolution(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(value);
          }
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) value);
          }
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setFuzzyMinSim(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFuzzyPrefixLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data)
          {
            ::java::util::Locale value((jobject) NULL);
            OBJ_CALL(value = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(value);
          }
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Locale value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
              {
                INT_CALL(self->object.setLocale(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "locale", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowercaseExpandedTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
          }
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setMultiTermRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseSlop());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseSlop(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data)
          {
            ::java::util::TimeZone value((jobject) NULL);
            OBJ_CALL(value = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(value);
          }
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::TimeZone value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
              {
                INT_CALL(self->object.setTimeZone(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader::class$ = NULL;
        jmethodID *FilterAtomicReader::mids$ = NULL;
        bool FilterAtomicReader::live$ = false;

        jclass FilterAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9e29579] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unwrap_3b1ad795] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader::FilterAtomicReader(const ::org::apache::lucene::index::AtomicReader & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_c9e29579, a0.this$)) {}

        void FilterAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void FilterAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FilterAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues FilterAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos FilterAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FilterAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues FilterAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues FilterAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint FilterAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint FilterAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void FilterAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String FilterAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader FilterAtomicReader::unwrap(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data);
        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data);
        static PyGetSetDef t_FilterAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_FilterAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader, t_FilterAtomicReader, ::org::apache::lucene::index::AtomicReader, FilterAtomicReader, t_FilterAtomicReader_init_, 0, 0, t_FilterAtomicReader__fields_, 0, 0);

        void t_FilterAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader), module, "FilterAtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsAndPositionsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTermsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTermsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTerms", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTerms)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterFields", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterFields)));
        }

        void t_FilterAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "class_", make_descriptor(FilterAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader::wrap_Object(FilterAtomicReader(((t_FilterAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          FilterAtomicReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterAtomicReader::unwrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Header::class$ = NULL;
          jmethodID *PackedInts$Header::mids$ = NULL;
          bool PackedInts$Header::live$ = false;

          jclass PackedInts$Header::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Header");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a0813c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;III)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Header::PackedInts$Header(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46a0813c, a0.this$, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PackedInts$Header__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Header, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Header, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Header, t_PackedInts$Header, ::java::lang::Object, PackedInts$Header, t_PackedInts$Header_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Header::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Header), module, "PackedInts$Header", 0);
          }

          void t_PackedInts$Header::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "class_", make_descriptor(PackedInts$Header::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Header::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Header::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Header::wrap_Object(PackedInts$Header(((t_PackedInts$Header *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Header::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            jint a3;
            PackedInts$Header object((jobject) NULL);

            if (!parseArgs(args, "KIII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = PackedInts$Header(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Throwable.h"
#include "java/io/File.h"
#include "java/io/Reader.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils::class$ = NULL;
        jmethodID *IOUtils::mids$ = NULL;
        bool IOUtils::live$ = false;
        ::java::lang::String *IOUtils::UTF_8 = NULL;

        jclass IOUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_d1cac205] = env->getStaticMethodID(cls, "close", "(Ljava/lang/Iterable;)V");
            mids$[mid_close_ddf1c8f2] = env->getStaticMethodID(cls, "close", "([Ljava/io/Closeable;)V");
            mids$[mid_closeWhileHandlingException_d1cac205] = env->getStaticMethodID(cls, "closeWhileHandlingException", "(Ljava/lang/Iterable;)V");
            mids$[mid_closeWhileHandlingException_ddf1c8f2] = env->getStaticMethodID(cls, "closeWhileHandlingException", "([Ljava/io/Closeable;)V");
            mids$[mid_copy_ffd62126] = env->getStaticMethodID(cls, "copy", "(Ljava/io/File;Ljava/io/File;)V");
            mids$[mid_deleteFilesIgnoringExceptions_d7029dd8] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Lorg/apache/lucene/store/Directory;[Ljava/lang/String;)V");
            mids$[mid_fsync_9e00f624] = env->getStaticMethodID(cls, "fsync", "(Ljava/io/File;Z)V");
            mids$[mid_reThrow_c5ec8ca4] = env->getStaticMethodID(cls, "reThrow", "(Ljava/lang/Throwable;)V");
            mids$[mid_reThrowUnchecked_c5ec8ca4] = env->getStaticMethodID(cls, "reThrowUnchecked", "(Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            UTF_8 = new ::java::lang::String(env->getStaticObjectField(cls, "UTF_8", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IOUtils::close(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_d1cac205], a0.this$);
        }

        void IOUtils::close(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_ddf1c8f2], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_d1cac205], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_ddf1c8f2], a0.this$);
        }

        void IOUtils::copy(const ::java::io::File & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_copy_ffd62126], a0.this$, a1.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::org::apache::lucene::store::Directory & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_d7029dd8], a0.this$, a1.this$);
        }

        void IOUtils::fsync(const ::java::io::File & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_fsync_9e00f624], a0.this$, a1);
        }

        void IOUtils::reThrow(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrow_c5ec8ca4], a0.this$);
        }

        void IOUtils::reThrowUnchecked(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrowUnchecked_c5ec8ca4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IOUtils__methods_[] = {
          DECLARE_METHOD(t_IOUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, close, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, closeWhileHandlingException, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, copy, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFilesIgnoringExceptions, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, fsync, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrow, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrowUnchecked, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOUtils, t_IOUtils, ::java::lang::Object, IOUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_IOUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils), module, "IOUtils", 0);
        }

        void t_IOUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "class_", make_descriptor(IOUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "wrapfn_", make_descriptor(t_IOUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "UTF_8", make_descriptor(j2p(*IOUtils::UTF_8)));
        }

        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils::initializeClass, 1)))
            return NULL;
          return t_IOUtils::wrap_Object(IOUtils(((t_IOUtils *) arg)->object.this$));
        }
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "close", args);
          return NULL;
        }

        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "closeWhileHandlingException", args);
          return NULL;
        }

        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "copy", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);

          if (!parseArgs(args, "k[s", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "deleteFilesIgnoringExceptions", args);
          return NULL;
        }

        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::fsync(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "fsync", args);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrow", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrowUnchecked(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrowUnchecked", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$arguments_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$arguments_return::class$ = NULL;
          jmethodID *JavascriptParser$arguments_return::mids$ = NULL;
          bool JavascriptParser$arguments_return::live$ = false;

          jclass JavascriptParser$arguments_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$arguments_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$arguments_return::JavascriptParser$arguments_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$arguments_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$arguments_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$arguments_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$arguments_return, t_JavascriptParser$arguments_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$arguments_return, t_JavascriptParser$arguments_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$arguments_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$arguments_return), module, "JavascriptParser$arguments_return", 0);
          }

          void t_JavascriptParser$arguments_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "class_", make_descriptor(JavascriptParser$arguments_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$arguments_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$arguments_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$arguments_return::wrap_Object(JavascriptParser$arguments_return(((t_JavascriptParser$arguments_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$arguments_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$arguments_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$arguments_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Sorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Sorter::class$ = NULL;
        jmethodID *Sorter::mids$ = NULL;
        bool Sorter::live$ = false;

        jclass Sorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Sorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_swap_d8d154a6] = env->getMethodID(cls, "swap", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Sorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args);

        static PyMethodDef t_Sorter__methods_[] = {
          DECLARE_METHOD(t_Sorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sorter, t_Sorter, ::java::lang::Object, Sorter, abstract_init, 0, 0, 0, 0, 0);

        void t_Sorter::install(PyObject *module)
        {
          installType(&PY_TYPE(Sorter), module, "Sorter", 0);
        }

        void t_Sorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "class_", make_descriptor(Sorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "wrapfn_", make_descriptor(t_Sorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sorter::initializeClass, 1)))
            return NULL;
          return t_Sorter::wrap_Object(Sorter(((t_Sorter *) arg)->object.this$));
        }
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$RewriteMethod::class$ = NULL;
        jmethodID *MultiTermQuery$RewriteMethod::mids$ = NULL;
        bool MultiTermQuery$RewriteMethod::live$ = false;

        jclass MultiTermQuery$RewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$RewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getTermsEnum_432efaeb] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/search/MultiTermQuery;Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$RewriteMethod::MultiTermQuery$RewriteMethod() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query MultiTermQuery$RewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args);

        static PyMethodDef t_MultiTermQuery$RewriteMethod__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod, ::java::lang::Object, MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_MultiTermQuery$RewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$RewriteMethod), module, "MultiTermQuery$RewriteMethod", 0);
        }

        void t_MultiTermQuery$RewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "class_", make_descriptor(MultiTermQuery$RewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$RewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$RewriteMethod::wrap_Object(MultiTermQuery$RewriteMethod(((t_MultiTermQuery$RewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$RewriteMethod object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$RewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DuplicateFilterBuilder::class$ = NULL;
            jmethodID *DuplicateFilterBuilder::mids$ = NULL;
            bool DuplicateFilterBuilder::live$ = false;

            jclass DuplicateFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DuplicateFilterBuilder::DuplicateFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DuplicateFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_DuplicateFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DuplicateFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DuplicateFilterBuilder, t_DuplicateFilterBuilder, ::java::lang::Object, DuplicateFilterBuilder, t_DuplicateFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_DuplicateFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DuplicateFilterBuilder), module, "DuplicateFilterBuilder", 0);
            }

            void t_DuplicateFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "class_", make_descriptor(DuplicateFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DuplicateFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_DuplicateFilterBuilder::wrap_Object(DuplicateFilterBuilder(((t_DuplicateFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DuplicateFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              DuplicateFilterBuilder object((jobject) NULL);

              INT_CALL(object = DuplicateFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoEncoder::class$ = NULL;
          jmethodID *EliasFanoEncoder::mids$ = NULL;
          bool EliasFanoEncoder::live$ = false;
          jlong EliasFanoEncoder::DEFAULT_INDEX_INTERVAL = (jlong) 0;

          jclass EliasFanoEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7e12ca4] = env->getMethodID(cls, "<init>", "(JJ)V");
              mids$[mid_init$_16913989] = env->getMethodID(cls, "<init>", "(JJJ)V");
              mids$[mid_encodeNext_0ee6df2f] = env->getMethodID(cls, "encodeNext", "(J)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDecoder_38e2d30d] = env->getMethodID(cls, "getDecoder", "()Lorg/apache/lucene/util/packed/EliasFanoDecoder;");
              mids$[mid_getIndexBits_dab10e76] = env->getMethodID(cls, "getIndexBits", "()[J");
              mids$[mid_getLowerBits_dab10e76] = env->getMethodID(cls, "getLowerBits", "()[J");
              mids$[mid_getUpperBits_dab10e76] = env->getMethodID(cls, "getUpperBits", "()[J");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_INDEX_INTERVAL = env->getStaticLongField(cls, "DEFAULT_INDEX_INTERVAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7e12ca4, a0, a1)) {}

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_16913989, a0, a1, a2)) {}

          void EliasFanoEncoder::encodeNext(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeNext_0ee6df2f], a0);
          }

          jboolean EliasFanoEncoder::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::packed::EliasFanoDecoder EliasFanoEncoder::getDecoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoDecoder(env->callObjectMethod(this$, mids$[mid_getDecoder_38e2d30d]));
          }

          JArray< jlong > EliasFanoEncoder::getIndexBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getIndexBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getLowerBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getLowerBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getUpperBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getUpperBits_dab10e76]));
          }

          jint EliasFanoEncoder::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong EliasFanoEncoder::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoEncoder::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }

          ::java::lang::String EliasFanoEncoder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data);
          static PyGetSetDef t_EliasFanoEncoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoEncoder, decoder),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, indexBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, lowerBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, upperBits),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoEncoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, encodeNext, METH_O),
            DECLARE_METHOD(t_EliasFanoEncoder, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getDecoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getIndexBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getLowerBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getUpperBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoEncoder, t_EliasFanoEncoder, ::java::lang::Object, EliasFanoEncoder, t_EliasFanoEncoder_init_, 0, 0, t_EliasFanoEncoder__fields_, 0, 0);

          void t_EliasFanoEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoEncoder), module, "EliasFanoEncoder", 0);
          }

          void t_EliasFanoEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "class_", make_descriptor(EliasFanoEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoEncoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(EliasFanoEncoder::DEFAULT_INDEX_INTERVAL));
          }

          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoEncoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoEncoder::wrap_Object(EliasFanoEncoder(((t_EliasFanoEncoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jlong a0;
                jlong a1;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJ", &a0, &a1))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jlong a0;
                jlong a1;
                jlong a2;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJJ", &a0, &a1, &a2))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.encodeNext(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNext", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoEncoder::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(value);
          }

          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperBits());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory$StaticImplementationAttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory$StaticImplementationAttributeFactory::mids$ = NULL;
        bool AttributeFactory$StaticImplementationAttributeFactory::live$ = false;

        jclass AttributeFactory$StaticImplementationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a612bb24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_createInstance_a200d3c2] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/util/AttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory$StaticImplementationAttributeFactory::AttributeFactory$StaticImplementationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::Class & a1) : ::org::apache::lucene::util::AttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_a612bb24, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory$StaticImplementationAttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        jboolean AttributeFactory$StaticImplementationAttributeFactory::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint AttributeFactory$StaticImplementationAttributeFactory::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data);
        static PyGetSetDef t_AttributeFactory$StaticImplementationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeFactory$StaticImplementationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeFactory$StaticImplementationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, createAttributeInstance, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory, ::org::apache::lucene::util::AttributeFactory, AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory_init_, 0, 0, t_AttributeFactory$StaticImplementationAttributeFactory__fields_, 0, 0);
        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(const AttributeFactory$StaticImplementationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), module, "AttributeFactory$StaticImplementationAttributeFactory", 0);
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(AttributeFactory$StaticImplementationAttributeFactory(((t_AttributeFactory$StaticImplementationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory$StaticImplementationAttributeFactory object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = AttributeFactory$StaticImplementationAttributeFactory(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "createAttributeInstance", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "hashCode", args, 2);
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/TurkishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *TurkishStemmer::class$ = NULL;
        jmethodID *TurkishStemmer::mids$ = NULL;
        bool TurkishStemmer::live$ = false;

        jclass TurkishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/TurkishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TurkishStemmer::TurkishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TurkishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TurkishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TurkishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args);

        static PyMethodDef t_TurkishStemmer__methods_[] = {
          DECLARE_METHOD(t_TurkishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TurkishStemmer, t_TurkishStemmer, ::org::tartarus::snowball::SnowballProgram, TurkishStemmer, t_TurkishStemmer_init_, 0, 0, 0, 0, 0);

        void t_TurkishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(TurkishStemmer), module, "TurkishStemmer", 0);
        }

        void t_TurkishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "class_", make_descriptor(TurkishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "wrapfn_", make_descriptor(t_TurkishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TurkishStemmer::initializeClass, 1)))
            return NULL;
          return t_TurkishStemmer::wrap_Object(TurkishStemmer(((t_TurkishStemmer *) arg)->object.this$));
        }
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TurkishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds)
        {
          TurkishStemmer object((jobject) NULL);

          INT_CALL(object = TurkishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *QueryBuilder::class$ = NULL;
        jmethodID *QueryBuilder::mids$ = NULL;
        bool QueryBuilder::live$ = false;

        jclass QueryBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/QueryBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_createBooleanQuery_38d6e77e] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createBooleanQuery_6523fcfc] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createMinShouldMatchQuery_45995161] = env->getMethodID(cls, "createMinShouldMatchQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_38d6e77e] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_c7c8d9a8] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
            mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
            mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newBooleanQuery_71c47e3e] = env->getMethodID(cls, "newBooleanQuery", "(Z)Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createFieldQuery_da240c4d] = env->getMethodID(cls, "createFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/BooleanClause$Occur;Ljava/lang/String;Ljava/lang/String;ZI)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPhraseQuery_c05a65af] = env->getMethodID(cls, "newPhraseQuery", "()Lorg/apache/lucene/search/PhraseQuery;");
            mids$[mid_newMultiPhraseQuery_4a09b2bb] = env->getMethodID(cls, "newMultiPhraseQuery", "()Lorg/apache/lucene/search/MultiPhraseQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryBuilder::QueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::BooleanClause$Occur & a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_6523fcfc], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createMinShouldMatchQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createMinShouldMatchQuery_45995161], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_c7c8d9a8], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::analysis::Analyzer QueryBuilder::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean QueryBuilder::getEnablePositionIncrements() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
        }

        void QueryBuilder::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
        }

        void QueryBuilder::setEnablePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_QueryBuilder__fields_[] = {
          DECLARE_GETSET_FIELD(t_QueryBuilder, analyzer),
          DECLARE_GETSET_FIELD(t_QueryBuilder, enablePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryBuilder__methods_[] = {
          DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, createBooleanQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createMinShouldMatchQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createPhraseQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getEnablePositionIncrements, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, setAnalyzer, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setEnablePositionIncrements, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, t_QueryBuilder_init_, 0, 0, t_QueryBuilder__fields_, 0, 0);

        void t_QueryBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
        }

        void t_QueryBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
            return NULL;
          return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
        }
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          QueryBuilder object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            INT_CALL(object = QueryBuilder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createBooleanQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createMinShouldMatchQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createMinShouldMatchQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssI", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createPhraseQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setAnalyzer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setEnablePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
            {
              INT_CALL(self->object.setAnalyzer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setEnablePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianAnalyzer::class$ = NULL;
          jmethodID *LatvianAnalyzer::mids$ = NULL;
          bool LatvianAnalyzer::live$ = false;
          ::java::lang::String *LatvianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass LatvianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet LatvianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data);
          static PyGetSetDef t_LatvianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_LatvianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LatvianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LatvianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianAnalyzer, t_LatvianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, LatvianAnalyzer, t_LatvianAnalyzer_init_, 0, 0, t_LatvianAnalyzer__fields_, 0, 0);

          void t_LatvianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianAnalyzer), module, "LatvianAnalyzer", 0);
          }

          void t_LatvianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "class_", make_descriptor(LatvianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LatvianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LatvianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*LatvianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LatvianAnalyzer::wrap_Object(LatvianAnalyzer(((t_LatvianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::lv::LatvianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedNumericDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedNumericDocValuesField::class$ = NULL;
        jmethodID *SortedNumericDocValuesField::mids$ = NULL;
        bool SortedNumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedNumericDocValuesField::TYPE = NULL;

        jclass SortedNumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedNumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericDocValuesField::SortedNumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedNumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValuesField, t_SortedNumericDocValuesField, ::org::apache::lucene::document::Field, SortedNumericDocValuesField, t_SortedNumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValuesField), module, "SortedNumericDocValuesField", 0);
        }

        void t_SortedNumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "class_", make_descriptor(SortedNumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedNumericDocValuesField::TYPE)));
        }

        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValuesField::wrap_Object(SortedNumericDocValuesField(((t_SortedNumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          SortedNumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = SortedNumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfos::class$ = NULL;
        jmethodID *FieldInfos::mids$ = NULL;
        bool FieldInfos::live$ = false;

        jclass FieldInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32778cd0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_fieldInfo_d44c031f] = env->getMethodID(cls, "fieldInfo", "(I)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_fieldInfo_582c55ef] = env->getMethodID(cls, "fieldInfo", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasFreq_54c6a16a] = env->getMethodID(cls, "hasFreq", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasProx_54c6a16a] = env->getMethodID(cls, "hasProx", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfos::FieldInfos(const JArray< ::org::apache::lucene::index::FieldInfo > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32778cd0, a0.this$)) {}

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(jint a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_d44c031f], a0));
        }

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_582c55ef], a0.this$));
        }

        jboolean FieldInfos::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfos::hasFreq() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreq_54c6a16a]);
        }

        jboolean FieldInfos::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfos::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FieldInfos::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfos::hasProx() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasProx_54c6a16a]);
        }

        jboolean FieldInfos::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        ::java::util::Iterator FieldInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FieldInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args);
        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self);
        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self);
        static PyObject *t_FieldInfos_size(t_FieldInfos *self);

        static PyMethodDef t_FieldInfos__methods_[] = {
          DECLARE_METHOD(t_FieldInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, fieldInfo, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfos, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasFreq, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasProx, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfos, t_FieldInfos, ::java::lang::Object, FieldInfos, t_FieldInfos_init_, ((PyObject *(*)(t_FieldInfos *)) get_iterator< t_FieldInfos >), 0, 0, 0, 0);

        void t_FieldInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfos), module, "FieldInfos", 0);
        }

        void t_FieldInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "class_", make_descriptor(FieldInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "wrapfn_", make_descriptor(t_FieldInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfos::initializeClass, 1)))
            return NULL;
          return t_FieldInfos::wrap_Object(FieldInfos(((t_FieldInfos *) arg)->object.this$));
        }
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::FieldInfo > a0((jobject) NULL);
          FieldInfos object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            INT_CALL(object = FieldInfos(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fieldInfo", args);
          return NULL;
        }

        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreq());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasProx());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(FieldInfo));
        }

        static PyObject *t_FieldInfos_size(t_FieldInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelD.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelD::class$ = NULL;
          jmethodID *BasicModelD::mids$ = NULL;
          bool BasicModelD::live$ = false;

          jclass BasicModelD::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelD");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelD::BasicModelD() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelD::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelD::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args);
          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args);

          static PyMethodDef t_BasicModelD__methods_[] = {
            DECLARE_METHOD(t_BasicModelD, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelD, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelD, t_BasicModelD, ::org::apache::lucene::search::similarities::BasicModel, BasicModelD, t_BasicModelD_init_, 0, 0, 0, 0, 0);

          void t_BasicModelD::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelD), module, "BasicModelD", 0);
          }

          void t_BasicModelD::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "class_", make_descriptor(BasicModelD::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "wrapfn_", make_descriptor(t_BasicModelD::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelD::initializeClass, 1)))
              return NULL;
            return t_BasicModelD::wrap_Object(BasicModelD(((t_BasicModelD *) arg)->object.this$));
          }
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelD::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds)
          {
            BasicModelD object((jobject) NULL);

            INT_CALL(object = BasicModelD());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilterFactory::class$ = NULL;
          jmethodID *ReverseStringFilterFactory::mids$ = NULL;
          bool ReverseStringFilterFactory::live$ = false;

          jclass ReverseStringFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_b57d0b9a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/reverse/ReverseStringFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilterFactory::ReverseStringFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::reverse::ReverseStringFilter ReverseStringFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::reverse::ReverseStringFilter(env->callObjectMethod(this$, mids$[mid_create_b57d0b9a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args);

          static PyMethodDef t_ReverseStringFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilterFactory, t_ReverseStringFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ReverseStringFilterFactory, t_ReverseStringFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilterFactory), module, "ReverseStringFilterFactory", 0);
          }

          void t_ReverseStringFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "class_", make_descriptor(ReverseStringFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilterFactory::wrap_Object(ReverseStringFilterFactory(((t_ReverseStringFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ReverseStringFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ReverseStringFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::reverse::ReverseStringFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::reverse::t_ReverseStringFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$PruneByAge::class$ = NULL;
        jmethodID *SearcherLifetimeManager$PruneByAge::mids$ = NULL;
        bool SearcherLifetimeManager$PruneByAge::live$ = false;

        jclass SearcherLifetimeManager$PruneByAge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$PruneByAge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager$PruneByAge::SearcherLifetimeManager$PruneByAge(jdouble a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jboolean SearcherLifetimeManager$PruneByAge::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$PruneByAge__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge, ::java::lang::Object, SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$PruneByAge::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$PruneByAge), module, "SearcherLifetimeManager$PruneByAge", 0);
        }

        void t_SearcherLifetimeManager$PruneByAge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$PruneByAge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$PruneByAge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$PruneByAge::wrap_Object(SearcherLifetimeManager$PruneByAge(((t_SearcherLifetimeManager$PruneByAge *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          SearcherLifetimeManager$PruneByAge object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = SearcherLifetimeManager$PruneByAge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BulkScorer::class$ = NULL;
        jmethodID *BulkScorer::mids$ = NULL;
        bool BulkScorer::live$ = false;

        jclass BulkScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BulkScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_score_77379ce0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_score_9527f6ba] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BulkScorer::BulkScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BulkScorer::score(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_score_77379ce0], a0.this$);
        }

        jboolean BulkScorer::score(const ::org::apache::lucene::search::Collector & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_score_9527f6ba], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args);

        static PyMethodDef t_BulkScorer__methods_[] = {
          DECLARE_METHOD(t_BulkScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BulkScorer, t_BulkScorer, ::java::lang::Object, BulkScorer, t_BulkScorer_init_, 0, 0, 0, 0, 0);

        void t_BulkScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(BulkScorer), module, "BulkScorer", 0);
        }

        void t_BulkScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "class_", make_descriptor(BulkScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "wrapfn_", make_descriptor(t_BulkScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BulkScorer::initializeClass, 1)))
            return NULL;
          return t_BulkScorer::wrap_Object(BulkScorer(((t_BulkScorer *) arg)->object.this$));
        }
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BulkScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds)
        {
          BulkScorer object((jobject) NULL);

          INT_CALL(object = BulkScorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.score(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.score(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "score", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *State::class$ = NULL;
          jmethodID *State::mids$ = NULL;
          jfieldID *State::fids$ = NULL;
          bool State::live$ = false;

          jclass State::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/State");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addTransition_8209dac4] = env->getMethodID(cls, "addTransition", "(Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_compareTo_931bc94c] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/automaton/State;)I");
              mids$[mid_getNumber_54c6a179] = env->getMethodID(cls, "getNumber", "()I");
              mids$[mid_getTransitions_0ab6fc38] = env->getMethodID(cls, "getTransitions", "()Ljava/lang/Iterable;");
              mids$[mid_isAccept_54c6a16a] = env->getMethodID(cls, "isAccept", "()Z");
              mids$[mid_numTransitions_54c6a179] = env->getMethodID(cls, "numTransitions", "()I");
              mids$[mid_reduce_54c6a166] = env->getMethodID(cls, "reduce", "()V");
              mids$[mid_setAccept_bb0c767f] = env->getMethodID(cls, "setAccept", "(Z)V");
              mids$[mid_setTransitions_bc11dd38] = env->getMethodID(cls, "setTransitions", "([Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_sortTransitions_6ffdd545] = env->getMethodID(cls, "sortTransitions", "(Ljava/util/Comparator;)V");
              mids$[mid_step_efd54f68] = env->getMethodID(cls, "step", "(I)Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_step_006cd2bb] = env->getMethodID(cls, "step", "(ILjava/util/Collection;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_trimTransitionsArray_54c6a166] = env->getMethodID(cls, "trimTransitionsArray", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_numTransitions] = env->getFieldID(cls, "numTransitions", "I");
              fids$[fid_transitionsArray] = env->getFieldID(cls, "transitionsArray", "[Lorg/apache/lucene/util/automaton/Transition;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          State::State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void State::addTransition(const ::org::apache::lucene::util::automaton::Transition & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_8209dac4], a0.this$);
          }

          jint State::compareTo(const State & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_931bc94c], a0.this$);
          }

          jint State::getNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumber_54c6a179]);
          }

          ::java::lang::Iterable State::getTransitions() const
          {
            return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getTransitions_0ab6fc38]));
          }

          jboolean State::isAccept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_54c6a16a]);
          }

          jint State::numTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_numTransitions_54c6a179]);
          }

          void State::reduce() const
          {
            env->callVoidMethod(this$, mids$[mid_reduce_54c6a166]);
          }

          void State::setAccept(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_bb0c767f], a0);
          }

          void State::setTransitions(const JArray< ::org::apache::lucene::util::automaton::Transition > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTransitions_bc11dd38], a0.this$);
          }

          void State::sortTransitions(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_sortTransitions_6ffdd545], a0.this$);
          }

          State State::step(jint a0) const
          {
            return State(env->callObjectMethod(this$, mids$[mid_step_efd54f68], a0));
          }

          void State::step(jint a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_step_006cd2bb], a0, a1.this$);
          }

          ::java::lang::String State::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void State::trimTransitionsArray() const
          {
            env->callVoidMethod(this$, mids$[mid_trimTransitionsArray_54c6a166]);
          }

          jint State::_get_numTransitions() const
          {
            return env->getIntField(this$, fids$[fid_numTransitions]);
          }

          void State::_set_numTransitions(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numTransitions], a0);
          }

          JArray< ::org::apache::lucene::util::automaton::Transition > State::_get_transitionsArray() const
          {
            return JArray< ::org::apache::lucene::util::automaton::Transition >(env->getObjectField(this$, fids$[fid_transitionsArray]));
          }

          void State::_set_transitionsArray(const JArray< ::org::apache::lucene::util::automaton::Transition > & a0) const
          {
            env->setObjectField(this$, fids$[fid_transitionsArray], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_State_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_State_instance_(PyTypeObject *type, PyObject *arg);
          static int t_State_init_(t_State *self, PyObject *args, PyObject *kwds);
          static PyObject *t_State_addTransition(t_State *self, PyObject *arg);
          static PyObject *t_State_compareTo(t_State *self, PyObject *arg);
          static PyObject *t_State_getNumber(t_State *self);
          static PyObject *t_State_getTransitions(t_State *self);
          static PyObject *t_State_isAccept(t_State *self);
          static PyObject *t_State_numTransitions(t_State *self);
          static PyObject *t_State_reduce(t_State *self);
          static PyObject *t_State_setAccept(t_State *self, PyObject *arg);
          static PyObject *t_State_setTransitions(t_State *self, PyObject *arg);
          static PyObject *t_State_sortTransitions(t_State *self, PyObject *arg);
          static PyObject *t_State_step(t_State *self, PyObject *args);
          static PyObject *t_State_toString(t_State *self, PyObject *args);
          static PyObject *t_State_trimTransitionsArray(t_State *self);
          static PyObject *t_State_get__numTransitions(t_State *self, void *data);
          static int t_State_set__numTransitions(t_State *self, PyObject *arg, void *data);
          static PyObject *t_State_get__transitionsArray(t_State *self, void *data);
          static int t_State_set__transitionsArray(t_State *self, PyObject *arg, void *data);

          static PyObject *t_State_get__accept(t_State *self, void *data);
          static int t_State_set__accept(t_State *self, PyObject *arg, void *data);
          static PyObject *t_State_get__number(t_State *self, void *data);
          static PyObject *t_State_get__transitions(t_State *self, void *data);
          static int t_State_set__transitions(t_State *self, PyObject *arg, void *data);
          static PyGetSetDef t_State__fields_[] = {
            DECLARE_GETSET_FIELD(t_State, numTransitions),
            DECLARE_GETSET_FIELD(t_State, transitionsArray),
            DECLARE_GETSET_FIELD(t_State, accept),
            DECLARE_GET_FIELD(t_State, number),
            DECLARE_GETSET_FIELD(t_State, transitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_State__methods_[] = {
            DECLARE_METHOD(t_State, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_State, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_State, addTransition, METH_O),
            DECLARE_METHOD(t_State, compareTo, METH_O),
            DECLARE_METHOD(t_State, getNumber, METH_NOARGS),
            DECLARE_METHOD(t_State, getTransitions, METH_NOARGS),
            DECLARE_METHOD(t_State, isAccept, METH_NOARGS),
            DECLARE_METHOD(t_State, numTransitions, METH_NOARGS),
            DECLARE_METHOD(t_State, reduce, METH_NOARGS),
            DECLARE_METHOD(t_State, setAccept, METH_O),
            DECLARE_METHOD(t_State, setTransitions, METH_O),
            DECLARE_METHOD(t_State, sortTransitions, METH_O),
            DECLARE_METHOD(t_State, step, METH_VARARGS),
            DECLARE_METHOD(t_State, toString, METH_VARARGS),
            DECLARE_METHOD(t_State, trimTransitionsArray, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(State, t_State, ::java::lang::Object, State, t_State_init_, 0, 0, t_State__fields_, 0, 0);

          void t_State::install(PyObject *module)
          {
            installType(&PY_TYPE(State), module, "State", 0);
          }

          void t_State::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "class_", make_descriptor(State::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "wrapfn_", make_descriptor(t_State::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_State_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, State::initializeClass, 1)))
              return NULL;
            return t_State::wrap_Object(State(((t_State *) arg)->object.this$));
          }
          static PyObject *t_State_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, State::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_State_init_(t_State *self, PyObject *args, PyObject *kwds)
          {
            State object((jobject) NULL);

            INT_CALL(object = State());
            self->object = object;

            return 0;
          }

          static PyObject *t_State_addTransition(t_State *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Transition a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addTransition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", arg);
            return NULL;
          }

          static PyObject *t_State_compareTo(t_State *self, PyObject *arg)
          {
            State a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", State::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_State_getNumber(t_State *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_State_getTransitions(t_State *self)
          {
            ::java::lang::Iterable result((jobject) NULL);
            OBJ_CALL(result = self->object.getTransitions());
            return ::java::lang::t_Iterable::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(Transition));
          }

          static PyObject *t_State_isAccept(t_State *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isAccept());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_State_numTransitions(t_State *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numTransitions());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_State_reduce(t_State *self)
          {
            OBJ_CALL(self->object.reduce());
            Py_RETURN_NONE;
          }

          static PyObject *t_State_setAccept(t_State *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAccept(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", arg);
            return NULL;
          }

          static PyObject *t_State_setTransitions(t_State *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTransitions(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTransitions", arg);
            return NULL;
          }

          static PyObject *t_State_sortTransitions(t_State *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.sortTransitions(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "sortTransitions", arg);
            return NULL;
          }

          static PyObject *t_State_step(t_State *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                State result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.step(a0));
                  return t_State::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(self->object.step(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_State_toString(t_State *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(State), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_State_trimTransitionsArray(t_State *self)
          {
            OBJ_CALL(self->object.trimTransitionsArray());
            Py_RETURN_NONE;
          }

          static PyObject *t_State_get__numTransitions(t_State *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numTransitions());
            return PyInt_FromLong((long) value);
          }
          static int t_State_set__numTransitions(t_State *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numTransitions(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numTransitions", arg);
            return -1;
          }

          static PyObject *t_State_get__transitionsArray(t_State *self, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_transitionsArray());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::automaton::t_Transition::wrap_jobject);
          }
          static int t_State_set__transitionsArray(t_State *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &value))
            {
              INT_CALL(self->object._set_transitionsArray(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "transitionsArray", arg);
            return -1;
          }

          static PyObject *t_State_get__accept(t_State *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isAccept());
            Py_RETURN_BOOL(value);
          }
          static int t_State_set__accept(t_State *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAccept(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return -1;
          }

          static PyObject *t_State_get__number(t_State *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_State_get__transitions(t_State *self, void *data)
          {
            ::java::lang::Iterable value((jobject) NULL);
            OBJ_CALL(value = self->object.getTransitions());
            return ::java::lang::t_Iterable::wrap_Object(value);
          }
          static int t_State_set__transitions(t_State *self, PyObject *arg, void *data)
          {
            {
              JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
              if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &value))
              {
                INT_CALL(self->object.setTransitions(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "transitions", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixQuery::class$ = NULL;
        jmethodID *PrefixQuery::mids$ = NULL;
        bool PrefixQuery::live$ = false;

        jclass PrefixQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixQuery::PrefixQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean PrefixQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::index::Term PrefixQuery::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        jint PrefixQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String PrefixQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self);
        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data);
        static PyGetSetDef t_PrefixQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixQuery, prefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixQuery__methods_[] = {
          DECLARE_METHOD(t_PrefixQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixQuery, t_PrefixQuery, ::org::apache::lucene::search::MultiTermQuery, PrefixQuery, t_PrefixQuery_init_, 0, 0, t_PrefixQuery__fields_, 0, 0);

        void t_PrefixQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixQuery), module, "PrefixQuery", 0);
        }

        void t_PrefixQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "class_", make_descriptor(PrefixQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_PrefixQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixQuery::initializeClass, 1)))
            return NULL;
          return t_PrefixQuery::wrap_Object(PrefixQuery(((t_PrefixQuery *) arg)->object.this$));
        }
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryTreeBuilder::class$ = NULL;
              jmethodID *StandardQueryTreeBuilder::mids$ = NULL;
              bool StandardQueryTreeBuilder::live$ = false;

              jclass StandardQueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryTreeBuilder::StandardQueryTreeBuilder() : ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query StandardQueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryTreeBuilder, t_StandardQueryTreeBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder, StandardQueryTreeBuilder, t_StandardQueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryTreeBuilder), module, "StandardQueryTreeBuilder", 0);
              }

              void t_StandardQueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "class_", make_descriptor(StandardQueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryTreeBuilder::wrap_Object(StandardQueryTreeBuilder(((t_StandardQueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = StandardQueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryTreeBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocsCollector::class$ = NULL;
        jmethodID *TopDocsCollector::mids$ = NULL;
        bool TopDocsCollector::live$ = false;

        jclass TopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_topDocs_0ac630fc] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_c7a84aba] = env->getMethodID(cls, "topDocs", "(I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_b17523f8] = env->getMethodID(cls, "topDocs", "(II)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocsSize_54c6a179] = env->getMethodID(cls, "topDocsSize", "()I");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TopDocsCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_0ac630fc]));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_c7a84aba], a0));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_b17523f8], a0, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self);
        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data);
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data);
        static PyGetSetDef t_TopDocsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopDocsCollector, totalHits),
          DECLARE_GET_FIELD(t_TopDocsCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_TopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopDocsCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TopDocsCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocsCollector, t_TopDocsCollector, ::org::apache::lucene::search::Collector, TopDocsCollector, abstract_init, 0, 0, t_TopDocsCollector__fields_, 0, 0);
        PyObject *t_TopDocsCollector::wrap_Object(const TopDocsCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopDocsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocsCollector), module, "TopDocsCollector", 0);
        }

        void t_TopDocsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "class_", make_descriptor(TopDocsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "wrapfn_", make_descriptor(t_TopDocsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_TopDocsCollector::wrap_Object(TopDocsCollector(((t_TopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.topDocs());
              return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.topDocs(a0));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.topDocs(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "topDocs", args);
          return NULL;
        }
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter$SimpleRateLimiter::class$ = NULL;
        jmethodID *RateLimiter$SimpleRateLimiter::mids$ = NULL;
        bool RateLimiter$SimpleRateLimiter::live$ = false;

        jclass RateLimiter$SimpleRateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter$SimpleRateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter$SimpleRateLimiter::RateLimiter$SimpleRateLimiter(jdouble a0) : ::org::apache::lucene::store::RateLimiter(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jdouble RateLimiter$SimpleRateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter$SimpleRateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter$SimpleRateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter$SimpleRateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter$SimpleRateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter$SimpleRateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter$SimpleRateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter$SimpleRateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMbPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMinPauseCheckBytes, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, pause, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, setMbPerSec, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter, ::org::apache::lucene::store::RateLimiter, RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter_init_, 0, 0, t_RateLimiter$SimpleRateLimiter__fields_, 0, 0);

        void t_RateLimiter$SimpleRateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter$SimpleRateLimiter), module, "RateLimiter$SimpleRateLimiter", 0);
        }

        void t_RateLimiter$SimpleRateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "class_", make_descriptor(RateLimiter$SimpleRateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter$SimpleRateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter$SimpleRateLimiter::wrap_Object(RateLimiter$SimpleRateLimiter(((t_RateLimiter$SimpleRateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          RateLimiter$SimpleRateLimiter object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = RateLimiter$SimpleRateLimiter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMbPerSec());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMinPauseCheckBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMinPauseCheckBytes", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "pause", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "setMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/FloatEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *FloatEncoder::class$ = NULL;
          jmethodID *FloatEncoder::mids$ = NULL;
          bool FloatEncoder::live$ = false;

          jclass FloatEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/FloatEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatEncoder::FloatEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef FloatEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args);

          static PyMethodDef t_FloatEncoder__methods_[] = {
            DECLARE_METHOD(t_FloatEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatEncoder, t_FloatEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, FloatEncoder, t_FloatEncoder_init_, 0, 0, 0, 0, 0);

          void t_FloatEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatEncoder), module, "FloatEncoder", 0);
          }

          void t_FloatEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "class_", make_descriptor(FloatEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "wrapfn_", make_descriptor(t_FloatEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatEncoder::initializeClass, 1)))
              return NULL;
            return t_FloatEncoder::wrap_Object(FloatEncoder(((t_FloatEncoder *) arg)->object.this$));
          }
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds)
          {
            FloatEncoder object((jobject) NULL);

            INT_CALL(object = FloatEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosWriter::class$ = NULL;
        jmethodID *FieldInfosWriter::mids$ = NULL;
        bool FieldInfosWriter::live$ = false;

        jclass FieldInfosWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_e0613aa0] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldInfosWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_write_e0613aa0], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args);

        static PyMethodDef t_FieldInfosWriter__methods_[] = {
          DECLARE_METHOD(t_FieldInfosWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosWriter, t_FieldInfosWriter, ::java::lang::Object, FieldInfosWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosWriter), module, "FieldInfosWriter", 0);
        }

        void t_FieldInfosWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "class_", make_descriptor(FieldInfosWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosWriter::initializeClass, 1)))
            return NULL;
          return t_FieldInfosWriter::wrap_Object(FieldInfosWriter(((t_FieldInfosWriter *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "ksskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanBuilderBase::class$ = NULL;
            jmethodID *SpanBuilderBase::mids$ = NULL;
            bool SpanBuilderBase::live$ = false;

            jclass SpanBuilderBase::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanBuilderBase");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanBuilderBase::SpanBuilderBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanBuilderBase__methods_[] = {
              DECLARE_METHOD(t_SpanBuilderBase, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanBuilderBase, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanBuilderBase, t_SpanBuilderBase, ::java::lang::Object, SpanBuilderBase, t_SpanBuilderBase_init_, 0, 0, 0, 0, 0);

            void t_SpanBuilderBase::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanBuilderBase), module, "SpanBuilderBase", 0);
            }

            void t_SpanBuilderBase::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "class_", make_descriptor(SpanBuilderBase::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "wrapfn_", make_descriptor(t_SpanBuilderBase::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanBuilderBase::initializeClass, 1)))
                return NULL;
              return t_SpanBuilderBase::wrap_Object(SpanBuilderBase(((t_SpanBuilderBase *) arg)->object.this$));
            }
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanBuilderBase::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds)
            {
              SpanBuilderBase object((jobject) NULL);

              INT_CALL(object = SpanBuilderBase());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumIntAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumIntAssociations::mids$ = NULL;
          bool TaxonomyFacetSumIntAssociations::live$ = false;

          jclass TaxonomyFacetSumIntAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumIntAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumIntAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumIntAssociations), module, "TaxonomyFacetSumIntAssociations", 0);
          }

          void t_TaxonomyFacetSumIntAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumIntAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumIntAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumIntAssociations::wrap_Object(TaxonomyFacetSumIntAssociations(((t_TaxonomyFacetSumIntAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessor::class$ = NULL;
              jmethodID *QueryNodeProcessor::mids$ = NULL;
              bool QueryNodeProcessor::live$ = false;

              jclass QueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self);
              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data);
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessor, t_QueryNodeProcessor, ::java::lang::Object, QueryNodeProcessor, abstract_init, 0, 0, t_QueryNodeProcessor__fields_, 0, 0);

              void t_QueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessor), module, "QueryNodeProcessor", 0);
              }

              void t_QueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "class_", make_descriptor(QueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessor::wrap_Object(QueryNodeProcessor(((t_QueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttribute::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttribute::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttribute::live$ = false;

        jclass MaxNonCompetitiveBoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttribute::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttribute::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttribute::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttribute::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttribute__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttribute, t_MaxNonCompetitiveBoostAttribute, ::org::apache::lucene::util::Attribute, MaxNonCompetitiveBoostAttribute, abstract_init, 0, 0, t_MaxNonCompetitiveBoostAttribute__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttribute), module, "MaxNonCompetitiveBoostAttribute", 0);
        }

        void t_MaxNonCompetitiveBoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttribute::wrap_Object(MaxNonCompetitiveBoostAttribute(((t_MaxNonCompetitiveBoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicAnalyzer::class$ = NULL;
          jmethodID *ArabicAnalyzer::mids$ = NULL;
          bool ArabicAnalyzer::live$ = false;
          ::java::lang::String *ArabicAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArabicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArabicAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data);
          static PyGetSetDef t_ArabicAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArabicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicAnalyzer, t_ArabicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArabicAnalyzer, t_ArabicAnalyzer_init_, 0, 0, t_ArabicAnalyzer__fields_, 0, 0);

          void t_ArabicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicAnalyzer), module, "ArabicAnalyzer", 0);
          }

          void t_ArabicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "class_", make_descriptor(ArabicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArabicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArabicAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArabicAnalyzer::wrap_Object(ArabicAnalyzer(((t_ArabicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ar::ArabicAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRewriteMethod::class$ = NULL;
        jmethodID *FieldCacheRewriteMethod::mids$ = NULL;
        bool FieldCacheRewriteMethod::live$ = false;

        jclass FieldCacheRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheRewriteMethod::FieldCacheRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FieldCacheRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FieldCacheRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FieldCacheRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args);

        static PyMethodDef t_FieldCacheRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRewriteMethod, t_FieldCacheRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, FieldCacheRewriteMethod, t_FieldCacheRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRewriteMethod), module, "FieldCacheRewriteMethod", 0);
        }

        void t_FieldCacheRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "class_", make_descriptor(FieldCacheRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRewriteMethod::wrap_Object(FieldCacheRewriteMethod(((t_FieldCacheRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheRewriteMethod object((jobject) NULL);

          INT_CALL(object = FieldCacheRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilter::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilter::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilter::live$ = false;

          jclass HyphenationCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6851072a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_213956f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9c907b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_46c08466] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_getHyphenationTree_5c26e2ec] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_getHyphenationTree_70e8a373] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/io/File;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_6851072a, a0.this$, a1.this$, a2.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_213956f5, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, jint a3, jint a4, jint a5) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_9c907b94, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3, jint a4, jint a5, jint a6, jboolean a7) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_46c08466, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_5c26e2ec], a0.this$));
          }

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::io::File & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_70e8a373], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_HyphenationCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, getHyphenationTree, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilter), module, "HyphenationCompoundWordTokenFilter", 0);
          }

          void t_HyphenationCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilter::wrap_Object(HyphenationCompoundWordTokenFilter(((t_HyphenationCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                jint a3;
                jint a4;
                jint a5;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkIII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                jint a6;
                jboolean a7;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a4, &a5, &a6, &a7))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getHyphenationTree", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionSegmentTermsEnum::class$ = NULL;
          jmethodID *IDVersionSegmentTermsEnum::mids$ = NULL;
          bool IDVersionSegmentTermsEnum::live$ = false;

          jclass IDVersionSegmentTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_seekExact_9e70a0d1] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;J)Z");
              mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint IDVersionSegmentTermsEnum::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
          }

          ::org::apache::lucene::index::DocsEnum IDVersionSegmentTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum IDVersionSegmentTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
          }

          ::java::util::Comparator IDVersionSegmentTermsEnum::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jlong IDVersionSegmentTermsEnum::getVersion() const
          {
            return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong IDVersionSegmentTermsEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus IDVersionSegmentTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
          }

          void IDVersionSegmentTermsEnum::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
          }

          void IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_9e70a0d1], a0.this$, a1);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
          }

          ::org::apache::lucene::index::TermState IDVersionSegmentTermsEnum::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
          }

          ::java::lang::String IDVersionSegmentTermsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong IDVersionSegmentTermsEnum::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self);
          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyGetSetDef t_IDVersionSegmentTermsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, comparator),
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, version),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IDVersionSegmentTermsEnum__methods_[] = {
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docs, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getVersion, METH_NOARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, next, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, ord, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, term, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, termState, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, toString, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionSegmentTermsEnum, t_IDVersionSegmentTermsEnum, ::org::apache::lucene::index::TermsEnum, IDVersionSegmentTermsEnum, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_IDVersionSegmentTermsEnum *)) get_next< t_IDVersionSegmentTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_IDVersionSegmentTermsEnum__fields_, 0, 0);

          void t_IDVersionSegmentTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionSegmentTermsEnum), module, "IDVersionSegmentTermsEnum", 0);
          }

          void t_IDVersionSegmentTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "class_", make_descriptor(IDVersionSegmentTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_IDVersionSegmentTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 1)))
              return NULL;
            return t_IDVersionSegmentTermsEnum::wrap_Object(IDVersionSegmentTermsEnum(((t_IDVersionSegmentTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong a1;
                jboolean result;

                if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.seekExact(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SingleFragListBuilder::class$ = NULL;
          jmethodID *SingleFragListBuilder::mids$ = NULL;
          bool SingleFragListBuilder::live$ = false;

          jclass SingleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SingleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleFragListBuilder::SingleFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SingleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SingleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SingleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleFragListBuilder, t_SingleFragListBuilder, ::java::lang::Object, SingleFragListBuilder, t_SingleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SingleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleFragListBuilder), module, "SingleFragListBuilder", 0);
          }

          void t_SingleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "class_", make_descriptor(SingleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SingleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SingleFragListBuilder::wrap_Object(SingleFragListBuilder(((t_SingleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            SingleFragListBuilder object((jobject) NULL);

            INT_CALL(object = SingleFragListBuilder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *RangeFilterBuilder::class$ = NULL;
            jmethodID *RangeFilterBuilder::mids$ = NULL;
            bool RangeFilterBuilder::live$ = false;

            jclass RangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeFilterBuilder::RangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_RangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeFilterBuilder, t_RangeFilterBuilder, ::java::lang::Object, RangeFilterBuilder, t_RangeFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_RangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeFilterBuilder), module, "RangeFilterBuilder", 0);
            }

            void t_RangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "class_", make_descriptor(RangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_RangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_RangeFilterBuilder::wrap_Object(RangeFilterBuilder(((t_RangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              RangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = RangeFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelG.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelG::class$ = NULL;
          jmethodID *BasicModelG::mids$ = NULL;
          bool BasicModelG::live$ = false;

          jclass BasicModelG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelG::BasicModelG() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelG::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args);
          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args);

          static PyMethodDef t_BasicModelG__methods_[] = {
            DECLARE_METHOD(t_BasicModelG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelG, t_BasicModelG, ::org::apache::lucene::search::similarities::BasicModel, BasicModelG, t_BasicModelG_init_, 0, 0, 0, 0, 0);

          void t_BasicModelG::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelG), module, "BasicModelG", 0);
          }

          void t_BasicModelG::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "class_", make_descriptor(BasicModelG::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "wrapfn_", make_descriptor(t_BasicModelG::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelG::initializeClass, 1)))
              return NULL;
            return t_BasicModelG::wrap_Object(BasicModelG(((t_BasicModelG *) arg)->object.this$));
          }
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds)
          {
            BasicModelG object((jobject) NULL);

            INT_CALL(object = BasicModelG());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFloatParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFloatParser::class$ = NULL;
        jmethodID *PythonFloatParser::mids$ = NULL;
        bool PythonFloatParser::live$ = false;

        jclass PythonFloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFloatParser::PythonFloatParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFloatParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFloatParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFloatParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self);
        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args);
        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data);
        static PyGetSetDef t_PythonFloatParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFloatParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFloatParser__methods_[] = {
          DECLARE_METHOD(t_PythonFloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFloatParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFloatParser, t_PythonFloatParser, ::java::lang::Object, PythonFloatParser, t_PythonFloatParser_init_, 0, 0, t_PythonFloatParser__fields_, 0, 0);

        void t_PythonFloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFloatParser), module, "PythonFloatParser", 1);
        }

        void t_PythonFloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "class_", make_descriptor(PythonFloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "wrapfn_", make_descriptor(t_PythonFloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFloatParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F", (void *) t_PythonFloatParser_parseFloat0 },
            { "pythonDecRef", "()V", (void *) t_PythonFloatParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonFloatParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFloatParser::initializeClass, 1)))
            return NULL;
          return t_PythonFloatParser::wrap_Object(PythonFloatParser(((t_PythonFloatParser *) arg)->object.this$));
        }
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds)
        {
          PythonFloatParser object((jobject) NULL);

          INT_CALL(object = PythonFloatParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jfloat value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseFloat", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "F", &value))
          {
            throwTypeError("parseFloat", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jfloat) 0;
        }

        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Throwable.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "java/io/PrintWriter.h"
#include "java/lang/StackTraceElement.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Throwable::class$ = NULL;
    jmethodID *Throwable::mids$ = NULL;
    bool Throwable::live$ = false;

    jclass Throwable::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Throwable");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
        mids$[mid_addSuppressed_c5ec8ca4] = env->getMethodID(cls, "addSuppressed", "(Ljava/lang/Throwable;)V");
        mids$[mid_fillInStackTrace_9a29189d] = env->getMethodID(cls, "fillInStackTrace", "()Ljava/lang/Throwable;");
        mids$[mid_getCause_9a29189d] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
        mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
        mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getSuppressed_f4efa455] = env->getMethodID(cls, "getSuppressed", "()[Ljava/lang/Throwable;");
        mids$[mid_initCause_dabad90f] = env->getMethodID(cls, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
        mids$[mid_printStackTrace_54c6a166] = env->getMethodID(cls, "printStackTrace", "()V");
        mids$[mid_printStackTrace_1b7c898b] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintStream;)V");
        mids$[mid_printStackTrace_82fffd94] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintWriter;)V");
        mids$[mid_setStackTrace_3d8798bf] = env->getMethodID(cls, "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Throwable::Throwable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Throwable::Throwable(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Throwable::Throwable(const ::java::lang::String & a0, const Throwable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}

    void Throwable::addSuppressed(const Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addSuppressed_c5ec8ca4], a0.this$);
    }

    Throwable Throwable::fillInStackTrace() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_fillInStackTrace_9a29189d]));
    }

    Throwable Throwable::getCause() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_getCause_9a29189d]));
    }

    ::java::lang::String Throwable::getLocalizedMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
    }

    ::java::lang::String Throwable::getMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
    }

    JArray< ::java::lang::StackTraceElement > Throwable::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    JArray< Throwable > Throwable::getSuppressed() const
    {
      return JArray< Throwable >(env->callObjectMethod(this$, mids$[mid_getSuppressed_f4efa455]));
    }

    Throwable Throwable::initCause(const Throwable & a0) const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_initCause_dabad90f], a0.this$));
    }

    void Throwable::printStackTrace() const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_54c6a166]);
    }

    void Throwable::printStackTrace(const ::java::io::PrintStream & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_1b7c898b], a0.this$);
    }

    void Throwable::printStackTrace(const ::java::io::PrintWriter & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_82fffd94], a0.this$);
    }

    void Throwable::setStackTrace(const JArray< ::java::lang::StackTraceElement > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStackTrace_3d8798bf], a0.this$);
    }

    ::java::lang::String Throwable::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getCause(t_Throwable *self);
    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self);
    static PyObject *t_Throwable_getMessage(t_Throwable *self);
    static PyObject *t_Throwable_getStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getSuppressed(t_Throwable *self);
    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data);
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data);
    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data);
    static PyGetSetDef t_Throwable__fields_[] = {
      DECLARE_GET_FIELD(t_Throwable, cause),
      DECLARE_GET_FIELD(t_Throwable, localizedMessage),
      DECLARE_GET_FIELD(t_Throwable, message),
      DECLARE_GETSET_FIELD(t_Throwable, stackTrace),
      DECLARE_GET_FIELD(t_Throwable, suppressed),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Throwable__methods_[] = {
      DECLARE_METHOD(t_Throwable, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, addSuppressed, METH_O),
      DECLARE_METHOD(t_Throwable, fillInStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getCause, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getLocalizedMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getSuppressed, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, initCause, METH_O),
      DECLARE_METHOD(t_Throwable, printStackTrace, METH_VARARGS),
      DECLARE_METHOD(t_Throwable, setStackTrace, METH_O),
      DECLARE_METHOD(t_Throwable, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Throwable, t_Throwable, ::java::lang::Object, Throwable, t_Throwable_init_, 0, 0, t_Throwable__fields_, 0, 0);

    void t_Throwable::install(PyObject *module)
    {
      installType(&PY_TYPE(Throwable), module, "Throwable", 0);
    }

    void t_Throwable::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "class_", make_descriptor(Throwable::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "wrapfn_", make_descriptor(t_Throwable::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Throwable::initializeClass, 1)))
        return NULL;
      return t_Throwable::wrap_Object(Throwable(((t_Throwable *) arg)->object.this$));
    }
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Throwable::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Throwable object((jobject) NULL);

          INT_CALL(object = Throwable());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Throwable(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable a1((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "sk", Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Throwable(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addSuppressed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addSuppressed", arg);
      return NULL;
    }

    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.fillInStackTrace());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getCause(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.getCause());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getLocalizedMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getStackTrace(t_Throwable *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Throwable_getSuppressed(t_Throwable *self)
    {
      JArray< Throwable > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuppressed());
      return JArray<jobject>(result.this$).wrap(t_Throwable::wrap_jobject);
    }

    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);
      Throwable result((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.initCause(a0));
        return t_Throwable::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "initCause", arg);
      return NULL;
    }

    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.printStackTrace());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::io::PrintWriter a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printStackTrace", args);
      return NULL;
    }

    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg)
    {
      JArray< ::java::lang::StackTraceElement > a0((jobject) NULL);

      if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setStackTrace(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStackTrace", arg);
      return NULL;
    }

    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Throwable), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data)
    {
      Throwable value((jobject) NULL);
      OBJ_CALL(value = self->object.getCause());
      return t_Throwable::wrap_Object(value);
    }

    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getLocalizedMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data)
    {
      {
        JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
        if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &value))
        {
          INT_CALL(self->object.setStackTrace(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "stackTrace", arg);
      return -1;
    }

    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data)
    {
      JArray< Throwable > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuppressed());
      return JArray<jobject>(value.this$).wrap(t_Throwable::wrap_jobject);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatAssociationFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatAssociationFacetField::class$ = NULL;
          jmethodID *FloatAssociationFacetField::mids$ = NULL;
          bool FloatAssociationFacetField::live$ = false;

          jclass FloatAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_000acdbd] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToFloat_7bc03dd4] = env->getStaticMethodID(cls, "bytesRefToFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_floatToBytesRef_291d8a68] = env->getStaticMethodID(cls, "floatToBytesRef", "(F)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatAssociationFacetField::FloatAssociationFacetField(jfloat a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_000acdbd, a0, a1.this$, a2.this$)) {}

          jfloat FloatAssociationFacetField::bytesRefToFloat(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_bytesRefToFloat_7bc03dd4], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef FloatAssociationFacetField::floatToBytesRef(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_floatToBytesRef_291d8a68], a0));
          }

          ::java::lang::String FloatAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_FloatAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_FloatAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, bytesRefToFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, floatToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatAssociationFacetField, t_FloatAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, FloatAssociationFacetField, t_FloatAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_FloatAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatAssociationFacetField), module, "FloatAssociationFacetField", 0);
          }

          void t_FloatAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "class_", make_descriptor(FloatAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_FloatAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_FloatAssociationFacetField::wrap_Object(FloatAssociationFacetField(((t_FloatAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            FloatAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Fs[s", &a0, &a1, &a2))
            {
              INT_CALL(object = FloatAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::bytesRefToFloat(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "bytesRefToFloat", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jfloat a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::floatToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "floatToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FloatAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ShortParser::class$ = NULL;
        jmethodID *FieldCache$ShortParser::mids$ = NULL;
        bool FieldCache$ShortParser::live$ = false;

        jclass FieldCache$ShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jshort FieldCache$ShortParser::parseShort(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callShortMethod(this$, mids$[mid_parseShort_7bc03dc1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ShortParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, parseShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ShortParser, t_FieldCache$ShortParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ShortParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ShortParser), module, "FieldCache$ShortParser", 0);
        }

        void t_FieldCache$ShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "class_", make_descriptor(FieldCache$ShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ShortParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ShortParser::wrap_Object(FieldCache$ShortParser(((t_FieldCache$ShortParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jshort result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSDirectory::class$ = NULL;
        jmethodID *SimpleFSDirectory::mids$ = NULL;
        bool SimpleFSDirectory::live$ = false;

        jclass SimpleFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput SimpleFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args);

        static PyMethodDef t_SimpleFSDirectory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSDirectory, t_SimpleFSDirectory, ::org::apache::lucene::store::FSDirectory, SimpleFSDirectory, t_SimpleFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSDirectory), module, "SimpleFSDirectory", 0);
        }

        void t_SimpleFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "class_", make_descriptor(SimpleFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSDirectory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSDirectory::wrap_Object(SimpleFSDirectory(((t_SimpleFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SimpleFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/text/Collator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeFilter::class$ = NULL;
          jmethodID *SlowCollatedTermRangeFilter::mids$ = NULL;
          bool SlowCollatedTermRangeFilter::live$ = false;

          jclass SlowCollatedTermRangeFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeFilter::SlowCollatedTermRangeFilter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          ::java::text::Collator SlowCollatedTermRangeFilter::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jboolean SlowCollatedTermRangeFilter::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeFilter::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args);
          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeFilter__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, upperTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeFilter__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesUpper, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter_init_, 0, 0, t_SlowCollatedTermRangeFilter__fields_, 0, 0);
          PyObject *t_SlowCollatedTermRangeFilter::wrap_Object(const SlowCollatedTermRangeFilter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedTermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedTermRangeFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeFilter), module, "SlowCollatedTermRangeFilter", 0);
          }

          void t_SlowCollatedTermRangeFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeFilter::wrap_Object(SlowCollatedTermRangeFilter(((t_SlowCollatedTermRangeFilter *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeFilter object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeFilter(a0, a1, a2, a3, a4, a5));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::sandbox::queries::PY_TYPE(SlowCollatedTermRangeQuery);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DefFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DefFunction::class$ = NULL;
            jmethodID *DefFunction::mids$ = NULL;
            bool DefFunction::live$ = false;

            jclass DefFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DefFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DefFunction::DefFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues DefFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args);

            static PyMethodDef t_DefFunction__methods_[] = {
              DECLARE_METHOD(t_DefFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DefFunction, t_DefFunction, ::org::apache::lucene::queries::function::valuesource::MultiFunction, DefFunction, t_DefFunction_init_, 0, 0, 0, 0, 0);

            void t_DefFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DefFunction), module, "DefFunction", 0);
            }

            void t_DefFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "class_", make_descriptor(DefFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "wrapfn_", make_descriptor(t_DefFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DefFunction::initializeClass, 1)))
                return NULL;
              return t_DefFunction::wrap_Object(DefFunction(((t_DefFunction *) arg)->object.this$));
            }
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DefFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              DefFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = DefFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DefFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesFormat::class$ = NULL;
        jmethodID *DocValuesFormat::mids$ = NULL;
        bool DocValuesFormat::live$ = false;

        jclass DocValuesFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableDocValuesFormats_03e99967] = env->getStaticMethodID(cls, "availableDocValuesFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_forName_36ef78ba] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadDocValuesFormats_9110048d] = env->getStaticMethodID(cls, "reloadDocValuesFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set DocValuesFormat::availableDocValuesFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableDocValuesFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesConsumer DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
        }

        DocValuesFormat DocValuesFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocValuesFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_36ef78ba], a0.this$));
        }

        ::java::lang::String DocValuesFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void DocValuesFormat::reloadDocValuesFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadDocValuesFormats_9110048d], a0.this$);
        }

        ::java::lang::String DocValuesFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type);
        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self);
        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args);
        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data);
        static PyGetSetDef t_DocValuesFormat__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesFormat__methods_[] = {
          DECLARE_METHOD(t_DocValuesFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, availableDocValuesFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesFormat, reloadDocValuesFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesFormat, t_DocValuesFormat, ::java::lang::Object, DocValuesFormat, abstract_init, 0, 0, t_DocValuesFormat__fields_, 0, 0);

        void t_DocValuesFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesFormat), module, "DocValuesFormat", 0);
        }

        void t_DocValuesFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "class_", make_descriptor(DocValuesFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_DocValuesFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesFormat::initializeClass, 1)))
            return NULL;
          return t_DocValuesFormat::wrap_Object(DocValuesFormat(((t_DocValuesFormat *) arg)->object.this$));
        }
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::availableDocValuesFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::forName(a0));
            return t_DocValuesFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::DocValuesFormat::reloadDocValuesFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadDocValuesFormats", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocValuesFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene40SegmentInfoFormat::mids$ = NULL;
          bool Lucene40SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene40SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene40SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoFormat::Lucene40SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene40SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene40SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene40SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat_init_, 0, 0, t_Lucene40SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene40SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoFormat), module, "Lucene40SegmentInfoFormat", 0);
          }

          void t_Lucene40SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene40SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoFormat::wrap_Object(Lucene40SegmentInfoFormat(((t_Lucene40SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreProvider.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreProvider::class$ = NULL;
        jmethodID *CustomScoreProvider::mids$ = NULL;
        bool CustomScoreProvider::live$ = false;

        jclass CustomScoreProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6f59947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_customExplain_3236f395] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customExplain_bec3370d] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;[Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customScore_f55b9306] = env->getMethodID(cls, "customScore", "(IFF)F");
            mids$[mid_customScore_c9ca8e84] = env->getMethodID(cls, "customScore", "(IF[F)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreProvider::CustomScoreProvider(const ::org::apache::lucene::index::AtomicReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a6f59947, a0.this$)) {}

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const ::org::apache::lucene::search::Explanation & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_3236f395], a0, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const JArray< ::org::apache::lucene::search::Explanation > & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_bec3370d], a0, a1.this$, a2.this$));
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, jfloat a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_f55b9306], a0, a1, a2);
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, const JArray< jfloat > & a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_c9ca8e84], a0, a1, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args);
        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args);

        static PyMethodDef t_CustomScoreProvider__methods_[] = {
          DECLARE_METHOD(t_CustomScoreProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, customExplain, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreProvider, customScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreProvider, t_CustomScoreProvider, ::java::lang::Object, CustomScoreProvider, t_CustomScoreProvider_init_, 0, 0, 0, 0, 0);

        void t_CustomScoreProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreProvider), module, "CustomScoreProvider", 0);
        }

        void t_CustomScoreProvider::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "class_", make_descriptor(CustomScoreProvider::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreProvider::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreProvider::initializeClass, 1)))
            return NULL;
          return t_CustomScoreProvider::wrap_Object(CustomScoreProvider(((t_CustomScoreProvider *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          CustomScoreProvider object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = CustomScoreProvider(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              ::org::apache::lucene::search::Explanation a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ikk", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              JArray< ::org::apache::lucene::search::Explanation > a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ik[k", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customExplain", args);
          return NULL;
        }

        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              jfloat a1;
              jfloat a2;
              jfloat result;

              if (!parseArgs(args, "IFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jint a0;
              jfloat a1;
              JArray< jfloat > a2((jobject) NULL);
              jfloat result;

              if (!parseArgs(args, "IF[F", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customScore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode::class$ = NULL;
              jmethodID *ProximityQueryNode::mids$ = NULL;
              bool ProximityQueryNode::live$ = false;

              jclass ProximityQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8db4cd70] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;Z)V");
                  mids$[mid_init$_0740981c] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;IZ)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getDistance_54c6a179] = env->getMethodID(cls, "getDistance", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getProximityType_9b7235cd] = env->getMethodID(cls, "getProximityType", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_8db4cd70, a0.this$, a1.this$, a2.this$, a3)) {}

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jint a3, jboolean a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0740981c, a0.this$, a1.this$, a2.this$, a3, a4)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ProximityQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jint ProximityQueryNode::getDistance() const
              {
                return env->callIntMethod(this$, mids$[mid_getDistance_54c6a179]);
              }

              ::java::lang::CharSequence ProximityQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String ProximityQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type ProximityQueryNode::getProximityType() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type(env->callObjectMethod(this$, mids$[mid_getProximityType_9b7235cd]));
              }

              jboolean ProximityQueryNode::isInOrder() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
              }

              void ProximityQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence ProximityQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ProximityQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg);
              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data);
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data);
              static PyGetSetDef t_ProximityQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode, distance),
                DECLARE_GETSET_FIELD(t_ProximityQueryNode, field),
                DECLARE_GET_FIELD(t_ProximityQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_ProximityQueryNode, inOrder),
                DECLARE_GET_FIELD(t_ProximityQueryNode, proximityType),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getDistance, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getProximityType, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, isInOrder, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, setField, METH_O),
                DECLARE_METHOD(t_ProximityQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode, t_ProximityQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, ProximityQueryNode, t_ProximityQueryNode_init_, 0, 0, t_ProximityQueryNode__fields_, 0, 0);

              void t_ProximityQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode), module, "ProximityQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "ProximityType", make_descriptor(&PY_TYPE(ProximityQueryNode$ProximityType)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "Type", make_descriptor(&PY_TYPE(ProximityQueryNode$Type)));
              }

              void t_ProximityQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "class_", make_descriptor(ProximityQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode::wrap_Object(ProximityQueryNode(((t_ProximityQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 4:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jboolean a3;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 5:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jint a3;
                    jboolean a4;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKIZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3, &a4))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3, a4));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getDistance());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type result((jobject) NULL);
                OBJ_CALL(result = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isInOrder());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getDistance());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isInOrder());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type value((jobject) NULL);
                OBJ_CALL(value = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Floats::class$ = NULL;
        jmethodID *FieldCache$Floats::mids$ = NULL;
        bool FieldCache$Floats::live$ = false;
        FieldCache$Floats *FieldCache$Floats::EMPTY = NULL;

        jclass FieldCache$Floats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Floats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2c] = env->getMethodID(cls, "get", "(I)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Floats(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Floats;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Floats::FieldCache$Floats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jfloat FieldCache$Floats::get(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_get_39c7bd2c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Floats__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Floats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Floats, t_FieldCache$Floats, ::java::lang::Object, FieldCache$Floats, t_FieldCache$Floats_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Floats::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Floats), module, "FieldCache$Floats", 0);
        }

        void t_FieldCache$Floats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "class_", make_descriptor(FieldCache$Floats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Floats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Floats::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Floats::wrap_Object(*FieldCache$Floats::EMPTY)));
        }

        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Floats::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Floats::wrap_Object(FieldCache$Floats(((t_FieldCache$Floats *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Floats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Floats object((jobject) NULL);

          INT_CALL(object = FieldCache$Floats());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsEnum::class$ = NULL;
        jmethodID *DocsEnum::mids$ = NULL;
        bool DocsEnum::live$ = false;
        jint DocsEnum::FLAG_FREQS = (jint) 0;
        jint DocsEnum::FLAG_NONE = (jint) 0;

        jclass DocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_FREQS = env->getStaticIntField(cls, "FLAG_FREQS");
            FLAG_NONE = env->getStaticIntField(cls, "FLAG_NONE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource DocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint DocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self);
        static PyObject *t_DocsEnum_freq(t_DocsEnum *self);

        static PyMethodDef t_DocsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_DocsEnum, freq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsEnum, t_DocsEnum, ::org::apache::lucene::search::DocIdSetIterator, DocsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_DocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsEnum), module, "DocsEnum", 0);
        }

        void t_DocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "class_", make_descriptor(DocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_FREQS", make_descriptor(DocsEnum::FLAG_FREQS));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_NONE", make_descriptor(DocsEnum::FLAG_NONE));
        }

        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsEnum::wrap_Object(DocsEnum(((t_DocsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_DocsEnum_freq(t_DocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.freq());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IdentityEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IdentityEncoder::class$ = NULL;
          jmethodID *IdentityEncoder::mids$ = NULL;
          bool IdentityEncoder::live$ = false;

          jclass IdentityEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IdentityEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IdentityEncoder::IdentityEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IdentityEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args);

          static PyMethodDef t_IdentityEncoder__methods_[] = {
            DECLARE_METHOD(t_IdentityEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IdentityEncoder, t_IdentityEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IdentityEncoder, t_IdentityEncoder_init_, 0, 0, 0, 0, 0);

          void t_IdentityEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IdentityEncoder), module, "IdentityEncoder", 0);
          }

          void t_IdentityEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "class_", make_descriptor(IdentityEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "wrapfn_", make_descriptor(t_IdentityEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IdentityEncoder::initializeClass, 1)))
              return NULL;
            return t_IdentityEncoder::wrap_Object(IdentityEncoder(((t_IdentityEncoder *) arg)->object.this$));
          }
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IdentityEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds)
          {
            IdentityEncoder object((jobject) NULL);

            INT_CALL(object = IdentityEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IdentityEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLFormatter::class$ = NULL;
          jmethodID *SimpleHTMLFormatter::mids$ = NULL;
          bool SimpleHTMLFormatter::live$ = false;

          jclass SimpleHTMLFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLFormatter::SimpleHTMLFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleHTMLFormatter::SimpleHTMLFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SimpleHTMLFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args);

          static PyMethodDef t_SimpleHTMLFormatter__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLFormatter, t_SimpleHTMLFormatter, ::java::lang::Object, SimpleHTMLFormatter, t_SimpleHTMLFormatter_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLFormatter), module, "SimpleHTMLFormatter", 0);
          }

          void t_SimpleHTMLFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "class_", make_descriptor(SimpleHTMLFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLFormatter::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLFormatter::wrap_Object(SimpleHTMLFormatter(((t_SimpleHTMLFormatter *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleHTMLFormatter object((jobject) NULL);

                INT_CALL(object = SimpleHTMLFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleHTMLFormatter object((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  INT_CALL(object = SimpleHTMLFormatter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilter::class$ = NULL;
          jmethodID *LowerCaseFilter::mids$ = NULL;
          bool LowerCaseFilter::live$ = false;

          jclass LowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean LowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_LowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilter, t_LowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, LowerCaseFilter, t_LowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilter), module, "LowerCaseFilter", 0);
          }

          void t_LowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "class_", make_descriptor(LowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilter::wrap_Object(LowerCaseFilter(((t_LowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            LowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = LowerCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparator::class$ = NULL;
        jmethodID *PythonFieldComparator::mids$ = NULL;
        bool PythonFieldComparator::live$ = false;

        jclass PythonFieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareDocToValue_f7cd74bb] = env->getMethodID(cls, "compareDocToValue", "(ILjava/lang/Object;)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparator::PythonFieldComparator() : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args);
        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self);
        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args);
        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0);
        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0);
        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data);
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data);
        static PyGetSetDef t_PythonFieldComparator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparator, self),
          DECLARE_GET_FIELD(t_PythonFieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparator__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_PythonFieldComparator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparator, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparator, t_PythonFieldComparator, ::org::apache::lucene::search::FieldComparator, PythonFieldComparator, t_PythonFieldComparator_init_, 0, 0, t_PythonFieldComparator__fields_, 0, 0);
        PyObject *t_PythonFieldComparator::wrap_Object(const PythonFieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PythonFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PythonFieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparator), module, "PythonFieldComparator", 1);
        }

        void t_PythonFieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "class_", make_descriptor(PythonFieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparator::initializeClass);
          JNINativeMethod methods[] = {
            { "compare", "(II)I", (void *) t_PythonFieldComparator_compare0 },
            { "compareBottom", "(I)I", (void *) t_PythonFieldComparator_compareBottom1 },
            { "compareDocToValue", "(ILjava/lang/Object;)I", (void *) t_PythonFieldComparator_compareDocToValue2 },
            { "compareTop", "(I)I", (void *) t_PythonFieldComparator_compareTop3 },
            { "copy", "(II)V", (void *) t_PythonFieldComparator_copy4 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparator_pythonDecRef5 },
            { "setBottom", "(I)V", (void *) t_PythonFieldComparator_setBottom6 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparator_setNextReader7 },
            { "setTopValue", "(Ljava/lang/Object;)V", (void *) t_PythonFieldComparator_setTopValue8 },
            { "value", "(I)Ljava/lang/Object;", (void *) t_PythonFieldComparator_value9 },
          };
          env->registerNatives(cls, methods, 10);
        }

        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparator::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparator::wrap_Object(PythonFieldComparator(((t_PythonFieldComparator *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparator object((jobject) NULL);

          INT_CALL(object = PythonFieldComparator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compare", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compare", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareBottom", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "compareDocToValue", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareDocToValue", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareTop", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTop", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "copy", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "setBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("setNextReader", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "setTopValue", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "value", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("value", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$FreezeTail.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$FreezeTail::class$ = NULL;
          jmethodID *Builder$FreezeTail::mids$ = NULL;
          bool Builder$FreezeTail::live$ = false;

          jclass Builder$FreezeTail::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$FreezeTail");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeze_d975a767] = env->getMethodID(cls, "freeze", "([Lorg/apache/lucene/util/fst/Builder$UnCompiledNode;ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$FreezeTail::Builder$FreezeTail() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Builder$FreezeTail::freeze(const JArray< ::org::apache::lucene::util::fst::Builder$UnCompiledNode > & a0, jint a1, const ::org::apache::lucene::util::IntsRef & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_d975a767], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$FreezeTail_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$FreezeTail_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$FreezeTail_of_(t_Builder$FreezeTail *self, PyObject *args);
          static int t_Builder$FreezeTail_init_(t_Builder$FreezeTail *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$FreezeTail_freeze(t_Builder$FreezeTail *self, PyObject *args);
          static PyObject *t_Builder$FreezeTail_get__parameters_(t_Builder$FreezeTail *self, void *data);
          static PyGetSetDef t_Builder$FreezeTail__fields_[] = {
            DECLARE_GET_FIELD(t_Builder$FreezeTail, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$FreezeTail__methods_[] = {
            DECLARE_METHOD(t_Builder$FreezeTail, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$FreezeTail, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$FreezeTail, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$FreezeTail, freeze, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$FreezeTail, t_Builder$FreezeTail, ::java::lang::Object, Builder$FreezeTail, t_Builder$FreezeTail_init_, 0, 0, t_Builder$FreezeTail__fields_, 0, 0);
          PyObject *t_Builder$FreezeTail::wrap_Object(const Builder$FreezeTail& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$FreezeTail::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$FreezeTail *self = (t_Builder$FreezeTail *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$FreezeTail::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$FreezeTail::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$FreezeTail *self = (t_Builder$FreezeTail *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$FreezeTail::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$FreezeTail), module, "Builder$FreezeTail", 0);
          }

          void t_Builder$FreezeTail::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "class_", make_descriptor(Builder$FreezeTail::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "wrapfn_", make_descriptor(t_Builder$FreezeTail::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$FreezeTail_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$FreezeTail::initializeClass, 1)))
              return NULL;
            return t_Builder$FreezeTail::wrap_Object(Builder$FreezeTail(((t_Builder$FreezeTail *) arg)->object.this$));
          }
          static PyObject *t_Builder$FreezeTail_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$FreezeTail::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$FreezeTail_of_(t_Builder$FreezeTail *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$FreezeTail_init_(t_Builder$FreezeTail *self, PyObject *args, PyObject *kwds)
          {
            Builder$FreezeTail object((jobject) NULL);

            INT_CALL(object = Builder$FreezeTail());
            self->object = object;

            return 0;
          }

          static PyObject *t_Builder$FreezeTail_freeze(t_Builder$FreezeTail *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$UnCompiledNode > a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            ::org::apache::lucene::util::IntsRef a2((jobject) NULL);

            if (!parseArgs(args, "[KIk", ::org::apache::lucene::util::fst::Builder$UnCompiledNode::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder$UnCompiledNode::parameters_, &a1, &a2))
            {
              OBJ_CALL(self->object.freeze(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeze", args);
            return NULL;
          }
          static PyObject *t_Builder$FreezeTail_get__parameters_(t_Builder$FreezeTail *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *StringHelper::class$ = NULL;
        jmethodID *StringHelper::mids$ = NULL;
        bool StringHelper::live$ = false;
        jint StringHelper::GOOD_FAST_HASH_SEED = (jint) 0;

        jclass StringHelper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/StringHelper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bytesDifference_594e5ef9] = env->getStaticMethodID(cls, "bytesDifference", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_endsWith_594e5eea] = env->getStaticMethodID(cls, "endsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_equals_4a26474e] = env->getStaticMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_getVersionComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getVersionComparator", "()Ljava/util/Comparator;");
            mids$[mid_murmurhash3_x86_32_738fc2d1] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "(Lorg/apache/lucene/util/BytesRef;I)I");
            mids$[mid_murmurhash3_x86_32_96a25f14] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "([BIII)I");
            mids$[mid_startsWith_594e5eea] = env->getStaticMethodID(cls, "startsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GOOD_FAST_HASH_SEED = env->getStaticIntField(cls, "GOOD_FAST_HASH_SEED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint StringHelper::bytesDifference(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bytesDifference_594e5ef9], a0.this$, a1.this$);
        }

        jboolean StringHelper::endsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_594e5eea], a0.this$, a1.this$);
        }

        jboolean StringHelper::equals(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
        }

        ::java::util::Comparator StringHelper::getVersionComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getVersionComparator_5a7ff2fc]));
        }

        jint StringHelper::murmurhash3_x86_32(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_738fc2d1], a0.this$, a1);
        }

        jint StringHelper::murmurhash3_x86_32(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_96a25f14], a0.this$, a1, a2, a3);
        }

        jboolean StringHelper::startsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_594e5eea], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_getVersionComparator(PyTypeObject *type);
        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_get__versionComparator(t_StringHelper *self, void *data);
        static PyGetSetDef t_StringHelper__fields_[] = {
          DECLARE_GET_FIELD(t_StringHelper, versionComparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StringHelper__methods_[] = {
          DECLARE_METHOD(t_StringHelper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, bytesDifference, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, endsWith, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, getVersionComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, murmurhash3_x86_32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, startsWith, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringHelper, t_StringHelper, ::java::lang::Object, StringHelper, abstract_init, 0, 0, t_StringHelper__fields_, 0, 0);

        void t_StringHelper::install(PyObject *module)
        {
          installType(&PY_TYPE(StringHelper), module, "StringHelper", 0);
        }

        void t_StringHelper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "class_", make_descriptor(StringHelper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "wrapfn_", make_descriptor(t_StringHelper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringHelper::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "GOOD_FAST_HASH_SEED", make_descriptor(StringHelper::GOOD_FAST_HASH_SEED));
        }

        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringHelper::initializeClass, 1)))
            return NULL;
          return t_StringHelper::wrap_Object(StringHelper(((t_StringHelper *) arg)->object.this$));
        }
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringHelper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::bytesDifference(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bytesDifference", args);
          return NULL;
        }

        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::endsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "endsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_StringHelper_getVersionComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::getVersionComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "murmurhash3_x86_32", args);
          return NULL;
        }

        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "startsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_get__versionComparator(t_StringHelper *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersionComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ValueQueryNode::class$ = NULL;
              jmethodID *ValueQueryNode::mids$ = NULL;
              bool ValueQueryNode::live$ = false;

              jclass ValueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_setValue_290588ee] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object ValueQueryNode::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              void ValueQueryNode::setValue(const ::java::lang::Object & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_290588ee], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args);
              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self);
              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg);
              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data);
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data);
              static PyGetSetDef t_ValueQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ValueQueryNode, value),
                DECLARE_GET_FIELD(t_ValueQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ValueQueryNode__methods_[] = {
                DECLARE_METHOD(t_ValueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_ValueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_ValueQueryNode, setValue, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ValueQueryNode, t_ValueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, ValueQueryNode, abstract_init, 0, 0, t_ValueQueryNode__fields_, 0, 0);
              PyObject *t_ValueQueryNode::wrap_Object(const ValueQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ValueQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ValueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ValueQueryNode), module, "ValueQueryNode", 0);
              }

              void t_ValueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "class_", make_descriptor(ValueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ValueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ValueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ValueQueryNode::wrap_Object(ValueQueryNode(((t_ValueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ValueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);

                if (!parseArg(arg, "O", self->parameters[0], &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Object value((jobject) NULL);
                  if (!parseArg(arg, "o", &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermVectorStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermVectorStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermVectorStatus::fids$ = NULL;
        bool CheckIndex$Status$TermVectorStatus::live$ = false;

        jclass CheckIndex$Status$TermVectorStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermVectorStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totVectors] = env->getFieldID(cls, "totVectors", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$TermVectorStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermVectorStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermVectorStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermVectorStatus::_get_totVectors() const
        {
          return env->getLongField(this$, fids$[fid_totVectors]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_totVectors(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totVectors], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermVectorStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, totVectors),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermVectorStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermVectorStatus, t_CheckIndex$Status$TermVectorStatus, ::java::lang::Object, CheckIndex$Status$TermVectorStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermVectorStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermVectorStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermVectorStatus), module, "CheckIndex$Status$TermVectorStatus", 0);
        }

        void t_CheckIndex$Status$TermVectorStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermVectorStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermVectorStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermVectorStatus::wrap_Object(CheckIndex$Status$TermVectorStatus(((t_CheckIndex$Status$TermVectorStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totVectors());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totVectors(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totVectors", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreDoc::class$ = NULL;
        jmethodID *ScoreDoc::mids$ = NULL;
        jfieldID *ScoreDoc::fids$ = NULL;
        bool ScoreDoc::live$ = false;

        jclass ScoreDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
            fids$[fid_score] = env->getFieldID(cls, "score", "F");
            fids$[fid_shardIndex] = env->getFieldID(cls, "shardIndex", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreDoc::ScoreDoc(jint a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        ScoreDoc::ScoreDoc(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

        ::java::lang::String ScoreDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ScoreDoc::_get_doc() const
        {
          return env->getIntField(this$, fids$[fid_doc]);
        }

        void ScoreDoc::_set_doc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_doc], a0);
        }

        jfloat ScoreDoc::_get_score() const
        {
          return env->getFloatField(this$, fids$[fid_score]);
        }

        void ScoreDoc::_set_score(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_score], a0);
        }

        jint ScoreDoc::_get_shardIndex() const
        {
          return env->getIntField(this$, fids$[fid_shardIndex]);
        }

        void ScoreDoc::_set_shardIndex(jint a0) const
        {
          env->setIntField(this$, fids$[fid_shardIndex], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args);
        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_ScoreDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_ScoreDoc, doc),
          DECLARE_GETSET_FIELD(t_ScoreDoc, score),
          DECLARE_GETSET_FIELD(t_ScoreDoc, shardIndex),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreDoc__methods_[] = {
          DECLARE_METHOD(t_ScoreDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreDoc, t_ScoreDoc, ::java::lang::Object, ScoreDoc, t_ScoreDoc_init_, 0, 0, t_ScoreDoc__fields_, 0, 0);

        void t_ScoreDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreDoc), module, "ScoreDoc", 0);
        }

        void t_ScoreDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "class_", make_descriptor(ScoreDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "wrapfn_", make_descriptor(t_ScoreDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreDoc::initializeClass, 1)))
            return NULL;
          return t_ScoreDoc::wrap_Object(ScoreDoc(((t_ScoreDoc *) arg)->object.this$));
        }
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = ScoreDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              jint a2;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = ScoreDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ScoreDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_doc());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_doc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "doc", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_score());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_score(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "score", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_shardIndex());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_shardIndex(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "shardIndex", arg);
          return -1;
        }
      }
    }
  }
}
