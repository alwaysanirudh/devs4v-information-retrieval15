#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragmentsBuilder::class$ = NULL;
          jmethodID *BaseFragmentsBuilder::mids$ = NULL;
          bool BaseFragmentsBuilder::live$ = false;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_POST_TAGS = NULL;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_PRE_TAGS = NULL;

          jclass BaseFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getMultiValuedSeparator_54c6a173] = env->getMethodID(cls, "getMultiValuedSeparator", "()C");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");
              mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a] = env->getMethodID(cls, "isDiscreteMultiValueHighlighting", "()Z");
              mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f] = env->getMethodID(cls, "setDiscreteMultiValueHighlighting", "(Z)V");
              mids$[mid_setMultiValuedSeparator_87fd545a] = env->getMethodID(cls, "setMultiValuedSeparator", "(C)V");
              mids$[mid_getFields_cc0d693c] = env->getMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)[Lorg/apache/lucene/document/Field;");
              mids$[mid_discreteMultiValueHighlighting_d191731d] = env->getMethodID(cls, "discreteMultiValueHighlighting", "(Ljava/util/List;[Lorg/apache/lucene/document/Field;)Ljava/util/List;");
              mids$[mid_makeFragment_b70fa26e] = env->getMethodID(cls, "makeFragment", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getFragmentSourceMSO_a32be9ad] = env->getMethodID(cls, "getFragmentSourceMSO", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II[I)Ljava/lang/String;");
              mids$[mid_getFragmentSource_771056c3] = env->getMethodID(cls, "getFragmentSource", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II)Ljava/lang/String;");
              mids$[mid_getPreTag_64aeb14d] = env->getMethodID(cls, "getPreTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPreTag_141401b3] = env->getMethodID(cls, "getPreTag", "(I)Ljava/lang/String;");
              mids$[mid_getPostTag_64aeb14d] = env->getMethodID(cls, "getPostTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPostTag_141401b3] = env->getMethodID(cls, "getPostTag", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              COLORED_POST_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_POST_TAGS", "[Ljava/lang/String;"));
              COLORED_PRE_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_PRE_TAGS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }

          jchar BaseFragmentsBuilder::getMultiValuedSeparator() const
          {
            return env->callCharMethod(this$, mids$[mid_getMultiValuedSeparator_54c6a173]);
          }

          ::java::util::List BaseFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }

          jboolean BaseFragmentsBuilder::isDiscreteMultiValueHighlighting() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a]);
          }

          void BaseFragmentsBuilder::setDiscreteMultiValueHighlighting(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f], a0);
          }

          void BaseFragmentsBuilder::setMultiValuedSeparator(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiValuedSeparator_87fd545a], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyGetSetDef t_BaseFragmentsBuilder__fields_[] = {
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, discreteMultiValueHighlighting),
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, multiValuedSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BaseFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragments, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getMultiValuedSeparator, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getWeightedFragInfoList, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, isDiscreteMultiValueHighlighting, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setDiscreteMultiValueHighlighting, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setMultiValuedSeparator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragmentsBuilder, t_BaseFragmentsBuilder, ::java::lang::Object, BaseFragmentsBuilder, abstract_init, 0, 0, t_BaseFragmentsBuilder__fields_, 0, 0);

          void t_BaseFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragmentsBuilder), module, "BaseFragmentsBuilder", 0);
          }

          void t_BaseFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "class_", make_descriptor(BaseFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragmentsBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_POST_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_POST_TAGS->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_PRE_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_PRE_TAGS->this$).wrap()));
          }

          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragmentsBuilder::wrap_Object(BaseFragmentsBuilder(((t_BaseFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedFragInfoList", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscreteMultiValueHighlighting(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscreteMultiValueHighlighting", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jchar a0;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(self->object.setMultiValuedSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiValuedSeparator", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(value);
          }
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscreteMultiValueHighlighting(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discreteMultiValueHighlighting", arg);
            return -1;
          }

          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jchar value;
              if (!parseArg(arg, "C", &value))
              {
                INT_CALL(self->object.setMultiValuedSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiValuedSeparator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilter::class$ = NULL;
          jmethodID *ElisionFilter::mids$ = NULL;
          bool ElisionFilter::live$ = false;

          jclass ElisionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilter::ElisionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          jboolean ElisionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args);

          static PyMethodDef t_ElisionFilter__methods_[] = {
            DECLARE_METHOD(t_ElisionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilter, t_ElisionFilter, ::org::apache::lucene::analysis::TokenFilter, ElisionFilter, t_ElisionFilter_init_, 0, 0, 0, 0, 0);

          void t_ElisionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilter), module, "ElisionFilter", 0);
          }

          void t_ElisionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "class_", make_descriptor(ElisionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilter::initializeClass, 1)))
              return NULL;
            return t_ElisionFilter::wrap_Object(ElisionFilter(((t_ElisionFilter *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            ElisionFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = ElisionFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ElisionFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLS::class$ = NULL;
            jmethodID *NLS::mids$ = NULL;
            bool NLS::live$ = false;

            jclass NLS::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLS");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLocalizedMessage_97a5258f] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_6ffeebd8] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_0fb26e3b] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c901cda2] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_initializeMessages_c13be9ce] = env->getStaticMethodID(cls, "initializeMessages", "(Ljava/lang/String;Ljava/lang/Class;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_97a5258f], a0.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_6ffeebd8], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_0fb26e3b], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1, const JArray< ::java::lang::Object > & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_c901cda2], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_NLS__methods_[] = {
              DECLARE_METHOD(t_NLS, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, getLocalizedMessage, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLS, t_NLS, ::java::lang::Object, NLS, abstract_init, 0, 0, 0, 0, 0);

            void t_NLS::install(PyObject *module)
            {
              installType(&PY_TYPE(NLS), module, "NLS", 0);
            }

            void t_NLS::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "class_", make_descriptor(NLS::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "wrapfn_", make_descriptor(t_NLS::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLS::initializeClass, 1)))
                return NULL;
              return t_NLS::wrap_Object(NLS(((t_NLS *) arg)->object.this$));
            }
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLS::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  JArray< ::java::lang::Object > a2((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1, a2));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "getLocalizedMessage", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader$ChildrenIterator::class$ = NULL;
          jmethodID *TaxonomyReader$ChildrenIterator::mids$ = NULL;
          bool TaxonomyReader$ChildrenIterator::live$ = false;

          jclass TaxonomyReader$ChildrenIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyReader$ChildrenIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self);

          static PyMethodDef t_TaxonomyReader$ChildrenIterator__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader$ChildrenIterator, t_TaxonomyReader$ChildrenIterator, ::java::lang::Object, TaxonomyReader$ChildrenIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyReader$ChildrenIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader$ChildrenIterator), module, "TaxonomyReader$ChildrenIterator", 0);
          }

          void t_TaxonomyReader$ChildrenIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "class_", make_descriptor(TaxonomyReader$ChildrenIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader$ChildrenIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader$ChildrenIterator::wrap_Object(TaxonomyReader$ChildrenIterator(((t_TaxonomyReader$ChildrenIterator *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.next());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderManager.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderManager::class$ = NULL;
        jmethodID *ReaderManager::mids$ = NULL;
        bool ReaderManager::live$ = false;

        jclass ReaderManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7015519a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Z)V");
            mids$[mid_decRef_1e43081e] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_getRefCount_1e430801] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/index/DirectoryReader;)I");
            mids$[mid_tryIncRef_1e430812] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/index/DirectoryReader;)Z");
            mids$[mid_refreshIfNeeded_5bb3c60f] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderManager::ReaderManager(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_7015519a, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args);
        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data);
        static PyGetSetDef t_ReaderManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderManager__methods_[] = {
          DECLARE_METHOD(t_ReaderManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderManager, t_ReaderManager, ::org::apache::lucene::search::ReferenceManager, ReaderManager, t_ReaderManager_init_, 0, 0, t_ReaderManager__fields_, 0, 0);
        PyObject *t_ReaderManager::wrap_Object(const ReaderManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReaderManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReaderManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderManager), module, "ReaderManager", 0);
        }

        void t_ReaderManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "class_", make_descriptor(ReaderManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "wrapfn_", make_descriptor(t_ReaderManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderManager::initializeClass, 1)))
            return NULL;
          return t_ReaderManager::wrap_Object(ReaderManager(((t_ReaderManager *) arg)->object.this$));
        }
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ReaderManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/List.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReaderContext::class$ = NULL;
        jmethodID *IndexReaderContext::mids$ = NULL;
        jfieldID *IndexReaderContext::fids$ = NULL;
        bool IndexReaderContext::live$ = false;

        jclass IndexReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_94bbd010] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/IndexReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBaseInParent] = env->getFieldID(cls, "docBaseInParent", "I");
            fids$[fid_isTopLevel] = env->getFieldID(cls, "isTopLevel", "Z");
            fids$[fid_ordInParent] = env->getFieldID(cls, "ordInParent", "I");
            fids$[fid_parent] = env->getFieldID(cls, "parent", "Lorg/apache/lucene/index/CompositeReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List IndexReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List IndexReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::IndexReader IndexReaderContext::reader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_reader_94bbd010]));
        }

        jint IndexReaderContext::_get_docBaseInParent() const
        {
          return env->getIntField(this$, fids$[fid_docBaseInParent]);
        }

        jboolean IndexReaderContext::_get_isTopLevel() const
        {
          return env->getBooleanField(this$, fids$[fid_isTopLevel]);
        }

        jint IndexReaderContext::_get_ordInParent() const
        {
          return env->getIntField(this$, fids$[fid_ordInParent]);
        }

        ::org::apache::lucene::index::CompositeReaderContext IndexReaderContext::_get_parent() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->getObjectField(this$, fids$[fid_parent]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data);

        static PyGetSetDef t_IndexReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReaderContext, docBaseInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, isTopLevel),
          DECLARE_GET_FIELD(t_IndexReaderContext, ordInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, parent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReaderContext__methods_[] = {
          DECLARE_METHOD(t_IndexReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, children, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, reader, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReaderContext, t_IndexReaderContext, ::java::lang::Object, IndexReaderContext, abstract_init, 0, 0, t_IndexReaderContext__fields_, 0, 0);

        void t_IndexReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReaderContext), module, "IndexReaderContext", 0);
        }

        void t_IndexReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "class_", make_descriptor(IndexReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "wrapfn_", make_descriptor(t_IndexReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReaderContext::initializeClass, 1)))
            return NULL;
          return t_IndexReaderContext::wrap_Object(IndexReaderContext(((t_IndexReaderContext *) arg)->object.this$));
        }
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.children());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
        }

        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.reader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBaseInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isTopLevel());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ordInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_parent());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilterFactory::class$ = NULL;
          jmethodID *GreekStemFilterFactory::mids$ = NULL;
          bool GreekStemFilterFactory::live$ = false;

          jclass GreekStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilterFactory::GreekStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GreekStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GreekStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilterFactory, t_GreekStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekStemFilterFactory, t_GreekStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilterFactory), module, "GreekStemFilterFactory", 0);
          }

          void t_GreekStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "class_", make_descriptor(GreekStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilterFactory::wrap_Object(GreekStemFilterFactory(((t_GreekStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilterFactory::class$ = NULL;
          jmethodID *TruncateTokenFilterFactory::mids$ = NULL;
          bool TruncateTokenFilterFactory::live$ = false;
          ::java::lang::String *TruncateTokenFilterFactory::PREFIX_LENGTH_KEY = NULL;

          jclass TruncateTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PREFIX_LENGTH_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PREFIX_LENGTH_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilterFactory::TruncateTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TruncateTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilterFactory, t_TruncateTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TruncateTokenFilterFactory, t_TruncateTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilterFactory), module, "TruncateTokenFilterFactory", 0);
          }

          void t_TruncateTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "class_", make_descriptor(TruncateTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TruncateTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "PREFIX_LENGTH_KEY", make_descriptor(j2p(*TruncateTokenFilterFactory::PREFIX_LENGTH_KEY)));
          }

          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilterFactory::wrap_Object(TruncateTokenFilterFactory(((t_TruncateTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TruncateTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TruncateTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizer::class$ = NULL;
          jmethodID *RussianLetterTokenizer::mids$ = NULL;
          bool RussianLetterTokenizer::live$ = false;

          jclass RussianLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RussianLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizer, t_RussianLetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, RussianLetterTokenizer, t_RussianLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizer), module, "RussianLetterTokenizer", 0);
          }

          void t_RussianLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "class_", make_descriptor(RussianLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizer::wrap_Object(RussianLetterTokenizer(((t_RussianLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$FloatParser::class$ = NULL;
        jmethodID *FieldCache$FloatParser::mids$ = NULL;
        bool FieldCache$FloatParser::live$ = false;

        jclass FieldCache$FloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$FloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat FieldCache$FloatParser::parseFloat(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_parseFloat_7bc03dd4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$FloatParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$FloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, parseFloat, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$FloatParser, t_FieldCache$FloatParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$FloatParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$FloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$FloatParser), module, "FieldCache$FloatParser", 0);
        }

        void t_FieldCache$FloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "class_", make_descriptor(FieldCache$FloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$FloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$FloatParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$FloatParser::wrap_Object(FieldCache$FloatParser(((t_FieldCache$FloatParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$FloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jfloat result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseFloat", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SPIClassIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SPIClassIterator::class$ = NULL;
        jmethodID *SPIClassIterator::mids$ = NULL;
        bool SPIClassIterator::live$ = false;

        jclass SPIClassIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SPIClassIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_d529caef] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_get_9dc4dbcc] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_isParentClassLoader_7f5616f8] = env->getStaticMethodID(cls, "isParentClassLoader", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z");
            mids$[mid_next_44a5f2c9] = env->getMethodID(cls, "next", "()Ljava/lang/Class;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_d529caef], a0.this$));
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_9dc4dbcc], a0.this$, a1.this$));
        }

        jboolean SPIClassIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        jboolean SPIClassIterator::isParentClassLoader(const ::java::lang::ClassLoader & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isParentClassLoader_7f5616f8], a0.this$, a1.this$);
        }

        ::java::lang::Class SPIClassIterator::next() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_next_44a5f2c9]));
        }

        void SPIClassIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args);
        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data);
        static PyGetSetDef t_SPIClassIterator__fields_[] = {
          DECLARE_GET_FIELD(t_SPIClassIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SPIClassIterator__methods_[] = {
          DECLARE_METHOD(t_SPIClassIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_SPIClassIterator, get, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, isParentClassLoader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SPIClassIterator, t_SPIClassIterator, ::java::lang::Object, SPIClassIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Class >), t_SPIClassIterator__fields_, 0, 0);
        PyObject *t_SPIClassIterator::wrap_Object(const SPIClassIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SPIClassIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SPIClassIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(SPIClassIterator), module, "SPIClassIterator", 0);
        }

        void t_SPIClassIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "class_", make_descriptor(SPIClassIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "wrapfn_", make_descriptor(t_SPIClassIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SPIClassIterator::initializeClass, 1)))
            return NULL;
          return t_SPIClassIterator::wrap_Object(SPIClassIterator(((t_SPIClassIterator *) arg)->object.this$));
        }
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SPIClassIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0, a1));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "get", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);
          ::java::lang::ClassLoader a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::java::lang::ClassLoader::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::isParentClassLoader(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isParentClassLoader", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldDocs::class$ = NULL;
        jmethodID *TopFieldDocs::mids$ = NULL;
        jfieldID *TopFieldDocs::fids$ = NULL;
        bool TopFieldDocs::live$ = false;

        jclass TopFieldDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6001f02] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;[Lorg/apache/lucene/search/SortField;F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Lorg/apache/lucene/search/SortField;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopFieldDocs::TopFieldDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, const JArray< ::org::apache::lucene::search::SortField > & a2, jfloat a3) : ::org::apache::lucene::search::TopDocs(env->newObject(initializeClass, &mids$, mid_init$_e6001f02, a0, a1.this$, a2.this$, a3)) {}

        JArray< ::org::apache::lucene::search::SortField > TopFieldDocs::_get_fields() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void TopFieldDocs::_set_fields(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data);
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data);

        static PyGetSetDef t_TopFieldDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopFieldDocs, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldDocs__methods_[] = {
          DECLARE_METHOD(t_TopFieldDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldDocs, t_TopFieldDocs, ::org::apache::lucene::search::TopDocs, TopFieldDocs, t_TopFieldDocs_init_, 0, 0, t_TopFieldDocs__fields_, 0, 0);

        void t_TopFieldDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldDocs), module, "TopFieldDocs", 0);
        }

        void t_TopFieldDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "class_", make_descriptor(TopFieldDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "wrapfn_", make_descriptor(t_TopFieldDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldDocs::initializeClass, 1)))
            return NULL;
          return t_TopFieldDocs::wrap_Object(TopFieldDocs(((t_TopFieldDocs *) arg)->object.this$));
        }
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::SortField > a2((jobject) NULL);
          jfloat a3;
          TopFieldDocs object((jobject) NULL);

          if (!parseArgs(args, "I[k[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = TopFieldDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInvertState::class$ = NULL;
        jmethodID *FieldInvertState::mids$ = NULL;
        bool FieldInvertState::live$ = false;

        jclass FieldInvertState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInvertState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_9f4a1ba9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIIF)V");
            mids$[mid_getAttributeSource_f901022b] = env->getMethodID(cls, "getAttributeSource", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
            mids$[mid_getMaxTermFrequency_54c6a179] = env->getMethodID(cls, "getMaxTermFrequency", "()I");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_getNumOverlap_54c6a179] = env->getMethodID(cls, "getNumOverlap", "()I");
            mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_getUniqueTermCount_54c6a179] = env->getMethodID(cls, "getUniqueTermCount", "()I");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_setNumOverlap_39c7bd3c] = env->getMethodID(cls, "setNumOverlap", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f4a1ba9, a0.this$, a1, a2, a3, a4, a5)) {}

        ::org::apache::lucene::util::AttributeSource FieldInvertState::getAttributeSource() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_getAttributeSource_f901022b]));
        }

        jfloat FieldInvertState::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint FieldInvertState::getLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
        }

        jint FieldInvertState::getMaxTermFrequency() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxTermFrequency_54c6a179]);
        }

        ::java::lang::String FieldInvertState::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        jint FieldInvertState::getNumOverlap() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumOverlap_54c6a179]);
        }

        jint FieldInvertState::getOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
        }

        jint FieldInvertState::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint FieldInvertState::getUniqueTermCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getUniqueTermCount_54c6a179]);
        }

        void FieldInvertState::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void FieldInvertState::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        void FieldInvertState::setNumOverlap(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumOverlap_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data);
        static PyGetSetDef t_FieldInvertState__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInvertState, attributeSource),
          DECLARE_GETSET_FIELD(t_FieldInvertState, boost),
          DECLARE_GETSET_FIELD(t_FieldInvertState, length),
          DECLARE_GET_FIELD(t_FieldInvertState, maxTermFrequency),
          DECLARE_GET_FIELD(t_FieldInvertState, name),
          DECLARE_GETSET_FIELD(t_FieldInvertState, numOverlap),
          DECLARE_GET_FIELD(t_FieldInvertState, offset),
          DECLARE_GET_FIELD(t_FieldInvertState, position),
          DECLARE_GET_FIELD(t_FieldInvertState, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInvertState__methods_[] = {
          DECLARE_METHOD(t_FieldInvertState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, getAttributeSource, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getLength, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getMaxTermFrequency, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getName, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getNumOverlap, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getOffset, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, setBoost, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setLength, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setNumOverlap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInvertState, t_FieldInvertState, ::java::lang::Object, FieldInvertState, t_FieldInvertState_init_, 0, 0, t_FieldInvertState__fields_, 0, 0);

        void t_FieldInvertState::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInvertState), module, "FieldInvertState", 0);
        }

        void t_FieldInvertState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "class_", make_descriptor(FieldInvertState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "wrapfn_", make_descriptor(t_FieldInvertState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInvertState::initializeClass, 1)))
            return NULL;
          return t_FieldInvertState::wrap_Object(FieldInvertState(((t_FieldInvertState *) arg)->object.this$));
        }
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInvertState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldInvertState(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              jfloat a5;
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "sIIIIF", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = FieldInvertState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumOverlap());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumOverlap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumOverlap", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data)
        {
          ::org::apache::lucene::util::AttributeSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(value);
        }

        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLength());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setLength(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }

        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumOverlap());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setNumOverlap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "numOverlap", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getOffset());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilterFactory::class$ = NULL;
          jmethodID *PersianNormalizationFilterFactory::mids$ = NULL;
          bool PersianNormalizationFilterFactory::live$ = false;

          jclass PersianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6e538871] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/fa/PersianNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilterFactory::PersianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::fa::PersianNormalizationFilter PersianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::fa::PersianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_6e538871], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self);
          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_PersianNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory_init_, 0, 0, t_PersianNormalizationFilterFactory__fields_, 0, 0);

          void t_PersianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilterFactory), module, "PersianNormalizationFilterFactory", 0);
          }

          void t_PersianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(PersianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilterFactory::wrap_Object(PersianNormalizationFilterFactory(((t_PersianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::fa::PersianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::fa::t_PersianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IllegalStateException::class$ = NULL;
    jmethodID *IllegalStateException::mids$ = NULL;
    bool IllegalStateException::live$ = false;

    jclass IllegalStateException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IllegalStateException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IllegalStateException::IllegalStateException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IllegalStateException__methods_[] = {
      DECLARE_METHOD(t_IllegalStateException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IllegalStateException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IllegalStateException, t_IllegalStateException, ::java::lang::RuntimeException, IllegalStateException, t_IllegalStateException_init_, 0, 0, 0, 0, 0);

    void t_IllegalStateException::install(PyObject *module)
    {
      installType(&PY_TYPE(IllegalStateException), module, "IllegalStateException", 0);
    }

    void t_IllegalStateException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "class_", make_descriptor(IllegalStateException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "wrapfn_", make_descriptor(t_IllegalStateException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IllegalStateException::initializeClass, 1)))
        return NULL;
      return t_IllegalStateException::wrap_Object(IllegalStateException(((t_IllegalStateException *) arg)->object.this$));
    }
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IllegalStateException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IllegalStateException object((jobject) NULL);

          INT_CALL(object = IllegalStateException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IllegalStateException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonDoubleParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonDoubleParser::class$ = NULL;
        jmethodID *PythonDoubleParser::mids$ = NULL;
        bool PythonDoubleParser::live$ = false;

        jclass PythonDoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonDoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDoubleParser::PythonDoubleParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDoubleParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDoubleParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDoubleParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self);
        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args);
        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data);
        static PyGetSetDef t_PythonDoubleParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDoubleParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDoubleParser__methods_[] = {
          DECLARE_METHOD(t_PythonDoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDoubleParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDoubleParser, t_PythonDoubleParser, ::java::lang::Object, PythonDoubleParser, t_PythonDoubleParser_init_, 0, 0, t_PythonDoubleParser__fields_, 0, 0);

        void t_PythonDoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDoubleParser), module, "PythonDoubleParser", 1);
        }

        void t_PythonDoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "class_", make_descriptor(PythonDoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "wrapfn_", make_descriptor(t_PythonDoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDoubleParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D", (void *) t_PythonDoubleParser_parseDouble0 },
            { "pythonDecRef", "()V", (void *) t_PythonDoubleParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonDoubleParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDoubleParser::initializeClass, 1)))
            return NULL;
          return t_PythonDoubleParser::wrap_Object(PythonDoubleParser(((t_PythonDoubleParser *) arg)->object.this$));
        }
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds)
        {
          PythonDoubleParser object((jobject) NULL);

          INT_CALL(object = PythonDoubleParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jdouble value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseDouble", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "D", &value))
          {
            throwTypeError("parseDouble", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jdouble) 0;
        }

        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack::class$ = NULL;
          jmethodID *FieldTermStack::mids$ = NULL;
          bool FieldTermStack::live$ = false;

          jclass FieldTermStack::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3cbed11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
              mids$[mid_pop_9d9e3d4a] = env->getMethodID(cls, "pop", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_push_a7ece36b] = env->getMethodID(cls, "push", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack::FieldTermStack(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e3cbed11, a0.this$, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FieldTermStack::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          jboolean FieldTermStack::isEmpty() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
          }

          ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo FieldTermStack::pop() const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_pop_9d9e3d4a]));
          }

          void FieldTermStack::push(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_push_a7ece36b], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg);
          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data);
          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data);
          static PyGetSetDef t_FieldTermStack__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack, empty),
            DECLARE_GET_FIELD(t_FieldTermStack, fieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, pop, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, push, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack, t_FieldTermStack, ::java::lang::Object, FieldTermStack, t_FieldTermStack_init_, 0, 0, t_FieldTermStack__fields_, 0, 0);

          void t_FieldTermStack::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack), module, "FieldTermStack", 0);
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "TermInfo", make_descriptor(&PY_TYPE(FieldTermStack$TermInfo)));
          }

          void t_FieldTermStack::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "class_", make_descriptor(FieldTermStack::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack::wrap_Object(FieldTermStack(((t_FieldTermStack *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a3((jobject) NULL);
            FieldTermStack object((jobject) NULL);

            if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FieldTermStack(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.pop());
            return ::org::apache::lucene::search::vectorhighlight::t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.push(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "push", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilterFactory::class$ = NULL;
          jmethodID *FrenchMinimalStemFilterFactory::mids$ = NULL;
          bool FrenchMinimalStemFilterFactory::live$ = false;

          jclass FrenchMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilterFactory::FrenchMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilterFactory), module, "FrenchMinimalStemFilterFactory", 0);
          }

          void t_FrenchMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilterFactory::wrap_Object(FrenchMinimalStemFilterFactory(((t_FrenchMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameHashIntCacheLRU::class$ = NULL;
            jmethodID *NameHashIntCacheLRU::mids$ = NULL;
            bool NameHashIntCacheLRU::live$ = false;

            jclass NameHashIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_NameHashIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameHashIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameHashIntCacheLRU, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameHashIntCacheLRU, t_NameHashIntCacheLRU, ::org::apache::lucene::facet::taxonomy::writercache::NameIntCacheLRU, NameHashIntCacheLRU, abstract_init, 0, 0, 0, 0, 0);

            void t_NameHashIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameHashIntCacheLRU), module, "NameHashIntCacheLRU", 0);
            }

            void t_NameHashIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "class_", make_descriptor(NameHashIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameHashIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameHashIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameHashIntCacheLRU::wrap_Object(NameHashIntCacheLRU(((t_NameHashIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameHashIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ComplexExplanation.h"
#include "java/lang/String.h"
#include "java/lang/Boolean.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ComplexExplanation::class$ = NULL;
        jmethodID *ComplexExplanation::mids$ = NULL;
        bool ComplexExplanation::live$ = false;

        jclass ComplexExplanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ComplexExplanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_2ed007a2] = env->getMethodID(cls, "<init>", "(ZFLjava/lang/String;)V");
            mids$[mid_getMatch_34327cc3] = env->getMethodID(cls, "getMatch", "()Ljava/lang/Boolean;");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setMatch_d07f0c8e] = env->getMethodID(cls, "setMatch", "(Ljava/lang/Boolean;)V");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ComplexExplanation::ComplexExplanation() : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ComplexExplanation::ComplexExplanation(jboolean a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_2ed007a2, a0, a1, a2.this$)) {}

        ::java::lang::Boolean ComplexExplanation::getMatch() const
        {
          return ::java::lang::Boolean(env->callObjectMethod(this$, mids$[mid_getMatch_34327cc3]));
        }

        jboolean ComplexExplanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void ComplexExplanation::setMatch(const ::java::lang::Boolean & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMatch_d07f0c8e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self);
        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args);
        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg);
        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data);
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_ComplexExplanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_ComplexExplanation, match),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ComplexExplanation__methods_[] = {
          DECLARE_METHOD(t_ComplexExplanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, getMatch, METH_NOARGS),
          DECLARE_METHOD(t_ComplexExplanation, isMatch, METH_VARARGS),
          DECLARE_METHOD(t_ComplexExplanation, setMatch, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ComplexExplanation, t_ComplexExplanation, ::org::apache::lucene::search::Explanation, ComplexExplanation, t_ComplexExplanation_init_, 0, 0, t_ComplexExplanation__fields_, 0, 0);

        void t_ComplexExplanation::install(PyObject *module)
        {
          installType(&PY_TYPE(ComplexExplanation), module, "ComplexExplanation", 0);
        }

        void t_ComplexExplanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "class_", make_descriptor(ComplexExplanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "wrapfn_", make_descriptor(t_ComplexExplanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ComplexExplanation::initializeClass, 1)))
            return NULL;
          return t_ComplexExplanation::wrap_Object(ComplexExplanation(((t_ComplexExplanation *) arg)->object.this$));
        }
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ComplexExplanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ComplexExplanation object((jobject) NULL);

              INT_CALL(object = ComplexExplanation());
              self->object = object;
              break;
            }
            goto err;
           case 3:
            {
              jboolean a0;
              jfloat a1;
              ::java::lang::String a2((jobject) NULL);
              ComplexExplanation object((jobject) NULL);

              if (!parseArgs(args, "ZFs", &a0, &a1, &a2))
              {
                INT_CALL(object = ComplexExplanation(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self)
        {
          ::java::lang::Boolean result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(result);
        }

        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isMatch());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ComplexExplanation), (PyObject *) self, "isMatch", args, 2);
        }

        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg)
        {
          ::java::lang::Boolean a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
          {
            OBJ_CALL(self->object.setMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMatch", arg);
          return NULL;
        }

        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data)
        {
          ::java::lang::Boolean value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(value);
        }
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Boolean value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &value))
            {
              INT_CALL(self->object.setMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "match", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *FastCharStream::class$ = NULL;
              jmethodID *FastCharStream::mids$ = NULL;
              bool FastCharStream::live$ = false;

              jclass FastCharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

              jchar FastCharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void FastCharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String FastCharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > FastCharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void FastCharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint FastCharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint FastCharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint FastCharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint FastCharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint FastCharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint FastCharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar FastCharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
              static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
              static PyGetSetDef t_FastCharStream__fields_[] = {
                DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
                DECLARE_GET_FIELD(t_FastCharStream, beginLine),
                DECLARE_GET_FIELD(t_FastCharStream, column),
                DECLARE_GET_FIELD(t_FastCharStream, endColumn),
                DECLARE_GET_FIELD(t_FastCharStream, endLine),
                DECLARE_GET_FIELD(t_FastCharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FastCharStream__methods_[] = {
                DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_FastCharStream, backup, METH_O),
                DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

              void t_FastCharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
              }

              void t_FastCharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                  return NULL;
                return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
              }
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FastCharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
              {
                ::java::io::Reader a0((jobject) NULL);
                FastCharStream object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FastCharStream(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter::mids$ = NULL;
            bool DirectoryTaxonomyWriter::live$ = false;
            ::java::lang::String *DirectoryTaxonomyWriter::INDEX_EPOCH = NULL;

            jclass DirectoryTaxonomyWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_init$_288989fd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
                mids$[mid_init$_c98cdfb3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;)V");
                mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_addTaxonomy_0e53fb1b] = env->getMethodID(cls, "addTaxonomy", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
                mids$[mid_defaultTaxonomyWriterCache_3cef12bd] = env->getStaticMethodID(cls, "defaultTaxonomyWriterCache", "()Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;");
                mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
                mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
                mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_getTaxonomyEpoch_54c6a17a] = env->getMethodID(cls, "getTaxonomyEpoch", "()J");
                mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
                mids$[mid_replaceTaxonomy_2e261ef2] = env->getMethodID(cls, "replaceTaxonomy", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
                mids$[mid_setCacheMissesUntilFill_39c7bd3c] = env->getMethodID(cls, "setCacheMissesUntilFill", "(I)V");
                mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
                mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
                mids$[mid_openIndexWriter_cd637c77] = env->getMethodID(cls, "openIndexWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)Lorg/apache/lucene/index/IndexWriter;");
                mids$[mid_createIndexWriterConfig_ecf4c6f7] = env->getMethodID(cls, "createIndexWriterConfig", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_closeResources_54c6a166] = env->getMethodID(cls, "closeResources", "()V");
                mids$[mid_findCategory_283f83f5] = env->getMethodID(cls, "findCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INDEX_EPOCH = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EPOCH", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_288989fd, a0.this$, a1.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1, const ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c98cdfb3, a0.this$, a1.this$, a2.this$)) {}

            jint DirectoryTaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
            }

            void DirectoryTaxonomyWriter::addTaxonomy(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTaxonomy_0e53fb1b], a0.this$, a1.this$);
            }

            void DirectoryTaxonomyWriter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            void DirectoryTaxonomyWriter::commit() const
            {
              env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
            }

            ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache DirectoryTaxonomyWriter::defaultTaxonomyWriterCache()
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache(env->callStaticObjectMethod(cls, mids$[mid_defaultTaxonomyWriterCache_3cef12bd]));
            }

            ::java::util::Map DirectoryTaxonomyWriter::getCommitData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
            }

            ::org::apache::lucene::store::Directory DirectoryTaxonomyWriter::getDirectory() const
            {
              return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
            }

            jint DirectoryTaxonomyWriter::getParent(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
            }

            jint DirectoryTaxonomyWriter::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            jlong DirectoryTaxonomyWriter::getTaxonomyEpoch() const
            {
              return env->callLongMethod(this$, mids$[mid_getTaxonomyEpoch_54c6a17a]);
            }

            void DirectoryTaxonomyWriter::prepareCommit() const
            {
              env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
            }

            void DirectoryTaxonomyWriter::replaceTaxonomy(const ::org::apache::lucene::store::Directory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_replaceTaxonomy_2e261ef2], a0.this$);
            }

            void DirectoryTaxonomyWriter::rollback() const
            {
              env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
            }

            void DirectoryTaxonomyWriter::setCacheMissesUntilFill(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheMissesUntilFill_39c7bd3c], a0);
            }

            void DirectoryTaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
            }

            void DirectoryTaxonomyWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type);
            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data);
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter, cacheMissesUntilFill),
              DECLARE_GETSET_FIELD(t_DirectoryTaxonomyWriter, commitData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, directory),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, size),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, taxonomyEpoch),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addCategory, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addTaxonomy, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, close, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, commit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, defaultTaxonomyWriterCache, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getCommitData, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getDirectory, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getParent, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getSize, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getTaxonomyEpoch, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, prepareCommit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, replaceTaxonomy, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, rollback, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCacheMissesUntilFill, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCommitData, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, unlock, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter, ::java::lang::Object, DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter_init_, 0, 0, t_DirectoryTaxonomyWriter__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter), module, "DirectoryTaxonomyWriter", 0);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "DiskOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "MemoryOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap)));
            }

            void t_DirectoryTaxonomyWriter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(DirectoryTaxonomyWriter::initializeClass);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "INDEX_EPOCH", make_descriptor(j2p(*DirectoryTaxonomyWriter::INDEX_EPOCH)));
            }

            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter::wrap_Object(DirectoryTaxonomyWriter(((t_DirectoryTaxonomyWriter *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache a2((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kKk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_, &a2))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addCategory(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTaxonomy(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTaxonomy", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.commit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::defaultTaxonomyWriterCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self)
            {
              ::org::apache::lucene::store::Directory result((jobject) NULL);
              OBJ_CALL(result = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getParent(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getParent", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.prepareCommit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.replaceTaxonomy(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "replaceTaxonomy", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.rollback());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheMissesUntilFill(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheMissesUntilFill", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setCommitData(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::unlock(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "unlock", arg);
              return NULL;
            }

            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheMissesUntilFill(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheMissesUntilFill", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setCommitData(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "commitData", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              OBJ_CALL(value = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue::mids$ = NULL;
        bool TopOrdAndFloatQueue::live$ = false;

        jclass TopOrdAndFloatQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_e2d62086] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue::TopOrdAndFloatQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue, t_TopOrdAndFloatQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndFloatQueue, t_TopOrdAndFloatQueue_init_, 0, 0, t_TopOrdAndFloatQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue::wrap_Object(const TopOrdAndFloatQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue), module, "TopOrdAndFloatQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue)));
        }

        void t_TopOrdAndFloatQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue::wrap_Object(TopOrdAndFloatQueue(((t_TopOrdAndFloatQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndFloatQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndFloatQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilter::class$ = NULL;
          jmethodID *CzechStemFilter::mids$ = NULL;
          bool CzechStemFilter::live$ = false;

          jclass CzechStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilter::CzechStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CzechStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args);

          static PyMethodDef t_CzechStemFilter__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilter, t_CzechStemFilter, ::org::apache::lucene::analysis::TokenFilter, CzechStemFilter, t_CzechStemFilter_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilter), module, "CzechStemFilter", 0);
          }

          void t_CzechStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "class_", make_descriptor(CzechStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilter::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilter::wrap_Object(CzechStemFilter(((t_CzechStemFilter *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CzechStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CzechStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMDirichletSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMDirichletSimilarity::class$ = NULL;
          jmethodID *LMDirichletSimilarity::mids$ = NULL;
          bool LMDirichletSimilarity::live$ = false;

          jclass LMDirichletSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMDirichletSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMDirichletSimilarity::LMDirichletSimilarity() : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMDirichletSimilarity::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          ::java::lang::String LMDirichletSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self);
          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args);
          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data);
          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data);
          static PyGetSetDef t_LMDirichletSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, mu),
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMDirichletSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMDirichletSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getMu, METH_NOARGS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMDirichletSimilarity, t_LMDirichletSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMDirichletSimilarity, t_LMDirichletSimilarity_init_, 0, 0, t_LMDirichletSimilarity__fields_, 0, 0);

          void t_LMDirichletSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMDirichletSimilarity), module, "LMDirichletSimilarity", 0);
          }

          void t_LMDirichletSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "class_", make_descriptor(LMDirichletSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMDirichletSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMDirichletSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMDirichletSimilarity::wrap_Object(LMDirichletSimilarity(((t_LMDirichletSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMDirichletSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMDirichletSimilarity object((jobject) NULL);

                INT_CALL(object = LMDirichletSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jfloat a0;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMDirichletSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Longs::class$ = NULL;
        jmethodID *FieldCache$Longs::mids$ = NULL;
        bool FieldCache$Longs::live$ = false;
        FieldCache$Longs *FieldCache$Longs::EMPTY = NULL;

        jclass FieldCache$Longs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Longs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Longs(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Longs;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Longs::FieldCache$Longs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$Longs::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Longs__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Longs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Longs, t_FieldCache$Longs, ::java::lang::Object, FieldCache$Longs, t_FieldCache$Longs_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Longs::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Longs), module, "FieldCache$Longs", 0);
        }

        void t_FieldCache$Longs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "class_", make_descriptor(FieldCache$Longs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Longs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Longs::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Longs::wrap_Object(*FieldCache$Longs::EMPTY)));
        }

        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Longs::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Longs::wrap_Object(FieldCache$Longs(((t_FieldCache$Longs *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Longs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Longs object((jobject) NULL);

          INT_CALL(object = FieldCache$Longs());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilter::class$ = NULL;
          jmethodID *GermanStemFilter::mids$ = NULL;
          bool GermanStemFilter::live$ = false;

          jclass GermanStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_4867d4cf] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/de/GermanStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilter::GermanStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void GermanStemFilter::setStemmer(const ::org::apache::lucene::analysis::de::GermanStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_4867d4cf], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args);
          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg);
          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_GermanStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_GermanStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_GermanStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilter, t_GermanStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanStemFilter, t_GermanStemFilter_init_, 0, 0, t_GermanStemFilter__fields_, 0, 0);

          void t_GermanStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilter), module, "GermanStemFilter", 0);
          }

          void t_GermanStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "class_", make_descriptor(GermanStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilter::wrap_Object(GermanStemFilter(((t_GermanStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::de::GermanStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::de::GermanStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SentinelIntSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SentinelIntSet::class$ = NULL;
        jmethodID *SentinelIntSet::mids$ = NULL;
        jfieldID *SentinelIntSet::fids$ = NULL;
        bool SentinelIntSet::live$ = false;

        jclass SentinelIntSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SentinelIntSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
            mids$[mid_find_39c7bd23] = env->getMethodID(cls, "find", "(I)I");
            mids$[mid_getSlot_39c7bd23] = env->getMethodID(cls, "getSlot", "(I)I");
            mids$[mid_hash_39c7bd23] = env->getMethodID(cls, "hash", "(I)I");
            mids$[mid_put_39c7bd23] = env->getMethodID(cls, "put", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rehash_54c6a166] = env->getMethodID(cls, "rehash", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_count] = env->getFieldID(cls, "count", "I");
            fids$[fid_emptyVal] = env->getFieldID(cls, "emptyVal", "I");
            fids$[fid_keys] = env->getFieldID(cls, "keys", "[I");
            fids$[fid_rehashCount] = env->getFieldID(cls, "rehashCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SentinelIntSet::SentinelIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        void SentinelIntSet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean SentinelIntSet::exists(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
        }

        jint SentinelIntSet::find(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_39c7bd23], a0);
        }

        jint SentinelIntSet::getSlot(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getSlot_39c7bd23], a0);
        }

        jint SentinelIntSet::hash(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_hash_39c7bd23], a0);
        }

        jint SentinelIntSet::put(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_put_39c7bd23], a0);
        }

        jlong SentinelIntSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SentinelIntSet::rehash() const
        {
          env->callVoidMethod(this$, mids$[mid_rehash_54c6a166]);
        }

        jint SentinelIntSet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        jint SentinelIntSet::_get_count() const
        {
          return env->getIntField(this$, fids$[fid_count]);
        }

        void SentinelIntSet::_set_count(jint a0) const
        {
          env->setIntField(this$, fids$[fid_count], a0);
        }

        jint SentinelIntSet::_get_emptyVal() const
        {
          return env->getIntField(this$, fids$[fid_emptyVal]);
        }

        JArray< jint > SentinelIntSet::_get_keys() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_keys]));
        }

        void SentinelIntSet::_set_keys(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_keys], a0.this$);
        }

        jint SentinelIntSet::_get_rehashCount() const
        {
          return env->getIntField(this$, fids$[fid_rehashCount]);
        }

        void SentinelIntSet::_set_rehashCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_rehashCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data);
        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data);

        static PyGetSetDef t_SentinelIntSet__fields_[] = {
          DECLARE_GETSET_FIELD(t_SentinelIntSet, count),
          DECLARE_GET_FIELD(t_SentinelIntSet, emptyVal),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, keys),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, rehashCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SentinelIntSet__methods_[] = {
          DECLARE_METHOD(t_SentinelIntSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, clear, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, exists, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, find, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, getSlot, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, hash, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, put, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, rehash, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SentinelIntSet, t_SentinelIntSet, ::java::lang::Object, SentinelIntSet, t_SentinelIntSet_init_, 0, 0, t_SentinelIntSet__fields_, 0, 0);

        void t_SentinelIntSet::install(PyObject *module)
        {
          installType(&PY_TYPE(SentinelIntSet), module, "SentinelIntSet", 0);
        }

        void t_SentinelIntSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "class_", make_descriptor(SentinelIntSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "wrapfn_", make_descriptor(t_SentinelIntSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SentinelIntSet::initializeClass, 1)))
            return NULL;
          return t_SentinelIntSet::wrap_Object(SentinelIntSet(((t_SentinelIntSet *) arg)->object.this$));
        }
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SentinelIntSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          SentinelIntSet object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = SentinelIntSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.exists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "exists", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getSlot(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSlot", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.hash(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "hash", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.put(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.rehash());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_count());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_count(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "count", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_emptyVal());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_keys());
          return value.wrap();
        }
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_keys(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "keys", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_rehashCount());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_rehashCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "rehashCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *AlreadyClosedException::class$ = NULL;
        jmethodID *AlreadyClosedException::mids$ = NULL;
        bool AlreadyClosedException::live$ = false;

        jclass AlreadyClosedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/AlreadyClosedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_AlreadyClosedException__methods_[] = {
          DECLARE_METHOD(t_AlreadyClosedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AlreadyClosedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AlreadyClosedException, t_AlreadyClosedException, ::java::lang::IllegalStateException, AlreadyClosedException, t_AlreadyClosedException_init_, 0, 0, 0, 0, 0);

        void t_AlreadyClosedException::install(PyObject *module)
        {
          installType(&PY_TYPE(AlreadyClosedException), module, "AlreadyClosedException", 0);
        }

        void t_AlreadyClosedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "class_", make_descriptor(AlreadyClosedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "wrapfn_", make_descriptor(t_AlreadyClosedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AlreadyClosedException::initializeClass, 1)))
            return NULL;
          return t_AlreadyClosedException::wrap_Object(AlreadyClosedException(((t_AlreadyClosedException *) arg)->object.this$));
        }
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AlreadyClosedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          AlreadyClosedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = AlreadyClosedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FilterInputStream::class$ = NULL;
    jmethodID *FilterInputStream::mids$ = NULL;
    bool FilterInputStream::live$ = false;

    jclass FilterInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FilterInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint FilterInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FilterInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void FilterInputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean FilterInputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint FilterInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void FilterInputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong FilterInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args);

    static PyMethodDef t_FilterInputStream__methods_[] = {
      DECLARE_METHOD(t_FilterInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, mark, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, reset, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FilterInputStream, t_FilterInputStream, ::java::io::InputStream, FilterInputStream, abstract_init, 0, 0, 0, 0, 0);

    void t_FilterInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FilterInputStream), module, "FilterInputStream", 0);
    }

    void t_FilterInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "class_", make_descriptor(FilterInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "wrapfn_", make_descriptor(t_FilterInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FilterInputStream::initializeClass, 1)))
        return NULL;
      return t_FilterInputStream::wrap_Object(FilterInputStream(((t_FilterInputStream *) arg)->object.this$));
    }
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FilterInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MinPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MinPayloadFunction::class$ = NULL;
          jmethodID *MinPayloadFunction::mids$ = NULL;
          bool MinPayloadFunction::live$ = false;

          jclass MinPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MinPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinPayloadFunction::MinPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MinPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MinPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MinPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MinPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MinPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MinPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinPayloadFunction, t_MinPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MinPayloadFunction, t_MinPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MinPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MinPayloadFunction), module, "MinPayloadFunction", 0);
          }

          void t_MinPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "class_", make_descriptor(MinPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MinPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MinPayloadFunction::wrap_Object(MinPayloadFunction(((t_MinPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MinPayloadFunction object((jobject) NULL);

            INT_CALL(object = MinPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilter::class$ = NULL;
          jmethodID *ScandinavianFoldingFilter::mids$ = NULL;
          bool ScandinavianFoldingFilter::live$ = false;

          jclass ScandinavianFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilter::ScandinavianFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilter, t_ScandinavianFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianFoldingFilter, t_ScandinavianFoldingFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilter), module, "ScandinavianFoldingFilter", 0);
          }

          void t_ScandinavianFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilter::wrap_Object(ScandinavianFoldingFilter(((t_ScandinavianFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianFoldingFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianFoldingFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPayloadCheckQuery.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanPayloadCheckQuery::mids$ = NULL;
          bool SpanPayloadCheckQuery::live$ = false;

          jclass SpanPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8621bfa8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_5574a424] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPayloadCheckQuery::SpanPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_8621bfa8, a0.this$, a1.this$)) {}

          SpanPayloadCheckQuery SpanPayloadCheckQuery::clone() const
          {
            return SpanPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_5574a424]));
          }

          jboolean SpanPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPayloadCheckQuery, t_SpanPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPayloadCheckQuery, t_SpanPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPayloadCheckQuery), module, "SpanPayloadCheckQuery", 0);
          }

          void t_SpanPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPayloadCheckQuery::wrap_Object(SpanPayloadCheckQuery(((t_SpanPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            SpanPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SloppyMath.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SloppyMath::class$ = NULL;
        jmethodID *SloppyMath::mids$ = NULL;
        bool SloppyMath::live$ = false;

        jclass SloppyMath::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SloppyMath");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_asin_5d1c7657] = env->getStaticMethodID(cls, "asin", "(D)D");
            mids$[mid_cos_5d1c7657] = env->getStaticMethodID(cls, "cos", "(D)D");
            mids$[mid_earthDiameter_5d1c7657] = env->getStaticMethodID(cls, "earthDiameter", "(D)D");
            mids$[mid_haversin_143b6dc0] = env->getStaticMethodID(cls, "haversin", "(DDDD)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SloppyMath::SloppyMath() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble SloppyMath::asin(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asin_5d1c7657], a0);
        }

        jdouble SloppyMath::cos(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_cos_5d1c7657], a0);
        }

        jdouble SloppyMath::earthDiameter(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_earthDiameter_5d1c7657], a0);
        }

        jdouble SloppyMath::haversin(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversin_143b6dc0], a0, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SloppyMath__methods_[] = {
          DECLARE_METHOD(t_SloppyMath, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, asin, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, cos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, earthDiameter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversin, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SloppyMath, t_SloppyMath, ::java::lang::Object, SloppyMath, t_SloppyMath_init_, 0, 0, 0, 0, 0);

        void t_SloppyMath::install(PyObject *module)
        {
          installType(&PY_TYPE(SloppyMath), module, "SloppyMath", 0);
        }

        void t_SloppyMath::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "class_", make_descriptor(SloppyMath::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "wrapfn_", make_descriptor(t_SloppyMath::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SloppyMath::initializeClass, 1)))
            return NULL;
          return t_SloppyMath::wrap_Object(SloppyMath(((t_SloppyMath *) arg)->object.this$));
        }
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SloppyMath::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds)
        {
          SloppyMath object((jobject) NULL);

          INT_CALL(object = SloppyMath());
          self->object = object;

          return 0;
        }

        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::asin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asin", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::cos(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "cos", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::earthDiameter(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "earthDiameter", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble result;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversin(a0, a1, a2, a3));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "haversin", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilterFactory::class$ = NULL;
          jmethodID *TypeTokenFilterFactory::mids$ = NULL;
          bool TypeTokenFilterFactory::live$ = false;

          jclass TypeTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopTypes_03e99967] = env->getMethodID(cls, "getStopTypes", "()Ljava/util/Set;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilterFactory::TypeTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TypeTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::java::util::Set TypeTokenFilterFactory::getStopTypes() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopTypes_03e99967]));
          }

          void TypeTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean TypeTokenFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args);
          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data);
          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data);
          static PyGetSetDef t_TypeTokenFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, stopTypes),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TypeTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, getStopTypes, METH_NOARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_TypeTokenFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilterFactory, t_TypeTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeTokenFilterFactory, t_TypeTokenFilterFactory_init_, 0, 0, t_TypeTokenFilterFactory__fields_, 0, 0);

          void t_TypeTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilterFactory), module, "TypeTokenFilterFactory", 0);
          }

          void t_TypeTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilterFactory::wrap_Object(TypeTokenFilterFactory(((t_TypeTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *LabelAndValue::class$ = NULL;
        jmethodID *LabelAndValue::mids$ = NULL;
        jfieldID *LabelAndValue::fids$ = NULL;
        bool LabelAndValue::live$ = false;

        jclass LabelAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/LabelAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LabelAndValue::LabelAndValue(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        jboolean LabelAndValue::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LabelAndValue::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String LabelAndValue::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String LabelAndValue::_get_label() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
        }

        ::java::lang::Number LabelAndValue::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data);
        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data);

        static PyGetSetDef t_LabelAndValue__fields_[] = {
          DECLARE_GET_FIELD(t_LabelAndValue, label),
          DECLARE_GET_FIELD(t_LabelAndValue, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LabelAndValue__methods_[] = {
          DECLARE_METHOD(t_LabelAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, equals, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LabelAndValue, t_LabelAndValue, ::java::lang::Object, LabelAndValue, t_LabelAndValue_init_, 0, 0, t_LabelAndValue__fields_, 0, 0);

        void t_LabelAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(LabelAndValue), module, "LabelAndValue", 0);
        }

        void t_LabelAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "class_", make_descriptor(LabelAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "wrapfn_", make_descriptor(t_LabelAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LabelAndValue::initializeClass, 1)))
            return NULL;
          return t_LabelAndValue::wrap_Object(LabelAndValue(((t_LabelAndValue *) arg)->object.this$));
        }
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LabelAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          LabelAndValue object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = LabelAndValue(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_label());
          return j2p(value);
        }

        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/NoSuchElementException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *NoSuchElementException::class$ = NULL;
    jmethodID *NoSuchElementException::mids$ = NULL;
    bool NoSuchElementException::live$ = false;

    jclass NoSuchElementException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/NoSuchElementException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    NoSuchElementException::NoSuchElementException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    NoSuchElementException::NoSuchElementException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_NoSuchElementException__methods_[] = {
      DECLARE_METHOD(t_NoSuchElementException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NoSuchElementException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NoSuchElementException, t_NoSuchElementException, ::java::lang::RuntimeException, NoSuchElementException, t_NoSuchElementException_init_, 0, 0, 0, 0, 0);

    void t_NoSuchElementException::install(PyObject *module)
    {
      installType(&PY_TYPE(NoSuchElementException), module, "NoSuchElementException", 0);
    }

    void t_NoSuchElementException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "class_", make_descriptor(NoSuchElementException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchElementException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NoSuchElementException::initializeClass, 1)))
        return NULL;
      return t_NoSuchElementException::wrap_Object(NoSuchElementException(((t_NoSuchElementException *) arg)->object.this$));
    }
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NoSuchElementException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NoSuchElementException object((jobject) NULL);

          INT_CALL(object = NoSuchElementException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchElementException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchElementException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockFactory::class$ = NULL;
        jmethodID *LockFactory::mids$ = NULL;
        bool LockFactory::live$ = false;

        jclass LockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockPrefix_14c7b5c5] = env->getMethodID(cls, "getLockPrefix", "()Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockPrefix_5fdc3f48] = env->getMethodID(cls, "setLockPrefix", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockFactory::LockFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::java::lang::String LockFactory::getLockPrefix() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockPrefix_14c7b5c5]));
        }

        ::org::apache::lucene::store::Lock LockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void LockFactory::setLockPrefix(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockPrefix_5fdc3f48], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self);
        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data);
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data);
        static PyGetSetDef t_LockFactory__fields_[] = {
          DECLARE_GETSET_FIELD(t_LockFactory, lockPrefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LockFactory__methods_[] = {
          DECLARE_METHOD(t_LockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, clearLock, METH_O),
          DECLARE_METHOD(t_LockFactory, getLockPrefix, METH_NOARGS),
          DECLARE_METHOD(t_LockFactory, makeLock, METH_O),
          DECLARE_METHOD(t_LockFactory, setLockPrefix, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockFactory, t_LockFactory, ::java::lang::Object, LockFactory, t_LockFactory_init_, 0, 0, t_LockFactory__fields_, 0, 0);

        void t_LockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(LockFactory), module, "LockFactory", 0);
        }

        void t_LockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "class_", make_descriptor(LockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "wrapfn_", make_descriptor(t_LockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockFactory::initializeClass, 1)))
            return NULL;
          return t_LockFactory::wrap_Object(LockFactory(((t_LockFactory *) arg)->object.this$));
        }
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds)
        {
          LockFactory object((jobject) NULL);

          INT_CALL(object = LockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockPrefix());
          return j2p(result);
        }

        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setLockPrefix(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockPrefix", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockPrefix());
          return j2p(value);
        }
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setLockPrefix(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockPrefix", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NativeFSLockFactory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NativeFSLockFactory::class$ = NULL;
        jmethodID *NativeFSLockFactory::mids$ = NULL;
        bool NativeFSLockFactory::live$ = false;

        jclass NativeFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NativeFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NativeFSLockFactory::NativeFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        void NativeFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock NativeFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args);
        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args);

        static PyMethodDef t_NativeFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_NativeFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NativeFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NativeFSLockFactory, t_NativeFSLockFactory, ::org::apache::lucene::store::FSLockFactory, NativeFSLockFactory, t_NativeFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_NativeFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NativeFSLockFactory), module, "NativeFSLockFactory", 0);
        }

        void t_NativeFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "class_", make_descriptor(NativeFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NativeFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NativeFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_NativeFSLockFactory::wrap_Object(NativeFSLockFactory(((t_NativeFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NativeFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NativeFSLockFactory object((jobject) NULL);

              INT_CALL(object = NativeFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFloatFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFloatFunction::class$ = NULL;
            jmethodID *MultiFloatFunction::mids$ = NULL;
            bool MultiFloatFunction::live$ = false;

            jclass MultiFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFloatFunction::MultiFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}

            void MultiFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MultiFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MultiFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args);

            static PyMethodDef t_MultiFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFloatFunction, t_MultiFloatFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFloatFunction, t_MultiFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFloatFunction), module, "MultiFloatFunction", 0);
            }

            void t_MultiFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "class_", make_descriptor(MultiFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFloatFunction::wrap_Object(MultiFloatFunction(((t_MultiFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MultiFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MultiFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SlowCompositeReaderWrapper.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SlowCompositeReaderWrapper::class$ = NULL;
        jmethodID *SlowCompositeReaderWrapper::mids$ = NULL;
        bool SlowCompositeReaderWrapper::live$ = false;

        jclass SlowCompositeReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SlowCompositeReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrap_b2ba15f1] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SlowCompositeReaderWrapper::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SlowCompositeReaderWrapper::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void SlowCompositeReaderWrapper::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SlowCompositeReaderWrapper::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SlowCompositeReaderWrapper::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues SlowCompositeReaderWrapper::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SlowCompositeReaderWrapper::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SlowCompositeReaderWrapper::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint SlowCompositeReaderWrapper::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SlowCompositeReaderWrapper::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void SlowCompositeReaderWrapper::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SlowCompositeReaderWrapper::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader SlowCompositeReaderWrapper::wrap(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_b2ba15f1], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data);
        static PyGetSetDef t_SlowCompositeReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, coreCacheKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, fieldInfos),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SlowCompositeReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, document, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, fields, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, toString, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SlowCompositeReaderWrapper, t_SlowCompositeReaderWrapper, ::org::apache::lucene::index::AtomicReader, SlowCompositeReaderWrapper, abstract_init, 0, 0, t_SlowCompositeReaderWrapper__fields_, 0, 0);

        void t_SlowCompositeReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SlowCompositeReaderWrapper), module, "SlowCompositeReaderWrapper", 0);
        }

        void t_SlowCompositeReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "class_", make_descriptor(SlowCompositeReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_SlowCompositeReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_SlowCompositeReaderWrapper::wrap_Object(SlowCompositeReaderWrapper(((t_SlowCompositeReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SlowCompositeReaderWrapper::wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext::class$ = NULL;
        jmethodID *IOContext::mids$ = NULL;
        jfieldID *IOContext::fids$ = NULL;
        bool IOContext::live$ = false;
        IOContext *IOContext::DEFAULT = NULL;
        IOContext *IOContext::READ = NULL;
        IOContext *IOContext::READONCE = NULL;

        jclass IOContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_b5b0f361] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/MergeInfo;)V");
            mids$[mid_init$_080fbf4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/FlushInfo;)V");
            mids$[mid_init$_caa57ead] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_init$_617520cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext$Context;");
            fids$[fid_flushInfo] = env->getFieldID(cls, "flushInfo", "Lorg/apache/lucene/store/FlushInfo;");
            fids$[fid_mergeInfo] = env->getFieldID(cls, "mergeInfo", "Lorg/apache/lucene/store/MergeInfo;");
            fids$[fid_readOnce] = env->getFieldID(cls, "readOnce", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext;"));
            READ = new IOContext(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext;"));
            READONCE = new IOContext(env->getStaticObjectField(cls, "READONCE", "Lorg/apache/lucene/store/IOContext;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext::IOContext() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::MergeInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b5b0f361, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::FlushInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_080fbf4f, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::IOContext$Context & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_caa57ead, a0.this$)) {}

        IOContext::IOContext(const IOContext & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_617520cb, a0.this$, a1)) {}

        jboolean IOContext::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IOContext::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String IOContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::store::IOContext$Context IOContext::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext$Context(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::FlushInfo IOContext::_get_flushInfo() const
        {
          return ::org::apache::lucene::store::FlushInfo(env->getObjectField(this$, fids$[fid_flushInfo]));
        }

        ::org::apache::lucene::store::MergeInfo IOContext::_get_mergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->getObjectField(this$, fids$[fid_mergeInfo]));
        }

        jboolean IOContext::_get_readOnce() const
        {
          return env->getBooleanField(this$, fids$[fid_readOnce]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data);

        static PyGetSetDef t_IOContext__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext, context),
          DECLARE_GET_FIELD(t_IOContext, flushInfo),
          DECLARE_GET_FIELD(t_IOContext, mergeInfo),
          DECLARE_GET_FIELD(t_IOContext, readOnce),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext__methods_[] = {
          DECLARE_METHOD(t_IOContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, equals, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext, t_IOContext, ::java::lang::Object, IOContext, t_IOContext_init_, 0, 0, t_IOContext__fields_, 0, 0);

        void t_IOContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext), module, "IOContext", 0);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "Context", make_descriptor(&PY_TYPE(IOContext$Context)));
        }

        void t_IOContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "class_", make_descriptor(IOContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "wrapfn_", make_descriptor(t_IOContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "DEFAULT", make_descriptor(t_IOContext::wrap_Object(*IOContext::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READ", make_descriptor(t_IOContext::wrap_Object(*IOContext::READ)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READONCE", make_descriptor(t_IOContext::wrap_Object(*IOContext::READONCE)));
        }

        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext::initializeClass, 1)))
            return NULL;
          return t_IOContext::wrap_Object(IOContext(((t_IOContext *) arg)->object.this$));
        }
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IOContext object((jobject) NULL);

              INT_CALL(object = IOContext());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::store::MergeInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::MergeInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::FlushInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::FlushInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
              PyTypeObject **p0;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              IOContext a0((jobject) NULL);
              jboolean a1;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "kZ", IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IOContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::IOContext$Context value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext$Context::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::FlushInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_flushInfo());
          return ::org::apache::lucene::store::t_FlushInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_readOnce());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene46SegmentInfoReader::mids$ = NULL;
          bool Lucene46SegmentInfoReader::live$ = false;

          jclass Lucene46SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoReader::Lucene46SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene46SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoReader), module, "Lucene46SegmentInfoReader", 0);
          }

          void t_Lucene46SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoReader::wrap_Object(Lucene46SegmentInfoReader(((t_Lucene46SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsReader::class$ = NULL;
          jmethodID *Lucene40PostingsReader::mids$ = NULL;
          bool Lucene40PostingsReader::live$ = false;

          jclass Lucene40PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsReader::Lucene40PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene40PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene40PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene40PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene40PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene40PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene40PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene40PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsReader, t_Lucene40PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene40PostingsReader, t_Lucene40PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsReader), module, "Lucene40PostingsReader", 0);
          }

          void t_Lucene40PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "class_", make_descriptor(Lucene40PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsReader::wrap_Object(Lucene40PostingsReader(((t_Lucene40PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene40PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene40PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource::class$ = NULL;
        jmethodID *AttributeSource::mids$ = NULL;
        bool AttributeSource::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *AttributeSource::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a5f989be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
            mids$[mid_addAttribute_2e7bf8aa] = env->getMethodID(cls, "addAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_addAttributeImpl_d86caa9f] = env->getMethodID(cls, "addAttributeImpl", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_captureState_0f9ed4d4] = env->getMethodID(cls, "captureState", "()Lorg/apache/lucene/util/AttributeSource$State;");
            mids$[mid_clearAttributes_54c6a166] = env->getMethodID(cls, "clearAttributes", "()V");
            mids$[mid_cloneAttributes_f901022b] = env->getMethodID(cls, "cloneAttributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_copyTo_aea2d6ea] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeSource;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAttribute_2e7bf8aa] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_getAttributeClassesIterator_40858c90] = env->getMethodID(cls, "getAttributeClassesIterator", "()Ljava/util/Iterator;");
            mids$[mid_getAttributeFactory_bb394e5b] = env->getMethodID(cls, "getAttributeFactory", "()Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_getAttributeImplsIterator_40858c90] = env->getMethodID(cls, "getAttributeImplsIterator", "()Ljava/util/Iterator;");
            mids$[mid_hasAttribute_a5deaff8] = env->getMethodID(cls, "hasAttribute", "(Ljava/lang/Class;)Z");
            mids$[mid_hasAttributes_54c6a16a] = env->getMethodID(cls, "hasAttributes", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_restoreState_b31fff69] = env->getMethodID(cls, "restoreState", "(Lorg/apache/lucene/util/AttributeSource$State;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource::AttributeSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource::AttributeSource(const ::org::apache::lucene::util::AttributeFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5f989be, a0.this$)) {}

        ::org::apache::lucene::util::Attribute AttributeSource::addAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_addAttribute_2e7bf8aa], a0.this$));
        }

        void AttributeSource::addAttributeImpl(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAttributeImpl_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::AttributeSource$State AttributeSource::captureState() const
        {
          return ::org::apache::lucene::util::AttributeSource$State(env->callObjectMethod(this$, mids$[mid_captureState_0f9ed4d4]));
        }

        void AttributeSource::clearAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_clearAttributes_54c6a166]);
        }

        AttributeSource AttributeSource::cloneAttributes() const
        {
          return AttributeSource(env->callObjectMethod(this$, mids$[mid_cloneAttributes_f901022b]));
        }

        void AttributeSource::copyTo(const AttributeSource & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_aea2d6ea], a0.this$);
        }

        jboolean AttributeSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::Attribute AttributeSource::getAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_getAttribute_2e7bf8aa], a0.this$));
        }

        ::java::util::Iterator AttributeSource::getAttributeClassesIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeClassesIterator_40858c90]));
        }

        ::org::apache::lucene::util::AttributeFactory AttributeSource::getAttributeFactory() const
        {
          return ::org::apache::lucene::util::AttributeFactory(env->callObjectMethod(this$, mids$[mid_getAttributeFactory_bb394e5b]));
        }

        ::java::util::Iterator AttributeSource::getAttributeImplsIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeImplsIterator_40858c90]));
        }

        jboolean AttributeSource::hasAttribute(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttribute_a5deaff8], a0.this$);
        }

        jboolean AttributeSource::hasAttributes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttributes_54c6a16a]);
        }

        jint AttributeSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AttributeSource::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeSource::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void AttributeSource::restoreState(const ::org::apache::lucene::util::AttributeSource$State & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_restoreState_b31fff69], a0.this$);
        }

        ::java::lang::String AttributeSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self);
        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data);
        static PyGetSetDef t_AttributeSource__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeSource, attributeClassesIterator),
          DECLARE_GET_FIELD(t_AttributeSource, attributeFactory),
          DECLARE_GET_FIELD(t_AttributeSource, attributeImplsIterator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeSource__methods_[] = {
          DECLARE_METHOD(t_AttributeSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, addAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, addAttributeImpl, METH_O),
          DECLARE_METHOD(t_AttributeSource, captureState, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, clearAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, cloneAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, getAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, getAttributeClassesIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeFactory, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeImplsIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hasAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, hasAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeSource, reflectWith, METH_O),
          DECLARE_METHOD(t_AttributeSource, restoreState, METH_O),
          DECLARE_METHOD(t_AttributeSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource, t_AttributeSource, ::java::lang::Object, AttributeSource, t_AttributeSource_init_, 0, 0, t_AttributeSource__fields_, 0, 0);

        void t_AttributeSource::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource), module, "AttributeSource", 0);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "State", make_descriptor(&PY_TYPE(AttributeSource$State)));
        }

        void t_AttributeSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "class_", make_descriptor(AttributeSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeSource::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*AttributeSource::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource::initializeClass, 1)))
            return NULL;
          return t_AttributeSource::wrap_Object(AttributeSource(((t_AttributeSource *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              AttributeSource object((jobject) NULL);

              INT_CALL(object = AttributeSource());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              AttributeSource object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
              {
                INT_CALL(object = AttributeSource(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.addAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addAttributeImpl(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAttributeImpl", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.captureState());
          return ::org::apache::lucene::util::t_AttributeSource$State::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.clearAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self)
        {
          AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.cloneAttributes());
          return t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg)
        {
          AttributeSource a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeSource::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(AttributeImpl));
        }

        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.hasAttribute(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasAttributes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeSource$State a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource$State::initializeClass, &a0))
          {
            OBJ_CALL(self->object.restoreState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "restoreState", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data)
        {
          ::org::apache::lucene::util::AttributeFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishAnalyzer::class$ = NULL;
          jmethodID *IrishAnalyzer::mids$ = NULL;
          bool IrishAnalyzer::live$ = false;
          ::java::lang::String *IrishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IrishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IrishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data);
          static PyGetSetDef t_IrishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IrishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IrishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishAnalyzer, t_IrishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IrishAnalyzer, t_IrishAnalyzer_init_, 0, 0, t_IrishAnalyzer__fields_, 0, 0);

          void t_IrishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishAnalyzer), module, "IrishAnalyzer", 0);
          }

          void t_IrishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "class_", make_descriptor(IrishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IrishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IrishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IrishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IrishAnalyzer::wrap_Object(IrishAnalyzer(((t_IrishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ga::IrishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemmer::class$ = NULL;
          jmethodID *GreekStemmer::mids$ = NULL;
          bool GreekStemmer::live$ = false;

          jclass GreekStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemmer::GreekStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GreekStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args);

          static PyMethodDef t_GreekStemmer__methods_[] = {
            DECLARE_METHOD(t_GreekStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemmer, t_GreekStemmer, ::java::lang::Object, GreekStemmer, t_GreekStemmer_init_, 0, 0, 0, 0, 0);

          void t_GreekStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemmer), module, "GreekStemmer", 0);
          }

          void t_GreekStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "class_", make_descriptor(GreekStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "wrapfn_", make_descriptor(t_GreekStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemmer::initializeClass, 1)))
              return NULL;
            return t_GreekStemmer::wrap_Object(GreekStemmer(((t_GreekStemmer *) arg)->object.this$));
          }
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds)
          {
            GreekStemmer object((jobject) NULL);

            INT_CALL(object = GreekStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttribute::class$ = NULL;
          jmethodID *PayloadAttribute::mids$ = NULL;
          bool PayloadAttribute::live$ = false;

          jclass PayloadAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadAttribute::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          void PayloadAttribute::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self);
          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg);
          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data);
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttribute, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttribute__methods_[] = {
            DECLARE_METHOD(t_PayloadAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttribute, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttribute, t_PayloadAttribute, ::org::apache::lucene::util::Attribute, PayloadAttribute, abstract_init, 0, 0, t_PayloadAttribute__fields_, 0, 0);

          void t_PayloadAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttribute), module, "PayloadAttribute", 0);
          }

          void t_PayloadAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "class_", make_descriptor(PayloadAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttribute::initializeClass, 1)))
              return NULL;
            return t_PayloadAttribute::wrap_Object(PayloadAttribute(((t_PayloadAttribute *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsAndPositionsEnum::class$ = NULL;
        jmethodID *DocsAndPositionsEnum::mids$ = NULL;
        bool DocsAndPositionsEnum::live$ = false;
        jint DocsAndPositionsEnum::FLAG_OFFSETS = (jint) 0;
        jint DocsAndPositionsEnum::FLAG_PAYLOADS = (jint) 0;

        jclass DocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_OFFSETS = env->getStaticIntField(cls, "FLAG_OFFSETS");
            FLAG_PAYLOADS = env->getStaticIntField(cls, "FLAG_PAYLOADS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint DocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef DocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint DocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint DocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_DocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_DocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, nextPosition, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, startOffset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsAndPositionsEnum, t_DocsAndPositionsEnum, ::org::apache::lucene::index::DocsEnum, DocsAndPositionsEnum, abstract_init, 0, 0, t_DocsAndPositionsEnum__fields_, 0, 0);

        void t_DocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsAndPositionsEnum), module, "DocsAndPositionsEnum", 0);
        }

        void t_DocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "class_", make_descriptor(DocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsAndPositionsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_OFFSETS", make_descriptor(DocsAndPositionsEnum::FLAG_OFFSETS));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_PAYLOADS", make_descriptor(DocsAndPositionsEnum::FLAG_PAYLOADS));
        }

        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsAndPositionsEnum::wrap_Object(DocsAndPositionsEnum(((t_DocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeQuery::class$ = NULL;
        jmethodID *TermRangeQuery::mids$ = NULL;
        bool TermRangeQuery::live$ = false;

        jclass TermRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_ae529bcc] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeQuery::TermRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        jboolean TermRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jint TermRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TermRangeQuery::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeQuery::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeQuery TermRangeQuery::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_ae529bcc], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String TermRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data);
        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data);
        static PyGetSetDef t_TermRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeQuery, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeQuery, upperTerm),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeQuery__methods_[] = {
          DECLARE_METHOD(t_TermRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeQuery, t_TermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, TermRangeQuery, t_TermRangeQuery_init_, 0, 0, t_TermRangeQuery__fields_, 0, 0);

        void t_TermRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeQuery), module, "TermRangeQuery", 0);
        }

        void t_TermRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "class_", make_descriptor(TermRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeQuery::initializeClass, 1)))
            return NULL;
          return t_TermRangeQuery::wrap_Object(TermRangeQuery(((t_TermRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeQuery(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeQuery::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeQuery::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *OpenStringBuilder::class$ = NULL;
          jmethodID *OpenStringBuilder::mids$ = NULL;
          bool OpenStringBuilder::live$ = false;

          jclass OpenStringBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/OpenStringBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
              mids$[mid_append_fac808c8] = env->getMethodID(cls, "append", "(C)Ljava/lang/Appendable;");
              mids$[mid_append_ca3c2aa4] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;");
              mids$[mid_append_7f83fd04] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;");
              mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reserve_39c7bd3c] = env->getMethodID(cls, "reserve", "(I)V");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_set_ec6430f4] = env->getMethodID(cls, "set", "([CI)V");
              mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
              mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unsafeWrite_39c7bd3c] = env->getMethodID(cls, "unsafeWrite", "(I)V");
              mids$[mid_unsafeWrite_87fd545a] = env->getMethodID(cls, "unsafeWrite", "(C)V");
              mids$[mid_unsafeWrite_6f0bb356] = env->getMethodID(cls, "unsafeWrite", "([CII)V");
              mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
              mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
              mids$[mid_write_87fd545a] = env->getMethodID(cls, "write", "(C)V");
              mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
              mids$[mid_write_20cf5c67] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/analysis/util/OpenStringBuilder;)V");
              mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
              mids$[mid_resize_39c7bd3c] = env->getMethodID(cls, "resize", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OpenStringBuilder::OpenStringBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          OpenStringBuilder::OpenStringBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          OpenStringBuilder::OpenStringBuilder(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

          ::java::lang::Appendable OpenStringBuilder::append(jchar a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_fac808c8], a0));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_ca3c2aa4], a0.this$));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_7f83fd04], a0.this$, a1, a2));
          }

          jint OpenStringBuilder::capacity() const
          {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
          }

          jchar OpenStringBuilder::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void OpenStringBuilder::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          JArray< jchar > OpenStringBuilder::getArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
          }

          jint OpenStringBuilder::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void OpenStringBuilder::reserve(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reserve_39c7bd3c], a0);
          }

          void OpenStringBuilder::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void OpenStringBuilder::set(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_ec6430f4], a0.this$, a1);
          }

          void OpenStringBuilder::setCharAt(jint a0, jchar a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
          }

          void OpenStringBuilder::setLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
          }

          jint OpenStringBuilder::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::CharSequence OpenStringBuilder::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          JArray< jchar > OpenStringBuilder::toCharArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
          }

          ::java::lang::String OpenStringBuilder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void OpenStringBuilder::unsafeWrite(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_39c7bd3c], a0);
          }

          void OpenStringBuilder::unsafeWrite(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_87fd545a], a0);
          }

          void OpenStringBuilder::unsafeWrite(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_6f0bb356], a0.this$, a1, a2);
          }

          void OpenStringBuilder::write(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
          }

          void OpenStringBuilder::write(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_87fd545a], a0);
          }

          void OpenStringBuilder::write(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
          }

          void OpenStringBuilder::write(const OpenStringBuilder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_20cf5c67], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data);
          static PyGetSetDef t_OpenStringBuilder__fields_[] = {
            DECLARE_GET_FIELD(t_OpenStringBuilder, array),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OpenStringBuilder__methods_[] = {
            DECLARE_METHOD(t_OpenStringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, capacity, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, charAt, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, flush, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, getArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, length, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, reserve, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, reset, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, set, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setLength, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, size, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toCharArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, unsafeWrite, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OpenStringBuilder, t_OpenStringBuilder, ::java::lang::Object, OpenStringBuilder, t_OpenStringBuilder_init_, 0, 0, t_OpenStringBuilder__fields_, 0, 0);

          void t_OpenStringBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(OpenStringBuilder), module, "OpenStringBuilder", 0);
          }

          void t_OpenStringBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "class_", make_descriptor(OpenStringBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "wrapfn_", make_descriptor(t_OpenStringBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OpenStringBuilder::initializeClass, 1)))
              return NULL;
            return t_OpenStringBuilder::wrap_Object(OpenStringBuilder(((t_OpenStringBuilder *) arg)->object.this$));
          }
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OpenStringBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                OpenStringBuilder object((jobject) NULL);

                INT_CALL(object = OpenStringBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = OpenStringBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  INT_CALL(object = OpenStringBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jchar a0;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.reserve(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reserve", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
              OBJ_CALL(self->object.setCharAt(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.toCharArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(OpenStringBuilder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "unsafeWrite", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                OpenStringBuilder a0((jobject) NULL);

                if (!parseArgs(args, "k", OpenStringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.write(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getArray());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetIterator.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetIterator::class$ = NULL;
        jmethodID *OpenBitSetIterator::mids$ = NULL;
        bool OpenBitSetIterator::live$ = false;

        jclass OpenBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2540e4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetIterator::OpenBitSetIterator(const ::org::apache::lucene::util::OpenBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2540e4f, a0.this$)) {}

        OpenBitSetIterator::OpenBitSetIterator(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        jint OpenBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong OpenBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint OpenBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint OpenBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args);

        static PyMethodDef t_OpenBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetIterator, t_OpenBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, OpenBitSetIterator, t_OpenBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetIterator), module, "OpenBitSetIterator", 0);
        }

        void t_OpenBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "class_", make_descriptor(OpenBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetIterator::wrap_Object(OpenBitSetIterator(((t_OpenBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::OpenBitSet a0((jobject) NULL);
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OpenBitSet::initializeClass, &a0))
              {
                INT_CALL(object = OpenBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSetIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizerFactory::class$ = NULL;
          jmethodID *RussianLetterTokenizerFactory::mids$ = NULL;
          bool RussianLetterTokenizerFactory::live$ = false;

          jclass RussianLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ef75db74] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ru/RussianLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizerFactory::RussianLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ru::RussianLetterTokenizer RussianLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ru::RussianLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ef75db74], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_RussianLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizerFactory), module, "RussianLetterTokenizerFactory", 0);
          }

          void t_RussianLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "class_", make_descriptor(RussianLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizerFactory::wrap_Object(RussianLetterTokenizerFactory(((t_RussianLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ru::RussianLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ru::t_RussianLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemmer::class$ = NULL;
          jmethodID *ItalianLightStemmer::mids$ = NULL;
          bool ItalianLightStemmer::live$ = false;

          jclass ItalianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemmer::ItalianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ItalianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemmer, t_ItalianLightStemmer, ::java::lang::Object, ItalianLightStemmer, t_ItalianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemmer), module, "ItalianLightStemmer", 0);
          }

          void t_ItalianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "class_", make_descriptor(ItalianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemmer::wrap_Object(ItalianLightStemmer(((t_ItalianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            ItalianLightStemmer object((jobject) NULL);

            INT_CALL(object = ItalianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizer::class$ = NULL;
          jmethodID *PatternTokenizer::mids$ = NULL;
          bool PatternTokenizer::live$ = false;

          jclass PatternTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f57c1546] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_init$_b5faf662] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizer::PatternTokenizer(const ::java::io::Reader & a0, const ::java::util::regex::Pattern & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f57c1546, a0.this$, a1.this$, a2)) {}

          PatternTokenizer::PatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::util::regex::Pattern & a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_b5faf662, a0.this$, a1.this$, a2.this$, a3)) {}

          void PatternTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PatternTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args);

          static PyMethodDef t_PatternTokenizer__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizer, t_PatternTokenizer, ::org::apache::lucene::analysis::Tokenizer, PatternTokenizer, t_PatternTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizer), module, "PatternTokenizer", 0);
          }

          void t_PatternTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "class_", make_descriptor(PatternTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizer::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizer::wrap_Object(PatternTokenizer(((t_PatternTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::regex::Pattern a1((jobject) NULL);
                jint a2;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::util::regex::Pattern a2((jobject) NULL);
                jint a3;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilter::class$ = NULL;
          jmethodID *GermanLightStemFilter::mids$ = NULL;
          bool GermanLightStemFilter::live$ = false;

          jclass GermanLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilter::GermanLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilter, t_GermanLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanLightStemFilter, t_GermanLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilter), module, "GermanLightStemFilter", 0);
          }

          void t_GermanLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "class_", make_descriptor(GermanLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilter::wrap_Object(GermanLightStemFilter(((t_GermanLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues::class$ = NULL;
        jmethodID *MultiDocValues::mids$ = NULL;
        bool MultiDocValues::live$ = false;

        jclass MultiDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBinaryValues_03a34e9d] = env->getStaticMethodID(cls, "getBinaryValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_cb5a3ee0] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_e37a26c0] = env->getStaticMethodID(cls, "getNormValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericValues_e37a26c0] = env->getStaticMethodID(cls, "getNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedNumericValues_21f7b92b] = env->getStaticMethodID(cls, "getSortedNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetValues_0b5c63b6] = env->getStaticMethodID(cls, "getSortedSetValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSortedValues_af349b19] = env->getStaticMethodID(cls, "getSortedValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::BinaryDocValues MultiDocValues::getBinaryValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinaryValues_03a34e9d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits MultiDocValues::getDocsWithField(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_cb5a3ee0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNormValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNormValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumericValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues MultiDocValues::getSortedNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumericValues_21f7b92b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues MultiDocValues::getSortedSetValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSetValues_0b5c63b6], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues MultiDocValues::getSortedValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedValues_af349b19], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MultiDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getBinaryValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNormValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedSetValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedValues, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues, t_MultiDocValues, ::java::lang::Object, MultiDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues), module, "MultiDocValues", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedSetDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(MultiDocValues$OrdinalMap)));
        }

        void t_MultiDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "class_", make_descriptor(MultiDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues::wrap_Object(MultiDocValues(((t_MultiDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getBinaryValues(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinaryValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNormValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNormValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedSetValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSetValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedValues", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilterFactory::class$ = NULL;
          jmethodID *ShingleFilterFactory::mids$ = NULL;
          bool ShingleFilterFactory::live$ = false;

          jclass ShingleFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f9c2452d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/shingle/ShingleFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilterFactory::ShingleFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::shingle::ShingleFilter ShingleFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::shingle::ShingleFilter(env->callObjectMethod(this$, mids$[mid_create_f9c2452d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args);

          static PyMethodDef t_ShingleFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ShingleFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilterFactory, t_ShingleFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ShingleFilterFactory, t_ShingleFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ShingleFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilterFactory), module, "ShingleFilterFactory", 0);
          }

          void t_ShingleFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "class_", make_descriptor(ShingleFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ShingleFilterFactory::wrap_Object(ShingleFilterFactory(((t_ShingleFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ShingleFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ShingleFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::shingle::ShingleFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::shingle::t_ShingleFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ShingleFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser::class$ = NULL;
          jmethodID *QueryParser::mids$ = NULL;
          jfieldID *QueryParser::fids$ = NULL;
          bool QueryParser::live$ = false;

          jclass QueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_Clause_fbed2634] = env->getMethodID(cls, "Clause", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
              mids$[mid_Modifiers_54c6a179] = env->getMethodID(cls, "Modifiers", "()I");
              mids$[mid_Query_fbed2634] = env->getMethodID(cls, "Query", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_ReInit_52865dcf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_Term_fbed2634] = env->getMethodID(cls, "Term", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
              mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
              mids$[mid_generateParseException_3c5b7efe] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/classic/ParseException;");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_getToken_61c98f04] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser::QueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParserBase(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query QueryParser::Clause(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Clause_fbed2634], a0.this$));
          }

          jint QueryParser::Conjunction() const
          {
            return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
          }

          jint QueryParser::Modifiers() const
          {
            return env->callIntMethod(this$, mids$[mid_Modifiers_54c6a179]);
          }

          ::org::apache::lucene::search::Query QueryParser::Query(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Query_fbed2634], a0.this$));
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_52865dcf], a0.this$);
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParser::Term(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Term_fbed2634], a0.this$));
          }

          ::org::apache::lucene::search::Query QueryParser::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          void QueryParser::disable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
          }

          void QueryParser::enable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
          }

          ::org::apache::lucene::queryparser::classic::ParseException QueryParser::generateParseException() const
          {
            return ::org::apache::lucene::queryparser::classic::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_3c5b7efe]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getToken(jint a0) const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getToken_61c98f04], a0));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_jj_nt() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
          }

          void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_token() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_token]));
          }

          void QueryParser::_set_token(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_token], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::QueryParserTokenManager QueryParser::_get_token_source() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
          }

          void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->setObjectField(this$, fids$[fid_token_source], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self);
          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self);
          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
          static PyGetSetDef t_QueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
            DECLARE_GETSET_FIELD(t_QueryParser, token),
            DECLARE_GETSET_FIELD(t_QueryParser, token_source),
            DECLARE_GET_FIELD(t_QueryParser, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser__methods_[] = {
            DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, Clause, METH_O),
            DECLARE_METHOD(t_QueryParser, Conjunction, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Modifiers, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Query, METH_O),
            DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, Term, METH_O),
            DECLARE_METHOD(t_QueryParser, TopLevelQuery, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser, t_QueryParser, ::org::apache::lucene::queryparser::classic::QueryParserBase, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

          void t_QueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "Operator", make_descriptor(&PY_TYPE(QueryParser$Operator)));
          }

          void t_QueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
              return NULL;
            return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
          }
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            QueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = QueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Clause(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Clause", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Conjunction());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Modifiers());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Query(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Query", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::QueryParserTokenManager a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "ReInit", args, 2);
          }

          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Term(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Term", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "TopLevelQuery", args, 2);
          }

          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.disable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.enable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::ParseException result((jobject) NULL);
            OBJ_CALL(result = self->object.generateParseException());
            return ::org::apache::lucene::queryparser::classic::t_ParseException::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_jj_nt());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_jj_nt(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_token(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token_source());
            return ::org::apache::lucene::queryparser::classic::t_QueryParserTokenManager::wrap_Object(value);
          }
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &value))
            {
              INT_CALL(self->object._set_token_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token_source", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs$Pair::class$ = NULL;
          jmethodID *PairOutputs$Pair::mids$ = NULL;
          jfieldID *PairOutputs$Pair::fids$ = NULL;
          bool PairOutputs$Pair::live$ = false;

          jclass PairOutputs$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_output1] = env->getFieldID(cls, "output1", "Ljava/lang/Object;");
              fids$[fid_output2] = env->getFieldID(cls, "output2", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PairOutputs$Pair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PairOutputs$Pair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PairOutputs$Pair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output1() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output1]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output2() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output2]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data);
          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data);

          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data);
          static PyGetSetDef t_PairOutputs$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output1),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output2),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs$Pair__methods_[] = {
            DECLARE_METHOD(t_PairOutputs$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, equals, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs$Pair, t_PairOutputs$Pair, ::java::lang::Object, PairOutputs$Pair, abstract_init, 0, 0, t_PairOutputs$Pair__fields_, 0, 0);
          PyObject *t_PairOutputs$Pair::wrap_Object(const PairOutputs$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs$Pair), module, "PairOutputs$Pair", 0);
          }

          void t_PairOutputs$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "class_", make_descriptor(PairOutputs$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs$Pair::initializeClass, 1)))
              return NULL;
            return t_PairOutputs$Pair::wrap_Object(PairOutputs$Pair(((t_PairOutputs$Pair *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output1());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output2());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRangeFilter.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Long.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Short.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Integer.h"
#include "java/lang/Byte.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRangeFilter::class$ = NULL;
        jmethodID *FieldCacheRangeFilter::mids$ = NULL;
        bool FieldCacheRangeFilter::live$ = false;

        jclass FieldCacheRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_846352c3] = env->getMethodID(cls, "getLowerVal", "()Ljava/lang/Object;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getUpperVal_846352c3] = env->getMethodID(cls, "getUpperVal", "()Ljava/lang/Object;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newByteRange_16d27fcb] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newByteRange_8dbc9d65] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newBytesRefRange_ada19313] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_1f46882f] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_45b4662e] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_6957c90b] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_ec92e8b8] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_dee3e03b] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_6952cfdf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_48e495eb] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_51d4b8f9] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_89cd93a7] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_d637c7bc] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newStringRange_05fb19b7] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean FieldCacheRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet FieldCacheRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String FieldCacheRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getLowerVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLowerVal_846352c3]));
        }

        ::org::apache::lucene::search::FieldCache$Parser FieldCacheRangeFilter::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getUpperVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getUpperVal_846352c3]));
        }

        jint FieldCacheRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldCacheRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean FieldCacheRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::java::lang::Byte & a1, const ::java::lang::Byte & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_16d27fcb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1, const ::java::lang::Byte & a2, const ::java::lang::Byte & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_8dbc9d65], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_ada19313], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_1f46882f], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_45b4662e], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_6957c90b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ec92e8b8], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dee3e03b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_6952cfdf], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_48e495eb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_51d4b8f9], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::java::lang::Short & a1, const ::java::lang::Short & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_89cd93a7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1, const ::java::lang::Short & a2, const ::java::lang::Short & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_d637c7bc], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_05fb19b7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String FieldCacheRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data);
        static PyGetSetDef t_FieldCacheRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, field),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parser),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, upperVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheRangeFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getParser, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newByteRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newShortRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRangeFilter, t_FieldCacheRangeFilter, ::org::apache::lucene::search::Filter, FieldCacheRangeFilter, abstract_init, 0, 0, t_FieldCacheRangeFilter__fields_, 0, 0);
        PyObject *t_FieldCacheRangeFilter::wrap_Object(const FieldCacheRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldCacheRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldCacheRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRangeFilter), module, "FieldCacheRangeFilter", 0);
        }

        void t_FieldCacheRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "class_", make_descriptor(FieldCacheRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRangeFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRangeFilter::wrap_Object(FieldCacheRangeFilter(((t_FieldCacheRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Byte a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              ::java::lang::Byte a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
          }

          PyErr_SetArgsError(type, "newByteRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Short a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              ::java::lang::Short a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
          }

          PyErr_SetArgsError(type, "newShortRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeAbortedException::class$ = NULL;
        jmethodID *MergePolicy$MergeAbortedException::mids$ = NULL;
        bool MergePolicy$MergeAbortedException::live$ = false;

        jclass MergePolicy$MergeAbortedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeAbortedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MergePolicy$MergeAbortedException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException, ::java::io::IOException, MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException_init_, 0, 0, 0, 0, 0);

        void t_MergePolicy$MergeAbortedException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeAbortedException), module, "MergePolicy$MergeAbortedException", 0);
        }

        void t_MergePolicy$MergeAbortedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "class_", make_descriptor(MergePolicy$MergeAbortedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeAbortedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeAbortedException::wrap_Object(MergePolicy$MergeAbortedException(((t_MergePolicy$MergeAbortedException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MergePolicy$MergeAbortedException object((jobject) NULL);

              INT_CALL(object = MergePolicy$MergeAbortedException());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MergePolicy$MergeAbortedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MergePolicy$MergeAbortedException(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordQueue.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordQueue::class$ = NULL;
          jmethodID *SuggestWordQueue::mids$ = NULL;
          bool SuggestWordQueue::live$ = false;
          ::java::util::Comparator *SuggestWordQueue::DEFAULT_COMPARATOR = NULL;

          jclass SuggestWordQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4ba868a3] = env->getMethodID(cls, "<init>", "(ILjava/util/Comparator;)V");
              mids$[mid_lessThan_2e903be2] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordQueue::SuggestWordQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SuggestWordQueue::SuggestWordQueue(jint a0, const ::java::util::Comparator & a1) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_4ba868a3, a0, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args);
          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data);
          static PyGetSetDef t_SuggestWordQueue__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestWordQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWordQueue__methods_[] = {
            DECLARE_METHOD(t_SuggestWordQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordQueue, t_SuggestWordQueue, ::org::apache::lucene::util::PriorityQueue, SuggestWordQueue, t_SuggestWordQueue_init_, 0, 0, t_SuggestWordQueue__fields_, 0, 0);
          PyObject *t_SuggestWordQueue::wrap_Object(const SuggestWordQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestWordQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestWordQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordQueue), module, "SuggestWordQueue", 0);
          }

          void t_SuggestWordQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "class_", make_descriptor(SuggestWordQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestWordQueue::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*SuggestWordQueue::DEFAULT_COMPARATOR)));
          }

          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordQueue::initializeClass, 1)))
              return NULL;
            return t_SuggestWordQueue::wrap_Object(SuggestWordQueue(((t_SuggestWordQueue *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SuggestWordQueue(a0));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SuggestWordQueue(a0, a1));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Accountable::class$ = NULL;
        jmethodID *Accountable::mids$ = NULL;
        bool Accountable::live$ = false;

        jclass Accountable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Accountable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Accountable::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self);

        static PyMethodDef t_Accountable__methods_[] = {
          DECLARE_METHOD(t_Accountable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Accountable, t_Accountable, ::java::lang::Object, Accountable, abstract_init, 0, 0, 0, 0, 0);

        void t_Accountable::install(PyObject *module)
        {
          installType(&PY_TYPE(Accountable), module, "Accountable", 0);
        }

        void t_Accountable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "class_", make_descriptor(Accountable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "wrapfn_", make_descriptor(t_Accountable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Accountable::initializeClass, 1)))
            return NULL;
          return t_Accountable::wrap_Object(Accountable(((t_Accountable *) arg)->object.this$));
        }
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Accountable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyWriter::class$ = NULL;
          jmethodID *TaxonomyWriter::mids$ = NULL;
          bool TaxonomyWriter::live$ = false;

          jclass TaxonomyWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
              mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
          }

          ::java::util::Map TaxonomyWriter::getCommitData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
          }

          jint TaxonomyWriter::getParent(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
          }

          jint TaxonomyWriter::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data);
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data);
          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data);
          static PyGetSetDef t_TaxonomyWriter__fields_[] = {
            DECLARE_GETSET_FIELD(t_TaxonomyWriter, commitData),
            DECLARE_GET_FIELD(t_TaxonomyWriter, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyWriter__methods_[] = {
            DECLARE_METHOD(t_TaxonomyWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, addCategory, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getCommitData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, getParent, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, setCommitData, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyWriter, t_TaxonomyWriter, ::java::io::Closeable, TaxonomyWriter, abstract_init, 0, 0, t_TaxonomyWriter__fields_, 0, 0);

          void t_TaxonomyWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyWriter), module, "TaxonomyWriter", 0);
          }

          void t_TaxonomyWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "class_", make_descriptor(TaxonomyWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyWriter::initializeClass, 1)))
              return NULL;
            return t_TaxonomyWriter::wrap_Object(TaxonomyWriter(((t_TaxonomyWriter *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addCategory(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getParent(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getParent", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.setCommitData(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(value);
          }
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Map value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
              {
                INT_CALL(self->object.setCommitData(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "commitData", arg);
            return -1;
          }

          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *ByteVector::class$ = NULL;
            jmethodID *ByteVector::mids$ = NULL;
            bool ByteVector::live$ = false;

            jclass ByteVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/ByteVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");
                mids$[mid_getArray_dab10e7e] = env->getMethodID(cls, "getArray", "()[B");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_58d0da5d] = env->getMethodID(cls, "put", "(IB)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteVector::ByteVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

            ByteVector::ByteVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

            jint ByteVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint ByteVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jbyte ByteVector::get(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
            }

            JArray< jbyte > ByteVector::getArray() const
            {
              return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7e]));
            }

            jint ByteVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void ByteVector::put(jint a0, jbyte a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_58d0da5d], a0, a1);
            }

            void ByteVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_capacity(t_ByteVector *self);
            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_getArray(t_ByteVector *self);
            static PyObject *t_ByteVector_length(t_ByteVector *self);
            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args);
            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self);
            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data);
            static PyGetSetDef t_ByteVector__fields_[] = {
              DECLARE_GET_FIELD(t_ByteVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ByteVector__methods_[] = {
              DECLARE_METHOD(t_ByteVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, alloc, METH_O),
              DECLARE_METHOD(t_ByteVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, get, METH_O),
              DECLARE_METHOD(t_ByteVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, length, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, put, METH_VARARGS),
              DECLARE_METHOD(t_ByteVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteVector, t_ByteVector, ::java::lang::Object, ByteVector, t_ByteVector_init_, 0, 0, t_ByteVector__fields_, 0, 0);

            void t_ByteVector::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteVector), module, "ByteVector", 0);
            }

            void t_ByteVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "class_", make_descriptor(ByteVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "wrapfn_", make_descriptor(t_ByteVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteVector::initializeClass, 1)))
                return NULL;
              return t_ByteVector::wrap_Object(ByteVector(((t_ByteVector *) arg)->object.this$));
            }
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ByteVector object((jobject) NULL);

                  INT_CALL(object = ByteVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[B", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  jint a1;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[BI", &a0, &a1))
                  {
                    INT_CALL(object = ByteVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_capacity(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jbyte result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_getArray(t_ByteVector *self)
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_ByteVector_length(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args)
            {
              jint a0;
              jbyte a1;

              if (!parseArgs(args, "IB", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data)
            {
              JArray< jbyte > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector::class$ = NULL;
        jmethodID *FacetsCollector::mids$ = NULL;
        bool FacetsCollector::live$ = false;

        jclass FacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getKeepScores_54c6a16a] = env->getMethodID(cls, "getKeepScores", "()Z");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_search_670d4dc3] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_904a71a9] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8966278] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_c564507a] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_4ab72933] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_be14f375] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_8d45b2eb] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_b14f4589] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_createDocs_04d72adb] = env->getMethodID(cls, "createDocs", "(I)Lorg/apache/lucene/facet/FacetsCollector$Docs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector::FacetsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        FacetsCollector::FacetsCollector(jboolean a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        jboolean FacetsCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void FacetsCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jboolean FacetsCollector::getKeepScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getKeepScores_54c6a16a]);
        }

        ::java::util::List FacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Collector & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_670d4dc3], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Collector & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_904a71a9], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_d8966278], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6, const ::org::apache::lucene::search::Collector & a7)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_c564507a], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6, a7.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Collector & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_4ab72933], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_be14f375], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, const ::org::apache::lucene::search::Collector & a6)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_8d45b2eb], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, jboolean a6, jboolean a7, const ::org::apache::lucene::search::Collector & a8)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_b14f4589], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6, a7, a8.this$));
        }

        void FacetsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void FacetsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data);
        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data);
        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data);
        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_FacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector, keepScores),
          DECLARE_GET_FIELD(t_FacetsCollector, matchingDocs),
          DECLARE_SET_FIELD(t_FacetsCollector, nextReader),
          DECLARE_SET_FIELD(t_FacetsCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, getKeepScores, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, getMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, search, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector, t_FacetsCollector, ::org::apache::lucene::search::Collector, FacetsCollector, t_FacetsCollector_init_, 0, 0, t_FacetsCollector__fields_, 0, 0);

        void t_FacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector), module, "FacetsCollector", 0);
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "MatchingDocs", make_descriptor(&PY_TYPE(FacetsCollector$MatchingDocs)));
        }

        void t_FacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "class_", make_descriptor(FacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector::wrap_Object(FacetsCollector(((t_FacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              FacetsCollector object((jobject) NULL);

              INT_CALL(object = FacetsCollector());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              FacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = FacetsCollector(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getKeepScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Collector a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Collector a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 8:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::Collector a7((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5, a6, a7));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "search", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::search::Collector a4((jobject) NULL);
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              ::org::apache::lucene::search::Collector a6((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 9:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              jboolean a6;
              jboolean a7;
              ::org::apache::lucene::search::Collector a8((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "searchAfter_", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getKeepScores());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet::class$ = NULL;
        jmethodID *FixedBitSet::mids$ = NULL;
        bool FixedBitSet::live$ = false;

        jclass FixedBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_ef674644] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_and_c2b5607d] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNot_ef674644] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_andNot_c2b5607d] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNotCount_a42679f6] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_39c7bd23] = env->getStaticMethodID(cls, "bits2words", "(I)I");
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_28209941] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_ensureCapacity_7d813305] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/FixedBitSet;I)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_d8d154a6] = env->getMethodID(cls, "flip", "(II)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndClear_39c7bd30] = env->getMethodID(cls, "getAndClear", "(I)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersectionCount_a42679f6] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_intersects_ef674648] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/FixedBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_ef674644] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_or_c2b5607d] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_set_39c7bd3c] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_set_d8d154a6] = env->getMethodID(cls, "set", "(II)V");
            mids$[mid_unionCount_a42679f6] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_xor_ef674644] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_xor_c2b5607d] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet::FixedBitSet(jint a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        FixedBitSet::FixedBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void FixedBitSet::and$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_ef674644], a0.this$);
        }

        void FixedBitSet::and$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2b5607d], a0.this$);
        }

        void FixedBitSet::andNot(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_ef674644], a0.this$);
        }

        void FixedBitSet::andNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2b5607d], a0.this$);
        }

        jlong FixedBitSet::andNotCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_a42679f6], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits FixedBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint FixedBitSet::bits2words(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_39c7bd23], a0);
        }

        jint FixedBitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        void FixedBitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }

        void FixedBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        FixedBitSet FixedBitSet::clone() const
        {
          return FixedBitSet(env->callObjectMethod(this$, mids$[mid_clone_28209941]));
        }

        FixedBitSet FixedBitSet::ensureCapacity(const FixedBitSet & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_7d813305], a0.this$, a1));
        }

        jboolean FixedBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FixedBitSet::flip(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_d8d154a6], a0, a1);
        }

        jboolean FixedBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndClear(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        JArray< jlong > FixedBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint FixedBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong FixedBitSet::intersectionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_a42679f6], a0.this$, a1.this$);
        }

        jboolean FixedBitSet::intersects(const FixedBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_ef674648], a0.this$);
        }

        jboolean FixedBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FixedBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint FixedBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint FixedBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        void FixedBitSet::or$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_ef674644], a0.this$);
        }

        void FixedBitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2b5607d], a0.this$);
        }

        jint FixedBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong FixedBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void FixedBitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_39c7bd3c], a0);
        }

        void FixedBitSet::set(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d8d154a6], a0, a1);
        }

        jlong FixedBitSet::unionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_a42679f6], a0.this$, a1.this$);
        }

        void FixedBitSet::xor$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_ef674644], a0.this$);
        }

        void FixedBitSet::xor$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data);
        static PyGetSetDef t_FixedBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_FixedBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FixedBitSet__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, and, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNot, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, get, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, intersects, METH_O),
          DECLARE_METHOD(t_FixedBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, or, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, xor, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet, t_FixedBitSet, ::org::apache::lucene::search::DocIdSet, FixedBitSet, t_FixedBitSet_init_, 0, 0, t_FixedBitSet__fields_, 0, 0);

        void t_FixedBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet), module, "FixedBitSet", 0);
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "FixedBitSetIterator", make_descriptor(&PY_TYPE(FixedBitSet$FixedBitSetIterator)));
        }

        void t_FixedBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "class_", make_descriptor(FixedBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet::wrap_Object(FixedBitSet(((t_FixedBitSet *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = FixedBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = FixedBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "and", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self)
        {
          FixedBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_FixedBitSet::wrap_Object(result);
        }

        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          jint a1;
          FixedBitSet result((jobject) NULL);

          if (!parseArgs(args, "kI", FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::ensureCapacity(a0, a1));
            return t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "or", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "xor", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery::class$ = NULL;
          jmethodID *FieldQuery::mids$ = NULL;
          bool FieldQuery::live$ = false;

          jclass FieldQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFieldTermMap_e027f4d1] = env->getMethodID(cls, "getFieldTermMap", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_searchPhrase_361b35e4] = env->getMethodID(cls, "searchPhrase", "(Ljava/lang/String;Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_applyParentBoost_aaf01f72] = env->getMethodID(cls, "applyParentBoost", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::getFieldTermMap(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getFieldTermMap_e027f4d1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::searchPhrase(const ::java::lang::String & a0, const ::java::util::List & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_361b35e4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args);
          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args);

          static PyMethodDef t_FieldQuery__methods_[] = {
            DECLARE_METHOD(t_FieldQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, getFieldTermMap, METH_VARARGS),
            DECLARE_METHOD(t_FieldQuery, searchPhrase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery, t_FieldQuery, ::java::lang::Object, FieldQuery, abstract_init, 0, 0, 0, 0, 0);

          void t_FieldQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery), module, "FieldQuery", 0);
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "QueryPhraseMap", make_descriptor(&PY_TYPE(FieldQuery$QueryPhraseMap)));
          }

          void t_FieldQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "class_", make_descriptor(FieldQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery::initializeClass, 1)))
              return NULL;
            return t_FieldQuery::wrap_Object(FieldQuery(((t_FieldQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFieldTermMap(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldTermMap", args);
            return NULL;
          }

          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40DocValuesFormat::class$ = NULL;
          jmethodID *Lucene40DocValuesFormat::mids$ = NULL;
          bool Lucene40DocValuesFormat::live$ = false;
          jint Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene40DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40DocValuesFormat::Lucene40DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40DocValuesFormat, t_Lucene40DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene40DocValuesFormat, t_Lucene40DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40DocValuesFormat), module, "Lucene40DocValuesFormat", 0);
          }

          void t_Lucene40DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene40DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40DocValuesFormat::wrap_Object(Lucene40DocValuesFormat(((t_Lucene40DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene40DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BroadWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BroadWord::class$ = NULL;
        jmethodID *BroadWord::mids$ = NULL;
        bool BroadWord::live$ = false;
        jlong BroadWord::H16_L = (jlong) 0;
        jlong BroadWord::H8_L = (jlong) 0;
        jlong BroadWord::L16_L = (jlong) 0;
        jlong BroadWord::L8_L = (jlong) 0;
        jlong BroadWord::L9_L = (jlong) 0;

        jclass BroadWord::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BroadWord");

            mids$ = new jmethodID[max_mid];
            mids$[mid_notEquals0_8_0ee6df33] = env->getStaticMethodID(cls, "notEquals0_8", "(J)J");
            mids$[mid_select_25d05c90] = env->getStaticMethodID(cls, "select", "(JI)I");
            mids$[mid_selectNaive_25d05c90] = env->getStaticMethodID(cls, "selectNaive", "(JI)I");
            mids$[mid_smallerUpTo7_8_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpTo7_8", "(JJ)J");
            mids$[mid_smallerUpto15_16_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpto15_16", "(JJ)J");
            mids$[mid_smalleru_8_a7e12cb8] = env->getStaticMethodID(cls, "smalleru_8", "(JJ)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            H16_L = env->getStaticLongField(cls, "H16_L");
            H8_L = env->getStaticLongField(cls, "H8_L");
            L16_L = env->getStaticLongField(cls, "L16_L");
            L8_L = env->getStaticLongField(cls, "L8_L");
            L9_L = env->getStaticLongField(cls, "L9_L");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BroadWord::notEquals0_8(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_notEquals0_8_0ee6df33], a0);
        }

        jint BroadWord::select(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_select_25d05c90], a0, a1);
        }

        jint BroadWord::selectNaive(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_selectNaive_25d05c90], a0, a1);
        }

        jlong BroadWord::smallerUpTo7_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpTo7_8_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smallerUpto15_16(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpto15_16_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smalleru_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smalleru_8_a7e12cb8], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BroadWord__methods_[] = {
          DECLARE_METHOD(t_BroadWord, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, notEquals0_8, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, select, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, selectNaive, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpTo7_8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpto15_16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smalleru_8, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BroadWord, t_BroadWord, ::java::lang::Object, BroadWord, abstract_init, 0, 0, 0, 0, 0);

        void t_BroadWord::install(PyObject *module)
        {
          installType(&PY_TYPE(BroadWord), module, "BroadWord", 0);
        }

        void t_BroadWord::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "class_", make_descriptor(BroadWord::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "wrapfn_", make_descriptor(t_BroadWord::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BroadWord::initializeClass);
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H16_L", make_descriptor(BroadWord::H16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H8_L", make_descriptor(BroadWord::H8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L16_L", make_descriptor(BroadWord::L16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L8_L", make_descriptor(BroadWord::L8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L9_L", make_descriptor(BroadWord::L9_L));
        }

        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BroadWord::initializeClass, 1)))
            return NULL;
          return t_BroadWord::wrap_Object(BroadWord(((t_BroadWord *) arg)->object.this$));
        }
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BroadWord::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::notEquals0_8(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "notEquals0_8", arg);
          return NULL;
        }

        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::select(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "select", args);
          return NULL;
        }

        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::selectNaive(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "selectNaive", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpTo7_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpTo7_8", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpto15_16(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpto15_16", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smalleru_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smalleru_8", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Explanation::class$ = NULL;
        jmethodID *Explanation::mids$ = NULL;
        bool Explanation::live$ = false;

        jclass Explanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Explanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
            mids$[mid_addDetail_398cd45a] = env->getMethodID(cls, "addDetail", "(Lorg/apache/lucene/search/Explanation;)V");
            mids$[mid_getDescription_14c7b5c5] = env->getMethodID(cls, "getDescription", "()Ljava/lang/String;");
            mids$[mid_getDetails_1ee90723] = env->getMethodID(cls, "getDetails", "()[Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setDescription_5fdc3f48] = env->getMethodID(cls, "setDescription", "(Ljava/lang/String;)V");
            mids$[mid_setValue_06298cab] = env->getMethodID(cls, "setValue", "(F)V");
            mids$[mid_toHtml_14c7b5c5] = env->getMethodID(cls, "toHtml", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Explanation::Explanation() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Explanation::Explanation(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

        void Explanation::addDetail(const Explanation & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDetail_398cd45a], a0.this$);
        }

        ::java::lang::String Explanation::getDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDescription_14c7b5c5]));
        }

        JArray< Explanation > Explanation::getDetails() const
        {
          return JArray< Explanation >(env->callObjectMethod(this$, mids$[mid_getDetails_1ee90723]));
        }

        jfloat Explanation::getValue() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
        }

        jboolean Explanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void Explanation::setDescription(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDescription_5fdc3f48], a0.this$);
        }

        void Explanation::setValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setValue_06298cab], a0);
        }

        ::java::lang::String Explanation::toHtml() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toHtml_14c7b5c5]));
        }

        ::java::lang::String Explanation::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_getDescription(t_Explanation *self);
        static PyObject *t_Explanation_getDetails(t_Explanation *self);
        static PyObject *t_Explanation_getValue(t_Explanation *self);
        static PyObject *t_Explanation_isMatch(t_Explanation *self);
        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_toHtml(t_Explanation *self);
        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data);
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data);
        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data);
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_Explanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_Explanation, description),
          DECLARE_GET_FIELD(t_Explanation, details),
          DECLARE_GET_FIELD(t_Explanation, match),
          DECLARE_GETSET_FIELD(t_Explanation, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Explanation__methods_[] = {
          DECLARE_METHOD(t_Explanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, addDetail, METH_O),
          DECLARE_METHOD(t_Explanation, getDescription, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getDetails, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getValue, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, isMatch, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, setDescription, METH_O),
          DECLARE_METHOD(t_Explanation, setValue, METH_O),
          DECLARE_METHOD(t_Explanation, toHtml, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Explanation, t_Explanation, ::java::lang::Object, Explanation, t_Explanation_init_, 0, 0, t_Explanation__fields_, 0, 0);

        void t_Explanation::install(PyObject *module)
        {
          installType(&PY_TYPE(Explanation), module, "Explanation", 0);
        }

        void t_Explanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "class_", make_descriptor(Explanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "wrapfn_", make_descriptor(t_Explanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Explanation::initializeClass, 1)))
            return NULL;
          return t_Explanation::wrap_Object(Explanation(((t_Explanation *) arg)->object.this$));
        }
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Explanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Explanation object((jobject) NULL);

              INT_CALL(object = Explanation());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jfloat a0;
              ::java::lang::String a1((jobject) NULL);
              Explanation object((jobject) NULL);

              if (!parseArgs(args, "Fs", &a0, &a1))
              {
                INT_CALL(object = Explanation(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg)
        {
          Explanation a0((jobject) NULL);

          if (!parseArg(arg, "k", Explanation::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addDetail(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addDetail", arg);
          return NULL;
        }

        static PyObject *t_Explanation_getDescription(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getDescription());
          return j2p(result);
        }

        static PyObject *t_Explanation_getDetails(t_Explanation *self)
        {
          JArray< Explanation > result((jobject) NULL);
          OBJ_CALL(result = self->object.getDetails());
          return JArray<jobject>(result.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_getValue(t_Explanation *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValue());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Explanation_isMatch(t_Explanation *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isMatch());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setDescription(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDescription", arg);
          return NULL;
        }

        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setValue", arg);
          return NULL;
        }

        static PyObject *t_Explanation_toHtml(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toHtml());
          return j2p(result);
        }

        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Explanation), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getDescription());
          return j2p(value);
        }
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setDescription(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "description", arg);
          return -1;
        }

        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data)
        {
          JArray< Explanation > value((jobject) NULL);
          OBJ_CALL(value = self->object.getDetails());
          return JArray<jobject>(value.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isMatch());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValue());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader::class$ = NULL;
          jmethodID *OrdinalsReader::mids$ = NULL;
          bool OrdinalsReader::live$ = false;

          jclass OrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader::OrdinalsReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String OrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader OrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self);
          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg);
          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data);
          static PyGetSetDef t_OrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, getIndexFieldName, METH_NOARGS),
            DECLARE_METHOD(t_OrdinalsReader, getReader, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader, t_OrdinalsReader, ::java::lang::Object, OrdinalsReader, t_OrdinalsReader_init_, 0, 0, t_OrdinalsReader__fields_, 0, 0);

          void t_OrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader), module, "OrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "OrdinalsSegmentReader", make_descriptor(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader)));
          }

          void t_OrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "class_", make_descriptor(OrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader::wrap_Object(OrdinalsReader(((t_OrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexFieldName());
            return j2p(result);
          }

          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", arg);
            return NULL;
          }

          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Weight::class$ = NULL;
        jmethodID *Weight::mids$ = NULL;
        bool Weight::live$ = false;

        jclass Weight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Weight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bulkScorer_33d2aa29] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;ZLorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
            mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
            mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_scoresDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "scoresDocsOutOfOrder", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Weight::Weight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer Weight::bulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, jboolean a1, const ::org::apache::lucene::util::Bits & a2) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_33d2aa29], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::Explanation Weight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query Weight::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jfloat Weight::getValueForNormalization() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
        }

        void Weight::normalize(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
        }

        ::org::apache::lucene::search::Scorer Weight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
        }

        jboolean Weight::scoresDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_scoresDocsOutOfOrder_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_getQuery(t_Weight *self);
        static PyObject *t_Weight_getValueForNormalization(t_Weight *self);
        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self);
        static PyObject *t_Weight_get__query(t_Weight *self, void *data);
        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data);
        static PyGetSetDef t_Weight__fields_[] = {
          DECLARE_GET_FIELD(t_Weight, query),
          DECLARE_GET_FIELD(t_Weight, valueForNormalization),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Weight__methods_[] = {
          DECLARE_METHOD(t_Weight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, bulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, explain, METH_VARARGS),
          DECLARE_METHOD(t_Weight, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_Weight, getValueForNormalization, METH_NOARGS),
          DECLARE_METHOD(t_Weight, normalize, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scoresDocsOutOfOrder, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Weight, t_Weight, ::java::lang::Object, Weight, t_Weight_init_, 0, 0, t_Weight__fields_, 0, 0);

        void t_Weight::install(PyObject *module)
        {
          installType(&PY_TYPE(Weight), module, "Weight", 0);
        }

        void t_Weight::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "class_", make_descriptor(Weight::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "wrapfn_", make_descriptor(t_Weight::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Weight::initializeClass, 1)))
            return NULL;
          return t_Weight::wrap_Object(Weight(((t_Weight *) arg)->object.this$));
        }
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Weight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds)
        {
          Weight object((jobject) NULL);

          INT_CALL(object = Weight());
          self->object = object;

          return 0;
        }

        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.bulkScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bulkScorer", args);
          return NULL;
        }

        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Weight_getQuery(t_Weight *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_Weight_getValueForNormalization(t_Weight *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.normalize(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", args);
          return NULL;
        }

        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.scorer(a0, a1));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "scorer", args);
          return NULL;
        }

        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.scoresDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Weight_get__query(t_Weight *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/MultiFieldQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *MultiFieldQueryParser::class$ = NULL;
          jmethodID *MultiFieldQueryParser::mids$ = NULL;
          bool MultiFieldQueryParser::live$ = false;

          jclass MultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/MultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_84717d3b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_parse_8e084329] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_6b08888f] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_5707fee1] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_84717d3b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_8e084329], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_6b08888f], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_5707fee1], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_MultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, parse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiFieldQueryParser, t_MultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, MultiFieldQueryParser, t_MultiFieldQueryParser_init_, 0, 0, 0, 0, 0);

          void t_MultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiFieldQueryParser), module, "MultiFieldQueryParser", 0);
          }

          void t_MultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "class_", make_descriptor(MultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_MultiFieldQueryParser::wrap_Object(MultiFieldQueryParser(((t_MultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "K[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "K[skK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K[s[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "Ks[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K[s[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            return callSuper(type, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRange::class$ = NULL;
          jmethodID *LongRange::mids$ = NULL;
          jfieldID *LongRange::fids$ = NULL;
          bool LongRange::live$ = false;

          jclass LongRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1777b4ec] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JZJZ)V");
              mids$[mid_accept_0ee6df23] = env->getMethodID(cls, "accept", "(J)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "J");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "J");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRange::LongRange(const ::java::lang::String & a0, jlong a1, jboolean a2, jlong a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1777b4ec, a0.this$, a1, a2, a3, a4)) {}

          jboolean LongRange::accept(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_0ee6df23], a0);
          }

          ::org::apache::lucene::search::Filter LongRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String LongRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong LongRange::_get_max() const
          {
            return env->getLongField(this$, fids$[fid_max]);
          }

          jboolean LongRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jlong LongRange::_get_min() const
          {
            return env->getLongField(this$, fids$[fid_min]);
          }

          jboolean LongRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg);
          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data);

          static PyGetSetDef t_LongRange__fields_[] = {
            DECLARE_GET_FIELD(t_LongRange, max),
            DECLARE_GET_FIELD(t_LongRange, maxInclusive),
            DECLARE_GET_FIELD(t_LongRange, min),
            DECLARE_GET_FIELD(t_LongRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRange__methods_[] = {
            DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, accept, METH_O),
            DECLARE_METHOD(t_LongRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRange, t_LongRange, ::org::apache::lucene::facet::range::Range, LongRange, t_LongRange_init_, 0, 0, t_LongRange__fields_, 0, 0);

          void t_LongRange::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRange), module, "LongRange", 0);
          }

          void t_LongRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "class_", make_descriptor(LongRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
              return NULL;
            return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
          }
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jlong a1;
            jboolean a2;
            jlong a3;
            jboolean a4;
            LongRange object((jobject) NULL);

            if (!parseArgs(args, "sJZJZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReverseOrdFieldSource::class$ = NULL;
            jmethodID *ReverseOrdFieldSource::mids$ = NULL;
            jfieldID *ReverseOrdFieldSource::fids$ = NULL;
            bool ReverseOrdFieldSource::live$ = false;

            jclass ReverseOrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                fids$ = new jfieldID[max_fid];
                fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReverseOrdFieldSource::ReverseOrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String ReverseOrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReverseOrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReverseOrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReverseOrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String ReverseOrdFieldSource::_get_field() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data);

            static PyGetSetDef t_ReverseOrdFieldSource__fields_[] = {
              DECLARE_GET_FIELD(t_ReverseOrdFieldSource, field),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReverseOrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_ReverseOrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReverseOrdFieldSource, t_ReverseOrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, ReverseOrdFieldSource, t_ReverseOrdFieldSource_init_, 0, 0, t_ReverseOrdFieldSource__fields_, 0, 0);

            void t_ReverseOrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ReverseOrdFieldSource), module, "ReverseOrdFieldSource", 0);
            }

            void t_ReverseOrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "class_", make_descriptor(ReverseOrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ReverseOrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReverseOrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_ReverseOrdFieldSource::wrap_Object(ReverseOrdFieldSource(((t_ReverseOrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReverseOrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ReverseOrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = ReverseOrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_field());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *ConfigurationKey::class$ = NULL;
              jmethodID *ConfigurationKey::mids$ = NULL;
              bool ConfigurationKey::live$ = false;

              jclass ConfigurationKey::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_newInstance_ac28c1ca] = env->getStaticMethodID(cls, "newInstance", "()Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ConfigurationKey ConfigurationKey::newInstance()
              {
                jclass cls = env->getClass(initializeClass);
                return ConfigurationKey(env->callStaticObjectMethod(cls, mids$[mid_newInstance_ac28c1ca]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args);
              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type);
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data);
              static PyGetSetDef t_ConfigurationKey__fields_[] = {
                DECLARE_GET_FIELD(t_ConfigurationKey, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ConfigurationKey__methods_[] = {
                DECLARE_METHOD(t_ConfigurationKey, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, of_, METH_VARARGS),
                DECLARE_METHOD(t_ConfigurationKey, newInstance, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ConfigurationKey, t_ConfigurationKey, ::java::lang::Object, ConfigurationKey, abstract_init, 0, 0, t_ConfigurationKey__fields_, 0, 0);
              PyObject *t_ConfigurationKey::wrap_Object(const ConfigurationKey& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ConfigurationKey::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ConfigurationKey::install(PyObject *module)
              {
                installType(&PY_TYPE(ConfigurationKey), module, "ConfigurationKey", 0);
              }

              void t_ConfigurationKey::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "class_", make_descriptor(ConfigurationKey::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "wrapfn_", make_descriptor(t_ConfigurationKey::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ConfigurationKey::initializeClass, 1)))
                  return NULL;
                return t_ConfigurationKey::wrap_Object(ConfigurationKey(((t_ConfigurationKey *) arg)->object.this$));
              }
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ConfigurationKey::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type)
              {
                ConfigurationKey result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::newInstance());
                return t_ConfigurationKey::wrap_Object(result);
              }
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiBits$SubResult.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiBits$SubResult::class$ = NULL;
        jmethodID *MultiBits$SubResult::mids$ = NULL;
        jfieldID *MultiBits$SubResult::fids$ = NULL;
        bool MultiBits$SubResult::live$ = false;

        jclass MultiBits$SubResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiBits$SubResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_matches] = env->getFieldID(cls, "matches", "Z");
            fids$[fid_result] = env->getFieldID(cls, "result", "Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiBits$SubResult::MultiBits$SubResult() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean MultiBits$SubResult::_get_matches() const
        {
          return env->getBooleanField(this$, fids$[fid_matches]);
        }

        void MultiBits$SubResult::_set_matches(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_matches], a0);
        }

        ::org::apache::lucene::util::Bits MultiBits$SubResult::_get_result() const
        {
          return ::org::apache::lucene::util::Bits(env->getObjectField(this$, fids$[fid_result]));
        }

        void MultiBits$SubResult::_set_result(const ::org::apache::lucene::util::Bits & a0) const
        {
          env->setObjectField(this$, fids$[fid_result], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data);
        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiBits$SubResult__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, matches),
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, result),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiBits$SubResult__methods_[] = {
          DECLARE_METHOD(t_MultiBits$SubResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits$SubResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiBits$SubResult, t_MultiBits$SubResult, ::java::lang::Object, MultiBits$SubResult, t_MultiBits$SubResult_init_, 0, 0, t_MultiBits$SubResult__fields_, 0, 0);

        void t_MultiBits$SubResult::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiBits$SubResult), module, "MultiBits$SubResult", 0);
        }

        void t_MultiBits$SubResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "class_", make_descriptor(MultiBits$SubResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "wrapfn_", make_descriptor(t_MultiBits$SubResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiBits$SubResult::initializeClass, 1)))
            return NULL;
          return t_MultiBits$SubResult::wrap_Object(MultiBits$SubResult(((t_MultiBits$SubResult *) arg)->object.this$));
        }
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiBits$SubResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds)
        {
          MultiBits$SubResult object((jobject) NULL);

          INT_CALL(object = MultiBits$SubResult());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_matches());
          Py_RETURN_BOOL(value);
        }
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_matches(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matches", arg);
          return -1;
        }

        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_result());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::Bits::initializeClass, &value))
          {
            INT_CALL(self->object._set_result(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "result", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DocumentStoredFieldVisitor::class$ = NULL;
        jmethodID *DocumentStoredFieldVisitor::mids$ = NULL;
        bool DocumentStoredFieldVisitor::live$ = false;

        jclass DocumentStoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DocumentStoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
            mids$[mid_init$_fb4f2b26] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;)V");
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_getDocument_005b06cf] = env->getMethodID(cls, "getDocument", "()Lorg/apache/lucene/document/Document;");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor() : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const JArray< ::java::lang::String > & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const ::java::util::Set & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_fb4f2b26, a0.this$)) {}

        void DocumentStoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void DocumentStoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        ::org::apache::lucene::document::Document DocumentStoredFieldVisitor::getDocument() const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_getDocument_005b06cf]));
        }

        void DocumentStoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status DocumentStoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void DocumentStoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self);
        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data);
        static PyGetSetDef t_DocumentStoredFieldVisitor__fields_[] = {
          DECLARE_GET_FIELD(t_DocumentStoredFieldVisitor, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocumentStoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, getDocument, METH_NOARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, needsField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor, ::org::apache::lucene::index::StoredFieldVisitor, DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor_init_, 0, 0, t_DocumentStoredFieldVisitor__fields_, 0, 0);

        void t_DocumentStoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(DocumentStoredFieldVisitor), module, "DocumentStoredFieldVisitor", 0);
        }

        void t_DocumentStoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "class_", make_descriptor(DocumentStoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_DocumentStoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_DocumentStoredFieldVisitor::wrap_Object(DocumentStoredFieldVisitor(((t_DocumentStoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              DocumentStoredFieldVisitor object((jobject) NULL);

              INT_CALL(object = DocumentStoredFieldVisitor());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::Set a0((jobject) NULL);
              PyTypeObject **p0;
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "binaryField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "doubleField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "floatField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self)
        {
          ::org::apache::lucene::document::Document result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(result);
        }

        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "intField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "longField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "needsField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "stringField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data)
        {
          ::org::apache::lucene::document::Document value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader$CachedOrds::class$ = NULL;
          jmethodID *CachedOrdinalsReader$CachedOrds::mids$ = NULL;
          jfieldID *CachedOrdinalsReader$CachedOrds::fids$ = NULL;
          bool CachedOrdinalsReader$CachedOrds::live$ = false;

          jclass CachedOrdinalsReader$CachedOrds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_76cf77a0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;I)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              fids$ = new jfieldID[max_fid];
              fids$[fid_offsets] = env->getFieldID(cls, "offsets", "[I");
              fids$[fid_ordinals] = env->getFieldID(cls, "ordinals", "[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader$CachedOrds::CachedOrdinalsReader$CachedOrds(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_76cf77a0, a0.this$, a1)) {}

          jlong CachedOrdinalsReader$CachedOrds::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_offsets() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_offsets]));
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_ordinals() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_ordinals]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data);

          static PyGetSetDef t_CachedOrdinalsReader$CachedOrds__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, offsets),
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, ordinals),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader$CachedOrds__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds, ::java::lang::Object, CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds_init_, 0, 0, t_CachedOrdinalsReader$CachedOrds__fields_, 0, 0);

          void t_CachedOrdinalsReader$CachedOrds::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader$CachedOrds), module, "CachedOrdinalsReader$CachedOrds", 0);
          }

          void t_CachedOrdinalsReader$CachedOrds::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "class_", make_descriptor(CachedOrdinalsReader$CachedOrds::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader$CachedOrds::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader$CachedOrds::wrap_Object(CachedOrdinalsReader$CachedOrds(((t_CachedOrdinalsReader$CachedOrds *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader a0((jobject) NULL);
            jint a1;
            CachedOrdinalsReader$CachedOrds object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CachedOrdinalsReader$CachedOrds(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_offsets());
            return value.wrap();
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_ordinals());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordAnalyzer::class$ = NULL;
          jmethodID *KeywordAnalyzer::mids$ = NULL;
          bool KeywordAnalyzer::live$ = false;

          jclass KeywordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAnalyzer::KeywordAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KeywordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_KeywordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAnalyzer, t_KeywordAnalyzer, ::org::apache::lucene::analysis::Analyzer, KeywordAnalyzer, t_KeywordAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_KeywordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAnalyzer), module, "KeywordAnalyzer", 0);
          }

          void t_KeywordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "class_", make_descriptor(KeywordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_KeywordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_KeywordAnalyzer::wrap_Object(KeywordAnalyzer(((t_KeywordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            KeywordAnalyzer object((jobject) NULL);

            INT_CALL(object = KeywordAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$OrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$OrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$OrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$OrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$OrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$OrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$OrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$OrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$OrdinalMap, t_DirectoryTaxonomyWriter$OrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$OrdinalMap, abstract_init, 0, 0, t_DirectoryTaxonomyWriter$OrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$OrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), module, "DirectoryTaxonomyWriter$OrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$OrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$OrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$OrdinalMap::wrap_Object(DirectoryTaxonomyWriter$OrdinalMap(((t_DirectoryTaxonomyWriter$OrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternAnalyzer::class$ = NULL;
          jmethodID *PatternAnalyzer::mids$ = NULL;
          bool PatternAnalyzer::live$ = false;
          PatternAnalyzer *PatternAnalyzer::DEFAULT_ANALYZER = NULL;
          PatternAnalyzer *PatternAnalyzer::EXTENDED_ANALYZER = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::NON_WORD_PATTERN = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::WHITESPACE_PATTERN = NULL;

          jclass PatternAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed1ef6b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/regex/Pattern;ZLorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_createComponents_317b7f84] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "DEFAULT_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              EXTENDED_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "EXTENDED_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              NON_WORD_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "NON_WORD_PATTERN", "Ljava/util/regex/Pattern;"));
              WHITESPACE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "WHITESPACE_PATTERN", "Ljava/util/regex/Pattern;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternAnalyzer::PatternAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::util::regex::Pattern & a1, jboolean a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_ed1ef6b5, a0.this$, a1.this$, a2, a3.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_317b7f84], a0.this$, a1.this$, a2.this$));
          }

          jboolean PatternAnalyzer::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PatternAnalyzer::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args);

          static PyMethodDef t_PatternAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PatternAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, equals, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternAnalyzer, t_PatternAnalyzer, ::org::apache::lucene::analysis::Analyzer, PatternAnalyzer, t_PatternAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_PatternAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternAnalyzer), module, "PatternAnalyzer", 0);
          }

          void t_PatternAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "class_", make_descriptor(PatternAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PatternAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "DEFAULT_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::DEFAULT_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "EXTENDED_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::EXTENDED_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "NON_WORD_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::NON_WORD_PATTERN)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "WHITESPACE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::WHITESPACE_PATTERN)));
          }

          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PatternAnalyzer::wrap_Object(PatternAnalyzer(((t_PatternAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::regex::Pattern a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
            PyTypeObject **p3;
            PatternAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "KkZK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::regex::Pattern::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = PatternAnalyzer(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sks", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDouble.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDouble::class$ = NULL;
          jmethodID *MutableValueDouble::mids$ = NULL;
          jfieldID *MutableValueDouble::fids$ = NULL;
          bool MutableValueDouble::live$ = false;

          jclass MutableValueDouble::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDouble");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "D");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDouble::MutableValueDouble() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueDouble::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueDouble::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDouble::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueDouble::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueDouble::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueDouble::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jdouble MutableValueDouble::_get_value() const
          {
            return env->getDoubleField(this$, fids$[fid_value]);
          }

          void MutableValueDouble::_set_value(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data);
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueDouble__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueDouble, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueDouble__methods_[] = {
            DECLARE_METHOD(t_MutableValueDouble, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDouble, t_MutableValueDouble, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueDouble, t_MutableValueDouble_init_, 0, 0, t_MutableValueDouble__fields_, 0, 0);

          void t_MutableValueDouble::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDouble), module, "MutableValueDouble", 0);
          }

          void t_MutableValueDouble::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "class_", make_descriptor(MutableValueDouble::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDouble::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDouble::initializeClass, 1)))
              return NULL;
            return t_MutableValueDouble::wrap_Object(MutableValueDouble(((t_MutableValueDouble *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDouble::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDouble object((jobject) NULL);

            INT_CALL(object = MutableValueDouble());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksumIndexInput::class$ = NULL;
        jmethodID *BufferedChecksumIndexInput::mids$ = NULL;
        bool BufferedChecksumIndexInput::live$ = false;

        jclass BufferedChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0441f0b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedChecksumIndexInput::BufferedChecksumIndexInput(const ::org::apache::lucene::store::IndexInput & a0) : ::org::apache::lucene::store::ChecksumIndexInput(env->newObject(initializeClass, &mids$, mid_init$_0441f0b2, a0.this$)) {}

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::clone() const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void BufferedChecksumIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong BufferedChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte BufferedChecksumIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void BufferedChecksumIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data);
        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data);
        static PyGetSetDef t_BufferedChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, checksum),
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksumIndexInput, t_BufferedChecksumIndexInput, ::org::apache::lucene::store::ChecksumIndexInput, BufferedChecksumIndexInput, t_BufferedChecksumIndexInput_init_, 0, 0, t_BufferedChecksumIndexInput__fields_, 0, 0);

        void t_BufferedChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksumIndexInput), module, "BufferedChecksumIndexInput", 0);
        }

        void t_BufferedChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "class_", make_descriptor(BufferedChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksumIndexInput::wrap_Object(BufferedChecksumIndexInput(((t_BufferedChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          BufferedChecksumIndexInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            INT_CALL(object = BufferedChecksumIndexInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *CharSequenceOutputs::class$ = NULL;
          jmethodID *CharSequenceOutputs::mids$ = NULL;
          bool CharSequenceOutputs::live$ = false;

          jclass CharSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/CharSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_8f9b8d9f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_common_8f9b8d9f] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getNoOutput_399267bb] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getSingleton_b8f978d1] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/CharSequenceOutputs;");
              mids$[mid_outputToString_ea1848b1] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/CharsRef;)Ljava/lang/String;");
              mids$[mid_read_cbeddd00] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_8f9b8d9f] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_write_9a0fad97] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_add_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::common(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_common_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_399267bb]));
          }

          CharSequenceOutputs CharSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return CharSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_b8f978d1]));
          }

          ::java::lang::String CharSequenceOutputs::outputToString(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_ea1848b1], a0.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_read_cbeddd00], a0.this$));
          }

          void CharSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::subtract(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_subtract_8f9b8d9f], a0.this$, a1.this$));
          }

          void CharSequenceOutputs::write(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9a0fad97], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data);
          static PyGetSetDef t_CharSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_CharSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_CharSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharSequenceOutputs, t_CharSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, CharSequenceOutputs, abstract_init, 0, 0, t_CharSequenceOutputs__fields_, 0, 0);
          PyObject *t_CharSequenceOutputs::wrap_Object(const CharSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(CharSequenceOutputs), module, "CharSequenceOutputs", 0);
          }

          void t_CharSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "class_", make_descriptor(CharSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_CharSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_CharSequenceOutputs::wrap_Object(CharSequenceOutputs(((t_CharSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            CharSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::CharSequenceOutputs::getSingleton());
            return t_CharSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::CharsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_CharsRef::wrap_Object(value);
          }

          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data)
          {
            CharSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_CharSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/BasqueStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *BasqueStemmer::class$ = NULL;
        jmethodID *BasqueStemmer::mids$ = NULL;
        bool BasqueStemmer::live$ = false;

        jclass BasqueStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/BasqueStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BasqueStemmer::BasqueStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean BasqueStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BasqueStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BasqueStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args);

        static PyMethodDef t_BasqueStemmer__methods_[] = {
          DECLARE_METHOD(t_BasqueStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BasqueStemmer, t_BasqueStemmer, ::org::tartarus::snowball::SnowballProgram, BasqueStemmer, t_BasqueStemmer_init_, 0, 0, 0, 0, 0);

        void t_BasqueStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(BasqueStemmer), module, "BasqueStemmer", 0);
        }

        void t_BasqueStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "class_", make_descriptor(BasqueStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "wrapfn_", make_descriptor(t_BasqueStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BasqueStemmer::initializeClass, 1)))
            return NULL;
          return t_BasqueStemmer::wrap_Object(BasqueStemmer(((t_BasqueStemmer *) arg)->object.this$));
        }
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BasqueStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds)
        {
          BasqueStemmer object((jobject) NULL);

          INT_CALL(object = BasqueStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferingTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *BufferingTermFreqIteratorWrapper::mids$ = NULL;
          bool BufferingTermFreqIteratorWrapper::live$ = false;

          jclass BufferingTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferingTermFreqIteratorWrapper::BufferingTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          ::java::util::Comparator BufferingTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef BufferingTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong BufferingTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_BufferingTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_BufferingTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferingTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper, ::java::lang::Object, BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferingTermFreqIteratorWrapper *)) get_next< t_BufferingTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferingTermFreqIteratorWrapper__fields_, 0, 0);

          void t_BufferingTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferingTermFreqIteratorWrapper), module, "BufferingTermFreqIteratorWrapper", 0);
          }

          void t_BufferingTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(BufferingTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_BufferingTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_BufferingTermFreqIteratorWrapper::wrap_Object(BufferingTermFreqIteratorWrapper(((t_BufferingTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
            BufferingTermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferingTermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$ReaderIterator::class$ = NULL;
          jmethodID *PackedInts$ReaderIterator::mids$ = NULL;
          bool PackedInts$ReaderIterator::live$ = false;

          jclass PackedInts$ReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$ReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$ReaderIterator::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          jlong PackedInts$ReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef PackedInts$ReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jint PackedInts$ReaderIterator::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }

          jint PackedInts$ReaderIterator::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args);
          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data);
          static PyGetSetDef t_PackedInts$ReaderIterator__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$ReaderIterator, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$ReaderIterator__methods_[] = {
            DECLARE_METHOD(t_PackedInts$ReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$ReaderIterator, t_PackedInts$ReaderIterator, ::java::lang::Object, PackedInts$ReaderIterator, abstract_init, 0, 0, t_PackedInts$ReaderIterator__fields_, 0, 0);

          void t_PackedInts$ReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$ReaderIterator), module, "PackedInts$ReaderIterator", 0);
          }

          void t_PackedInts$ReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "class_", make_descriptor(PackedInts$ReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$ReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$ReaderIterator::initializeClass, 1)))
              return NULL;
            return t_PackedInts$ReaderIterator::wrap_Object(PackedInts$ReaderIterator(((t_PackedInts$ReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$ReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$IntComparator::class$ = NULL;
        jmethodID *FieldComparator$IntComparator::mids$ = NULL;
        bool FieldComparator$IntComparator::live$ = false;

        jclass FieldComparator$IntComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$IntComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_138a2154] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Integer;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");
            mids$[mid_getIntValues_7d7d264d] = env->getMethodID(cls, "getIntValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Ints;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$IntComparator::FieldComparator$IntComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Integer & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_138a2154, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$IntComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$IntComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$IntComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$IntComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$IntComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$IntComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$IntComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$IntComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$IntComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$IntComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$IntComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$IntComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$IntComparator, t_FieldComparator$IntComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$IntComparator, t_FieldComparator$IntComparator_init_, 0, 0, t_FieldComparator$IntComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$IntComparator::wrap_Object(const FieldComparator$IntComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$IntComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$IntComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$IntComparator), module, "FieldComparator$IntComparator", 0);
        }

        void t_FieldComparator$IntComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "class_", make_descriptor(FieldComparator$IntComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$IntComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$IntComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$IntComparator::wrap_Object(FieldComparator$IntComparator(((t_FieldComparator$IntComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$IntComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Integer a3((jobject) NULL);
          FieldComparator$IntComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$IntComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Integer);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Diff.h"
#include "java/lang/String.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Diff::class$ = NULL;
      jmethodID *Diff::mids$ = NULL;
      bool Diff::live$ = false;

      jclass Diff::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Diff");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_ca5a6f66] = env->getMethodID(cls, "<init>", "(IIII)V");
          mids$[mid_apply_33cdba70] = env->getStaticMethodID(cls, "apply", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)V");
          mids$[mid_exec_aacea7e9] = env->getMethodID(cls, "exec", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Diff::Diff() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Diff::Diff(jint a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca5a6f66, a0, a1, a2, a3)) {}

      void Diff::apply(const ::java::lang::StringBuilder & a0, const ::java::lang::CharSequence & a1)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_apply_33cdba70], a0.this$, a1.this$);
      }

      ::java::lang::String Diff::exec(const ::java::lang::String & a0, const ::java::lang::String & a1) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_exec_aacea7e9], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args);
      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args);

      static PyMethodDef t_Diff__methods_[] = {
        DECLARE_METHOD(t_Diff, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, apply, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Diff, exec, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Diff, t_Diff, ::java::lang::Object, Diff, t_Diff_init_, 0, 0, 0, 0, 0);

      void t_Diff::install(PyObject *module)
      {
        installType(&PY_TYPE(Diff), module, "Diff", 0);
      }

      void t_Diff::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "class_", make_descriptor(Diff::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "wrapfn_", make_descriptor(t_Diff::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Diff::initializeClass, 1)))
          return NULL;
        return t_Diff::wrap_Object(Diff(((t_Diff *) arg)->object.this$));
      }
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Diff::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Diff object((jobject) NULL);

            INT_CALL(object = Diff());
            self->object = object;
            break;
          }
          goto err;
         case 4:
          {
            jint a0;
            jint a1;
            jint a2;
            jint a3;
            Diff object((jobject) NULL);

            if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Diff(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::StringBuilder a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::lang::StringBuilder::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(::org::egothor::stemmer::Diff::apply(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "apply", args);
        return NULL;
      }

      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        ::java::lang::String result((jobject) NULL);

        if (!parseArgs(args, "ss", &a0, &a1))
        {
          OBJ_CALL(result = self->object.exec(a0, a1));
          return j2p(result);
        }

        PyErr_SetArgsError((PyObject *) self, "exec", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Thread.h"
#include "java/lang/Runnable.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Thread$UncaughtExceptionHandler.h"
#include "java/lang/Thread$State.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Thread::class$ = NULL;
    jmethodID *Thread::mids$ = NULL;
    bool Thread::live$ = false;
    jint Thread::MAX_PRIORITY = (jint) 0;
    jint Thread::MIN_PRIORITY = (jint) 0;
    jint Thread::NORM_PRIORITY = (jint) 0;

    jclass Thread::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Thread");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_db86d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_749aa364] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_88a58d93] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
        mids$[mid_init$_684615b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V");
        mids$[mid_init$_5db621bb] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_57d87d50] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
        mids$[mid_activeCount_54c6a179] = env->getStaticMethodID(cls, "activeCount", "()I");
        mids$[mid_checkAccess_54c6a166] = env->getMethodID(cls, "checkAccess", "()V");
        mids$[mid_countStackFrames_54c6a179] = env->getMethodID(cls, "countStackFrames", "()I");
        mids$[mid_currentThread_88082f50] = env->getStaticMethodID(cls, "currentThread", "()Ljava/lang/Thread;");
        mids$[mid_destroy_54c6a166] = env->getMethodID(cls, "destroy", "()V");
        mids$[mid_dumpStack_54c6a166] = env->getStaticMethodID(cls, "dumpStack", "()V");
        mids$[mid_enumerate_9e0743ee] = env->getStaticMethodID(cls, "enumerate", "([Ljava/lang/Thread;)I");
        mids$[mid_getAllStackTraces_db60befd] = env->getStaticMethodID(cls, "getAllStackTraces", "()Ljava/util/Map;");
        mids$[mid_getContextClassLoader_8d2f11fc] = env->getMethodID(cls, "getContextClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b] = env->getStaticMethodID(cls, "getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_getId_54c6a17a] = env->getMethodID(cls, "getId", "()J");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPriority_54c6a179] = env->getMethodID(cls, "getPriority", "()I");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getState_bbff3c63] = env->getMethodID(cls, "getState", "()Ljava/lang/Thread$State;");
        mids$[mid_getThreadGroup_172b52b4] = env->getMethodID(cls, "getThreadGroup", "()Ljava/lang/ThreadGroup;");
        mids$[mid_getUncaughtExceptionHandler_a65feb9b] = env->getMethodID(cls, "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_holdsLock_290588e2] = env->getStaticMethodID(cls, "holdsLock", "(Ljava/lang/Object;)Z");
        mids$[mid_interrupt_54c6a166] = env->getMethodID(cls, "interrupt", "()V");
        mids$[mid_interrupted_54c6a16a] = env->getStaticMethodID(cls, "interrupted", "()Z");
        mids$[mid_isAlive_54c6a16a] = env->getMethodID(cls, "isAlive", "()Z");
        mids$[mid_isDaemon_54c6a16a] = env->getMethodID(cls, "isDaemon", "()Z");
        mids$[mid_isInterrupted_54c6a16a] = env->getMethodID(cls, "isInterrupted", "()Z");
        mids$[mid_join_54c6a166] = env->getMethodID(cls, "join", "()V");
        mids$[mid_join_0ee6df2f] = env->getMethodID(cls, "join", "(J)V");
        mids$[mid_join_25d05c8f] = env->getMethodID(cls, "join", "(JI)V");
        mids$[mid_resume_54c6a166] = env->getMethodID(cls, "resume", "()V");
        mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
        mids$[mid_setContextClassLoader_9110048d] = env->getMethodID(cls, "setContextClassLoader", "(Ljava/lang/ClassLoader;)V");
        mids$[mid_setDaemon_bb0c767f] = env->getMethodID(cls, "setDaemon", "(Z)V");
        mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2] = env->getStaticMethodID(cls, "setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_setName_5fdc3f48] = env->getMethodID(cls, "setName", "(Ljava/lang/String;)V");
        mids$[mid_setPriority_39c7bd3c] = env->getMethodID(cls, "setPriority", "(I)V");
        mids$[mid_setUncaughtExceptionHandler_4dc005b2] = env->getMethodID(cls, "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_sleep_0ee6df2f] = env->getStaticMethodID(cls, "sleep", "(J)V");
        mids$[mid_sleep_25d05c8f] = env->getStaticMethodID(cls, "sleep", "(JI)V");
        mids$[mid_start_54c6a166] = env->getMethodID(cls, "start", "()V");
        mids$[mid_stop_54c6a166] = env->getMethodID(cls, "stop", "()V");
        mids$[mid_stop_c5ec8ca4] = env->getMethodID(cls, "stop", "(Ljava/lang/Throwable;)V");
        mids$[mid_suspend_54c6a166] = env->getMethodID(cls, "suspend", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_yield_54c6a166] = env->getStaticMethodID(cls, "yield", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_PRIORITY = env->getStaticIntField(cls, "MAX_PRIORITY");
        MIN_PRIORITY = env->getStaticIntField(cls, "MIN_PRIORITY");
        NORM_PRIORITY = env->getStaticIntField(cls, "NORM_PRIORITY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Thread::Thread() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Thread::Thread(const ::java::lang::Runnable & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_db86d7e2, a0.this$)) {}

    Thread::Thread(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Thread::Thread(const ::java::lang::Runnable & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_749aa364, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_88a58d93, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_684615b9, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5db621bb, a0.this$, a1.this$, a2.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_57d87d50, a0.this$, a1.this$, a2.this$, a3)) {}

    jint Thread::activeCount()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_activeCount_54c6a179]);
    }

    void Thread::checkAccess() const
    {
      env->callVoidMethod(this$, mids$[mid_checkAccess_54c6a166]);
    }

    jint Thread::countStackFrames() const
    {
      return env->callIntMethod(this$, mids$[mid_countStackFrames_54c6a179]);
    }

    Thread Thread::currentThread()
    {
      jclass cls = env->getClass(initializeClass);
      return Thread(env->callStaticObjectMethod(cls, mids$[mid_currentThread_88082f50]));
    }

    void Thread::destroy() const
    {
      env->callVoidMethod(this$, mids$[mid_destroy_54c6a166]);
    }

    void Thread::dumpStack()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_dumpStack_54c6a166]);
    }

    jint Thread::enumerate(const JArray< Thread > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_enumerate_9e0743ee], a0.this$);
    }

    ::java::util::Map Thread::getAllStackTraces()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getAllStackTraces_db60befd]));
    }

    ::java::lang::ClassLoader Thread::getContextClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getContextClassLoader_8d2f11fc]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getDefaultUncaughtExceptionHandler()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callStaticObjectMethod(cls, mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b]));
    }

    jlong Thread::getId() const
    {
      return env->callLongMethod(this$, mids$[mid_getId_54c6a17a]);
    }

    ::java::lang::String Thread::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    jint Thread::getPriority() const
    {
      return env->callIntMethod(this$, mids$[mid_getPriority_54c6a179]);
    }

    JArray< ::java::lang::StackTraceElement > Thread::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    ::java::lang::Thread$State Thread::getState() const
    {
      return ::java::lang::Thread$State(env->callObjectMethod(this$, mids$[mid_getState_bbff3c63]));
    }

    ::java::lang::ThreadGroup Thread::getThreadGroup() const
    {
      return ::java::lang::ThreadGroup(env->callObjectMethod(this$, mids$[mid_getThreadGroup_172b52b4]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getUncaughtExceptionHandler() const
    {
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callObjectMethod(this$, mids$[mid_getUncaughtExceptionHandler_a65feb9b]));
    }

    jboolean Thread::holdsLock(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_holdsLock_290588e2], a0.this$);
    }

    void Thread::interrupt() const
    {
      env->callVoidMethod(this$, mids$[mid_interrupt_54c6a166]);
    }

    jboolean Thread::interrupted()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_interrupted_54c6a16a]);
    }

    jboolean Thread::isAlive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAlive_54c6a16a]);
    }

    jboolean Thread::isDaemon() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDaemon_54c6a16a]);
    }

    jboolean Thread::isInterrupted() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterrupted_54c6a16a]);
    }

    void Thread::join() const
    {
      env->callVoidMethod(this$, mids$[mid_join_54c6a166]);
    }

    void Thread::join(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_join_0ee6df2f], a0);
    }

    void Thread::join(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_join_25d05c8f], a0, a1);
    }

    void Thread::resume() const
    {
      env->callVoidMethod(this$, mids$[mid_resume_54c6a166]);
    }

    void Thread::run() const
    {
      env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
    }

    void Thread::setContextClassLoader(const ::java::lang::ClassLoader & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setContextClassLoader_9110048d], a0.this$);
    }

    void Thread::setDaemon(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDaemon_bb0c767f], a0);
    }

    void Thread::setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::setName(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setName_5fdc3f48], a0.this$);
    }

    void Thread::setPriority(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPriority_39c7bd3c], a0);
    }

    void Thread::setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::sleep(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_0ee6df2f], a0);
    }

    void Thread::sleep(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_25d05c8f], a0, a1);
    }

    void Thread::start() const
    {
      env->callVoidMethod(this$, mids$[mid_start_54c6a166]);
    }

    void Thread::stop() const
    {
      env->callVoidMethod(this$, mids$[mid_stop_54c6a166]);
    }

    void Thread::stop(const ::java::lang::Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_stop_c5ec8ca4], a0.this$);
    }

    void Thread::suspend() const
    {
      env->callVoidMethod(this$, mids$[mid_suspend_54c6a166]);
    }

    ::java::lang::String Thread::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Thread::yield()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_yield_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Thread_activeCount(PyTypeObject *type);
    static PyObject *t_Thread_checkAccess(t_Thread *self);
    static PyObject *t_Thread_countStackFrames(t_Thread *self);
    static PyObject *t_Thread_currentThread(PyTypeObject *type);
    static PyObject *t_Thread_destroy(t_Thread *self);
    static PyObject *t_Thread_dumpStack(PyTypeObject *type);
    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type);
    static PyObject *t_Thread_getContextClassLoader(t_Thread *self);
    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type);
    static PyObject *t_Thread_getId(t_Thread *self);
    static PyObject *t_Thread_getName(t_Thread *self);
    static PyObject *t_Thread_getPriority(t_Thread *self);
    static PyObject *t_Thread_getStackTrace(t_Thread *self);
    static PyObject *t_Thread_getState(t_Thread *self);
    static PyObject *t_Thread_getThreadGroup(t_Thread *self);
    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self);
    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_interrupt(t_Thread *self);
    static PyObject *t_Thread_interrupted(PyTypeObject *type);
    static PyObject *t_Thread_isAlive(t_Thread *self);
    static PyObject *t_Thread_isDaemon(t_Thread *self);
    static PyObject *t_Thread_isInterrupted(t_Thread *self);
    static PyObject *t_Thread_join(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_resume(t_Thread *self);
    static PyObject *t_Thread_run(t_Thread *self);
    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args);
    static PyObject *t_Thread_start(t_Thread *self);
    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_suspend(t_Thread *self);
    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_yield(PyTypeObject *type);
    static PyObject *t_Thread_get__alive(t_Thread *self, void *data);
    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data);
    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data);
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data);
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__id(t_Thread *self, void *data);
    static PyObject *t_Thread_get__name(t_Thread *self, void *data);
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__priority(t_Thread *self, void *data);
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data);
    static PyObject *t_Thread_get__state(t_Thread *self, void *data);
    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data);
    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyGetSetDef t_Thread__fields_[] = {
      DECLARE_GET_FIELD(t_Thread, alive),
      DECLARE_GET_FIELD(t_Thread, allStackTraces),
      DECLARE_GETSET_FIELD(t_Thread, contextClassLoader),
      DECLARE_GETSET_FIELD(t_Thread, daemon),
      DECLARE_GETSET_FIELD(t_Thread, defaultUncaughtExceptionHandler),
      DECLARE_GET_FIELD(t_Thread, id),
      DECLARE_GETSET_FIELD(t_Thread, name),
      DECLARE_GETSET_FIELD(t_Thread, priority),
      DECLARE_GET_FIELD(t_Thread, stackTrace),
      DECLARE_GET_FIELD(t_Thread, state),
      DECLARE_GET_FIELD(t_Thread, threadGroup),
      DECLARE_GETSET_FIELD(t_Thread, uncaughtExceptionHandler),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Thread__methods_[] = {
      DECLARE_METHOD(t_Thread, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, activeCount, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, checkAccess, METH_NOARGS),
      DECLARE_METHOD(t_Thread, countStackFrames, METH_NOARGS),
      DECLARE_METHOD(t_Thread, currentThread, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, destroy, METH_NOARGS),
      DECLARE_METHOD(t_Thread, dumpStack, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, enumerate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, getAllStackTraces, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getContextClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getDefaultUncaughtExceptionHandler, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getId, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getName, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getPriority, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getState, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getThreadGroup, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getUncaughtExceptionHandler, METH_NOARGS),
      DECLARE_METHOD(t_Thread, holdsLock, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, interrupt, METH_NOARGS),
      DECLARE_METHOD(t_Thread, interrupted, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, isAlive, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isDaemon, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isInterrupted, METH_NOARGS),
      DECLARE_METHOD(t_Thread, join, METH_VARARGS),
      DECLARE_METHOD(t_Thread, resume, METH_NOARGS),
      DECLARE_METHOD(t_Thread, run, METH_NOARGS),
      DECLARE_METHOD(t_Thread, setContextClassLoader, METH_O),
      DECLARE_METHOD(t_Thread, setDaemon, METH_O),
      DECLARE_METHOD(t_Thread, setDefaultUncaughtExceptionHandler, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, setName, METH_O),
      DECLARE_METHOD(t_Thread, setPriority, METH_O),
      DECLARE_METHOD(t_Thread, setUncaughtExceptionHandler, METH_O),
      DECLARE_METHOD(t_Thread, sleep, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, start, METH_NOARGS),
      DECLARE_METHOD(t_Thread, stop, METH_VARARGS),
      DECLARE_METHOD(t_Thread, suspend, METH_NOARGS),
      DECLARE_METHOD(t_Thread, toString, METH_VARARGS),
      DECLARE_METHOD(t_Thread, yield, METH_NOARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Thread, t_Thread, ::java::lang::Object, Thread, t_Thread_init_, 0, 0, t_Thread__fields_, 0, 0);

    void t_Thread::install(PyObject *module)
    {
      installType(&PY_TYPE(Thread), module, "Thread", 0);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "UncaughtExceptionHandler", make_descriptor(&PY_TYPE(Thread$UncaughtExceptionHandler)));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "State", make_descriptor(&PY_TYPE(Thread$State)));
    }

    void t_Thread::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "class_", make_descriptor(Thread::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "wrapfn_", make_descriptor(t_Thread::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Thread::initializeClass);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MAX_PRIORITY", make_descriptor(Thread::MAX_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MIN_PRIORITY", make_descriptor(Thread::MIN_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "NORM_PRIORITY", make_descriptor(Thread::NORM_PRIORITY));
    }

    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Thread::initializeClass, 1)))
        return NULL;
      return t_Thread::wrap_Object(Thread(((t_Thread *) arg)->object.this$));
    }
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Thread::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Thread object((jobject) NULL);

          INT_CALL(object = Thread());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::ThreadGroup::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kks", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = Thread(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jlong a3;
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kksJ", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = Thread(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Thread_activeCount(PyTypeObject *type)
    {
      jint result;
      OBJ_CALL(result = ::java::lang::Thread::activeCount());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_checkAccess(t_Thread *self)
    {
      OBJ_CALL(self->object.checkAccess());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_countStackFrames(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.countStackFrames());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_currentThread(PyTypeObject *type)
    {
      Thread result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::currentThread());
      return t_Thread::wrap_Object(result);
    }

    static PyObject *t_Thread_destroy(t_Thread *self)
    {
      OBJ_CALL(self->object.destroy());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_dumpStack(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::dumpStack());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg)
    {
      JArray< Thread > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[k", Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::enumerate(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "enumerate", arg);
      return NULL;
    }

    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(Thread), &::java::lang::PY_TYPE(Object));
    }

    static PyObject *t_Thread_getContextClassLoader(t_Thread *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_getId(t_Thread *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Thread_getName(t_Thread *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Thread_getPriority(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getPriority());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_getStackTrace(t_Thread *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_getState(t_Thread *self)
    {
      ::java::lang::Thread$State result((jobject) NULL);
      OBJ_CALL(result = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(result);
    }

    static PyObject *t_Thread_getThreadGroup(t_Thread *self)
    {
      ::java::lang::ThreadGroup result((jobject) NULL);
      OBJ_CALL(result = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(result);
    }

    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::holdsLock(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "holdsLock", arg);
      return NULL;
    }

    static PyObject *t_Thread_interrupt(t_Thread *self)
    {
      OBJ_CALL(self->object.interrupt());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_interrupted(PyTypeObject *type)
    {
      jboolean result;
      OBJ_CALL(result = ::java::lang::Thread::interrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isAlive(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAlive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isDaemon(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDaemon());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isInterrupted(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_join(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.join());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.join(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.join(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "join", args);
      return NULL;
    }

    static PyObject *t_Thread_resume(t_Thread *self)
    {
      OBJ_CALL(self->object.resume());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_run(t_Thread *self)
    {
      OBJ_CALL(self->object.run());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg)
    {
      ::java::lang::ClassLoader a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setContextClassLoader(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setContextClassLoader", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDaemon(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDaemon", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::Thread::setDefaultUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setDefaultUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setName(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setName", arg);
      return NULL;
    }

    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setPriority(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPriority", arg);
      return NULL;
    }

    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sleep", args);
      return NULL;
    }

    static PyObject *t_Thread_start(t_Thread *self)
    {
      OBJ_CALL(self->object.start());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.stop());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.stop(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "stop", args);
      return NULL;
    }

    static PyObject *t_Thread_suspend(t_Thread *self)
    {
      OBJ_CALL(self->object.suspend());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Thread), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Thread_yield(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::yield());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_get__alive(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAlive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::ClassLoader value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &value))
        {
          INT_CALL(self->object.setContextClassLoader(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "contextClassLoader", arg);
      return -1;
    }

    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDaemon());
      Py_RETURN_BOOL(value);
    }
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDaemon(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "daemon", arg);
      return -1;
    }

    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setDefaultUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "defaultUncaughtExceptionHandler", arg);
      return -1;
    }

    static PyObject *t_Thread_get__id(t_Thread *self, void *data)
    {
      jlong value;
      OBJ_CALL(value = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) value);
    }

    static PyObject *t_Thread_get__name(t_Thread *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setName(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "name", arg);
      return -1;
    }

    static PyObject *t_Thread_get__priority(t_Thread *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getPriority());
      return PyInt_FromLong((long) value);
    }
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setPriority(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "priority", arg);
      return -1;
    }

    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_get__state(t_Thread *self, void *data)
    {
      ::java::lang::Thread$State value((jobject) NULL);
      OBJ_CALL(value = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(value);
    }

    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data)
    {
      ::java::lang::ThreadGroup value((jobject) NULL);
      OBJ_CALL(value = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(value);
    }

    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "uncaughtExceptionHandler", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldableNode::class$ = NULL;
              jmethodID *FieldableNode::mids$ = NULL;
              bool FieldableNode::live$ = false;

              jclass FieldableNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence FieldableNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void FieldableNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_getField(t_FieldableNode *self);
              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg);
              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data);
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldableNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldableNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldableNode__methods_[] = {
                DECLARE_METHOD(t_FieldableNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldableNode, setField, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldableNode, t_FieldableNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, FieldableNode, abstract_init, 0, 0, t_FieldableNode__fields_, 0, 0);

              void t_FieldableNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldableNode), module, "FieldableNode", 0);
              }

              void t_FieldableNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "class_", make_descriptor(FieldableNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "wrapfn_", make_descriptor(t_FieldableNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldableNode::initializeClass, 1)))
                  return NULL;
                return t_FieldableNode::wrap_Object(FieldableNode(((t_FieldableNode *) arg)->object.this$));
              }
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldableNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldableNode_getField(t_FieldableNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream::class$ = NULL;
        jmethodID *NumericTokenStream::mids$ = NULL;
        bool NumericTokenStream::live$ = false;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_FULL_PREC = NULL;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_LOWER_PREC = NULL;

        jclass NumericTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_f6b58e9c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setDoubleValue_9f5ef2d6] = env->getMethodID(cls, "setDoubleValue", "(D)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setFloatValue_e2936734] = env->getMethodID(cls, "setFloatValue", "(F)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setIntValue_ca7ab323] = env->getMethodID(cls, "setIntValue", "(I)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setLongValue_c6439648] = env->getMethodID(cls, "setLongValue", "(J)Lorg/apache/lucene/analysis/NumericTokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_TYPE_FULL_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_FULL_PREC", "Ljava/lang/String;"));
            TOKEN_TYPE_LOWER_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_LOWER_PREC", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream::NumericTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NumericTokenStream::NumericTokenStream(jint a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        NumericTokenStream::NumericTokenStream(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_f6b58e9c, a0.this$, a1)) {}

        jint NumericTokenStream::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericTokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void NumericTokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        NumericTokenStream NumericTokenStream::setDoubleValue(jdouble a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setDoubleValue_9f5ef2d6], a0));
        }

        NumericTokenStream NumericTokenStream::setFloatValue(jfloat a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setFloatValue_e2936734], a0));
        }

        NumericTokenStream NumericTokenStream::setIntValue(jint a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setIntValue_ca7ab323], a0));
        }

        NumericTokenStream NumericTokenStream::setLongValue(jlong a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setLongValue_c6439648], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self);
        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg);
        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data);
        static PyGetSetDef t_NumericTokenStream__fields_[] = {
          DECLARE_SET_FIELD(t_NumericTokenStream, doubleValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, floatValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, intValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, longValue),
          DECLARE_GET_FIELD(t_NumericTokenStream, precisionStep),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, reset, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, setDoubleValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setFloatValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setIntValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setLongValue, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream, t_NumericTokenStream, ::org::apache::lucene::analysis::TokenStream, NumericTokenStream, t_NumericTokenStream_init_, 0, 0, t_NumericTokenStream__fields_, 0, 0);

        void t_NumericTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream), module, "NumericTokenStream", 0);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttributeImpl", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttribute", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttribute)));
        }

        void t_NumericTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "class_", make_descriptor(NumericTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericTokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_FULL_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_FULL_PREC)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_LOWER_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_LOWER_PREC)));
        }

        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream::wrap_Object(NumericTokenStream(((t_NumericTokenStream *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NumericTokenStream object((jobject) NULL);

              INT_CALL(object = NumericTokenStream());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = NumericTokenStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              jint a1;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NumericTokenStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jdouble a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setDoubleValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jfloat a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = self->object.setFloatValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jint a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIntValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jlong a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setLongValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListWriter::class$ = NULL;
        jmethodID *MultiLevelSkipListWriter::mids$ = NULL;
        bool MultiLevelSkipListWriter::live$ = false;

        jclass MultiLevelSkipListWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bufferSkip_39c7bd3c] = env->getMethodID(cls, "bufferSkip", "(I)V");
            mids$[mid_writeSkip_faad6216] = env->getMethodID(cls, "writeSkip", "(Lorg/apache/lucene/store/IndexOutput;)J");
            mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
            mids$[mid_resetSkip_54c6a166] = env->getMethodID(cls, "resetSkip", "()V");
            mids$[mid_writeSkipData_a31eeaec] = env->getMethodID(cls, "writeSkipData", "(ILorg/apache/lucene/store/IndexOutput;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListWriter::bufferSkip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_bufferSkip_39c7bd3c], a0);
        }

        jlong MultiLevelSkipListWriter::writeSkip(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_writeSkip_faad6216], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);

        static PyMethodDef t_MultiLevelSkipListWriter__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, bufferSkip, METH_O),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, writeSkip, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListWriter, t_MultiLevelSkipListWriter, ::java::lang::Object, MultiLevelSkipListWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiLevelSkipListWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListWriter), module, "MultiLevelSkipListWriter", 0);
        }

        void t_MultiLevelSkipListWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "class_", make_descriptor(MultiLevelSkipListWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListWriter::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListWriter::wrap_Object(MultiLevelSkipListWriter(((t_MultiLevelSkipListWriter *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.bufferSkip(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "bufferSkip", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.writeSkip(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "writeSkip", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexReader::mids$ = NULL;
          bool CompressingStoredFieldsIndexReader::live$ = false;

          jclass CompressingStoredFieldsIndexReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_b704ed60] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsIndexReader CompressingStoredFieldsIndexReader::clone() const
          {
            return CompressingStoredFieldsIndexReader(env->callObjectMethod(this$, mids$[mid_clone_b704ed60]));
          }

          jlong CompressingStoredFieldsIndexReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self);
          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self);

          static PyMethodDef t_CompressingStoredFieldsIndexReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, clone, METH_NOARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexReader, t_CompressingStoredFieldsIndexReader, ::java::lang::Object, CompressingStoredFieldsIndexReader, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexReader), module, "CompressingStoredFieldsIndexReader", 0);
          }

          void t_CompressingStoredFieldsIndexReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexReader::wrap_Object(CompressingStoredFieldsIndexReader(((t_CompressingStoredFieldsIndexReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self)
          {
            CompressingStoredFieldsIndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CompressingStoredFieldsIndexReader::wrap_Object(result);
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenRangeSinkFilter::class$ = NULL;
          jmethodID *TokenRangeSinkFilter::mids$ = NULL;
          bool TokenRangeSinkFilter::live$ = false;

          jclass TokenRangeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenRangeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenRangeSinkFilter::TokenRangeSinkFilter(jint a0, jint a1) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jboolean TokenRangeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TokenRangeSinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args);
          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenRangeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenRangeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, accept, METH_VARARGS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenRangeSinkFilter, t_TokenRangeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenRangeSinkFilter, t_TokenRangeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenRangeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenRangeSinkFilter), module, "TokenRangeSinkFilter", 0);
          }

          void t_TokenRangeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "class_", make_descriptor(TokenRangeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenRangeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenRangeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenRangeSinkFilter::wrap_Object(TokenRangeSinkFilter(((t_TokenRangeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenRangeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            TokenRangeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = TokenRangeSinkFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "accept", args, 2);
          }

          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilter::class$ = NULL;
          jmethodID *KeepWordFilter::mids$ = NULL;
          bool KeepWordFilter::live$ = false;

          jclass KeepWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c97b7f85] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c97b7f85, a0.this$, a1, a2.this$, a3.this$)) {}

          jboolean KeepWordFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self);

          static PyMethodDef t_KeepWordFilter__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilter, t_KeepWordFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, KeepWordFilter, t_KeepWordFilter_init_, 0, 0, 0, 0, 0);

          void t_KeepWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilter), module, "KeepWordFilter", 0);
          }

          void t_KeepWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "class_", make_descriptor(KeepWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilter::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilter::wrap_Object(KeepWordFilter(((t_KeepWordFilter *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekAnalyzer::class$ = NULL;
          jmethodID *GreekAnalyzer::mids$ = NULL;
          bool GreekAnalyzer::live$ = false;
          ::java::lang::String *GreekAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GreekAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GreekAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data);
          static PyGetSetDef t_GreekAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GreekAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GreekAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekAnalyzer, t_GreekAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GreekAnalyzer, t_GreekAnalyzer_init_, 0, 0, t_GreekAnalyzer__fields_, 0, 0);

          void t_GreekAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekAnalyzer), module, "GreekAnalyzer", 0);
          }

          void t_GreekAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "class_", make_descriptor(GreekAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GreekAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GreekAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GreekAnalyzer::wrap_Object(GreekAnalyzer(((t_GreekAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::el::GreekAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsAndPositionsEnum::mids$ = NULL;
        bool MappingMultiDocsAndPositionsEnum::live$ = false;

        jclass MappingMultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsAndPositionsEnum::MappingMultiDocsAndPositionsEnum() : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MappingMultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MappingMultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MappingMultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        void MappingMultiDocsAndPositionsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }

        jint MappingMultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsAndPositionsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, setMergeState, METH_O),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum_init_, 0, 0, t_MappingMultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MappingMultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsAndPositionsEnum), module, "MappingMultiDocsAndPositionsEnum", 0);
        }

        void t_MappingMultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsAndPositionsEnum::wrap_Object(MappingMultiDocsAndPositionsEnum(((t_MappingMultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsAndPositionsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsAndPositionsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilterFactory::class$ = NULL;
          jmethodID *HTMLStripCharFilterFactory::mids$ = NULL;
          bool HTMLStripCharFilterFactory::live$ = false;

          jclass HTMLStripCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca5f8ca1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/charfilter/HTMLStripCharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilterFactory::HTMLStripCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter HTMLStripCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter(env->callObjectMethod(this$, mids$[mid_create_ca5f8ca1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilterFactory), module, "HTMLStripCharFilterFactory", 0);
          }

          void t_HTMLStripCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "class_", make_descriptor(HTMLStripCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilterFactory::wrap_Object(HTMLStripCharFilterFactory(((t_HTMLStripCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HTMLStripCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HTMLStripCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::charfilter::t_HTMLStripCharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IntFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IntFieldSource::class$ = NULL;
            jmethodID *IntFieldSource::mids$ = NULL;
            bool IntFieldSource::live$ = false;

            jclass IntFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IntFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6da5ba0c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_6da5ba0c, a0.this$, a1.this$)) {}

            ::java::lang::String IntFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IntFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IntFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IntFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args);

            static PyMethodDef t_IntFieldSource__methods_[] = {
              DECLARE_METHOD(t_IntFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntFieldSource, t_IntFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, IntFieldSource, t_IntFieldSource_init_, 0, 0, 0, 0, 0);

            void t_IntFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IntFieldSource), module, "IntFieldSource", 0);
            }

            void t_IntFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "class_", make_descriptor(IntFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "wrapfn_", make_descriptor(t_IntFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntFieldSource::initializeClass, 1)))
                return NULL;
              return t_IntFieldSource::wrap_Object(IntFieldSource(((t_IntFieldSource *) arg)->object.this$));
            }
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = IntFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = IntFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonQueryParser::class$ = NULL;
          jmethodID *PythonQueryParser::mids$ = NULL;
          bool PythonQueryParser::live$ = false;

          jclass PythonQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          void PythonQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self);
          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data);
          static PyGetSetDef t_PythonQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonQueryParser, t_PythonQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, PythonQueryParser, t_PythonQueryParser_init_, 0, 0, t_PythonQueryParser__fields_, 0, 0);

          void t_PythonQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonQueryParser), module, "PythonQueryParser", 1);
          }

          void t_PythonQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "class_", make_descriptor(PythonQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonQueryParser::wrap_Object(PythonQueryParser(((t_PythonQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = PythonQueryParser(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = PythonQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserConstants::class$ = NULL;
            jmethodID *QueryParserConstants::mids$ = NULL;
            bool QueryParserConstants::live$ = false;
            jint QueryParserConstants::AND = (jint) 0;
            jint QueryParserConstants::Boost = (jint) 0;
            jint QueryParserConstants::CARAT = (jint) 0;
            jint QueryParserConstants::COLON = (jint) 0;
            jint QueryParserConstants::COMMA = (jint) 0;
            jint QueryParserConstants::DEFAULT = (jint) 0;
            jint QueryParserConstants::EOF = (jint) 0;
            jint QueryParserConstants::LPAREN = (jint) 0;
            jint QueryParserConstants::N = (jint) 0;
            jint QueryParserConstants::NOT = (jint) 0;
            jint QueryParserConstants::NUMBER = (jint) 0;
            jint QueryParserConstants::OR = (jint) 0;
            jint QueryParserConstants::QUOTED = (jint) 0;
            jint QueryParserConstants::RPAREN = (jint) 0;
            jint QueryParserConstants::SUFFIXTERM = (jint) 0;
            jint QueryParserConstants::TERM = (jint) 0;
            jint QueryParserConstants::TRUNCQUOTED = (jint) 0;
            jint QueryParserConstants::TRUNCTERM = (jint) 0;
            jint QueryParserConstants::W = (jint) 0;
            jint QueryParserConstants::_DISTOP_NUM = (jint) 0;
            jint QueryParserConstants::_NUM_CHAR = (jint) 0;
            jint QueryParserConstants::_ONE_CHAR = (jint) 0;
            jint QueryParserConstants::_STAR = (jint) 0;
            jint QueryParserConstants::_TERM_CHAR = (jint) 0;
            jint QueryParserConstants::_WHITESPACE = (jint) 0;
            JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

            jclass QueryParserConstants::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserConstants");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                AND = env->getStaticIntField(cls, "AND");
                Boost = env->getStaticIntField(cls, "Boost");
                CARAT = env->getStaticIntField(cls, "CARAT");
                COLON = env->getStaticIntField(cls, "COLON");
                COMMA = env->getStaticIntField(cls, "COMMA");
                DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                EOF = env->getStaticIntField(cls, "EOF");
                LPAREN = env->getStaticIntField(cls, "LPAREN");
                N = env->getStaticIntField(cls, "N");
                NOT = env->getStaticIntField(cls, "NOT");
                NUMBER = env->getStaticIntField(cls, "NUMBER");
                OR = env->getStaticIntField(cls, "OR");
                QUOTED = env->getStaticIntField(cls, "QUOTED");
                RPAREN = env->getStaticIntField(cls, "RPAREN");
                SUFFIXTERM = env->getStaticIntField(cls, "SUFFIXTERM");
                TERM = env->getStaticIntField(cls, "TERM");
                TRUNCQUOTED = env->getStaticIntField(cls, "TRUNCQUOTED");
                TRUNCTERM = env->getStaticIntField(cls, "TRUNCTERM");
                W = env->getStaticIntField(cls, "W");
                _DISTOP_NUM = env->getStaticIntField(cls, "_DISTOP_NUM");
                _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                _ONE_CHAR = env->getStaticIntField(cls, "_ONE_CHAR");
                _STAR = env->getStaticIntField(cls, "_STAR");
                _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_QueryParserConstants__methods_[] = {
              DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

            void t_QueryParserConstants::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
            }

            void t_QueryParserConstants::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserConstants::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COMMA", make_descriptor(QueryParserConstants::COMMA));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "N", make_descriptor(QueryParserConstants::N));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "SUFFIXTERM", make_descriptor(QueryParserConstants::SUFFIXTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCQUOTED", make_descriptor(QueryParserConstants::TRUNCQUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCTERM", make_descriptor(QueryParserConstants::TRUNCTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "W", make_descriptor(QueryParserConstants::W));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_DISTOP_NUM", make_descriptor(QueryParserConstants::_DISTOP_NUM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ONE_CHAR", make_descriptor(QueryParserConstants::_ONE_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_STAR", make_descriptor(QueryParserConstants::_STAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
            }

            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
                return NULL;
              return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
            }
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/util/Map$Entry.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntryIterator::class$ = NULL;
          jmethodID *CharArrayMap$EntryIterator::mids$ = NULL;
          bool CharArrayMap$EntryIterator::live$ = false;

          jclass CharArrayMap$EntryIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntryIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_currentValue_846352c3] = env->getMethodID(cls, "currentValue", "()Ljava/lang/Object;");
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_2971780b] = env->getMethodID(cls, "next", "()Ljava/util/Map$Entry;");
              mids$[mid_nextKey_dab10e7f] = env->getMethodID(cls, "nextKey", "()[C");
              mids$[mid_nextKeyString_14c7b5c5] = env->getMethodID(cls, "nextKeyString", "()Ljava/lang/String;");
              mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
              mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object CharArrayMap$EntryIterator::currentValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_currentValue_846352c3]));
          }

          jboolean CharArrayMap$EntryIterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          ::java::util::Map$Entry CharArrayMap$EntryIterator::next() const
          {
            return ::java::util::Map$Entry(env->callObjectMethod(this$, mids$[mid_next_2971780b]));
          }

          JArray< jchar > CharArrayMap$EntryIterator::nextKey() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_nextKey_dab10e7f]));
          }

          ::java::lang::String CharArrayMap$EntryIterator::nextKeyString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextKeyString_14c7b5c5]));
          }

          void CharArrayMap$EntryIterator::remove() const
          {
            env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
          }

          ::java::lang::Object CharArrayMap$EntryIterator::setValue(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg);
          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntryIterator__fields_[] = {
            DECLARE_SET_FIELD(t_CharArrayMap$EntryIterator, value),
            DECLARE_GET_FIELD(t_CharArrayMap$EntryIterator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntryIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKey, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKeyString, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, remove, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, setValue, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntryIterator, t_CharArrayMap$EntryIterator, ::java::lang::Object, CharArrayMap$EntryIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::util::t_Map$Entry >), t_CharArrayMap$EntryIterator__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntryIterator::wrap_Object(const CharArrayMap$EntryIterator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntryIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntryIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntryIterator), module, "CharArrayMap$EntryIterator", 0);
          }

          void t_CharArrayMap$EntryIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "class_", make_descriptor(CharArrayMap$EntryIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntryIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntryIterator::wrap_Object(CharArrayMap$EntryIterator(((t_CharArrayMap$EntryIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.currentValue());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self)
          {
            ::java::util::Map$Entry result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::java::util::t_Map$Entry::wrap_Object(result, &::java::lang::PY_TYPE(Object), self->parameters[0]);
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKey());
            return result.wrap();
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKeyString());
            return j2p(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self)
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.setValue(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setValue", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PortugueseStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PortugueseStemmer::class$ = NULL;
        jmethodID *PortugueseStemmer::mids$ = NULL;
        bool PortugueseStemmer::live$ = false;

        jclass PortugueseStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PortugueseStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PortugueseStemmer::PortugueseStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PortugueseStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PortugueseStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PortugueseStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

        static PyMethodDef t_PortugueseStemmer__methods_[] = {
          DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::tartarus::snowball::SnowballProgram, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

        void t_PortugueseStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
        }

        void t_PortugueseStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
            return NULL;
          return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
        }
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
        {
          PortugueseStemmer object((jobject) NULL);

          INT_CALL(object = PortugueseStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ClasspathResourceLoader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ClasspathResourceLoader::class$ = NULL;
          jmethodID *ClasspathResourceLoader::mids$ = NULL;
          bool ClasspathResourceLoader::live$ = false;

          jclass ClasspathResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ClasspathResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
              mids$[mid_init$_9110048d] = env->getMethodID(cls, "<init>", "(Ljava/lang/ClassLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClasspathResourceLoader::ClasspathResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::ClassLoader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9110048d, a0.this$)) {}

          ::java::lang::Class ClasspathResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ClasspathResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ClasspathResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ClasspathResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ClasspathResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClasspathResourceLoader, t_ClasspathResourceLoader, ::java::lang::Object, ClasspathResourceLoader, t_ClasspathResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_ClasspathResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ClasspathResourceLoader), module, "ClasspathResourceLoader", 0);
          }

          void t_ClasspathResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "class_", make_descriptor(ClasspathResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ClasspathResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClasspathResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ClasspathResourceLoader::wrap_Object(ClasspathResourceLoader(((t_ClasspathResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClasspathResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClasspathResourceLoader object((jobject) NULL);

                INT_CALL(object = ClasspathResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::ClassLoader a0((jobject) NULL);
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::ClassLoader::initializeClass, &a0))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups::class$ = NULL;
          jmethodID *TopGroups::mids$ = NULL;
          jfieldID *TopGroups::fids$ = NULL;
          bool TopGroups::live$ = false;

          jclass TopGroups::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056bd231] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/TopGroups;Ljava/lang/Integer;)V");
              mids$[mid_init$_5e81883d] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;[Lorg/apache/lucene/search/SortField;II[Lorg/apache/lucene/search/grouping/GroupDocs;F)V");
              mids$[mid_merge_abb30a8c] = env->getStaticMethodID(cls, "merge", "([Lorg/apache/lucene/search/grouping/TopGroups;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IILorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;)Lorg/apache/lucene/search/grouping/TopGroups;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSort] = env->getFieldID(cls, "groupSort", "[Lorg/apache/lucene/search/SortField;");
              fids$[fid_groups] = env->getFieldID(cls, "groups", "[Lorg/apache/lucene/search/grouping/GroupDocs;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_totalGroupCount] = env->getFieldID(cls, "totalGroupCount", "Ljava/lang/Integer;");
              fids$[fid_totalGroupedHitCount] = env->getFieldID(cls, "totalGroupedHitCount", "I");
              fids$[fid_totalHitCount] = env->getFieldID(cls, "totalHitCount", "I");
              fids$[fid_withinGroupSort] = env->getFieldID(cls, "withinGroupSort", "[Lorg/apache/lucene/search/SortField;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups::TopGroups(const TopGroups & a0, const ::java::lang::Integer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_056bd231, a0.this$, a1.this$)) {}

          TopGroups::TopGroups(const JArray< ::org::apache::lucene::search::SortField > & a0, const JArray< ::org::apache::lucene::search::SortField > & a1, jint a2, jint a3, const JArray< ::org::apache::lucene::search::grouping::GroupDocs > & a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5e81883d, a0.this$, a1.this$, a2, a3, a4.this$, a5)) {}

          TopGroups TopGroups::merge(const JArray< TopGroups > & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jint a4, const ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups(env->callStaticObjectMethod(cls, mids$[mid_merge_abb30a8c], a0.this$, a1.this$, a2.this$, a3, a4, a5.this$));
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_groupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_groupSort]));
          }

          JArray< ::org::apache::lucene::search::grouping::GroupDocs > TopGroups::_get_groups() const
          {
            return JArray< ::org::apache::lucene::search::grouping::GroupDocs >(env->getObjectField(this$, fids$[fid_groups]));
          }

          jfloat TopGroups::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          ::java::lang::Integer TopGroups::_get_totalGroupCount() const
          {
            return ::java::lang::Integer(env->getObjectField(this$, fids$[fid_totalGroupCount]));
          }

          jint TopGroups::_get_totalGroupedHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalGroupedHitCount]);
          }

          jint TopGroups::_get_totalHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalHitCount]);
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_withinGroupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_withinGroupSort]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args);
          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data);

          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data);
          static PyGetSetDef t_TopGroups__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups, groupSort),
            DECLARE_GET_FIELD(t_TopGroups, groups),
            DECLARE_GET_FIELD(t_TopGroups, maxScore),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupCount),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupedHitCount),
            DECLARE_GET_FIELD(t_TopGroups, totalHitCount),
            DECLARE_GET_FIELD(t_TopGroups, withinGroupSort),
            DECLARE_GET_FIELD(t_TopGroups, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups__methods_[] = {
            DECLARE_METHOD(t_TopGroups, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups, t_TopGroups, ::java::lang::Object, TopGroups, t_TopGroups_init_, 0, 0, t_TopGroups__fields_, 0, 0);
          PyObject *t_TopGroups::wrap_Object(const TopGroups& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups), module, "TopGroups", 0);
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "ScoreMergeMode", make_descriptor(&PY_TYPE(TopGroups$ScoreMergeMode)));
          }

          void t_TopGroups::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "class_", make_descriptor(TopGroups::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "wrapfn_", make_descriptor(t_TopGroups::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups::initializeClass, 1)))
              return NULL;
            return t_TopGroups::wrap_Object(TopGroups(((t_TopGroups *) arg)->object.this$));
          }
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                TopGroups a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Integer a1((jobject) NULL);
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "KO", TopGroups::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &p0, t_TopGroups::parameters_, &a1))
                {
                  INT_CALL(object = TopGroups(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::SortField > a1((jobject) NULL);
                jint a2;
                jint a3;
                JArray< ::org::apache::lucene::search::grouping::GroupDocs > a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "[k[kII[KF", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::grouping::GroupDocs::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::grouping::t_GroupDocs::parameters_, &a5))
                {
                  INT_CALL(object = TopGroups(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args)
          {
            JArray< TopGroups > a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jint a4;
            ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode a5((jobject) NULL);
            PyTypeObject **p5;
            TopGroups result((jobject) NULL);

            if (!parseArgs(args, "[KkkIIK", TopGroups::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::initializeClass, &a0, &p0, t_TopGroups::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::grouping::t_TopGroups$ScoreMergeMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups::merge(a0, a1, a2, a3, a4, a5));
              return t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::grouping::GroupDocs > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groups());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::grouping::t_GroupDocs::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data)
          {
            ::java::lang::Integer value((jobject) NULL);
            OBJ_CALL(value = self->object._get_totalGroupCount());
            return ::java::lang::t_Integer::wrap_Object(value);
          }

          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalGroupedHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_withinGroupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *IntsRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *IntsRefFSTEnum$InputOutput::fids$ = NULL;
          bool IntsRefFSTEnum$InputOutput::live$ = false;

          jclass IntsRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum$InputOutput::IntsRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::IntsRef IntsRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void IntsRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object IntsRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void IntsRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_IntsRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput, ::java::lang::Object, IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput_init_, 0, 0, t_IntsRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_Object(const IntsRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum$InputOutput), module, "IntsRefFSTEnum$InputOutput", 0);
          }

          void t_IntsRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(IntsRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum$InputOutput::wrap_Object(IntsRefFSTEnum$InputOutput(((t_IntsRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            IntsRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = IntsRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$Pruner::class$ = NULL;
        jmethodID *SearcherLifetimeManager$Pruner::mids$ = NULL;
        bool SearcherLifetimeManager$Pruner::live$ = false;

        jclass SearcherLifetimeManager$Pruner::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$Pruner");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean SearcherLifetimeManager$Pruner::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$Pruner__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$Pruner, t_SearcherLifetimeManager$Pruner, ::java::lang::Object, SearcherLifetimeManager$Pruner, abstract_init, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$Pruner::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$Pruner), module, "SearcherLifetimeManager$Pruner", 0);
        }

        void t_SearcherLifetimeManager$Pruner::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$Pruner::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$Pruner::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$Pruner::wrap_Object(SearcherLifetimeManager$Pruner(((t_SearcherLifetimeManager$Pruner *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoEncoder::class$ = NULL;
          jmethodID *EliasFanoEncoder::mids$ = NULL;
          bool EliasFanoEncoder::live$ = false;
          jlong EliasFanoEncoder::DEFAULT_INDEX_INTERVAL = (jlong) 0;

          jclass EliasFanoEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7e12ca4] = env->getMethodID(cls, "<init>", "(JJ)V");
              mids$[mid_init$_16913989] = env->getMethodID(cls, "<init>", "(JJJ)V");
              mids$[mid_encodeNext_0ee6df2f] = env->getMethodID(cls, "encodeNext", "(J)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDecoder_38e2d30d] = env->getMethodID(cls, "getDecoder", "()Lorg/apache/lucene/util/packed/EliasFanoDecoder;");
              mids$[mid_getIndexBits_dab10e76] = env->getMethodID(cls, "getIndexBits", "()[J");
              mids$[mid_getLowerBits_dab10e76] = env->getMethodID(cls, "getLowerBits", "()[J");
              mids$[mid_getUpperBits_dab10e76] = env->getMethodID(cls, "getUpperBits", "()[J");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_INDEX_INTERVAL = env->getStaticLongField(cls, "DEFAULT_INDEX_INTERVAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7e12ca4, a0, a1)) {}

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_16913989, a0, a1, a2)) {}

          void EliasFanoEncoder::encodeNext(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeNext_0ee6df2f], a0);
          }

          jboolean EliasFanoEncoder::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::packed::EliasFanoDecoder EliasFanoEncoder::getDecoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoDecoder(env->callObjectMethod(this$, mids$[mid_getDecoder_38e2d30d]));
          }

          JArray< jlong > EliasFanoEncoder::getIndexBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getIndexBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getLowerBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getLowerBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getUpperBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getUpperBits_dab10e76]));
          }

          jint EliasFanoEncoder::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong EliasFanoEncoder::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoEncoder::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }

          ::java::lang::String EliasFanoEncoder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data);
          static PyGetSetDef t_EliasFanoEncoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoEncoder, decoder),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, indexBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, lowerBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, upperBits),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoEncoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, encodeNext, METH_O),
            DECLARE_METHOD(t_EliasFanoEncoder, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getDecoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getIndexBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getLowerBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getUpperBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoEncoder, t_EliasFanoEncoder, ::java::lang::Object, EliasFanoEncoder, t_EliasFanoEncoder_init_, 0, 0, t_EliasFanoEncoder__fields_, 0, 0);

          void t_EliasFanoEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoEncoder), module, "EliasFanoEncoder", 0);
          }

          void t_EliasFanoEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "class_", make_descriptor(EliasFanoEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoEncoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(EliasFanoEncoder::DEFAULT_INDEX_INTERVAL));
          }

          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoEncoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoEncoder::wrap_Object(EliasFanoEncoder(((t_EliasFanoEncoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jlong a0;
                jlong a1;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJ", &a0, &a1))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jlong a0;
                jlong a1;
                jlong a2;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJJ", &a0, &a1, &a2))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.encodeNext(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNext", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoEncoder::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(value);
          }

          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperBits());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogByteSizeMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogByteSizeMergePolicy::class$ = NULL;
        jmethodID *LogByteSizeMergePolicy::mids$ = NULL;
        bool LogByteSizeMergePolicy::live$ = false;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB = (jdouble) 0;

        jclass LogByteSizeMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogByteSizeMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMaxMergeMB_54c6a174] = env->getMethodID(cls, "getMaxMergeMB", "()D");
            mids$[mid_getMaxMergeMBForForcedMerge_54c6a174] = env->getMethodID(cls, "getMaxMergeMBForForcedMerge", "()D");
            mids$[mid_getMinMergeMB_54c6a174] = env->getMethodID(cls, "getMinMergeMB", "()D");
            mids$[mid_setMaxMergeMB_5d1c7645] = env->getMethodID(cls, "setMaxMergeMB", "(D)V");
            mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645] = env->getMethodID(cls, "setMaxMergeMBForForcedMerge", "(D)V");
            mids$[mid_setMinMergeMB_5d1c7645] = env->getMethodID(cls, "setMinMergeMB", "(D)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB");
            DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE");
            DEFAULT_MIN_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MIN_MERGE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogByteSizeMergePolicy::LogByteSizeMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble LogByteSizeMergePolicy::getMaxMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMB_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMaxMergeMBForForcedMerge() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMBForForcedMerge_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMinMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinMergeMB_54c6a174]);
        }

        void LogByteSizeMergePolicy::setMaxMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMB_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMaxMergeMBForForcedMerge(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMinMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeMB_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogByteSizeMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMB),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMBForForcedMerge),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, minMergeMB),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogByteSizeMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogByteSizeMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMBForForcedMerge, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMinMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMB, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMBForForcedMerge, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMinMergeMB, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogByteSizeMergePolicy, t_LogByteSizeMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogByteSizeMergePolicy, t_LogByteSizeMergePolicy_init_, 0, 0, t_LogByteSizeMergePolicy__fields_, 0, 0);

        void t_LogByteSizeMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogByteSizeMergePolicy), module, "LogByteSizeMergePolicy", 0);
        }

        void t_LogByteSizeMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "class_", make_descriptor(LogByteSizeMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogByteSizeMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogByteSizeMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB));
        }

        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogByteSizeMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogByteSizeMergePolicy::wrap_Object(LogByteSizeMergePolicy(((t_LogByteSizeMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogByteSizeMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogByteSizeMergePolicy object((jobject) NULL);

          INT_CALL(object = LogByteSizeMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMBForForcedMerge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMBForForcedMerge", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMinMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMB", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMBForForcedMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMBForForcedMerge", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMinMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeMB", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Decoder::class$ = NULL;
          jmethodID *PackedInts$Decoder::mids$ = NULL;
          bool PackedInts$Decoder::live$ = false;

          jclass PackedInts$Decoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Decoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_decode_d1f472ca] = env->getMethodID(cls, "decode", "([BI[JII)V");
              mids$[mid_decode_6b7ac502] = env->getMethodID(cls, "decode", "([JI[JII)V");
              mids$[mid_decode_9d91d181] = env->getMethodID(cls, "decode", "([BI[III)V");
              mids$[mid_decode_ff13be19] = env->getMethodID(cls, "decode", "([JI[III)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Decoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_d1f472ca], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_9d91d181], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_ff13be19], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Decoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args);
          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self);

          static PyMethodDef t_PackedInts$Decoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Decoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, decode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Decoder, t_PackedInts$Decoder, ::java::lang::Object, PackedInts$Decoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Decoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Decoder), module, "PackedInts$Decoder", 0);
          }

          void t_PackedInts$Decoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "class_", make_descriptor(PackedInts$Decoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Decoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Decoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Decoder::wrap_Object(PackedInts$Decoder(((t_PackedInts$Decoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Decoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$TermVector::class$ = NULL;
        jmethodID *Field$TermVector::mids$ = NULL;
        bool Field$TermVector::live$ = false;
        Field$TermVector *Field$TermVector::NO = NULL;
        Field$TermVector *Field$TermVector::WITH_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::YES = NULL;

        jclass Field$TermVector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$TermVector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isStored_54c6a16a] = env->getMethodID(cls, "isStored", "()Z");
            mids$[mid_toTermVector_e3e77410] = env->getStaticMethodID(cls, "toTermVector", "(ZZZ)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_valueOf_dd40625d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_values_3d8f8203] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_withOffsets_54c6a16a] = env->getMethodID(cls, "withOffsets", "()Z");
            mids$[mid_withPositions_54c6a16a] = env->getMethodID(cls, "withPositions", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$TermVector(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            YES = new Field$TermVector(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$TermVector;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$TermVector::isStored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStored_54c6a16a]);
        }

        Field$TermVector Field$TermVector::toTermVector(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_toTermVector_e3e77410], a0, a1, a2));
        }

        Field$TermVector Field$TermVector::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dd40625d], a0.this$));
        }

        JArray< Field$TermVector > Field$TermVector::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$TermVector >(env->callStaticObjectMethod(cls, mids$[mid_values_3d8f8203]));
        }

        jboolean Field$TermVector::withOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withOffsets_54c6a16a]);
        }

        jboolean Field$TermVector::withPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withPositions_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args);
        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_values(PyTypeObject *type);
        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data);
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data);
        static PyGetSetDef t_Field$TermVector__fields_[] = {
          DECLARE_GET_FIELD(t_Field$TermVector, stored),
          DECLARE_GET_FIELD(t_Field$TermVector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$TermVector__methods_[] = {
          DECLARE_METHOD(t_Field$TermVector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$TermVector, isStored, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, toTermVector, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, values, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, withOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, withPositions, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$TermVector, t_Field$TermVector, ::java::lang::Enum, Field$TermVector, abstract_init, 0, 0, t_Field$TermVector__fields_, 0, 0);
        PyObject *t_Field$TermVector::wrap_Object(const Field$TermVector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$TermVector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$TermVector::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$TermVector), module, "Field$TermVector", 0);
        }

        void t_Field$TermVector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "class_", make_descriptor(Field$TermVector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "wrapfn_", make_descriptor(t_Field$TermVector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$TermVector::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "NO", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::NO)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "YES", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::YES)));
        }

        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$TermVector::initializeClass, 1)))
            return NULL;
          return t_Field$TermVector::wrap_Object(Field$TermVector(((t_Field$TermVector *) arg)->object.this$));
        }
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$TermVector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args)
        {
          jboolean a0;
          jboolean a1;
          jboolean a2;
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::toTermVector(a0, a1, a2));
            return t_Field$TermVector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toTermVector", args);
          return NULL;
        }

        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::valueOf(a0));
            return t_Field$TermVector::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$TermVector_values(PyTypeObject *type)
        {
          JArray< Field$TermVector > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::values());
          return JArray<jobject>(result.this$).wrap(t_Field$TermVector::wrap_jobject);
        }

        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withPositions());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStored());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/eu/BasqueAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {

          ::java::lang::Class *BasqueAnalyzer::class$ = NULL;
          jmethodID *BasqueAnalyzer::mids$ = NULL;
          bool BasqueAnalyzer::live$ = false;
          ::java::lang::String *BasqueAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BasqueAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/eu/BasqueAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BasqueAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {
          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data);
          static PyGetSetDef t_BasqueAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BasqueAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasqueAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BasqueAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasqueAnalyzer, t_BasqueAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BasqueAnalyzer, t_BasqueAnalyzer_init_, 0, 0, t_BasqueAnalyzer__fields_, 0, 0);

          void t_BasqueAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BasqueAnalyzer), module, "BasqueAnalyzer", 0);
          }

          void t_BasqueAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "class_", make_descriptor(BasqueAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BasqueAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BasqueAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BasqueAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasqueAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BasqueAnalyzer::wrap_Object(BasqueAnalyzer(((t_BasqueAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasqueAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::eu::BasqueAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballFilter.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballFilter::class$ = NULL;
          jmethodID *SnowballFilter::mids$ = NULL;
          bool SnowballFilter::live$ = false;

          jclass SnowballFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7671c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/tartarus/snowball/SnowballProgram;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::tartarus::snowball::SnowballProgram & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a7671c33, a0.this$, a1.this$)) {}

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          jboolean SnowballFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args);

          static PyMethodDef t_SnowballFilter__methods_[] = {
            DECLARE_METHOD(t_SnowballFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballFilter, t_SnowballFilter, ::org::apache::lucene::analysis::TokenFilter, SnowballFilter, t_SnowballFilter_init_, 0, 0, 0, 0, 0);

          void t_SnowballFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballFilter), module, "SnowballFilter", 0);
          }

          void t_SnowballFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "class_", make_descriptor(SnowballFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "wrapfn_", make_descriptor(t_SnowballFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballFilter::initializeClass, 1)))
              return NULL;
            return t_SnowballFilter::wrap_Object(SnowballFilter(((t_SnowballFilter *) arg)->object.this$));
          }
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::tartarus::snowball::SnowballProgram a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SnowballFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonIntParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonIntParser::class$ = NULL;
        jmethodID *PythonIntParser::mids$ = NULL;
        bool PythonIntParser::live$ = false;

        jclass PythonIntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonIntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIntParser::PythonIntParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIntParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIntParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIntParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self);
        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args);
        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data);
        static PyGetSetDef t_PythonIntParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIntParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIntParser__methods_[] = {
          DECLARE_METHOD(t_PythonIntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIntParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIntParser, t_PythonIntParser, ::java::lang::Object, PythonIntParser, t_PythonIntParser_init_, 0, 0, t_PythonIntParser__fields_, 0, 0);

        void t_PythonIntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIntParser), module, "PythonIntParser", 1);
        }

        void t_PythonIntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "class_", make_descriptor(PythonIntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "wrapfn_", make_descriptor(t_PythonIntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIntParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I", (void *) t_PythonIntParser_parseInt0 },
            { "pythonDecRef", "()V", (void *) t_PythonIntParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonIntParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIntParser::initializeClass, 1)))
            return NULL;
          return t_PythonIntParser::wrap_Object(PythonIntParser(((t_PythonIntParser *) arg)->object.this$));
        }
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds)
        {
          PythonIntParser object((jobject) NULL);

          INT_CALL(object = PythonIntParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseInt", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("parseInt", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizerFactory::class$ = NULL;
          jmethodID *ClassicTokenizerFactory::mids$ = NULL;
          bool ClassicTokenizerFactory::live$ = false;

          jclass ClassicTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee8ef5f7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/ClassicTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizerFactory::ClassicTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::ClassicTokenizer ClassicTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::ClassicTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee8ef5f7], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ClassicTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizerFactory, t_ClassicTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ClassicTokenizerFactory, t_ClassicTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizerFactory), module, "ClassicTokenizerFactory", 0);
          }

          void t_ClassicTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "class_", make_descriptor(ClassicTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizerFactory::wrap_Object(ClassicTokenizerFactory(((t_ClassicTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::ClassicTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_ClassicTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttributeImpl::class$ = NULL;
          jmethodID *PayloadAttributeImpl::mids$ = NULL;
          bool PayloadAttributeImpl::live$ = false;

          jclass PayloadAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7bc03dc4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_fdeb4a36] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadAttributeImpl::PayloadAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PayloadAttributeImpl::PayloadAttributeImpl(const ::org::apache::lucene::util::BytesRef & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_7bc03dc4, a0.this$)) {}

          void PayloadAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PayloadAttributeImpl PayloadAttributeImpl::clone() const
          {
            return PayloadAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_fdeb4a36]));
          }

          void PayloadAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PayloadAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef PayloadAttributeImpl::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          jint PayloadAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PayloadAttributeImpl::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self);
          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data);
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttributeImpl, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PayloadAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttributeImpl, t_PayloadAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PayloadAttributeImpl, t_PayloadAttributeImpl_init_, 0, 0, t_PayloadAttributeImpl__fields_, 0, 0);

          void t_PayloadAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttributeImpl), module, "PayloadAttributeImpl", 0);
          }

          void t_PayloadAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "class_", make_descriptor(PayloadAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PayloadAttributeImpl::wrap_Object(PayloadAttributeImpl(((t_PayloadAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PayloadAttributeImpl object((jobject) NULL);

                INT_CALL(object = PayloadAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                PayloadAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  INT_CALL(object = PayloadAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args)
          {
            PayloadAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilterFactory::class$ = NULL;
          jmethodID *SwedishLightStemFilterFactory::mids$ = NULL;
          bool SwedishLightStemFilterFactory::live$ = false;

          jclass SwedishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilterFactory::SwedishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SwedishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilterFactory), module, "SwedishLightStemFilterFactory", 0);
          }

          void t_SwedishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SwedishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilterFactory::wrap_Object(SwedishLightStemFilterFactory(((t_SwedishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SwedishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SwedishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SolrSynonymParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SolrSynonymParser::class$ = NULL;
          jmethodID *SolrSynonymParser::mids$ = NULL;
          bool SolrSynonymParser::live$ = false;

          jclass SolrSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SolrSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SolrSynonymParser::SolrSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void SolrSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args);

          static PyMethodDef t_SolrSynonymParser__methods_[] = {
            DECLARE_METHOD(t_SolrSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SolrSynonymParser, t_SolrSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, SolrSynonymParser, t_SolrSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_SolrSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SolrSynonymParser), module, "SolrSynonymParser", 0);
          }

          void t_SolrSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "class_", make_descriptor(SolrSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_SolrSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SolrSynonymParser::initializeClass, 1)))
              return NULL;
            return t_SolrSynonymParser::wrap_Object(SolrSynonymParser(((t_SolrSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SolrSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            SolrSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SolrSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SolrSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilesystemResourceLoader.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilesystemResourceLoader::class$ = NULL;
          jmethodID *FilesystemResourceLoader::mids$ = NULL;
          bool FilesystemResourceLoader::live$ = false;

          jclass FilesystemResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilesystemResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_init$_002bf8fe] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilesystemResourceLoader::FilesystemResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0, const ::org::apache::lucene::analysis::util::ResourceLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_002bf8fe, a0.this$, a1.this$)) {}

          ::java::lang::Class FilesystemResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object FilesystemResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream FilesystemResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg);

          static PyMethodDef t_FilesystemResourceLoader__methods_[] = {
            DECLARE_METHOD(t_FilesystemResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilesystemResourceLoader, t_FilesystemResourceLoader, ::java::lang::Object, FilesystemResourceLoader, t_FilesystemResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_FilesystemResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(FilesystemResourceLoader), module, "FilesystemResourceLoader", 0);
          }

          void t_FilesystemResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "class_", make_descriptor(FilesystemResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_FilesystemResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilesystemResourceLoader::initializeClass, 1)))
              return NULL;
            return t_FilesystemResourceLoader::wrap_Object(FilesystemResourceLoader(((t_FilesystemResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilesystemResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FilesystemResourceLoader object((jobject) NULL);

                INT_CALL(object = FilesystemResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::File a0((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::ResourceLoader a1((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexOutput.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexOutput::class$ = NULL;
        jmethodID *PythonIndexOutput::mids$ = NULL;
        bool PythonIndexOutput::live$ = false;

        jclass PythonIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_49b4f12b] = env->getMethodID(cls, "writeBytes", "([B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexOutput::PythonIndexOutput() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexOutput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        void PythonIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong PythonIndexOutput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexOutput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self);
        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args);
        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0);
        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data);
        static PyGetSetDef t_PythonIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexOutput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexOutput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexOutput, t_PythonIndexOutput, ::org::apache::lucene::store::IndexOutput, PythonIndexOutput, t_PythonIndexOutput_init_, 0, 0, t_PythonIndexOutput__fields_, 0, 0);

        void t_PythonIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexOutput), module, "PythonIndexOutput", 1);
        }

        void t_PythonIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "class_", make_descriptor(PythonIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexOutput::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonIndexOutput_close0 },
            { "getChecksum", "()J", (void *) t_PythonIndexOutput_getChecksum1 },
            { "getFilePointer", "()J", (void *) t_PythonIndexOutput_getFilePointer2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexOutput_pythonDecRef3 },
            { "writeByte", "(B)V", (void *) t_PythonIndexOutput_writeByte4 },
            { "writeBytes", "([B)V", (void *) t_PythonIndexOutput_writeBytes5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexOutput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexOutput::wrap_Object(PythonIndexOutput(((t_PythonIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexOutput object((jobject) NULL);

          INT_CALL(object = PythonIndexOutput());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getChecksum", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getChecksum", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getFilePointer", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getFilePointer", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = PyInt_FromLong(a0);
          PyObject *result = PyObject_CallMethod(obj, "writeByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = JArray<jbyte>(a0).wrap();
          PyObject *result = PyObject_CallMethod(obj, "writeBytes", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttribute::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttribute::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttribute::live$ = false;

        jclass MaxNonCompetitiveBoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttribute::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttribute::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttribute::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttribute::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttribute__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttribute, t_MaxNonCompetitiveBoostAttribute, ::org::apache::lucene::util::Attribute, MaxNonCompetitiveBoostAttribute, abstract_init, 0, 0, t_MaxNonCompetitiveBoostAttribute__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttribute), module, "MaxNonCompetitiveBoostAttribute", 0);
        }

        void t_MaxNonCompetitiveBoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttribute::wrap_Object(MaxNonCompetitiveBoostAttribute(((t_MaxNonCompetitiveBoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMOutputStream::class$ = NULL;
        jmethodID *RAMOutputStream::mids$ = NULL;
        bool RAMOutputStream::live$ = false;

        jclass RAMOutputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMOutputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca7ad9be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/RAMFile;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeTo_27875f57] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_writeTo_b8354c43] = env->getMethodID(cls, "writeTo", "([BI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMOutputStream::RAMOutputStream() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMOutputStream::RAMOutputStream(const ::org::apache::lucene::store::RAMFile & a0, jboolean a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_ca7ad9be, a0.this$, a1)) {}

        void RAMOutputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void RAMOutputStream::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong RAMOutputStream::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong RAMOutputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMOutputStream::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMOutputStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void RAMOutputStream::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void RAMOutputStream::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMOutputStream::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_27875f57], a0.this$);
        }

        void RAMOutputStream::writeTo(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_b8354c43], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data);
        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data);
        static PyGetSetDef t_RAMOutputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMOutputStream, checksum),
          DECLARE_GET_FIELD(t_RAMOutputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMOutputStream__methods_[] = {
          DECLARE_METHOD(t_RAMOutputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, flush, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, reset, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeTo, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMOutputStream, t_RAMOutputStream, ::org::apache::lucene::store::IndexOutput, RAMOutputStream, t_RAMOutputStream_init_, 0, 0, t_RAMOutputStream__fields_, 0, 0);

        void t_RAMOutputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMOutputStream), module, "RAMOutputStream", 0);
        }

        void t_RAMOutputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "class_", make_descriptor(RAMOutputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMOutputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMOutputStream::initializeClass, 1)))
            return NULL;
          return t_RAMOutputStream::wrap_Object(RAMOutputStream(((t_RAMOutputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMOutputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMOutputStream object((jobject) NULL);

              INT_CALL(object = RAMOutputStream());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::RAMFile a0((jobject) NULL);
              jboolean a1;
              RAMOutputStream object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMOutputStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(self->object.writeTo(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeTo(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeTo", args);
          return NULL;
        }

        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Tokenizer::class$ = NULL;
        jmethodID *Tokenizer::mids$ = NULL;
        bool Tokenizer::live$ = false;

        jclass Tokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Tokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Tokenizer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Tokenizer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void Tokenizer::setReader(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReader_cf2e3c10], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg);
        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Tokenizer__fields_[] = {
          DECLARE_SET_FIELD(t_Tokenizer, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Tokenizer__methods_[] = {
          DECLARE_METHOD(t_Tokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, close, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, reset, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, setReader, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Tokenizer, t_Tokenizer, ::org::apache::lucene::analysis::TokenStream, Tokenizer, abstract_init, 0, 0, t_Tokenizer__fields_, 0, 0);

        void t_Tokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(Tokenizer), module, "Tokenizer", 0);
        }

        void t_Tokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "class_", make_descriptor(Tokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "wrapfn_", make_descriptor(t_Tokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tokenizer::initializeClass, 1)))
            return NULL;
          return t_Tokenizer::wrap_Object(Tokenizer(((t_Tokenizer *) arg)->object.this$));
        }
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReader", arg);
          return NULL;
        }

        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data)
        {
          {
            ::java::io::Reader value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &value))
            {
              INT_CALL(self->object.setReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreCachingWrappingScorer::class$ = NULL;
        jmethodID *ScoreCachingWrappingScorer::mids$ = NULL;
        bool ScoreCachingWrappingScorer::live$ = false;

        jclass ScoreCachingWrappingScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreCachingWrappingScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreCachingWrappingScorer::ScoreCachingWrappingScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::FilterScorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        ::java::util::Collection ScoreCachingWrappingScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jfloat ScoreCachingWrappingScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data);
        static PyGetSetDef t_ScoreCachingWrappingScorer__fields_[] = {
          DECLARE_GET_FIELD(t_ScoreCachingWrappingScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreCachingWrappingScorer__methods_[] = {
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer, ::org::apache::lucene::search::FilterScorer, ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer_init_, 0, 0, t_ScoreCachingWrappingScorer__fields_, 0, 0);

        void t_ScoreCachingWrappingScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreCachingWrappingScorer), module, "ScoreCachingWrappingScorer", 0);
        }

        void t_ScoreCachingWrappingScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "class_", make_descriptor(ScoreCachingWrappingScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "wrapfn_", make_descriptor(t_ScoreCachingWrappingScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 1)))
            return NULL;
          return t_ScoreCachingWrappingScorer::wrap_Object(ScoreCachingWrappingScorer(((t_ScoreCachingWrappingScorer *) arg)->object.this$));
        }
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ScoreCachingWrappingScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = ScoreCachingWrappingScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilter::class$ = NULL;
          jmethodID *ASCIIFoldingFilter::mids$ = NULL;
          bool ASCIIFoldingFilter::live$ = false;

          jclass ASCIIFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_foldToASCII_ec6430f4] = env->getMethodID(cls, "foldToASCII", "([CI)V");
              mids$[mid_foldToASCII_8c28d06f] = env->getStaticMethodID(cls, "foldToASCII", "([CI[CII)I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isPreserveOriginal_54c6a16a] = env->getMethodID(cls, "isPreserveOriginal", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          void ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_foldToASCII_ec6430f4], a0.this$, a1);
          }

          jint ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_foldToASCII_8c28d06f], a0.this$, a1, a2.this$, a3, a4);
          }

          jboolean ASCIIFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean ASCIIFoldingFilter::isPreserveOriginal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPreserveOriginal_54c6a16a]);
          }

          void ASCIIFoldingFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self);
          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilter__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilter, preserveOriginal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, isPreserveOriginal, METH_NOARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilter, t_ASCIIFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ASCIIFoldingFilter, t_ASCIIFoldingFilter_init_, 0, 0, t_ASCIIFoldingFilter__fields_, 0, 0);

          void t_ASCIIFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilter), module, "ASCIIFoldingFilter", 0);
          }

          void t_ASCIIFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "class_", make_descriptor(ASCIIFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilter::wrap_Object(ASCIIFoldingFilter(((t_ASCIIFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.foldToASCII(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "foldToASCII", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter::foldToASCII(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "foldToASCII_", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilterFactory::class$ = NULL;
          jmethodID *CommonGramsQueryFilterFactory::mids$ = NULL;
          bool CommonGramsQueryFilterFactory::live$ = false;

          jclass CommonGramsQueryFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilterFactory::CommonGramsQueryFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsQueryFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args);

          static PyMethodDef t_CommonGramsQueryFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory, ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory, CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsQueryFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilterFactory), module, "CommonGramsQueryFilterFactory", 0);
          }

          void t_CommonGramsQueryFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsQueryFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilterFactory::wrap_Object(CommonGramsQueryFilterFactory(((t_CommonGramsQueryFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsQueryFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsQueryFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilter::class$ = NULL;
          jmethodID *HungarianLightStemFilter::mids$ = NULL;
          bool HungarianLightStemFilter::live$ = false;

          jclass HungarianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilter::HungarianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HungarianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilter, t_HungarianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, HungarianLightStemFilter, t_HungarianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilter), module, "HungarianLightStemFilter", 0);
          }

          void t_HungarianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "class_", make_descriptor(HungarianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilter::wrap_Object(HungarianLightStemFilter(((t_HungarianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HungarianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HungarianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizerFactory::class$ = NULL;
          jmethodID *PatternTokenizerFactory::mids$ = NULL;
          bool PatternTokenizerFactory::live$ = false;
          ::java::lang::String *PatternTokenizerFactory::GROUP = NULL;
          ::java::lang::String *PatternTokenizerFactory::PATTERN = NULL;

          jclass PatternTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_79576cd1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/pattern/PatternTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GROUP = new ::java::lang::String(env->getStaticObjectField(cls, "GROUP", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizerFactory::PatternTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternTokenizer PatternTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternTokenizer(env->callObjectMethod(this$, mids$[mid_create_79576cd1], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PatternTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizerFactory, t_PatternTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PatternTokenizerFactory, t_PatternTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizerFactory), module, "PatternTokenizerFactory", 0);
          }

          void t_PatternTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "class_", make_descriptor(PatternTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternTokenizerFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "GROUP", make_descriptor(j2p(*PatternTokenizerFactory::GROUP)));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "PATTERN", make_descriptor(j2p(*PatternTokenizerFactory::PATTERN)));
          }

          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizerFactory::wrap_Object(PatternTokenizerFactory(((t_PatternTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::pattern::t_PatternTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene46FieldInfosFormat::mids$ = NULL;
          bool Lucene46FieldInfosFormat::live$ = false;

          jclass Lucene46FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46FieldInfosFormat::Lucene46FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene46FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene46FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene46FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat_init_, 0, 0, t_Lucene46FieldInfosFormat__fields_, 0, 0);

          void t_Lucene46FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46FieldInfosFormat), module, "Lucene46FieldInfosFormat", 0);
          }

          void t_Lucene46FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene46FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46FieldInfosFormat::wrap_Object(Lucene46FieldInfosFormat(((t_Lucene46FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene46FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/String.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities::class$ = NULL;
            jmethodID *RegexCapabilities::mids$ = NULL;
            bool RegexCapabilities::live$ = false;

            jclass RegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher RegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg);

            static PyMethodDef t_RegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, compile, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities, t_RegexCapabilities, ::java::lang::Object, RegexCapabilities, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities), module, "RegexCapabilities", 0);
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "RegexMatcher", make_descriptor(&PY_TYPE(RegexCapabilities$RegexMatcher)));
            }

            void t_RegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "class_", make_descriptor(RegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities::wrap_Object(RegexCapabilities(((t_RegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LiteralValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LiteralValueSource::class$ = NULL;
            jmethodID *LiteralValueSource::mids$ = NULL;
            bool LiteralValueSource::live$ = false;
            jint LiteralValueSource::hash = (jint) 0;

            jclass LiteralValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LiteralValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValue_14c7b5c5] = env->getMethodID(cls, "getValue", "()Ljava/lang/String;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                hash = env->getStaticIntField(cls, "hash");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LiteralValueSource::LiteralValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String LiteralValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LiteralValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String LiteralValueSource::getValue() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValue_14c7b5c5]));
            }

            ::org::apache::lucene::queries::function::FunctionValues LiteralValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LiteralValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self);
            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data);
            static PyGetSetDef t_LiteralValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_LiteralValueSource, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LiteralValueSource__methods_[] = {
              DECLARE_METHOD(t_LiteralValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValue, METH_NOARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LiteralValueSource, t_LiteralValueSource, ::org::apache::lucene::queries::function::ValueSource, LiteralValueSource, t_LiteralValueSource_init_, 0, 0, t_LiteralValueSource__fields_, 0, 0);

            void t_LiteralValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LiteralValueSource), module, "LiteralValueSource", 0);
            }

            void t_LiteralValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "class_", make_descriptor(LiteralValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "wrapfn_", make_descriptor(t_LiteralValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LiteralValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "hash", make_descriptor(LiteralValueSource::hash));
            }

            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LiteralValueSource::initializeClass, 1)))
                return NULL;
              return t_LiteralValueSource::wrap_Object(LiteralValueSource(((t_LiteralValueSource *) arg)->object.this$));
            }
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LiteralValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              LiteralValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LiteralValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return j2p(result);
            }

            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/AssociationFacetField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *AssociationFacetField::class$ = NULL;
          jmethodID *AssociationFacetField::mids$ = NULL;
          jfieldID *AssociationFacetField::fids$ = NULL;
          bool AssociationFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *AssociationFacetField::TYPE = NULL;

          jclass AssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/AssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d63aecac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_assoc] = env->getFieldID(cls, "assoc", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AssociationFacetField::AssociationFacetField(const ::org::apache::lucene::util::BytesRef & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d63aecac, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String AssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef AssociationFacetField::_get_assoc() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_assoc]));
          }

          ::java::lang::String AssociationFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          JArray< ::java::lang::String > AssociationFacetField::_get_path() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args);
          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data);

          static PyGetSetDef t_AssociationFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_AssociationFacetField, assoc),
            DECLARE_GET_FIELD(t_AssociationFacetField, dim),
            DECLARE_GET_FIELD(t_AssociationFacetField, path),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_AssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AssociationFacetField, t_AssociationFacetField, ::org::apache::lucene::document::Field, AssociationFacetField, t_AssociationFacetField_init_, 0, 0, t_AssociationFacetField__fields_, 0, 0);

          void t_AssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(AssociationFacetField), module, "AssociationFacetField", 0);
          }

          void t_AssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "class_", make_descriptor(AssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_AssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AssociationFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*AssociationFacetField::TYPE)));
          }

          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_AssociationFacetField::wrap_Object(AssociationFacetField(((t_AssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            AssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "ks[s", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = AssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AssociationFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_assoc());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_path());
            return JArray<jstring>(value.this$).wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilterFactory::class$ = NULL;
          jmethodID *KeywordRepeatFilterFactory::mids$ = NULL;
          bool KeywordRepeatFilterFactory::live$ = false;

          jclass KeywordRepeatFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilterFactory::KeywordRepeatFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordRepeatFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilterFactory), module, "KeywordRepeatFilterFactory", 0);
          }

          void t_KeywordRepeatFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "class_", make_descriptor(KeywordRepeatFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilterFactory::wrap_Object(KeywordRepeatFilterFactory(((t_KeywordRepeatFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordRepeatFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordRepeatFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryDocValuesField::class$ = NULL;
        jmethodID *BinaryDocValuesField::mids$ = NULL;
        bool BinaryDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *BinaryDocValuesField::TYPE = NULL;

        jclass BinaryDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BinaryDocValuesField::BinaryDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BinaryDocValuesField__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValuesField, t_BinaryDocValuesField, ::org::apache::lucene::document::Field, BinaryDocValuesField, t_BinaryDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_BinaryDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValuesField), module, "BinaryDocValuesField", 0);
        }

        void t_BinaryDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "class_", make_descriptor(BinaryDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BinaryDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*BinaryDocValuesField::TYPE)));
        }

        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValuesField::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValuesField::wrap_Object(BinaryDocValuesField(((t_BinaryDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          BinaryDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BinaryDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *IOException::class$ = NULL;
    jmethodID *IOException::mids$ = NULL;
    bool IOException::live$ = false;

    jclass IOException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/IOException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IOException::IOException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IOException::IOException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IOException__methods_[] = {
      DECLARE_METHOD(t_IOException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IOException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IOException, t_IOException, ::java::lang::Exception, IOException, t_IOException_init_, 0, 0, 0, 0, 0);

    void t_IOException::install(PyObject *module)
    {
      installType(&PY_TYPE(IOException), module, "IOException", 0);
    }

    void t_IOException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "class_", make_descriptor(IOException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "wrapfn_", make_descriptor(t_IOException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IOException::initializeClass, 1)))
        return NULL;
      return t_IOException::wrap_Object(IOException(((t_IOException *) arg)->object.this$));
    }
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IOException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IOException object((jobject) NULL);

          INT_CALL(object = IOException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IOException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PerFieldSimilarityWrapper::class$ = NULL;
          jmethodID *PerFieldSimilarityWrapper::mids$ = NULL;
          bool PerFieldSimilarityWrapper::live$ = false;

          jclass PerFieldSimilarityWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/PerFieldSimilarityWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_get_951784a9] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldSimilarityWrapper::PerFieldSimilarityWrapper() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong PerFieldSimilarityWrapper::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight PerFieldSimilarityWrapper::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity PerFieldSimilarityWrapper::get(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_get_951784a9], a0.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer PerFieldSimilarityWrapper::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldSimilarityWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, get, METH_O),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper, ::org::apache::lucene::search::similarities::Similarity, PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldSimilarityWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldSimilarityWrapper), module, "PerFieldSimilarityWrapper", 0);
          }

          void t_PerFieldSimilarityWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "class_", make_descriptor(PerFieldSimilarityWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldSimilarityWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldSimilarityWrapper::wrap_Object(PerFieldSimilarityWrapper(((t_PerFieldSimilarityWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds)
          {
            PerFieldSimilarityWrapper object((jobject) NULL);

            INT_CALL(object = PerFieldSimilarityWrapper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
          }

          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts::class$ = NULL;
          jmethodID *PackedInts::mids$ = NULL;
          bool PackedInts::live$ = false;
          ::java::lang::String *PackedInts::CODEC_NAME = NULL;
          jfloat PackedInts::COMPACT = (jfloat) 0;
          jfloat PackedInts::DEFAULT = (jfloat) 0;
          jint PackedInts::DEFAULT_BUFFER_SIZE = (jint) 0;
          jfloat PackedInts::FAST = (jfloat) 0;
          jfloat PackedInts::FASTEST = (jfloat) 0;
          jint PackedInts::VERSION_BYTE_ALIGNED = (jint) 0;
          jint PackedInts::VERSION_CURRENT = (jint) 0;
          jint PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG = (jint) 0;
          jint PackedInts::VERSION_START = (jint) 0;

          jclass PackedInts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_checkVersion_39c7bd3c] = env->getStaticMethodID(cls, "checkVersion", "(I)V");
              mids$[mid_copy_5dfb99d8] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/packed/PackedInts$Reader;ILorg/apache/lucene/util/packed/PackedInts$Mutable;III)V");
              mids$[mid_fastestFormatAndBits_a44dbe2e] = env->getStaticMethodID(cls, "fastestFormatAndBits", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$FormatAndBits;");
              mids$[mid_getDecoder_a1fc44e7] = env->getStaticMethodID(cls, "getDecoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Decoder;");
              mids$[mid_getDirectReader_dd96fa63] = env->getStaticMethodID(cls, "getDirectReader", "(Lorg/apache/lucene/store/IndexInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_6d5658ed] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_185fc68d] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getEncoder_82bbe26f] = env->getStaticMethodID(cls, "getEncoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Encoder;");
              mids$[mid_getMutable_5fda8e82] = env->getStaticMethodID(cls, "getMutable", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getMutable_2ab94ab5] = env->getStaticMethodID(cls, "getMutable", "(IILorg/apache/lucene/util/packed/PackedInts$Format;)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getReader_5e1a18f4] = env->getStaticMethodID(cls, "getReader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderIterator_edd93a0e] = env->getStaticMethodID(cls, "getReaderIterator", "(Lorg/apache/lucene/store/DataInput;I)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderIteratorNoHeader_25f812d4] = env->getStaticMethodID(cls, "getReaderIteratorNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;IIII)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderNoHeader_5f216dfc] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderNoHeader_6f168df2] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getWriter_7e94d221] = env->getStaticMethodID(cls, "getWriter", "(Lorg/apache/lucene/store/DataOutput;IIF)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_getWriterNoHeader_ec8145b0] = env->getStaticMethodID(cls, "getWriterNoHeader", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_maxValue_39c7bd20] = env->getStaticMethodID(cls, "maxValue", "(I)J");
              mids$[mid_readHeader_1e64173a] = env->getStaticMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Header;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
              COMPACT = env->getStaticFloatField(cls, "COMPACT");
              DEFAULT = env->getStaticFloatField(cls, "DEFAULT");
              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              FAST = env->getStaticFloatField(cls, "FAST");
              FASTEST = env->getStaticFloatField(cls, "FASTEST");
              VERSION_BYTE_ALIGNED = env->getStaticIntField(cls, "VERSION_BYTE_ALIGNED");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_MONOTONIC_WITHOUT_ZIGZAG = env->getStaticIntField(cls, "VERSION_MONOTONIC_WITHOUT_ZIGZAG");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts::PackedInts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void PackedInts::checkVersion(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_checkVersion_39c7bd3c], a0);
          }

          void PackedInts::copy(const ::org::apache::lucene::util::packed::PackedInts$Reader & a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Mutable & a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_copy_5dfb99d8], a0.this$, a1, a2.this$, a3, a4, a5);
          }

          ::org::apache::lucene::util::packed::PackedInts$FormatAndBits PackedInts::fastestFormatAndBits(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$FormatAndBits(env->callStaticObjectMethod(cls, mids$[mid_fastestFormatAndBits_a44dbe2e], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Decoder PackedInts::getDecoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Decoder(env->callStaticObjectMethod(cls, mids$[mid_getDecoder_a1fc44e7], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReader(const ::org::apache::lucene::store::IndexInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReader_dd96fa63], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_6d5658ed], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_185fc68d], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Encoder PackedInts::getEncoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Encoder(env->callStaticObjectMethod(cls, mids$[mid_getEncoder_82bbe26f], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_5fda8e82], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Format & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_2ab94ab5], a0, a1, a2.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReader_5e1a18f4], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIterator_edd93a0e], a0.this$, a1));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIteratorNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIteratorNoHeader_25f812d4], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_5f216dfc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_6f168df2], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1, jint a2, jfloat a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriter_7e94d221], a0.this$, a1, a2, a3));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriterNoHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriterNoHeader_ec8145b0], a0.this$, a1.this$, a2, a3, a4));
          }

          jlong PackedInts::maxValue(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_maxValue_39c7bd20], a0);
          }

          ::org::apache::lucene::util::packed::PackedInts$Header PackedInts::readHeader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Header(env->callStaticObjectMethod(cls, mids$[mid_readHeader_1e64173a], a0.this$));
          }

          jint PackedInts::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_PackedInts__methods_[] = {
            DECLARE_METHOD(t_PackedInts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, checkVersion, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, fastestFormatAndBits, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDecoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getEncoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getMutable, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIterator, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIteratorNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriter, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriterNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, maxValue, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, readHeader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts, t_PackedInts, ::java::lang::Object, PackedInts, t_PackedInts_init_, 0, 0, 0, 0, 0);

          void t_PackedInts::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts), module, "PackedInts", 0);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Header", make_descriptor(&PY_TYPE(PackedInts$Header)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Writer", make_descriptor(&PY_TYPE(PackedInts$Writer)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "NullReader", make_descriptor(&PY_TYPE(PackedInts$NullReader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Mutable", make_descriptor(&PY_TYPE(PackedInts$Mutable)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "ReaderIterator", make_descriptor(&PY_TYPE(PackedInts$ReaderIterator)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Reader", make_descriptor(&PY_TYPE(PackedInts$Reader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Encoder", make_descriptor(&PY_TYPE(PackedInts$Encoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Decoder", make_descriptor(&PY_TYPE(PackedInts$Decoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FormatAndBits", make_descriptor(&PY_TYPE(PackedInts$FormatAndBits)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Format", make_descriptor(&PY_TYPE(PackedInts$Format)));
          }

          void t_PackedInts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "class_", make_descriptor(PackedInts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "wrapfn_", make_descriptor(t_PackedInts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "CODEC_NAME", make_descriptor(j2p(*PackedInts::CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "COMPACT", make_descriptor(PackedInts::COMPACT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT", make_descriptor(PackedInts::DEFAULT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(PackedInts::DEFAULT_BUFFER_SIZE));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FAST", make_descriptor(PackedInts::FAST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FASTEST", make_descriptor(PackedInts::FASTEST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_BYTE_ALIGNED", make_descriptor(PackedInts::VERSION_BYTE_ALIGNED));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_CURRENT", make_descriptor(PackedInts::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_MONOTONIC_WITHOUT_ZIGZAG", make_descriptor(PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_START", make_descriptor(PackedInts::VERSION_START));
          }

          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts::initializeClass, 1)))
              return NULL;
            return t_PackedInts::wrap_Object(PackedInts(((t_PackedInts *) arg)->object.this$));
          }
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds)
          {
            PackedInts object((jobject) NULL);

            INT_CALL(object = PackedInts());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::checkVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "checkVersion", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Reader a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$Mutable a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;

            if (!parseArgs(args, "kIkIII", ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Mutable::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::copy(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat a2;
            ::org::apache::lucene::util::packed::PackedInts$FormatAndBits result((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::fastestFormatAndBits(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$FormatAndBits::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fastestFormatAndBits", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Decoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDecoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Decoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDecoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDirectReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getDirectReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Encoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getEncoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Encoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getEncoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::packed::PackedInts$Format a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIK", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getMutable", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIterator(a0, a1));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIterator", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            jint a5;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kKIIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIteratorNoHeader(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIteratorNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            jint a2;
            jfloat a3;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kIIF", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriter(a0, a1, a2, a3));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriter", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriterNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriterNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::maxValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "maxValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Header result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::readHeader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Header::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readHeader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45DocValuesFormat::class$ = NULL;
          jmethodID *Lucene45DocValuesFormat::mids$ = NULL;
          bool Lucene45DocValuesFormat::live$ = false;

          jclass Lucene45DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45DocValuesFormat::Lucene45DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene45DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene45DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene45DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene45DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45DocValuesFormat, t_Lucene45DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene45DocValuesFormat, t_Lucene45DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene45DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45DocValuesFormat), module, "Lucene45DocValuesFormat", 0);
          }

          void t_Lucene45DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene45DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene45DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene45DocValuesFormat::wrap_Object(Lucene45DocValuesFormat(((t_Lucene45DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene45DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene45DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentDictionary::class$ = NULL;
          jmethodID *DocumentDictionary::mids$ = NULL;
          bool DocumentDictionary::live$ = false;

          jclass DocumentDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d188be8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_d5472fa7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_087c6971] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d188be8d, a0.this$, a1.this$, a2.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5472fa7, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_087c6971, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self);
          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data);
          static PyGetSetDef t_DocumentDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentDictionary, t_DocumentDictionary, ::java::lang::Object, DocumentDictionary, t_DocumentDictionary_init_, 0, 0, t_DocumentDictionary__fields_, 0, 0);

          void t_DocumentDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentDictionary), module, "DocumentDictionary", 0);
          }

          void t_DocumentDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "class_", make_descriptor(DocumentDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentDictionary::wrap_Object(DocumentDictionary(((t_DocumentDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kssss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizer::class$ = NULL;
          jmethodID *ChineseTokenizer::mids$ = NULL;
          bool ChineseTokenizer::live$ = false;

          jclass ChineseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizer::ChineseTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ChineseTokenizer::ChineseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void ChineseTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ChineseTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ChineseTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizer__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizer, t_ChineseTokenizer, ::org::apache::lucene::analysis::Tokenizer, ChineseTokenizer, t_ChineseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizer), module, "ChineseTokenizer", 0);
          }

          void t_ChineseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "class_", make_descriptor(ChineseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizer::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizer::wrap_Object(ChineseTokenizer(((t_ChineseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ChineseTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ChineseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Parser::class$ = NULL;
        jmethodID *FieldCache$Parser::mids$ = NULL;
        bool FieldCache$Parser::live$ = false;

        jclass FieldCache$Parser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Parser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::TermsEnum FieldCache$Parser::termsEnum(const ::org::apache::lucene::index::Terms & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_fb3ac14e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Parser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Parser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, termsEnum, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Parser, t_FieldCache$Parser, ::java::lang::Object, FieldCache$Parser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$Parser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Parser), module, "FieldCache$Parser", 0);
        }

        void t_FieldCache$Parser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "class_", make_descriptor(FieldCache$Parser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Parser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Parser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Parser::wrap_Object(FieldCache$Parser(((t_FieldCache$Parser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Parser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termsEnum", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilter::class$ = NULL;
          jmethodID *ApostropheFilter::mids$ = NULL;
          bool ApostropheFilter::live$ = false;

          jclass ApostropheFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilter::ApostropheFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ApostropheFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args);

          static PyMethodDef t_ApostropheFilter__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilter, t_ApostropheFilter, ::org::apache::lucene::analysis::TokenFilter, ApostropheFilter, t_ApostropheFilter_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilter), module, "ApostropheFilter", 0);
          }

          void t_ApostropheFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "class_", make_descriptor(ApostropheFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilter::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilter::wrap_Object(ApostropheFilter(((t_ApostropheFilter *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ApostropheFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ApostropheFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemmer::class$ = NULL;
          jmethodID *PortugueseLightStemmer::mids$ = NULL;
          bool PortugueseLightStemmer::live$ = false;

          jclass PortugueseLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemmer::PortugueseLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemmer, t_PortugueseLightStemmer, ::java::lang::Object, PortugueseLightStemmer, t_PortugueseLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemmer), module, "PortugueseLightStemmer", 0);
          }

          void t_PortugueseLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "class_", make_descriptor(PortugueseLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemmer::wrap_Object(PortugueseLightStemmer(((t_PortugueseLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseLightStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopAnalyzer.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopAnalyzer::class$ = NULL;
          jmethodID *StopAnalyzer::mids$ = NULL;
          bool StopAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *StopAnalyzer::ENGLISH_STOP_WORDS_SET = NULL;

          jclass StopAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_f88c7fb6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/File;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ENGLISH_STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "ENGLISH_STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::File & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f88c7fb6, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_StopAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StopAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopAnalyzer, t_StopAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StopAnalyzer, t_StopAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_StopAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StopAnalyzer), module, "StopAnalyzer", 0);
          }

          void t_StopAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "class_", make_descriptor(StopAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StopAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "ENGLISH_STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StopAnalyzer::ENGLISH_STOP_WORDS_SET)));
          }

          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StopAnalyzer::wrap_Object(StopAnalyzer(((t_StopAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::File a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonCollector.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonCollector::class$ = NULL;
        jmethodID *PythonCollector::mids$ = NULL;
        bool PythonCollector::live$ = false;

        jclass PythonCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_collect_abdf2c51] = env->getMethodID(cls, "collect", "(IF)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCollector::PythonCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PythonCollector::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonCollector::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCollector::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self);
        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args);
        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1);
        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data);
        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PythonCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PythonCollector, scorer),
          DECLARE_GET_FIELD(t_PythonCollector, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCollector__methods_[] = {
          DECLARE_METHOD(t_PythonCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCollector, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCollector, t_PythonCollector, ::org::apache::lucene::search::Collector, PythonCollector, t_PythonCollector_init_, 0, 0, t_PythonCollector__fields_, 0, 0);

        void t_PythonCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCollector), module, "PythonCollector", 1);
        }

        void t_PythonCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "class_", make_descriptor(PythonCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "wrapfn_", make_descriptor(t_PythonCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCollector::initializeClass);
          JNINativeMethod methods[] = {
            { "acceptsDocsOutOfOrder", "()Z", (void *) t_PythonCollector_acceptsDocsOutOfOrder0 },
            { "collect", "(IF)V", (void *) t_PythonCollector_collect1 },
            { "pythonDecRef", "()V", (void *) t_PythonCollector_pythonDecRef2 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V", (void *) t_PythonCollector_setNextReader3 },
          };
          env->registerNatives(cls, methods, 4);
        }

        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCollector::initializeClass, 1)))
            return NULL;
          return t_PythonCollector::wrap_Object(PythonCollector(((t_PythonCollector *) arg)->object.this$));
        }
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds)
        {
          PythonCollector object((jobject) NULL);

          INT_CALL(object = PythonCollector());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "acceptsDocsOutOfOrder", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("acceptsDocsOutOfOrder", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "collect", "if", (int) a0, (float) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }

        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector::class$ = NULL;
            jmethodID *TermDistinctValuesCollector::mids$ = NULL;
            bool TermDistinctValuesCollector::live$ = false;

            jclass TermDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e9bd6d29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermDistinctValuesCollector::TermDistinctValuesCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_e9bd6d29, a0.this$, a1.this$, a2.this$)) {}

            void TermDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List TermDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void TermDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args);
            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data);
            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_TermDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector, t_TermDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, TermDistinctValuesCollector, t_TermDistinctValuesCollector_init_, 0, 0, t_TermDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector::wrap_Object(const TermDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector), module, "TermDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(TermDistinctValuesCollector$GroupCount)));
            }

            void t_TermDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector::wrap_Object(TermDistinctValuesCollector(((t_TermDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Collection a2((jobject) NULL);
              PyTypeObject **p2;
              TermDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = TermDistinctValuesCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupDocs::class$ = NULL;
          jmethodID *GroupDocs::mids$ = NULL;
          jfieldID *GroupDocs::fids$ = NULL;
          bool GroupDocs::live$ = false;

          jclass GroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4916722] = env->getMethodID(cls, "<init>", "(FFI[Lorg/apache/lucene/search/ScoreDoc;Ljava/lang/Object;[Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSortValues] = env->getFieldID(cls, "groupSortValues", "[Ljava/lang/Object;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
              fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupDocs::GroupDocs(jfloat a0, jfloat a1, jint a2, const JArray< ::org::apache::lucene::search::ScoreDoc > & a3, const ::java::lang::Object & a4, const JArray< ::java::lang::Object > & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e4916722, a0, a1, a2, a3.this$, a4.this$, a5.this$)) {}

          JArray< ::java::lang::Object > GroupDocs::_get_groupSortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_groupSortValues]));
          }

          ::java::lang::Object GroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          jfloat GroupDocs::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          jfloat GroupDocs::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          JArray< ::org::apache::lucene::search::ScoreDoc > GroupDocs::_get_scoreDocs() const
          {
            return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
          }

          jint GroupDocs::_get_totalHits() const
          {
            return env->getIntField(this$, fids$[fid_totalHits]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args);
          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data);

          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data);
          static PyGetSetDef t_GroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_GroupDocs, groupSortValues),
            DECLARE_GET_FIELD(t_GroupDocs, groupValue),
            DECLARE_GET_FIELD(t_GroupDocs, maxScore),
            DECLARE_GET_FIELD(t_GroupDocs, score),
            DECLARE_GET_FIELD(t_GroupDocs, scoreDocs),
            DECLARE_GET_FIELD(t_GroupDocs, totalHits),
            DECLARE_GET_FIELD(t_GroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupDocs__methods_[] = {
            DECLARE_METHOD(t_GroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupDocs, t_GroupDocs, ::java::lang::Object, GroupDocs, t_GroupDocs_init_, 0, 0, t_GroupDocs__fields_, 0, 0);
          PyObject *t_GroupDocs::wrap_Object(const GroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupDocs), module, "GroupDocs", 0);
          }

          void t_GroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "class_", make_descriptor(GroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "wrapfn_", make_descriptor(t_GroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupDocs::initializeClass, 1)))
              return NULL;
            return t_GroupDocs::wrap_Object(GroupDocs(((t_GroupDocs *) arg)->object.this$));
          }
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            jfloat a1;
            jint a2;
            JArray< ::org::apache::lucene::search::ScoreDoc > a3((jobject) NULL);
            ::java::lang::Object a4((jobject) NULL);
            JArray< ::java::lang::Object > a5((jobject) NULL);
            GroupDocs object((jobject) NULL);

            if (!parseArgs(args, "FFI[ko[o", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = GroupDocs(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data)
          {
            JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_scoreDocs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHits());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Version::class$ = NULL;
        jmethodID *Version::mids$ = NULL;
        bool Version::live$ = false;
        Version *Version::LUCENE_30 = NULL;
        Version *Version::LUCENE_31 = NULL;
        Version *Version::LUCENE_32 = NULL;
        Version *Version::LUCENE_33 = NULL;
        Version *Version::LUCENE_34 = NULL;
        Version *Version::LUCENE_35 = NULL;
        Version *Version::LUCENE_36 = NULL;
        Version *Version::LUCENE_3_0 = NULL;
        Version *Version::LUCENE_3_1 = NULL;
        Version *Version::LUCENE_3_2 = NULL;
        Version *Version::LUCENE_3_3 = NULL;
        Version *Version::LUCENE_3_4 = NULL;
        Version *Version::LUCENE_3_5 = NULL;
        Version *Version::LUCENE_3_6 = NULL;
        Version *Version::LUCENE_40 = NULL;
        Version *Version::LUCENE_41 = NULL;
        Version *Version::LUCENE_42 = NULL;
        Version *Version::LUCENE_43 = NULL;
        Version *Version::LUCENE_44 = NULL;
        Version *Version::LUCENE_45 = NULL;
        Version *Version::LUCENE_46 = NULL;
        Version *Version::LUCENE_47 = NULL;
        Version *Version::LUCENE_48 = NULL;
        Version *Version::LUCENE_4_0 = NULL;
        Version *Version::LUCENE_4_1 = NULL;
        Version *Version::LUCENE_4_2 = NULL;
        Version *Version::LUCENE_4_3 = NULL;
        Version *Version::LUCENE_4_4 = NULL;
        Version *Version::LUCENE_4_5 = NULL;
        Version *Version::LUCENE_4_6 = NULL;
        Version *Version::LUCENE_4_7 = NULL;
        Version *Version::LUCENE_4_8 = NULL;
        Version *Version::LUCENE_4_9 = NULL;
        Version *Version::LUCENE_CURRENT = NULL;

        jclass Version::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Version");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onOrAfter_0d96cf3f] = env->getMethodID(cls, "onOrAfter", "(Lorg/apache/lucene/util/Version;)Z");
            mids$[mid_parseLeniently_54fbdb70] = env->getStaticMethodID(cls, "parseLeniently", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_valueOf_54fbdb70] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_values_f17d8c5a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/Version;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LUCENE_30 = new Version(env->getStaticObjectField(cls, "LUCENE_30", "Lorg/apache/lucene/util/Version;"));
            LUCENE_31 = new Version(env->getStaticObjectField(cls, "LUCENE_31", "Lorg/apache/lucene/util/Version;"));
            LUCENE_32 = new Version(env->getStaticObjectField(cls, "LUCENE_32", "Lorg/apache/lucene/util/Version;"));
            LUCENE_33 = new Version(env->getStaticObjectField(cls, "LUCENE_33", "Lorg/apache/lucene/util/Version;"));
            LUCENE_34 = new Version(env->getStaticObjectField(cls, "LUCENE_34", "Lorg/apache/lucene/util/Version;"));
            LUCENE_35 = new Version(env->getStaticObjectField(cls, "LUCENE_35", "Lorg/apache/lucene/util/Version;"));
            LUCENE_36 = new Version(env->getStaticObjectField(cls, "LUCENE_36", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_2 = new Version(env->getStaticObjectField(cls, "LUCENE_3_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_3 = new Version(env->getStaticObjectField(cls, "LUCENE_3_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_4 = new Version(env->getStaticObjectField(cls, "LUCENE_3_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_5 = new Version(env->getStaticObjectField(cls, "LUCENE_3_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_6 = new Version(env->getStaticObjectField(cls, "LUCENE_3_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_40 = new Version(env->getStaticObjectField(cls, "LUCENE_40", "Lorg/apache/lucene/util/Version;"));
            LUCENE_41 = new Version(env->getStaticObjectField(cls, "LUCENE_41", "Lorg/apache/lucene/util/Version;"));
            LUCENE_42 = new Version(env->getStaticObjectField(cls, "LUCENE_42", "Lorg/apache/lucene/util/Version;"));
            LUCENE_43 = new Version(env->getStaticObjectField(cls, "LUCENE_43", "Lorg/apache/lucene/util/Version;"));
            LUCENE_44 = new Version(env->getStaticObjectField(cls, "LUCENE_44", "Lorg/apache/lucene/util/Version;"));
            LUCENE_45 = new Version(env->getStaticObjectField(cls, "LUCENE_45", "Lorg/apache/lucene/util/Version;"));
            LUCENE_46 = new Version(env->getStaticObjectField(cls, "LUCENE_46", "Lorg/apache/lucene/util/Version;"));
            LUCENE_47 = new Version(env->getStaticObjectField(cls, "LUCENE_47", "Lorg/apache/lucene/util/Version;"));
            LUCENE_48 = new Version(env->getStaticObjectField(cls, "LUCENE_48", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_2 = new Version(env->getStaticObjectField(cls, "LUCENE_4_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_3 = new Version(env->getStaticObjectField(cls, "LUCENE_4_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_4 = new Version(env->getStaticObjectField(cls, "LUCENE_4_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_5 = new Version(env->getStaticObjectField(cls, "LUCENE_4_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_6 = new Version(env->getStaticObjectField(cls, "LUCENE_4_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_8 = new Version(env->getStaticObjectField(cls, "LUCENE_4_8", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_9 = new Version(env->getStaticObjectField(cls, "LUCENE_4_9", "Lorg/apache/lucene/util/Version;"));
            LUCENE_CURRENT = new Version(env->getStaticObjectField(cls, "LUCENE_CURRENT", "Lorg/apache/lucene/util/Version;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Version::onOrAfter(const Version & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_onOrAfter_0d96cf3f], a0.this$);
        }

        Version Version::parseLeniently(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parseLeniently_54fbdb70], a0.this$));
        }

        Version Version::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_valueOf_54fbdb70], a0.this$));
        }

        JArray< Version > Version::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Version >(env->callStaticObjectMethod(cls, mids$[mid_values_f17d8c5a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_of_(t_Version *self, PyObject *args);
        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg);
        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Version_values(PyTypeObject *type);
        static PyObject *t_Version_get__parameters_(t_Version *self, void *data);
        static PyGetSetDef t_Version__fields_[] = {
          DECLARE_GET_FIELD(t_Version, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Version__methods_[] = {
          DECLARE_METHOD(t_Version, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, of_, METH_VARARGS),
          DECLARE_METHOD(t_Version, onOrAfter, METH_O),
          DECLARE_METHOD(t_Version, parseLeniently, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Version, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Version, t_Version, ::java::lang::Enum, Version, abstract_init, 0, 0, t_Version__fields_, 0, 0);
        PyObject *t_Version::wrap_Object(const Version& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Version::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Version *self = (t_Version *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Version::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Version::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Version *self = (t_Version *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Version::install(PyObject *module)
        {
          installType(&PY_TYPE(Version), module, "Version", 0);
        }

        void t_Version::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "class_", make_descriptor(Version::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "wrapfn_", make_descriptor(t_Version::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Version::initializeClass);
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_30", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_30)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_31", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_31)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_32", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_32)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_33", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_33)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_34", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_34)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_35", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_35)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_36", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_36)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_40", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_40)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_41", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_41)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_42", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_42)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_43", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_43)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_44", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_44)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_45", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_45)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_46", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_46)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_47", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_47)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_48", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_48)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_8", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_8)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_9", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_9)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_CURRENT", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_CURRENT)));
        }

        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Version::initializeClass, 1)))
            return NULL;
          return t_Version::wrap_Object(Version(((t_Version *) arg)->object.this$));
        }
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Version::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Version_of_(t_Version *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg)
        {
          Version a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", Version::initializeClass, &a0, &p0, t_Version::parameters_))
          {
            OBJ_CALL(result = self->object.onOrAfter(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "onOrAfter", arg);
          return NULL;
        }

        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parseLeniently(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseLeniently", arg);
          return NULL;
        }

        static PyObject *t_Version_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::valueOf(a0));
            return t_Version::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Version_values(PyTypeObject *type)
        {
          JArray< Version > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::Version::values());
          return JArray<jobject>(result.this$).wrap(t_Version::wrap_jobject);
        }
        static PyObject *t_Version_get__parameters_(t_Version *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilterFactory::class$ = NULL;
          jmethodID *ScandinavianFoldingFilterFactory::mids$ = NULL;
          bool ScandinavianFoldingFilterFactory::live$ = false;

          jclass ScandinavianFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_507bf659] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilterFactory::ScandinavianFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter ScandinavianFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_507bf659], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilterFactory), module, "ScandinavianFoldingFilterFactory", 0);
          }

          void t_ScandinavianFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilterFactory::wrap_Object(ScandinavianFoldingFilterFactory(((t_ScandinavianFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *TaxonomyWriterCache::class$ = NULL;
            jmethodID *TaxonomyWriterCache::mids$ = NULL;
            bool TaxonomyWriterCache::live$ = false;

            jclass TaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void TaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint TaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean TaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean TaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_TaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_TaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_TaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_TaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TaxonomyWriterCache, t_TaxonomyWriterCache, ::java::lang::Object, TaxonomyWriterCache, abstract_init, 0, 0, t_TaxonomyWriterCache__fields_, 0, 0);

            void t_TaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(TaxonomyWriterCache), module, "TaxonomyWriterCache", 0);
            }

            void t_TaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "class_", make_descriptor(TaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_TaxonomyWriterCache::wrap_Object(TaxonomyWriterCache(((t_TaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum::class$ = NULL;
        jmethodID *FuzzyTermsEnum::mids$ = NULL;
        bool FuzzyTermsEnum::live$ = false;

        jclass FuzzyTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_538f73aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FIZ)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
            mids$[mid_getScaleFactor_54c6a176] = env->getMethodID(cls, "getScaleFactor", "()F");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");
            mids$[mid_getAutomatonEnum_6dd5cb2f] = env->getMethodID(cls, "getAutomatonEnum", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_setEnum_0f660bfe] = env->getMethodID(cls, "setEnum", "(Lorg/apache/lucene/index/TermsEnum;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum::FuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4, jboolean a5) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_538f73aa, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

        jint FuzzyTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FuzzyTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FuzzyTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FuzzyTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jfloat FuzzyTermsEnum::getMinSimilarity() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
        }

        jfloat FuzzyTermsEnum::getScaleFactor() const
        {
          return env->callFloatMethod(this$, mids$[mid_getScaleFactor_54c6a176]);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FuzzyTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FuzzyTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FuzzyTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FuzzyTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FuzzyTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data);
        static PyGetSetDef t_FuzzyTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, comparator),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, minSimilarity),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, scaleFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getMinSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getScaleFactor, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum, t_FuzzyTermsEnum, ::org::apache::lucene::index::TermsEnum, FuzzyTermsEnum, t_FuzzyTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FuzzyTermsEnum *)) get_next< t_FuzzyTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FuzzyTermsEnum__fields_, 0, 0);

        void t_FuzzyTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum), module, "FuzzyTermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttributeImpl", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttribute", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute)));
        }

        void t_FuzzyTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "class_", make_descriptor(FuzzyTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum::wrap_Object(FuzzyTermsEnum(((t_FuzzyTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
          ::org::apache::lucene::index::Term a2((jobject) NULL);
          jfloat a3;
          jint a4;
          jboolean a5;
          FuzzyTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkFIZ", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            INT_CALL(object = FuzzyTermsEnum(a0, a1, a2, a3, a4, a5));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemmer::class$ = NULL;
          jmethodID *BrazilianStemmer::mids$ = NULL;
          bool BrazilianStemmer::live$ = false;

          jclass BrazilianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_log_14c7b5c5] = env->getMethodID(cls, "log", "()Ljava/lang/String;");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemmer::BrazilianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String BrazilianStemmer::log() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_log_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self);

          static PyMethodDef t_BrazilianStemmer__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, log, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemmer, t_BrazilianStemmer, ::java::lang::Object, BrazilianStemmer, t_BrazilianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemmer), module, "BrazilianStemmer", 0);
          }

          void t_BrazilianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "class_", make_descriptor(BrazilianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemmer::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemmer::wrap_Object(BrazilianStemmer(((t_BrazilianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BrazilianStemmer object((jobject) NULL);

            INT_CALL(object = BrazilianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.log());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractCollection::class$ = NULL;
    jmethodID *AbstractCollection::mids$ = NULL;
    bool AbstractCollection::live$ = false;

    jclass AbstractCollection::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractCollection");

        mids$ = new jmethodID[max_mid];
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
        mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
        mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractCollection::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean AbstractCollection::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    void AbstractCollection::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractCollection::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean AbstractCollection::containsAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator AbstractCollection::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean AbstractCollection::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jboolean AbstractCollection::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::retainAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
    }

    jint AbstractCollection::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray(const JArray< ::java::lang::Object > & a0) const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
    }

    ::java::lang::String AbstractCollection::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data);
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data);
    static PyGetSetDef t_AbstractCollection__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractCollection, empty),
      DECLARE_GET_FIELD(t_AbstractCollection, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractCollection__methods_[] = {
      DECLARE_METHOD(t_AbstractCollection, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, add, METH_O),
      DECLARE_METHOD(t_AbstractCollection, addAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, contains, METH_O),
      DECLARE_METHOD(t_AbstractCollection, containsAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, iterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, remove, METH_O),
      DECLARE_METHOD(t_AbstractCollection, removeAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, retainAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, toArray, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractCollection, t_AbstractCollection, ::java::lang::Object, AbstractCollection, abstract_init, ((PyObject *(*)(t_AbstractCollection *)) get_generic_iterator< t_AbstractCollection >), 0, t_AbstractCollection__fields_, 0, 0);
    PyObject *t_AbstractCollection::wrap_Object(const AbstractCollection& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractCollection::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractCollection::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractCollection), module, "AbstractCollection", 0);
    }

    void t_AbstractCollection::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "class_", make_descriptor(AbstractCollection::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "wrapfn_", make_descriptor(t_AbstractCollection::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractCollection::initializeClass, 1)))
        return NULL;
      return t_AbstractCollection::wrap_Object(AbstractCollection(((t_AbstractCollection *) arg)->object.this$));
    }
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractCollection::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "add", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "addAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.containsAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.iterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.retainAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< ::java::lang::Object > result((jobject) NULL);
          OBJ_CALL(result = self->object.toArray());
          return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        break;
       case 1:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toArray", args);
      return NULL;
    }

    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SerialMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SerialMergeScheduler::class$ = NULL;
        jmethodID *SerialMergeScheduler::mids$ = NULL;
        bool SerialMergeScheduler::live$ = false;

        jclass SerialMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SerialMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SerialMergeScheduler::SerialMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SerialMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SerialMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args);
        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args);

        static PyMethodDef t_SerialMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_SerialMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_SerialMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SerialMergeScheduler, t_SerialMergeScheduler, ::org::apache::lucene::index::MergeScheduler, SerialMergeScheduler, t_SerialMergeScheduler_init_, 0, 0, 0, 0, 0);

        void t_SerialMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(SerialMergeScheduler), module, "SerialMergeScheduler", 0);
        }

        void t_SerialMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "class_", make_descriptor(SerialMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_SerialMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SerialMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_SerialMergeScheduler::wrap_Object(SerialMergeScheduler(((t_SerialMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SerialMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          SerialMergeScheduler object((jobject) NULL);

          INT_CALL(object = SerialMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_or_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_or_return::mids$ = NULL;
          bool JavascriptParser$bitwise_or_return::live$ = false;

          jclass JavascriptParser$bitwise_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_or_return::JavascriptParser$bitwise_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_or_return), module, "JavascriptParser$bitwise_or_return", 0);
          }

          void t_JavascriptParser$bitwise_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_or_return::wrap_Object(JavascriptParser$bitwise_or_return(((t_JavascriptParser$bitwise_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::FuzzyTermsEnum$LevenshteinAutomataAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, automata, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), module, "FuzzyTermsEnum$LevenshteinAutomataAttributeImpl", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl(((t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          FuzzyTermsEnum$LevenshteinAutomataAttributeImpl object((jobject) NULL);

          INT_CALL(object = FuzzyTermsEnum$LevenshteinAutomataAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *UnescapedCharSequence::class$ = NULL;
              jmethodID *UnescapedCharSequence::mids$ = NULL;
              bool UnescapedCharSequence::live$ = false;

              jclass UnescapedCharSequence::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_init$_225aaf87] = env->getMethodID(cls, "<init>", "([C[ZII)V");
                  mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                  mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                  mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                  mids$[mid_toLowerCase_0df08ccc] = env->getStaticMethodID(cls, "toLowerCase", "(Ljava/lang/CharSequence;Ljava/util/Locale;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_14c7b5c5] = env->getMethodID(cls, "toStringEscaped", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_c783d655] = env->getMethodID(cls, "toStringEscaped", "([C)Ljava/lang/String;");
                  mids$[mid_wasEscaped_39c7bd30] = env->getMethodID(cls, "wasEscaped", "(I)Z");
                  mids$[mid_wasEscaped_2fbf15ac] = env->getStaticMethodID(cls, "wasEscaped", "(Ljava/lang/CharSequence;I)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              UnescapedCharSequence::UnescapedCharSequence(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

              UnescapedCharSequence::UnescapedCharSequence(const JArray< jchar > & a0, const JArray< jboolean > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_225aaf87, a0.this$, a1.this$, a2, a3)) {}

              jchar UnescapedCharSequence::charAt(jint a0) const
              {
                return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
              }

              jint UnescapedCharSequence::length() const
              {
                return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
              }

              ::java::lang::CharSequence UnescapedCharSequence::subSequence(jint a0, jint a1) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
              }

              ::java::lang::CharSequence UnescapedCharSequence::toLowerCase(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::CharSequence(env->callStaticObjectMethod(cls, mids$[mid_toLowerCase_0df08ccc], a0.this$, a1.this$));
              }

              ::java::lang::String UnescapedCharSequence::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped(const JArray< jchar > & a0) const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_c783d655], a0.this$));
              }

              jboolean UnescapedCharSequence::wasEscaped(jint a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_wasEscaped_39c7bd30], a0);
              }

              jboolean UnescapedCharSequence::wasEscaped(const ::java::lang::CharSequence & a0, jint a1)
              {
                jclass cls = env->getClass(initializeClass);
                return env->callStaticBooleanMethod(cls, mids$[mid_wasEscaped_2fbf15ac], a0.this$, a1);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg);
              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds);
              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self);
              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_UnescapedCharSequence__methods_[] = {
                DECLARE_METHOD(t_UnescapedCharSequence, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, charAt, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, length, METH_NOARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, subSequence, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toLowerCase, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, toString, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toStringEscaped, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped_, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(UnescapedCharSequence, t_UnescapedCharSequence, ::java::lang::Object, UnescapedCharSequence, t_UnescapedCharSequence_init_, 0, 0, 0, 0, 0);

              void t_UnescapedCharSequence::install(PyObject *module)
              {
                installType(&PY_TYPE(UnescapedCharSequence), module, "UnescapedCharSequence", 0);
              }

              void t_UnescapedCharSequence::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "class_", make_descriptor(UnescapedCharSequence::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "wrapfn_", make_descriptor(t_UnescapedCharSequence::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, UnescapedCharSequence::initializeClass, 1)))
                  return NULL;
                return t_UnescapedCharSequence::wrap_Object(UnescapedCharSequence(((t_UnescapedCharSequence *) arg)->object.this$));
              }
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, UnescapedCharSequence::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    JArray< jboolean > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "[C[ZII", &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jchar result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.charAt(a0));
                  return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                }

                PyErr_SetArgsError((PyObject *) self, "charAt", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self)
              {
                jint result;
                OBJ_CALL(result = self->object.length());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subSequence(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "subSequence", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::toLowerCase(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "toLowerCase", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(UnescapedCharSequence), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toStringEscaped());
                    return j2p(result);
                  }
                  break;
                 case 1:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                      OBJ_CALL(result = self->object.toStringEscaped(a0));
                      return j2p(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toStringEscaped", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jboolean result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.wasEscaped(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "wasEscaped", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jboolean result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::wasEscaped(a0, a1));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError(type, "wasEscaped_", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkFilter::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkFilter::live$ = false;

          jclass TeeSinkTokenFilter$SinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter$SinkFilter::TeeSinkTokenFilter$SinkFilter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean TeeSinkTokenFilter$SinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TeeSinkTokenFilter$SinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self);

          static PyMethodDef t_TeeSinkTokenFilter$SinkFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, accept, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter, ::java::lang::Object, TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkFilter), module, "TeeSinkTokenFilter$SinkFilter", 0);
          }

          void t_TeeSinkTokenFilter$SinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkFilter::wrap_Object(TeeSinkTokenFilter$SinkFilter(((t_TeeSinkTokenFilter$SinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds)
          {
            TeeSinkTokenFilter$SinkFilter object((jobject) NULL);

            INT_CALL(object = TeeSinkTokenFilter$SinkFilter());
            self->object = object;

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashMap.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/Object.h"
#include "java/util/Map$Entry.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashMap::class$ = NULL;
    jmethodID *HashMap::mids$ = NULL;
    bool HashMap::live$ = false;

    jclass HashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashMap::HashMap() : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashMap::HashMap(const ::java::util::Map & a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    HashMap::HashMap(jint a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashMap::HashMap(jint a0, jfloat a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    void HashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashMap::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean HashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set HashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    ::java::lang::Object HashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    jboolean HashMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set HashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object HashMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void HashMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object HashMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jint HashMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Collection HashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args);
    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_clone(t_HashMap *self);
    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data);
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data);
    static PyGetSetDef t_HashMap__fields_[] = {
      DECLARE_GET_FIELD(t_HashMap, empty),
      DECLARE_GET_FIELD(t_HashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashMap__methods_[] = {
      DECLARE_METHOD(t_HashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashMap, containsKey, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, put, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putAll, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, size, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashMap, t_HashMap, ::java::util::AbstractMap, HashMap, t_HashMap_init_, 0, 0, t_HashMap__fields_, 0, 0);
    PyObject *t_HashMap::wrap_Object(const HashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_HashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_HashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(HashMap), module, "HashMap", 0);
    }

    void t_HashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "class_", make_descriptor(HashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "wrapfn_", make_descriptor(t_HashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashMap::initializeClass, 1)))
        return NULL;
      return t_HashMap::wrap_Object(HashMap(((t_HashMap *) arg)->object.this$));
    }
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashMap object((jobject) NULL);

          INT_CALL(object = HashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashMap(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashMap_clone(t_HashMap *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsKey", args, 2);
    }

    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "put", args, 2);
    }

    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "putAll", args, 2);
    }

    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/ExternalRefSorter.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *ExternalRefSorter::class$ = NULL;
            jmethodID *ExternalRefSorter::mids$ = NULL;
            bool ExternalRefSorter::live$ = false;

            jclass ExternalRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/ExternalRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ExternalRefSorter::ExternalRefSorter(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

            void ExternalRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            void ExternalRefSorter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            ::java::util::Comparator ExternalRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator ExternalRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg);
            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data);
            static PyGetSetDef t_ExternalRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_ExternalRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ExternalRefSorter__methods_[] = {
              DECLARE_METHOD(t_ExternalRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, add, METH_O),
              DECLARE_METHOD(t_ExternalRefSorter, close, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ExternalRefSorter, t_ExternalRefSorter, ::java::lang::Object, ExternalRefSorter, t_ExternalRefSorter_init_, 0, 0, t_ExternalRefSorter__fields_, 0, 0);

            void t_ExternalRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(ExternalRefSorter), module, "ExternalRefSorter", 0);
            }

            void t_ExternalRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "class_", make_descriptor(ExternalRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "wrapfn_", make_descriptor(t_ExternalRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ExternalRefSorter::initializeClass, 1)))
                return NULL;
              return t_ExternalRefSorter::wrap_Object(ExternalRefSorter(((t_ExternalRefSorter *) arg)->object.this$));
            }
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ExternalRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
              ExternalRefSorter object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
              {
                INT_CALL(object = ExternalRefSorter(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *WildcardQuery::class$ = NULL;
        jmethodID *WildcardQuery::mids$ = NULL;
        bool WildcardQuery::live$ = false;
        jchar WildcardQuery::WILDCARD_CHAR = (jchar) 0;
        jchar WildcardQuery::WILDCARD_ESCAPE = (jchar) 0;
        jchar WildcardQuery::WILDCARD_STRING = (jchar) 0;

        jclass WildcardQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/WildcardQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toAutomaton_d07301d8] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            WILDCARD_CHAR = env->getStaticCharField(cls, "WILDCARD_CHAR");
            WILDCARD_ESCAPE = env->getStaticCharField(cls, "WILDCARD_ESCAPE");
            WILDCARD_STRING = env->getStaticCharField(cls, "WILDCARD_STRING");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WildcardQuery::WildcardQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term WildcardQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        ::org::apache::lucene::util::automaton::Automaton WildcardQuery::toAutomaton(const ::org::apache::lucene::index::Term & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_d07301d8], a0.this$));
        }

        ::java::lang::String WildcardQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self);
        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args);
        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data);
        static PyGetSetDef t_WildcardQuery__fields_[] = {
          DECLARE_GET_FIELD(t_WildcardQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WildcardQuery__methods_[] = {
          DECLARE_METHOD(t_WildcardQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_WildcardQuery, toAutomaton, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WildcardQuery, t_WildcardQuery, ::org::apache::lucene::search::AutomatonQuery, WildcardQuery, t_WildcardQuery_init_, 0, 0, t_WildcardQuery__fields_, 0, 0);

        void t_WildcardQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(WildcardQuery), module, "WildcardQuery", 0);
        }

        void t_WildcardQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "class_", make_descriptor(WildcardQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "wrapfn_", make_descriptor(t_WildcardQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WildcardQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_CHAR", make_descriptor(WildcardQuery::WILDCARD_CHAR));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_ESCAPE", make_descriptor(WildcardQuery::WILDCARD_ESCAPE));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_STRING", make_descriptor(WildcardQuery::WILDCARD_STRING));
        }

        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WildcardQuery::initializeClass, 1)))
            return NULL;
          return t_WildcardQuery::wrap_Object(WildcardQuery(((t_WildcardQuery *) arg)->object.this$));
        }
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WildcardQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          WildcardQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = WildcardQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::WildcardQuery::toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", arg);
          return NULL;
        }

        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(WildcardQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileNotFoundException::class$ = NULL;
    jmethodID *FileNotFoundException::mids$ = NULL;
    bool FileNotFoundException::live$ = false;

    jclass FileNotFoundException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileNotFoundException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileNotFoundException::FileNotFoundException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    FileNotFoundException::FileNotFoundException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_FileNotFoundException__methods_[] = {
      DECLARE_METHOD(t_FileNotFoundException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileNotFoundException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileNotFoundException, t_FileNotFoundException, ::java::io::IOException, FileNotFoundException, t_FileNotFoundException_init_, 0, 0, 0, 0, 0);

    void t_FileNotFoundException::install(PyObject *module)
    {
      installType(&PY_TYPE(FileNotFoundException), module, "FileNotFoundException", 0);
    }

    void t_FileNotFoundException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "class_", make_descriptor(FileNotFoundException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_FileNotFoundException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileNotFoundException::initializeClass, 1)))
        return NULL;
      return t_FileNotFoundException::wrap_Object(FileNotFoundException(((t_FileNotFoundException *) arg)->object.this$));
    }
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileNotFoundException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          FileNotFoundException object((jobject) NULL);

          INT_CALL(object = FileNotFoundException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          FileNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileNotFoundException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xCodec.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xCodec::class$ = NULL;
          jmethodID *Lucene3xCodec::mids$ = NULL;
          bool Lucene3xCodec::live$ = false;

          jclass Lucene3xCodec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xCodec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocStoreFiles_e7e0a956] = env->getStaticMethodID(cls, "getDocStoreFiles", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/util/Set;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xCodec::Lucene3xCodec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene3xCodec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene3xCodec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::java::util::Set Lucene3xCodec::getDocStoreFiles(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreFiles_e7e0a956], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene3xCodec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene3xCodec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene3xCodec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene3xCodec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene3xCodec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene3xCodec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args);

          static PyMethodDef t_Lucene3xCodec__methods_[] = {
            DECLARE_METHOD(t_Lucene3xCodec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, getDocStoreFiles, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xCodec, t_Lucene3xCodec, ::org::apache::lucene::codecs::Codec, Lucene3xCodec, t_Lucene3xCodec_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xCodec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xCodec), module, "Lucene3xCodec", 0);
          }

          void t_Lucene3xCodec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "class_", make_descriptor(Lucene3xCodec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xCodec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xCodec::initializeClass, 1)))
              return NULL;
            return t_Lucene3xCodec::wrap_Object(Lucene3xCodec(((t_Lucene3xCodec *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xCodec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xCodec object((jobject) NULL);

            INT_CALL(object = Lucene3xCodec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xCodec::getDocStoreFiles(a0));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getDocStoreFiles", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/SuggestStopFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *SuggestStopFilter::class$ = NULL;
            jmethodID *SuggestStopFilter::mids$ = NULL;
            bool SuggestStopFilter::live$ = false;

            jclass SuggestStopFilter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/SuggestStopFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
                mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
                mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestStopFilter::SuggestStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

            void SuggestStopFilter::end() const
            {
              env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
            }

            jboolean SuggestStopFilter::incrementToken() const
            {
              return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
            }

            void SuggestStopFilter::reset() const
            {
              env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args);

            static PyMethodDef t_SuggestStopFilter__methods_[] = {
              DECLARE_METHOD(t_SuggestStopFilter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, end, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, incrementToken, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, reset, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SuggestStopFilter, t_SuggestStopFilter, ::org::apache::lucene::analysis::TokenFilter, SuggestStopFilter, t_SuggestStopFilter_init_, 0, 0, 0, 0, 0);

            void t_SuggestStopFilter::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestStopFilter), module, "SuggestStopFilter", 0);
            }

            void t_SuggestStopFilter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "class_", make_descriptor(SuggestStopFilter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "wrapfn_", make_descriptor(t_SuggestStopFilter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestStopFilter::initializeClass, 1)))
                return NULL;
              return t_SuggestStopFilter::wrap_Object(SuggestStopFilter(((t_SuggestStopFilter *) arg)->object.this$));
            }
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestStopFilter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
              ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              SuggestStopFilter object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
              {
                INT_CALL(object = SuggestStopFilter(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.end());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "end", args, 2);
            }

            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.incrementToken());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "incrementToken", args, 2);
            }

            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.reset());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "reset", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilterFactory::class$ = NULL;
          jmethodID *FinnishLightStemFilterFactory::mids$ = NULL;
          bool FinnishLightStemFilterFactory::live$ = false;

          jclass FinnishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilterFactory::FinnishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FinnishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilterFactory), module, "FinnishLightStemFilterFactory", 0);
          }

          void t_FinnishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "class_", make_descriptor(FinnishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilterFactory::wrap_Object(FinnishLightStemFilterFactory(((t_FinnishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FinnishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FinnishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilterFactory::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilterFactory::live$ = false;

          jclass DictionaryCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilterFactory::DictionaryCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DictionaryCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void DictionaryCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DictionaryCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), module, "DictionaryCompoundWordTokenFilterFactory", 0);
          }

          void t_DictionaryCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilterFactory::wrap_Object(DictionaryCompoundWordTokenFilterFactory(((t_DictionaryCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DictionaryCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DictionaryCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *RuntimeException::class$ = NULL;
    jmethodID *RuntimeException::mids$ = NULL;
    bool RuntimeException::live$ = false;

    jclass RuntimeException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_RuntimeException__methods_[] = {
      DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(RuntimeException, t_RuntimeException, ::java::lang::Exception, RuntimeException, t_RuntimeException_init_, 0, 0, 0, 0, 0);

    void t_RuntimeException::install(PyObject *module)
    {
      installType(&PY_TYPE(RuntimeException), module, "RuntimeException", 0);
    }

    void t_RuntimeException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "class_", make_descriptor(RuntimeException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
        return NULL;
      return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
    }
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, RuntimeException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          RuntimeException object((jobject) NULL);

          INT_CALL(object = RuntimeException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RuntimeException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocTermOrds.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocTermOrds::class$ = NULL;
        jmethodID *DocTermOrds::mids$ = NULL;
        bool DocTermOrds::live$ = false;
        jint DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS = (jint) 0;

        jclass DocTermOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocTermOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5230fbcf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;)V");
            mids$[mid_init$_ba2c6033] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_69c8f813] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_init$_6c95794f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_getOrdTermsEnum_e7b033b0] = env->getMethodID(cls, "getOrdTermsEnum", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_e09eae6c] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_lookupTerm_fc839edf] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/index/TermsEnum;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_numTerms_54c6a179] = env->getMethodID(cls, "numTerms", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_visitTerm_619ad8a4] = env->getMethodID(cls, "visitTerm", "(Lorg/apache/lucene/index/TermsEnum;I)V");
            mids$[mid_uninvert_728f7de9] = env->getMethodID(cls, "uninvert", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setActualDocFreq_d8d154a6] = env->getMethodID(cls, "setActualDocFreq", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL_BITS = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL_BITS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5230fbcf, a0.this$, a1.this$, a2.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba2c6033, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_69c8f813, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4, jint a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6c95794f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

        ::org::apache::lucene::index::TermsEnum DocTermOrds::getOrdTermsEnum(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getOrdTermsEnum_e7b033b0], a0.this$));
        }

        jboolean DocTermOrds::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::index::SortedSetDocValues DocTermOrds::iterator(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_iterator_e09eae6c], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrds::lookupTerm(const ::org::apache::lucene::index::TermsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupTerm_fc839edf], a0.this$, a1));
        }

        jint DocTermOrds::numTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_numTerms_54c6a179]);
        }

        jlong DocTermOrds::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args);
        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data);
        static PyGetSetDef t_DocTermOrds__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrds, empty),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrds__methods_[] = {
          DECLARE_METHOD(t_DocTermOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, getOrdTermsEnum, METH_O),
          DECLARE_METHOD(t_DocTermOrds, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, iterator, METH_O),
          DECLARE_METHOD(t_DocTermOrds, lookupTerm, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrds, numTerms, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrds, t_DocTermOrds, ::java::lang::Object, DocTermOrds, t_DocTermOrds_init_, 0, 0, t_DocTermOrds__fields_, 0, 0);

        void t_DocTermOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrds), module, "DocTermOrds", 0);
        }

        void t_DocTermOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "class_", make_descriptor(DocTermOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocTermOrds::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "DEFAULT_INDEX_INTERVAL_BITS", make_descriptor(DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS));
        }

        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrds::initializeClass, 1)))
            return NULL;
          return t_DocTermOrds::wrap_Object(DocTermOrds(((t_DocTermOrds *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              jint a5;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskII", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getOrdTermsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrdTermsEnum", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", args);
          return NULL;
        }

        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton$AUTOMATON_TYPE::class$ = NULL;
          jmethodID *CompiledAutomaton$AUTOMATON_TYPE::mids$ = NULL;
          bool CompiledAutomaton$AUTOMATON_TYPE::live$ = false;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::ALL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NONE = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NORMAL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::PREFIX$ = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::SINGLE = NULL;

          jclass CompiledAutomaton$AUTOMATON_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_9a95b48c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");
              mids$[mid_values_9a1b8d3a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "ALL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NONE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NORMAL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              PREFIX$ = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "PREFIX", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              SINGLE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "SINGLE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton$AUTOMATON_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CompiledAutomaton$AUTOMATON_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9a95b48c], a0.this$));
          }

          JArray< CompiledAutomaton$AUTOMATON_TYPE > CompiledAutomaton$AUTOMATON_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< CompiledAutomaton$AUTOMATON_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_9a1b8d3a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data);
          static PyGetSetDef t_CompiledAutomaton$AUTOMATON_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton$AUTOMATON_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton$AUTOMATON_TYPE__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton$AUTOMATON_TYPE, t_CompiledAutomaton$AUTOMATON_TYPE, ::java::lang::Enum, CompiledAutomaton$AUTOMATON_TYPE, abstract_init, 0, 0, t_CompiledAutomaton$AUTOMATON_TYPE__fields_, 0, 0);
          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(const CompiledAutomaton$AUTOMATON_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), module, "CompiledAutomaton$AUTOMATON_TYPE", 0);
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "class_", make_descriptor(CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompiledAutomaton$AUTOMATON_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "ALL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::ALL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NONE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NONE)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NORMAL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NORMAL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "PREFIX", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::PREFIX$)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "SINGLE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::SINGLE)));
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(CompiledAutomaton$AUTOMATON_TYPE(((t_CompiledAutomaton$AUTOMATON_TYPE *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            CompiledAutomaton$AUTOMATON_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::valueOf(a0));
              return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type)
          {
            JArray< CompiledAutomaton$AUTOMATON_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject);
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilterFactory::class$ = NULL;
          jmethodID *CzechStemFilterFactory::mids$ = NULL;
          bool CzechStemFilterFactory::live$ = false;

          jclass CzechStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilterFactory::CzechStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CzechStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_CzechStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilterFactory, t_CzechStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CzechStemFilterFactory, t_CzechStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilterFactory), module, "CzechStemFilterFactory", 0);
          }

          void t_CzechStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "class_", make_descriptor(CzechStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilterFactory::wrap_Object(CzechStemFilterFactory(((t_CzechStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CzechStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CzechStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeTrigger::class$ = NULL;
        jmethodID *MergeTrigger::mids$ = NULL;
        bool MergeTrigger::live$ = false;
        MergeTrigger *MergeTrigger::CLOSING = NULL;
        MergeTrigger *MergeTrigger::EXPLICIT = NULL;
        MergeTrigger *MergeTrigger::FULL_FLUSH = NULL;
        MergeTrigger *MergeTrigger::MERGE_FINISHED = NULL;
        MergeTrigger *MergeTrigger::SEGMENT_FLUSH = NULL;

        jclass MergeTrigger::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeTrigger");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_c198d758] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/MergeTrigger;");
            mids$[mid_values_5144e632] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/MergeTrigger;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CLOSING = new MergeTrigger(env->getStaticObjectField(cls, "CLOSING", "Lorg/apache/lucene/index/MergeTrigger;"));
            EXPLICIT = new MergeTrigger(env->getStaticObjectField(cls, "EXPLICIT", "Lorg/apache/lucene/index/MergeTrigger;"));
            FULL_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "FULL_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            MERGE_FINISHED = new MergeTrigger(env->getStaticObjectField(cls, "MERGE_FINISHED", "Lorg/apache/lucene/index/MergeTrigger;"));
            SEGMENT_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "SEGMENT_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeTrigger MergeTrigger::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeTrigger(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c198d758], a0.this$));
        }

        JArray< MergeTrigger > MergeTrigger::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< MergeTrigger >(env->callStaticObjectMethod(cls, mids$[mid_values_5144e632]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args);
        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_MergeTrigger_values(PyTypeObject *type);
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data);
        static PyGetSetDef t_MergeTrigger__fields_[] = {
          DECLARE_GET_FIELD(t_MergeTrigger, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeTrigger__methods_[] = {
          DECLARE_METHOD(t_MergeTrigger, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergeTrigger, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeTrigger, t_MergeTrigger, ::java::lang::Enum, MergeTrigger, abstract_init, 0, 0, t_MergeTrigger__fields_, 0, 0);
        PyObject *t_MergeTrigger::wrap_Object(const MergeTrigger& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergeTrigger::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergeTrigger::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeTrigger), module, "MergeTrigger", 0);
        }

        void t_MergeTrigger::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "class_", make_descriptor(MergeTrigger::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "wrapfn_", make_descriptor(t_MergeTrigger::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MergeTrigger::initializeClass);
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "CLOSING", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::CLOSING)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "EXPLICIT", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::EXPLICIT)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "FULL_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::FULL_FLUSH)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "MERGE_FINISHED", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::MERGE_FINISHED)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "SEGMENT_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::SEGMENT_FLUSH)));
        }

        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeTrigger::initializeClass, 1)))
            return NULL;
          return t_MergeTrigger::wrap_Object(MergeTrigger(((t_MergeTrigger *) arg)->object.this$));
        }
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeTrigger::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          MergeTrigger result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::valueOf(a0));
            return t_MergeTrigger::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_MergeTrigger_values(PyTypeObject *type)
        {
          JArray< MergeTrigger > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::values());
          return JArray<jobject>(result.this$).wrap(t_MergeTrigger::wrap_jobject);
        }
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Counter::class$ = NULL;
        jmethodID *Counter::mids$ = NULL;
        bool Counter::live$ = false;

        jclass Counter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Counter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addAndGet_0ee6df33] = env->getMethodID(cls, "addAndGet", "(J)J");
            mids$[mid_get_54c6a17a] = env->getMethodID(cls, "get", "()J");
            mids$[mid_newCounter_781dd30a] = env->getStaticMethodID(cls, "newCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_newCounter_aad2ede1] = env->getStaticMethodID(cls, "newCounter", "(Z)Lorg/apache/lucene/util/Counter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Counter::Counter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong Counter::addAndGet(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addAndGet_0ee6df33], a0);
        }

        jlong Counter::get() const
        {
          return env->callLongMethod(this$, mids$[mid_get_54c6a17a]);
        }

        Counter Counter::newCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_781dd30a]));
        }

        Counter Counter::newCounter(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_aad2ede1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg);
        static PyObject *t_Counter_get(t_Counter *self);
        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Counter__methods_[] = {
          DECLARE_METHOD(t_Counter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, addAndGet, METH_O),
          DECLARE_METHOD(t_Counter, get, METH_NOARGS),
          DECLARE_METHOD(t_Counter, newCounter, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Counter, t_Counter, ::java::lang::Object, Counter, t_Counter_init_, 0, 0, 0, 0, 0);

        void t_Counter::install(PyObject *module)
        {
          installType(&PY_TYPE(Counter), module, "Counter", 0);
        }

        void t_Counter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "class_", make_descriptor(Counter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "wrapfn_", make_descriptor(t_Counter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Counter::initializeClass, 1)))
            return NULL;
          return t_Counter::wrap_Object(Counter(((t_Counter *) arg)->object.this$));
        }
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Counter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds)
        {
          Counter object((jobject) NULL);

          INT_CALL(object = Counter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.addAndGet(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAndGet", arg);
          return NULL;
        }

        static PyObject *t_Counter_get(t_Counter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.get());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Counter result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter());
              return t_Counter::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              Counter result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter(a0));
                return t_Counter::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newCounter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie.h"
#include "java/io/PrintStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie::class$ = NULL;
      jmethodID *MultiTrie::mids$ = NULL;
      bool MultiTrie::live$ = false;

      jclass MultiTrie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie::MultiTrie(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie::MultiTrie(jboolean a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      ::java::lang::CharSequence MultiTrie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void MultiTrie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie MultiTrie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args);

      static PyMethodDef t_MultiTrie__methods_[] = {
        DECLARE_METHOD(t_MultiTrie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie, t_MultiTrie, ::org::egothor::stemmer::Trie, MultiTrie, t_MultiTrie_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie), module, "MultiTrie", 0);
      }

      void t_MultiTrie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "class_", make_descriptor(MultiTrie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie::initializeClass, 1)))
          return NULL;
        return t_MultiTrie::wrap_Object(MultiTrie(((t_MultiTrie *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "add", args);
        return NULL;
      }

      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "printInfo", args, 2);
      }

      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttributeImpl.h"
#include "java/lang/Object.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttributeImpl::class$ = NULL;
        jmethodID *PythonAttributeImpl::mids$ = NULL;
        bool PythonAttributeImpl::live$ = false;

        jclass PythonAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAttributeImpl::PythonAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonAttributeImpl::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonAttributeImpl::hashCode() const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_hashCode_54c6a179]);
        }

        jlong PythonAttributeImpl::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAttributeImpl::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self);
        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args);
        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data);
        static PyGetSetDef t_PythonAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAttributeImpl, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_PythonAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttributeImpl, t_PythonAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PythonAttributeImpl, t_PythonAttributeImpl_init_, 0, 0, t_PythonAttributeImpl__fields_, 0, 0);

        void t_PythonAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttributeImpl), module, "PythonAttributeImpl", 1);
        }

        void t_PythonAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "class_", make_descriptor(PythonAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PythonAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAttributeImpl::initializeClass);
          JNINativeMethod methods[] = {
            { "clear", "()V", (void *) t_PythonAttributeImpl_clear0 },
            { "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V", (void *) t_PythonAttributeImpl_copyTo1 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonAttributeImpl_equals2 },
            { "hashCode", "()I", (void *) t_PythonAttributeImpl_hashCode3 },
            { "pythonDecRef", "()V", (void *) t_PythonAttributeImpl_pythonDecRef4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_PythonAttributeImpl::wrap_Object(PythonAttributeImpl(((t_PythonAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          PythonAttributeImpl object((jobject) NULL);

          INT_CALL(object = PythonAttributeImpl());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(::org::apache::lucene::util::AttributeImpl(a0));
          PyObject *result = PyObject_CallMethod(obj, "copyTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "hashCode", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("hashCode", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFileNames::class$ = NULL;
        jmethodID *IndexFileNames::mids$ = NULL;
        bool IndexFileNames::live$ = false;
        ::java::util::regex::Pattern *IndexFileNames::CODEC_FILE_PATTERN = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::GEN_EXTENSION = NULL;
        JArray< ::java::lang::String > *IndexFileNames::INDEX_EXTENSIONS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS_GEN = NULL;

        jclass IndexFileNames::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFileNames");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fileNameFromGeneration_7a384922] = env->getStaticMethodID(cls, "fileNameFromGeneration", "(Ljava/lang/String;Ljava/lang/String;J)Ljava/lang/String;");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_matchesExtension_4a26474e] = env->getStaticMethodID(cls, "matchesExtension", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_parseSegmentName_97a5258f] = env->getStaticMethodID(cls, "parseSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_segmentFileName_af6d27e3] = env->getStaticMethodID(cls, "segmentFileName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripExtension_97a5258f] = env->getStaticMethodID(cls, "stripExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripSegmentName_97a5258f] = env->getStaticMethodID(cls, "stripSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_FILE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "CODEC_FILE_PATTERN", "Ljava/util/regex/Pattern;"));
            COMPOUND_FILE_ENTRIES_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_ENTRIES_EXTENSION", "Ljava/lang/String;"));
            COMPOUND_FILE_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_EXTENSION", "Ljava/lang/String;"));
            GEN_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "GEN_EXTENSION", "Ljava/lang/String;"));
            INDEX_EXTENSIONS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "INDEX_EXTENSIONS", "[Ljava/lang/String;"));
            SEGMENTS = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS", "Ljava/lang/String;"));
            SEGMENTS_GEN = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS_GEN", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String IndexFileNames::fileNameFromGeneration(const ::java::lang::String & a0, const ::java::lang::String & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_fileNameFromGeneration_7a384922], a0.this$, a1.this$, a2));
        }

        ::java::lang::String IndexFileNames::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        jboolean IndexFileNames::matchesExtension(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_matchesExtension_4a26474e], a0.this$, a1.this$);
        }

        ::java::lang::String IndexFileNames::parseSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_parseSegmentName_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::segmentFileName(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_segmentFileName_af6d27e3], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String IndexFileNames::stripExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripExtension_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::stripSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripSegmentName_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexFileNames__methods_[] = {
          DECLARE_METHOD(t_IndexFileNames, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, fileNameFromGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, matchesExtension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseSegmentName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, segmentFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripSegmentName, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFileNames, t_IndexFileNames, ::java::lang::Object, IndexFileNames, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexFileNames::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFileNames), module, "IndexFileNames", 0);
        }

        void t_IndexFileNames::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "class_", make_descriptor(IndexFileNames::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "wrapfn_", make_descriptor(t_IndexFileNames::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexFileNames::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "CODEC_FILE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*IndexFileNames::CODEC_FILE_PATTERN)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_ENTRIES_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "GEN_EXTENSION", make_descriptor(j2p(*IndexFileNames::GEN_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "INDEX_EXTENSIONS", make_descriptor(JArray<jstring>(IndexFileNames::INDEX_EXTENSIONS->this$).wrap()));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS", make_descriptor(j2p(*IndexFileNames::SEGMENTS)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS_GEN", make_descriptor(j2p(*IndexFileNames::SEGMENTS_GEN)));
        }

        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFileNames::initializeClass, 1)))
            return NULL;
          return t_IndexFileNames::wrap_Object(IndexFileNames(((t_IndexFileNames *) arg)->object.this$));
        }
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFileNames::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ssJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::fileNameFromGeneration(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "fileNameFromGeneration", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::matchesExtension(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "matchesExtension", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "parseSegmentName", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::segmentFileName(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "segmentFileName", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripSegmentName", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharFilterFactory::class$ = NULL;
          jmethodID *CharFilterFactory::mids$ = NULL;
          bool CharFilterFactory::live$ = false;

          jclass CharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableCharFilters_03e99967] = env->getStaticMethodID(cls, "availableCharFilters", "()Ljava/util/Set;");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_forName_75151912] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadCharFilters_9110048d] = env->getStaticMethodID(cls, "reloadCharFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set CharFilterFactory::availableCharFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCharFilters_03e99967]));
          }

          ::java::io::Reader CharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          CharFilterFactory CharFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_75151912], a0.this$, a1.this$));
          }

          ::java::lang::Class CharFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void CharFilterFactory::reloadCharFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadCharFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type);
          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg);
          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_CharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, availableCharFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, create, METH_O),
            DECLARE_METHOD(t_CharFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, reloadCharFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharFilterFactory, t_CharFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, CharFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_CharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CharFilterFactory), module, "CharFilterFactory", 0);
          }

          void t_CharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "class_", make_descriptor(CharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CharFilterFactory::wrap_Object(CharFilterFactory(((t_CharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::availableCharFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::forName(a0, a1));
              return t_CharFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::CharFilterFactory::reloadCharFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadCharFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataOutput::class$ = NULL;
        jmethodID *ByteArrayDataOutput::mids$ = NULL;
        bool ByteArrayDataOutput::live$ = false;

        jclass ByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataOutput::ByteArrayDataOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jint ByteArrayDataOutput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void ByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self);
        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data);
        static PyGetSetDef t_ByteArrayDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteArrayDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataOutput, t_ByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, ByteArrayDataOutput, t_ByteArrayDataOutput_init_, 0, 0, t_ByteArrayDataOutput__fields_, 0, 0);

        void t_ByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataOutput), module, "ByteArrayDataOutput", 0);
        }

        void t_ByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "class_", make_descriptor(ByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataOutput::wrap_Object(ByteArrayDataOutput(((t_ByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataOutput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataOutput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataOutput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataOutput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *PrecedenceQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *PrecedenceQueryNodeProcessorPipeline::mids$ = NULL;
              bool PrecedenceQueryNodeProcessorPipeline::live$ = false;

              jclass PrecedenceQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrecedenceQueryNodeProcessorPipeline::PrecedenceQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PrecedenceQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline, PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_PrecedenceQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(PrecedenceQueryNodeProcessorPipeline), module, "PrecedenceQueryNodeProcessorPipeline", 0);
              }

              void t_PrecedenceQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(PrecedenceQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_PrecedenceQueryNodeProcessorPipeline::wrap_Object(PrecedenceQueryNodeProcessorPipeline(((t_PrecedenceQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                PrecedenceQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = PrecedenceQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractFirstPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractFirstPassGroupingCollector::mids$ = NULL;
          bool AbstractFirstPassGroupingCollector::live$ = false;

          jclass AbstractFirstPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d50ac7b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;I)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_1d16f88d] = env->getMethodID(cls, "getTopGroups", "(IZ)Ljava/util/Collection;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_getDocGroupValue_29be6a55] = env->getMethodID(cls, "getDocGroupValue", "(I)Ljava/lang/Object;");
              mids$[mid_copyDocGroupValue_537d5bdf] = env->getMethodID(cls, "copyDocGroupValue", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractFirstPassGroupingCollector::AbstractFirstPassGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d50ac7b4, a0.this$, a1)) {}

          jboolean AbstractFirstPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractFirstPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::java::util::Collection AbstractFirstPassGroupingCollector::getTopGroups(jint a0, jboolean a1) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getTopGroups_1d16f88d], a0, a1));
          }

          void AbstractFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractFirstPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractFirstPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractFirstPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractFirstPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector_init_, 0, 0, t_AbstractFirstPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractFirstPassGroupingCollector::wrap_Object(const AbstractFirstPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractFirstPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractFirstPassGroupingCollector), module, "AbstractFirstPassGroupingCollector", 0);
          }

          void t_AbstractFirstPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractFirstPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractFirstPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractFirstPassGroupingCollector::wrap_Object(AbstractFirstPassGroupingCollector(((t_AbstractFirstPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            AbstractFirstPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractFirstPassGroupingCollector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester$BlenderType::class$ = NULL;
            jmethodID *BlendedInfixSuggester$BlenderType::mids$ = NULL;
            bool BlendedInfixSuggester$BlenderType::live$ = false;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::CUSTOM = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_LINEAR = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL = NULL;

            jclass BlendedInfixSuggester$BlenderType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_ff583aba] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");
                mids$[mid_values_c5f82234] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                CUSTOM = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_LINEAR = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_LINEAR", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_RECIPROCAL = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_RECIPROCAL", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester$BlenderType BlendedInfixSuggester$BlenderType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BlendedInfixSuggester$BlenderType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ff583aba], a0.this$));
            }

            JArray< BlendedInfixSuggester$BlenderType > BlendedInfixSuggester$BlenderType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BlendedInfixSuggester$BlenderType >(env->callStaticObjectMethod(cls, mids$[mid_values_c5f82234]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type);
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data);
            static PyGetSetDef t_BlendedInfixSuggester$BlenderType__fields_[] = {
              DECLARE_GET_FIELD(t_BlendedInfixSuggester$BlenderType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BlendedInfixSuggester$BlenderType__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, of_, METH_VARARGS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester$BlenderType, t_BlendedInfixSuggester$BlenderType, ::java::lang::Enum, BlendedInfixSuggester$BlenderType, abstract_init, 0, 0, t_BlendedInfixSuggester$BlenderType__fields_, 0, 0);
            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_Object(const BlendedInfixSuggester$BlenderType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BlendedInfixSuggester$BlenderType::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester$BlenderType), module, "BlendedInfixSuggester$BlenderType", 0);
            }

            void t_BlendedInfixSuggester$BlenderType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "class_", make_descriptor(BlendedInfixSuggester$BlenderType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester$BlenderType::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "CUSTOM", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::CUSTOM)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_LINEAR", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_LINEAR)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_RECIPROCAL", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL)));
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester$BlenderType::wrap_Object(BlendedInfixSuggester$BlenderType(((t_BlendedInfixSuggester$BlenderType *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BlendedInfixSuggester$BlenderType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::valueOf(a0));
                return t_BlendedInfixSuggester$BlenderType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type)
            {
              JArray< BlendedInfixSuggester$BlenderType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::values());
              return JArray<jobject>(result.this$).wrap(t_BlendedInfixSuggester$BlenderType::wrap_jobject);
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilter::class$ = NULL;
          jmethodID *HyphenatedWordsFilter::mids$ = NULL;
          bool HyphenatedWordsFilter::live$ = false;

          jclass HyphenatedWordsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilter::HyphenatedWordsFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HyphenatedWordsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HyphenatedWordsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args);
          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilter, t_HyphenatedWordsFilter, ::org::apache::lucene::analysis::TokenFilter, HyphenatedWordsFilter, t_HyphenatedWordsFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilter), module, "HyphenatedWordsFilter", 0);
          }

          void t_HyphenatedWordsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "class_", make_descriptor(HyphenatedWordsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilter::wrap_Object(HyphenatedWordsFilter(((t_HyphenatedWordsFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HyphenatedWordsFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HyphenatedWordsFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilter::class$ = NULL;
          jmethodID *HTMLStripCharFilter::mids$ = NULL;
          bool HTMLStripCharFilter::live$ = false;

          jclass HTMLStripCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_2df021b4] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_2df021b4, a0.this$, a1.this$)) {}

          void HTMLStripCharFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jint HTMLStripCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint HTMLStripCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args);
          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilter__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_HTMLStripCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilter, t_HTMLStripCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, HTMLStripCharFilter, t_HTMLStripCharFilter_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilter), module, "HTMLStripCharFilter", 0);
          }

          void t_HTMLStripCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "class_", make_descriptor(HTMLStripCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilter::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilter::wrap_Object(HTMLStripCharFilter(((t_HTMLStripCharFilter *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleFloatFunction::class$ = NULL;
            jmethodID *SimpleFloatFunction::mids$ = NULL;
            bool SimpleFloatFunction::live$ = false;

            jclass SimpleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_func_2223df21] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleFloatFunction::SimpleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::SingleFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues SimpleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args);

            static PyMethodDef t_SimpleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleFloatFunction, t_SimpleFloatFunction, ::org::apache::lucene::queries::function::valuesource::SingleFunction, SimpleFloatFunction, t_SimpleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleFloatFunction), module, "SimpleFloatFunction", 0);
            }

            void t_SimpleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "class_", make_descriptor(SimpleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleFloatFunction::wrap_Object(SimpleFloatFunction(((t_SimpleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$SpanRewriteMethod::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$SpanRewriteMethod::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$SpanRewriteMethod::live$ = false;

          jclass SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$SpanRewriteMethod::SpanMultiTermQueryWrapper$SpanRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$SpanRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_, 0, 0, t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(const SpanMultiTermQueryWrapper$SpanRewriteMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), module, "SpanMultiTermQueryWrapper$SpanRewriteMethod", 0);
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(SpanMultiTermQueryWrapper$SpanRewriteMethod(((t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds)
          {
            SpanMultiTermQueryWrapper$SpanRewriteMethod object((jobject) NULL);

            INT_CALL(object = SpanMultiTermQueryWrapper$SpanRewriteMethod());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLSException::class$ = NULL;
            jmethodID *NLSException::mids$ = NULL;
            bool NLSException::live$ = false;

            jclass NLSException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLSException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message NLSException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_getMessageObject(t_NLSException *self);
            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data);
            static PyGetSetDef t_NLSException__fields_[] = {
              DECLARE_GET_FIELD(t_NLSException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NLSException__methods_[] = {
              DECLARE_METHOD(t_NLSException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLSException, t_NLSException, ::java::lang::Object, NLSException, abstract_init, 0, 0, t_NLSException__fields_, 0, 0);

            void t_NLSException::install(PyObject *module)
            {
              installType(&PY_TYPE(NLSException), module, "NLSException", 0);
            }

            void t_NLSException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "class_", make_descriptor(NLSException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "wrapfn_", make_descriptor(t_NLSException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLSException::initializeClass, 1)))
                return NULL;
              return t_NLSException::wrap_Object(NLSException(((t_NLSException *) arg)->object.this$));
            }
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLSException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLSException_getMessageObject(t_NLSException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilterFactory::class$ = NULL;
          jmethodID *BrazilianStemFilterFactory::mids$ = NULL;
          bool BrazilianStemFilterFactory::live$ = false;

          jclass BrazilianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84777f61] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/br/BrazilianStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilterFactory::BrazilianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::br::BrazilianStemFilter BrazilianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::br::BrazilianStemFilter(env->callObjectMethod(this$, mids$[mid_create_84777f61], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilterFactory, t_BrazilianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BrazilianStemFilterFactory, t_BrazilianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilterFactory), module, "BrazilianStemFilterFactory", 0);
          }

          void t_BrazilianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "class_", make_descriptor(BrazilianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilterFactory::wrap_Object(BrazilianStemFilterFactory(((t_BrazilianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BrazilianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BrazilianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::br::BrazilianStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::br::t_BrazilianStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FieldMaskingSpanQuery::class$ = NULL;
          jmethodID *FieldMaskingSpanQuery::mids$ = NULL;
          bool FieldMaskingSpanQuery::live$ = false;

          jclass FieldMaskingSpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FieldMaskingSpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_58455a11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/lang/String;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMaskedQuery_d3aa0332] = env->getMethodID(cls, "getMaskedQuery", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMaskingSpanQuery::FieldMaskingSpanQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_58455a11, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight FieldMaskingSpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FieldMaskingSpanQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FieldMaskingSpanQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String FieldMaskingSpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery FieldMaskingSpanQuery::getMaskedQuery() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMaskedQuery_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans FieldMaskingSpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint FieldMaskingSpanQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FieldMaskingSpanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FieldMaskingSpanQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self);
          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data);
          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data);
          static PyGetSetDef t_FieldMaskingSpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, field),
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, maskedQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldMaskingSpanQuery__methods_[] = {
            DECLARE_METHOD(t_FieldMaskingSpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getMaskedQuery, METH_NOARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldMaskingSpanQuery, t_FieldMaskingSpanQuery, ::org::apache::lucene::search::spans::SpanQuery, FieldMaskingSpanQuery, t_FieldMaskingSpanQuery_init_, 0, 0, t_FieldMaskingSpanQuery__fields_, 0, 0);

          void t_FieldMaskingSpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMaskingSpanQuery), module, "FieldMaskingSpanQuery", 0);
          }

          void t_FieldMaskingSpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "class_", make_descriptor(FieldMaskingSpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldMaskingSpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMaskingSpanQuery::initializeClass, 1)))
              return NULL;
            return t_FieldMaskingSpanQuery::wrap_Object(FieldMaskingSpanQuery(((t_FieldMaskingSpanQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMaskingSpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            FieldMaskingSpanQuery object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FieldMaskingSpanQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizer::class$ = NULL;
          jmethodID *StandardTokenizer::mids$ = NULL;
          bool StandardTokenizer::live$ = false;
          jint StandardTokenizer::ACRONYM = (jint) 0;
          jint StandardTokenizer::ACRONYM_DEP = (jint) 0;
          jint StandardTokenizer::ALPHANUM = (jint) 0;
          jint StandardTokenizer::APOSTROPHE = (jint) 0;
          jint StandardTokenizer::CJ = (jint) 0;
          jint StandardTokenizer::COMPANY = (jint) 0;
          jint StandardTokenizer::EMAIL = (jint) 0;
          jint StandardTokenizer::HANGUL = (jint) 0;
          jint StandardTokenizer::HIRAGANA = (jint) 0;
          jint StandardTokenizer::HOST = (jint) 0;
          jint StandardTokenizer::IDEOGRAPHIC = (jint) 0;
          jint StandardTokenizer::KATAKANA = (jint) 0;
          jint StandardTokenizer::NUM = (jint) 0;
          jint StandardTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *StandardTokenizer::TOKEN_TYPES = NULL;

          jclass StandardTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              HOST = env->getStaticIntField(cls, "HOST");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void StandardTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void StandardTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint StandardTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean StandardTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void StandardTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void StandardTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self);
          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg);
          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data);
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizer__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizer, t_StandardTokenizer, ::org::apache::lucene::analysis::Tokenizer, StandardTokenizer, t_StandardTokenizer_init_, 0, 0, t_StandardTokenizer__fields_, 0, 0);

          void t_StandardTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizer), module, "StandardTokenizer", 0);
          }

          void t_StandardTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "class_", make_descriptor(StandardTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM", make_descriptor(StandardTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(StandardTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ALPHANUM", make_descriptor(StandardTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "APOSTROPHE", make_descriptor(StandardTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "CJ", make_descriptor(StandardTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "COMPANY", make_descriptor(StandardTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "EMAIL", make_descriptor(StandardTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HANGUL", make_descriptor(StandardTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HIRAGANA", make_descriptor(StandardTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HOST", make_descriptor(StandardTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(StandardTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "KATAKANA", make_descriptor(StandardTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "NUM", make_descriptor(StandardTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(StandardTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(StandardTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizer::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizer::wrap_Object(StandardTokenizer(((t_StandardTokenizer *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/SimpleAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *SimpleAnalyzer::class$ = NULL;
          jmethodID *SimpleAnalyzer::mids$ = NULL;
          bool SimpleAnalyzer::live$ = false;

          jclass SimpleAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/SimpleAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleAnalyzer::SimpleAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SimpleAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SimpleAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleAnalyzer, t_SimpleAnalyzer, ::org::apache::lucene::analysis::Analyzer, SimpleAnalyzer, t_SimpleAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SimpleAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleAnalyzer), module, "SimpleAnalyzer", 0);
          }

          void t_SimpleAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "class_", make_descriptor(SimpleAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SimpleAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SimpleAnalyzer::wrap_Object(SimpleAnalyzer(((t_SimpleAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            SimpleAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              INT_CALL(object = SimpleAnalyzer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsFormat::class$ = NULL;
          jmethodID *CompressingTermVectorsFormat::mids$ = NULL;
          bool CompressingTermVectorsFormat::live$ = false;

          jclass CompressingTermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsFormat::CompressingTermVectorsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String CompressingTermVectorsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter CompressingTermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, toString, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsFormat, t_CompressingTermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, CompressingTermVectorsFormat, t_CompressingTermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsFormat), module, "CompressingTermVectorsFormat", 0);
          }

          void t_CompressingTermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "class_", make_descriptor(CompressingTermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsFormat::wrap_Object(CompressingTermVectorsFormat(((t_CompressingTermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
            jint a3;
            CompressingTermVectorsFormat object((jobject) NULL);

            if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = CompressingTermVectorsFormat(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/Facets.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *Facets::class$ = NULL;
        jmethodID *Facets::mids$ = NULL;
        bool Facets::live$ = false;

        jclass Facets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/Facets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Facets::Facets() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List Facets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number Facets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult Facets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg);
        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args);
        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args);

        static PyMethodDef t_Facets__methods_[] = {
          DECLARE_METHOD(t_Facets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, getAllDims, METH_O),
          DECLARE_METHOD(t_Facets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_Facets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Facets, t_Facets, ::java::lang::Object, Facets, t_Facets_init_, 0, 0, 0, 0, 0);

        void t_Facets::install(PyObject *module)
        {
          installType(&PY_TYPE(Facets), module, "Facets", 0);
        }

        void t_Facets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "class_", make_descriptor(Facets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "wrapfn_", make_descriptor(t_Facets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Facets::initializeClass, 1)))
            return NULL;
          return t_Facets::wrap_Object(Facets(((t_Facets *) arg)->object.this$));
        }
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Facets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds)
        {
          Facets object((jobject) NULL);

          INT_CALL(object = Facets());
          self->object = object;

          return 0;
        }

        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          PyErr_SetArgsError((PyObject *) self, "getAllDims", arg);
          return NULL;
        }

        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSpecificValue", args);
          return NULL;
        }

        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTopChildren", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/LongDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *LongDocValues::class$ = NULL;
            jmethodID *LongDocValues::mids$ = NULL;
            bool LongDocValues::live$ = false;

            jclass LongDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/LongDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongDocValues::LongDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean LongDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte LongDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble LongDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat LongDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer LongDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller LongDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint LongDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong LongDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object LongDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort LongDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String LongDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String LongDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data);
            static PyGetSetDef t_LongDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_LongDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LongDocValues__methods_[] = {
              DECLARE_METHOD(t_LongDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongDocValues, t_LongDocValues, ::org::apache::lucene::queries::function::FunctionValues, LongDocValues, t_LongDocValues_init_, 0, 0, t_LongDocValues__fields_, 0, 0);

            void t_LongDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(LongDocValues), module, "LongDocValues", 0);
            }

            void t_LongDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "class_", make_descriptor(LongDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "wrapfn_", make_descriptor(t_LongDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongDocValues::initializeClass, 1)))
                return NULL;
              return t_LongDocValues::wrap_Object(LongDocValues(((t_LongDocValues *) arg)->object.this$));
            }
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              LongDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = LongDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$UnCompiledNode::class$ = NULL;
          jmethodID *Builder$UnCompiledNode::mids$ = NULL;
          jfieldID *Builder$UnCompiledNode::fids$ = NULL;
          bool Builder$UnCompiledNode::live$ = false;

          jclass Builder$UnCompiledNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$UnCompiledNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_343134b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Builder;I)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_getLastOutput_29be6a55] = env->getMethodID(cls, "getLastOutput", "(I)Ljava/lang/Object;");
              mids$[mid_isCompiled_54c6a16a] = env->getMethodID(cls, "isCompiled", "()Z");
              mids$[mid_prependOutput_290588ee] = env->getMethodID(cls, "prependOutput", "(Ljava/lang/Object;)V");
              mids$[mid_setLastOutput_f7cd74a4] = env->getMethodID(cls, "setLastOutput", "(ILjava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcs] = env->getFieldID(cls, "arcs", "[Lorg/apache/lucene/util/fst/Builder$Arc;");
              fids$[fid_depth] = env->getFieldID(cls, "depth", "I");
              fids$[fid_inputCount] = env->getFieldID(cls, "inputCount", "J");
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_numArcs] = env->getFieldID(cls, "numArcs", "I");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$UnCompiledNode::Builder$UnCompiledNode(const ::org::apache::lucene::util::fst::Builder & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_343134b4, a0.this$, a1)) {}

          void Builder$UnCompiledNode::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          ::java::lang::Object Builder$UnCompiledNode::getLastOutput(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLastOutput_29be6a55], a0));
          }

          jboolean Builder$UnCompiledNode::isCompiled() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCompiled_54c6a16a]);
          }

          void Builder$UnCompiledNode::prependOutput(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_prependOutput_290588ee], a0.this$);
          }

          void Builder$UnCompiledNode::setLastOutput(jint a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastOutput_f7cd74a4], a0, a1.this$);
          }

          JArray< ::org::apache::lucene::util::fst::Builder$Arc > Builder$UnCompiledNode::_get_arcs() const
          {
            return JArray< ::org::apache::lucene::util::fst::Builder$Arc >(env->getObjectField(this$, fids$[fid_arcs]));
          }

          void Builder$UnCompiledNode::_set_arcs(const JArray< ::org::apache::lucene::util::fst::Builder$Arc > & a0) const
          {
            env->setObjectField(this$, fids$[fid_arcs], a0.this$);
          }

          jint Builder$UnCompiledNode::_get_depth() const
          {
            return env->getIntField(this$, fids$[fid_depth]);
          }

          jlong Builder$UnCompiledNode::_get_inputCount() const
          {
            return env->getLongField(this$, fids$[fid_inputCount]);
          }

          void Builder$UnCompiledNode::_set_inputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_inputCount], a0);
          }

          jboolean Builder$UnCompiledNode::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$UnCompiledNode::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$UnCompiledNode::_get_numArcs() const
          {
            return env->getIntField(this$, fids$[fid_numArcs]);
          }

          void Builder$UnCompiledNode::_set_numArcs(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numArcs], a0);
          }

          ::java::lang::Object Builder$UnCompiledNode::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$UnCompiledNode::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args);
          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args);
          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data);
          static PyGetSetDef t_Builder$UnCompiledNode__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, arcs),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, depth),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, inputCount),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, numArcs),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, output),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, compiled),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$UnCompiledNode__methods_[] = {
            DECLARE_METHOD(t_Builder$UnCompiledNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, clear, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, getLastOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, isCompiled, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, prependOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, setLastOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$UnCompiledNode, t_Builder$UnCompiledNode, ::java::lang::Object, Builder$UnCompiledNode, t_Builder$UnCompiledNode_init_, 0, 0, t_Builder$UnCompiledNode__fields_, 0, 0);
          PyObject *t_Builder$UnCompiledNode::wrap_Object(const Builder$UnCompiledNode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$UnCompiledNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$UnCompiledNode::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$UnCompiledNode), module, "Builder$UnCompiledNode", 0);
          }

          void t_Builder$UnCompiledNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "class_", make_descriptor(Builder$UnCompiledNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "wrapfn_", make_descriptor(t_Builder$UnCompiledNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$UnCompiledNode::initializeClass, 1)))
              return NULL;
            return t_Builder$UnCompiledNode::wrap_Object(Builder$UnCompiledNode(((t_Builder$UnCompiledNode *) arg)->object.this$));
          }
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$UnCompiledNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Builder a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            Builder$UnCompiledNode object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::fst::Builder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder::parameters_, &a1))
            {
              INT_CALL(object = Builder$UnCompiledNode(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getLastOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getLastOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCompiled());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(self->object.prependOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "prependOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.setLastOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastOutput", args);
            return NULL;
          }
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arcs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::fst::t_Builder$Arc::wrap_jobject);
          }
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::fst::Builder$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_depth());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_inputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_inputCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "inputCount", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numArcs());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numArcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numArcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCompiled());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilterFactory::class$ = NULL;
          jmethodID *ClassicFilterFactory::mids$ = NULL;
          bool ClassicFilterFactory::live$ = false;

          jclass ClassicFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilterFactory::ClassicFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter ClassicFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args);

          static PyMethodDef t_ClassicFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilterFactory, t_ClassicFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ClassicFilterFactory, t_ClassicFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilterFactory), module, "ClassicFilterFactory", 0);
          }

          void t_ClassicFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "class_", make_descriptor(ClassicFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicFilterFactory::wrap_Object(ClassicFilterFactory(((t_ClassicFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Header::class$ = NULL;
          jmethodID *PackedInts$Header::mids$ = NULL;
          bool PackedInts$Header::live$ = false;

          jclass PackedInts$Header::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Header");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a0813c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;III)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Header::PackedInts$Header(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46a0813c, a0.this$, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PackedInts$Header__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Header, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Header, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Header, t_PackedInts$Header, ::java::lang::Object, PackedInts$Header, t_PackedInts$Header_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Header::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Header), module, "PackedInts$Header", 0);
          }

          void t_PackedInts$Header::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "class_", make_descriptor(PackedInts$Header::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Header::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Header::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Header::wrap_Object(PackedInts$Header(((t_PackedInts$Header *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Header::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            jint a3;
            PackedInts$Header object((jobject) NULL);

            if (!parseArgs(args, "KIII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = PackedInts$Header(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Parser::class$ = NULL;
          jmethodID *SynonymMap$Parser::mids$ = NULL;
          bool SynonymMap$Parser::live$ = false;

          jclass SynonymMap$Parser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Parser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8ce78b37] = env->getMethodID(cls, "<init>", "(ZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_analyze_f51a472d] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Parser::SynonymMap$Parser(jboolean a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::analysis::synonym::SynonymMap$Builder(env->newObject(initializeClass, &mids$, mid_init$_8ce78b37, a0, a1.this$)) {}

          ::org::apache::lucene::util::CharsRef SynonymMap$Parser::analyze(const ::java::lang::String & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_analyze_f51a472d], a0.this$, a1.this$));
          }

          void SynonymMap$Parser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args);
          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg);

          static PyMethodDef t_SynonymMap$Parser__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Parser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, analyze, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Parser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Parser, t_SynonymMap$Parser, ::org::apache::lucene::analysis::synonym::SynonymMap$Builder, SynonymMap$Parser, t_SynonymMap$Parser_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Parser::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Parser), module, "SynonymMap$Parser", 0);
          }

          void t_SynonymMap$Parser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "class_", make_descriptor(SynonymMap$Parser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Parser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Parser::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Parser::wrap_Object(SynonymMap$Parser(((t_SynonymMap$Parser *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Parser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            SynonymMap$Parser object((jobject) NULL);

            if (!parseArgs(args, "Zk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SynonymMap$Parser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.analyze(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "analyze", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilter::class$ = NULL;
          jmethodID *PortugueseLightStemFilter::mids$ = NULL;
          bool PortugueseLightStemFilter::live$ = false;

          jclass PortugueseLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilter::PortugueseLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilter, t_PortugueseLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseLightStemFilter, t_PortugueseLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilter), module, "PortugueseLightStemFilter", 0);
          }

          void t_PortugueseLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "class_", make_descriptor(PortugueseLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilter::wrap_Object(PortugueseLightStemFilter(((t_PortugueseLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicStats::class$ = NULL;
          jmethodID *BasicStats::mids$ = NULL;
          bool BasicStats::live$ = false;

          jclass BasicStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getAvgFieldLength_54c6a176] = env->getMethodID(cls, "getAvgFieldLength", "()F");
              mids$[mid_getDocFreq_54c6a17a] = env->getMethodID(cls, "getDocFreq", "()J");
              mids$[mid_getNumberOfDocuments_54c6a17a] = env->getMethodID(cls, "getNumberOfDocuments", "()J");
              mids$[mid_getNumberOfFieldTokens_54c6a17a] = env->getMethodID(cls, "getNumberOfFieldTokens", "()J");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_getTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getTotalTermFreq", "()J");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_setAvgFieldLength_06298cab] = env->getMethodID(cls, "setAvgFieldLength", "(F)V");
              mids$[mid_setDocFreq_0ee6df2f] = env->getMethodID(cls, "setDocFreq", "(J)V");
              mids$[mid_setNumberOfDocuments_0ee6df2f] = env->getMethodID(cls, "setNumberOfDocuments", "(J)V");
              mids$[mid_setNumberOfFieldTokens_0ee6df2f] = env->getMethodID(cls, "setNumberOfFieldTokens", "(J)V");
              mids$[mid_setTotalTermFreq_0ee6df2f] = env->getMethodID(cls, "setTotalTermFreq", "(J)V");
              mids$[mid_rawNormalizationValue_54c6a176] = env->getMethodID(cls, "rawNormalizationValue", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicStats::BasicStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat BasicStats::getAvgFieldLength() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAvgFieldLength_54c6a176]);
          }

          jlong BasicStats::getDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getDocFreq_54c6a17a]);
          }

          jlong BasicStats::getNumberOfDocuments() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfDocuments_54c6a17a]);
          }

          jlong BasicStats::getNumberOfFieldTokens() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfFieldTokens_54c6a17a]);
          }

          jfloat BasicStats::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          jlong BasicStats::getTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotalTermFreq_54c6a17a]);
          }

          jfloat BasicStats::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void BasicStats::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          void BasicStats::setAvgFieldLength(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAvgFieldLength_06298cab], a0);
          }

          void BasicStats::setDocFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDocFreq_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfDocuments(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfDocuments_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfFieldTokens(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfFieldTokens_0ee6df2f], a0);
          }

          void BasicStats::setTotalTermFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTotalTermFreq_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self);
          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data);
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data);
          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data);
          static PyGetSetDef t_BasicStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_BasicStats, avgFieldLength),
            DECLARE_GETSET_FIELD(t_BasicStats, docFreq),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfDocuments),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfFieldTokens),
            DECLARE_GET_FIELD(t_BasicStats, totalBoost),
            DECLARE_GETSET_FIELD(t_BasicStats, totalTermFreq),
            DECLARE_GET_FIELD(t_BasicStats, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasicStats__methods_[] = {
            DECLARE_METHOD(t_BasicStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, getAvgFieldLength, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfDocuments, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfFieldTokens, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, normalize, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, setAvgFieldLength, METH_O),
            DECLARE_METHOD(t_BasicStats, setDocFreq, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfDocuments, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfFieldTokens, METH_O),
            DECLARE_METHOD(t_BasicStats, setTotalTermFreq, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicStats, t_BasicStats, ::org::apache::lucene::search::similarities::Similarity$SimWeight, BasicStats, t_BasicStats_init_, 0, 0, t_BasicStats__fields_, 0, 0);

          void t_BasicStats::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicStats), module, "BasicStats", 0);
          }

          void t_BasicStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "class_", make_descriptor(BasicStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "wrapfn_", make_descriptor(t_BasicStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicStats::initializeClass, 1)))
              return NULL;
            return t_BasicStats::wrap_Object(BasicStats(((t_BasicStats *) arg)->object.this$));
          }
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            BasicStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = BasicStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAvgFieldLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAvgFieldLength", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfDocuments(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfDocuments", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfFieldTokens(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfFieldTokens", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setTotalTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTotalTermFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) value);
          }
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAvgFieldLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "avgFieldLength", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfDocuments(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfDocuments", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfFieldTokens(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfFieldTokens", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setTotalTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *DummyQueryNodeBuilder::class$ = NULL;
              jmethodID *DummyQueryNodeBuilder::mids$ = NULL;
              bool DummyQueryNodeBuilder::live$ = false;

              jclass DummyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DummyQueryNodeBuilder::DummyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery DummyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_DummyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_DummyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DummyQueryNodeBuilder, t_DummyQueryNodeBuilder, ::java::lang::Object, DummyQueryNodeBuilder, t_DummyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_DummyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(DummyQueryNodeBuilder), module, "DummyQueryNodeBuilder", 0);
              }

              void t_DummyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "class_", make_descriptor(DummyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_DummyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DummyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_DummyQueryNodeBuilder::wrap_Object(DummyQueryNodeBuilder(((t_DummyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DummyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                DummyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = DummyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *QueryBuilder::class$ = NULL;
        jmethodID *QueryBuilder::mids$ = NULL;
        bool QueryBuilder::live$ = false;

        jclass QueryBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/QueryBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_createBooleanQuery_38d6e77e] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createBooleanQuery_6523fcfc] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createMinShouldMatchQuery_45995161] = env->getMethodID(cls, "createMinShouldMatchQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_38d6e77e] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_c7c8d9a8] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
            mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
            mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newBooleanQuery_71c47e3e] = env->getMethodID(cls, "newBooleanQuery", "(Z)Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createFieldQuery_da240c4d] = env->getMethodID(cls, "createFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/BooleanClause$Occur;Ljava/lang/String;Ljava/lang/String;ZI)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPhraseQuery_c05a65af] = env->getMethodID(cls, "newPhraseQuery", "()Lorg/apache/lucene/search/PhraseQuery;");
            mids$[mid_newMultiPhraseQuery_4a09b2bb] = env->getMethodID(cls, "newMultiPhraseQuery", "()Lorg/apache/lucene/search/MultiPhraseQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryBuilder::QueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::BooleanClause$Occur & a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_6523fcfc], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createMinShouldMatchQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createMinShouldMatchQuery_45995161], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_c7c8d9a8], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::analysis::Analyzer QueryBuilder::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean QueryBuilder::getEnablePositionIncrements() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
        }

        void QueryBuilder::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
        }

        void QueryBuilder::setEnablePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_QueryBuilder__fields_[] = {
          DECLARE_GETSET_FIELD(t_QueryBuilder, analyzer),
          DECLARE_GETSET_FIELD(t_QueryBuilder, enablePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryBuilder__methods_[] = {
          DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, createBooleanQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createMinShouldMatchQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createPhraseQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getEnablePositionIncrements, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, setAnalyzer, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setEnablePositionIncrements, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, t_QueryBuilder_init_, 0, 0, t_QueryBuilder__fields_, 0, 0);

        void t_QueryBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
        }

        void t_QueryBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
            return NULL;
          return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
        }
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          QueryBuilder object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            INT_CALL(object = QueryBuilder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createBooleanQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createMinShouldMatchQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createMinShouldMatchQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssI", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createPhraseQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setAnalyzer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setEnablePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
            {
              INT_CALL(self->object.setAnalyzer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setEnablePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH2.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH2::class$ = NULL;
          jmethodID *NormalizationH2::mids$ = NULL;
          bool NormalizationH2::live$ = false;

          jclass NormalizationH2::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH2");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH2::NormalizationH2() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH2::NormalizationH2(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH2::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH2::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH2::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self);
          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data);
          static PyGetSetDef t_NormalizationH2__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH2, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH2__methods_[] = {
            DECLARE_METHOD(t_NormalizationH2, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH2, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH2, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH2, t_NormalizationH2, ::org::apache::lucene::search::similarities::Normalization, NormalizationH2, t_NormalizationH2_init_, 0, 0, t_NormalizationH2__fields_, 0, 0);

          void t_NormalizationH2::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH2), module, "NormalizationH2", 0);
          }

          void t_NormalizationH2::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "class_", make_descriptor(NormalizationH2::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH2::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH2::initializeClass, 1)))
              return NULL;
            return t_NormalizationH2::wrap_Object(NormalizationH2(((t_NormalizationH2 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH2::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH2 object((jobject) NULL);

                INT_CALL(object = NormalizationH2());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH2 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH2(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilter::class$ = NULL;
          jmethodID *CodepointCountFilter::mids$ = NULL;
          bool CodepointCountFilter::live$ = false;

          jclass CodepointCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilter::CodepointCountFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean CodepointCountFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self);

          static PyMethodDef t_CodepointCountFilter__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilter, t_CodepointCountFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, CodepointCountFilter, t_CodepointCountFilter_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilter), module, "CodepointCountFilter", 0);
          }

          void t_CodepointCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "class_", make_descriptor(CodepointCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilter::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilter::wrap_Object(CodepointCountFilter(((t_CodepointCountFilter *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            jint a2;
            jint a3;
            CodepointCountFilter object((jobject) NULL);

            if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = CodepointCountFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$LongComparator::class$ = NULL;
        jmethodID *FieldComparator$LongComparator::mids$ = NULL;
        bool FieldComparator$LongComparator::live$ = false;

        jclass FieldComparator$LongComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$LongComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6072141] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Long;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_da558031] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Long;)V");
            mids$[mid_value_67140e92] = env->getMethodID(cls, "value", "(I)Ljava/lang/Long;");
            mids$[mid_getLongValues_8288bb5d] = env->getMethodID(cls, "getLongValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Longs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$LongComparator::FieldComparator$LongComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Long & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_a6072141, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$LongComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$LongComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$LongComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$LongComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$LongComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$LongComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$LongComparator::setTopValue(const ::java::lang::Long & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_da558031], a0.this$);
        }

        ::java::lang::Long FieldComparator$LongComparator::value(jint a0) const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_value_67140e92], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$LongComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$LongComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$LongComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$LongComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$LongComparator, t_FieldComparator$LongComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$LongComparator, t_FieldComparator$LongComparator_init_, 0, 0, t_FieldComparator$LongComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$LongComparator::wrap_Object(const FieldComparator$LongComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$LongComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$LongComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$LongComparator), module, "FieldComparator$LongComparator", 0);
        }

        void t_FieldComparator$LongComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "class_", make_descriptor(FieldComparator$LongComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$LongComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$LongComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$LongComparator::wrap_Object(FieldComparator$LongComparator(((t_FieldComparator$LongComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$LongComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Long a3((jobject) NULL);
          FieldComparator$LongComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$LongComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Long);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Long));
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::java::lang::Long a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Long result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Long::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Long value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizer::class$ = NULL;
          jmethodID *CJKTokenizer::mids$ = NULL;
          bool CJKTokenizer::live$ = false;

          jclass CJKTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizer::CJKTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          CJKTokenizer::CJKTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void CJKTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CJKTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args);

          static PyMethodDef t_CJKTokenizer__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizer, t_CJKTokenizer, ::org::apache::lucene::analysis::Tokenizer, CJKTokenizer, t_CJKTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizer), module, "CJKTokenizer", 0);
          }

          void t_CJKTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "class_", make_descriptor(CJKTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizer::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizer::wrap_Object(CJKTokenizer(((t_CJKTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = CJKTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DocIdBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/BitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DocIdBitSet::class$ = NULL;
        jmethodID *DocIdBitSet::mids$ = NULL;
        bool DocIdBitSet::live$ = false;

        jclass DocIdBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DocIdBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c8849d64] = env->getMethodID(cls, "<init>", "(Ljava/util/BitSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getBitSet_59c0eb4d] = env->getMethodID(cls, "getBitSet", "()Ljava/util/BitSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdBitSet::DocIdBitSet(const ::java::util::BitSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c8849d64, a0.this$)) {}

        ::org::apache::lucene::util::Bits DocIdBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        ::java::util::BitSet DocIdBitSet::getBitSet() const
        {
          return ::java::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_59c0eb4d]));
        }

        jboolean DocIdBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint DocIdBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jlong DocIdBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg);
        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data);
        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data);
        static PyGetSetDef t_DocIdBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdBitSet, bitSet),
          DECLARE_GET_FIELD(t_DocIdBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdBitSet__methods_[] = {
          DECLARE_METHOD(t_DocIdBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, get, METH_O),
          DECLARE_METHOD(t_DocIdBitSet, getBitSet, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdBitSet, t_DocIdBitSet, ::org::apache::lucene::search::DocIdSet, DocIdBitSet, t_DocIdBitSet_init_, 0, 0, t_DocIdBitSet__fields_, 0, 0);

        void t_DocIdBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdBitSet), module, "DocIdBitSet", 0);
        }

        void t_DocIdBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "class_", make_descriptor(DocIdBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdBitSet::initializeClass, 1)))
            return NULL;
          return t_DocIdBitSet::wrap_Object(DocIdBitSet(((t_DocIdBitSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::BitSet a0((jobject) NULL);
          DocIdBitSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::BitSet::initializeClass, &a0))
          {
            INT_CALL(object = DocIdBitSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self)
        {
          ::java::util::BitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(result);
        }

        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data)
        {
          ::java::util::BitSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(value);
        }

        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IdentityEncoder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IdentityEncoder::class$ = NULL;
          jmethodID *IdentityEncoder::mids$ = NULL;
          bool IdentityEncoder::live$ = false;

          jclass IdentityEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IdentityEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IdentityEncoder::IdentityEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IdentityEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args);

          static PyMethodDef t_IdentityEncoder__methods_[] = {
            DECLARE_METHOD(t_IdentityEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IdentityEncoder, t_IdentityEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IdentityEncoder, t_IdentityEncoder_init_, 0, 0, 0, 0, 0);

          void t_IdentityEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IdentityEncoder), module, "IdentityEncoder", 0);
          }

          void t_IdentityEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "class_", make_descriptor(IdentityEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "wrapfn_", make_descriptor(t_IdentityEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IdentityEncoder::initializeClass, 1)))
              return NULL;
            return t_IdentityEncoder::wrap_Object(IdentityEncoder(((t_IdentityEncoder *) arg)->object.this$));
          }
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IdentityEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds)
          {
            IdentityEncoder object((jobject) NULL);

            INT_CALL(object = IdentityEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IdentityEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Reader.h"
#include "java/io/InputStream.h"
#include "java/lang/Iterable.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils::class$ = NULL;
        jmethodID *IOUtils::mids$ = NULL;
        bool IOUtils::live$ = false;
        ::java::lang::String *IOUtils::UTF_8 = NULL;

        jclass IOUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_d1cac205] = env->getStaticMethodID(cls, "close", "(Ljava/lang/Iterable;)V");
            mids$[mid_close_ddf1c8f2] = env->getStaticMethodID(cls, "close", "([Ljava/io/Closeable;)V");
            mids$[mid_closeWhileHandlingException_d1cac205] = env->getStaticMethodID(cls, "closeWhileHandlingException", "(Ljava/lang/Iterable;)V");
            mids$[mid_closeWhileHandlingException_ddf1c8f2] = env->getStaticMethodID(cls, "closeWhileHandlingException", "([Ljava/io/Closeable;)V");
            mids$[mid_copy_ffd62126] = env->getStaticMethodID(cls, "copy", "(Ljava/io/File;Ljava/io/File;)V");
            mids$[mid_deleteFilesIgnoringExceptions_d7029dd8] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Lorg/apache/lucene/store/Directory;[Ljava/lang/String;)V");
            mids$[mid_fsync_9e00f624] = env->getStaticMethodID(cls, "fsync", "(Ljava/io/File;Z)V");
            mids$[mid_reThrow_c5ec8ca4] = env->getStaticMethodID(cls, "reThrow", "(Ljava/lang/Throwable;)V");
            mids$[mid_reThrowUnchecked_c5ec8ca4] = env->getStaticMethodID(cls, "reThrowUnchecked", "(Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            UTF_8 = new ::java::lang::String(env->getStaticObjectField(cls, "UTF_8", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IOUtils::close(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_d1cac205], a0.this$);
        }

        void IOUtils::close(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_ddf1c8f2], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_d1cac205], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_ddf1c8f2], a0.this$);
        }

        void IOUtils::copy(const ::java::io::File & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_copy_ffd62126], a0.this$, a1.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::org::apache::lucene::store::Directory & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_d7029dd8], a0.this$, a1.this$);
        }

        void IOUtils::fsync(const ::java::io::File & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_fsync_9e00f624], a0.this$, a1);
        }

        void IOUtils::reThrow(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrow_c5ec8ca4], a0.this$);
        }

        void IOUtils::reThrowUnchecked(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrowUnchecked_c5ec8ca4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IOUtils__methods_[] = {
          DECLARE_METHOD(t_IOUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, close, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, closeWhileHandlingException, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, copy, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFilesIgnoringExceptions, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, fsync, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrow, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrowUnchecked, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOUtils, t_IOUtils, ::java::lang::Object, IOUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_IOUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils), module, "IOUtils", 0);
        }

        void t_IOUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "class_", make_descriptor(IOUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "wrapfn_", make_descriptor(t_IOUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "UTF_8", make_descriptor(j2p(*IOUtils::UTF_8)));
        }

        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils::initializeClass, 1)))
            return NULL;
          return t_IOUtils::wrap_Object(IOUtils(((t_IOUtils *) arg)->object.this$));
        }
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "close", args);
          return NULL;
        }

        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "closeWhileHandlingException", args);
          return NULL;
        }

        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "copy", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);

          if (!parseArgs(args, "k[s", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "deleteFilesIgnoringExceptions", args);
          return NULL;
        }

        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::fsync(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "fsync", args);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrow", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrowUnchecked(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrowUnchecked", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermIndexStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermIndexStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermIndexStatus::fids$ = NULL;
        bool CheckIndex$Status$TermIndexStatus::live$ = false;

        jclass CheckIndex$Status$TermIndexStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermIndexStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockTreeStats] = env->getFieldID(cls, "blockTreeStats", "Ljava/util/Map;");
            fids$[fid_delTermCount] = env->getFieldID(cls, "delTermCount", "J");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_termCount] = env->getFieldID(cls, "termCount", "J");
            fids$[fid_totFreq] = env->getFieldID(cls, "totFreq", "J");
            fids$[fid_totPos] = env->getFieldID(cls, "totPos", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Map CheckIndex$Status$TermIndexStatus::_get_blockTreeStats() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_blockTreeStats]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_blockTreeStats(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_blockTreeStats], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_delTermCount() const
        {
          return env->getLongField(this$, fids$[fid_delTermCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_delTermCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_delTermCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermIndexStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_termCount() const
        {
          return env->getLongField(this$, fids$[fid_termCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_termCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_termCount], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totFreq() const
        {
          return env->getLongField(this$, fids$[fid_totFreq]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFreq], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totPos() const
        {
          return env->getLongField(this$, fids$[fid_totPos]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totPos(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totPos], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermIndexStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, blockTreeStats),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, delTermCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, termCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totFreq),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totPos),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermIndexStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermIndexStatus, t_CheckIndex$Status$TermIndexStatus, ::java::lang::Object, CheckIndex$Status$TermIndexStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermIndexStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermIndexStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermIndexStatus), module, "CheckIndex$Status$TermIndexStatus", 0);
        }

        void t_CheckIndex$Status$TermIndexStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermIndexStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermIndexStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermIndexStatus::wrap_Object(CheckIndex$Status$TermIndexStatus(((t_CheckIndex$Status$TermIndexStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_blockTreeStats());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_blockTreeStats(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockTreeStats", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_delTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_delTermCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delTermCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_termCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_termCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFreq", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totPos());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totPos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totPos", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndQuery::class$ = NULL;
            jmethodID *SrndQuery::mids$ = NULL;
            bool SrndQuery::live$ = false;
            ::org::apache::lucene::search::Query *SrndQuery::theEmptyLcnQuery = NULL;

            jclass SrndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clone_26528772] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
                mids$[mid_getWeightOperator_14c7b5c5] = env->getMethodID(cls, "getWeightOperator", "()Ljava/lang/String;");
                mids$[mid_getWeightString_14c7b5c5] = env->getMethodID(cls, "getWeightString", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isWeighted_54c6a16a] = env->getMethodID(cls, "isWeighted", "()Z");
                mids$[mid_makeLuceneQueryField_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_weightToString_9f94ae34] = env->getMethodID(cls, "weightToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                theEmptyLcnQuery = new ::org::apache::lucene::search::Query(env->getStaticObjectField(cls, "theEmptyLcnQuery", "Lorg/apache/lucene/search/Query;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndQuery::SrndQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            SrndQuery SrndQuery::clone() const
            {
              return SrndQuery(env->callObjectMethod(this$, mids$[mid_clone_26528772]));
            }

            jboolean SrndQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat SrndQuery::getWeight() const
            {
              return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
            }

            ::java::lang::String SrndQuery::getWeightOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightOperator_14c7b5c5]));
            }

            ::java::lang::String SrndQuery::getWeightString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightString_14c7b5c5]));
            }

            jint SrndQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            jboolean SrndQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean SrndQuery::isWeighted() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isWeighted_54c6a16a]);
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryField_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            void SrndQuery::setWeight(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
            }

            ::java::lang::String SrndQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndQuery_clone(t_SrndQuery *self);
            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self);
            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self);
            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self);
            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg);
            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data);
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data);
            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data);
            static PyGetSetDef t_SrndQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndQuery, fieldsSubQueryAcceptable),
              DECLARE_GETSET_FIELD(t_SrndQuery, weight),
              DECLARE_GET_FIELD(t_SrndQuery, weightOperator),
              DECLARE_GET_FIELD(t_SrndQuery, weightString),
              DECLARE_GET_FIELD(t_SrndQuery, weighted),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndQuery__methods_[] = {
              DECLARE_METHOD(t_SrndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, clone, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, getWeight, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightString, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, isFieldsSubQueryAcceptable, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, isWeighted, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryField, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, setWeight, METH_O),
              DECLARE_METHOD(t_SrndQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndQuery, t_SrndQuery, ::java::lang::Object, SrndQuery, t_SrndQuery_init_, 0, 0, t_SrndQuery__fields_, 0, 0);

            void t_SrndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndQuery), module, "SrndQuery", 0);
            }

            void t_SrndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "class_", make_descriptor(SrndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(SrndQuery::initializeClass);
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "theEmptyLcnQuery", make_descriptor(::org::apache::lucene::search::t_Query::wrap_Object(*SrndQuery::theEmptyLcnQuery)));
            }

            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndQuery::initializeClass, 1)))
                return NULL;
              return t_SrndQuery::wrap_Object(SrndQuery(((t_SrndQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds)
            {
              SrndQuery object((jobject) NULL);

              INT_CALL(object = SrndQuery());
              self->object = object;

              return 0;
            }

            static PyObject *t_SrndQuery_clone(t_SrndQuery *self)
            {
              SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getWeight());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightOperator());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightString());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isWeighted());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryField(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryField", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryFieldNoBoost", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setWeight(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
              return NULL;
            }

            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getWeight());
              return PyFloat_FromDouble((double) value);
            }
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setWeight(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "weight", arg);
              return -1;
            }

            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightOperator());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightString());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isWeighted());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$DiskOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$DiskOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$DiskOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$DiskOrdinalMap::DirectoryTaxonomyWriter$DiskOrdinalMap(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$DiskOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), module, "DirectoryTaxonomyWriter$DiskOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$DiskOrdinalMap(((t_DirectoryTaxonomyWriter$DiskOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::File a0((jobject) NULL);
              DirectoryTaxonomyWriter$DiskOrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = DirectoryTaxonomyWriter$DiskOrdinalMap(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DocFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DocFreqValueSource::class$ = NULL;
            jmethodID *DocFreqValueSource::mids$ = NULL;
            bool DocFreqValueSource::live$ = false;

            jclass DocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocFreqValueSource::DocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void DocFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String DocFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self);

            static PyMethodDef t_DocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_DocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocFreqValueSource, t_DocFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, DocFreqValueSource, t_DocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_DocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DocFreqValueSource), module, "DocFreqValueSource", 0);
            }

            void t_DocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "class_", make_descriptor(DocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_DocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_DocFreqValueSource::wrap_Object(DocFreqValueSource(((t_DocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter::class$ = NULL;
        jmethodID *OfflineSorter::mids$ = NULL;
        bool OfflineSorter::live$ = false;
        jlong OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE = (jlong) 0;
        ::java::util::Comparator *OfflineSorter::DEFAULT_COMPARATOR = NULL;
        jlong OfflineSorter::GB = (jlong) 0;
        jint OfflineSorter::MAX_TEMPFILES = (jint) 0;
        jlong OfflineSorter::MB = (jlong) 0;
        jlong OfflineSorter::MIN_BUFFER_SIZE_MB = (jlong) 0;

        jclass OfflineSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
            mids$[mid_init$_22c0d43b] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;Lorg/apache/lucene/util/OfflineSorter$BufferSize;Ljava/io/File;I)V");
            mids$[mid_defaultTempDir_a8eb7bbe] = env->getStaticMethodID(cls, "defaultTempDir", "()Ljava/io/File;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_sort_c917fc5b] = env->getMethodID(cls, "sort", "(Ljava/io/File;Ljava/io/File;)Lorg/apache/lucene/util/OfflineSorter$SortInfo;");
            mids$[mid_sortPartition_5a7c7338] = env->getMethodID(cls, "sortPartition", "(I)Ljava/io/File;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ABSOLUTE_MIN_SORT_BUFFER_SIZE = env->getStaticLongField(cls, "ABSOLUTE_MIN_SORT_BUFFER_SIZE");
            DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
            GB = env->getStaticLongField(cls, "GB");
            MAX_TEMPFILES = env->getStaticIntField(cls, "MAX_TEMPFILES");
            MB = env->getStaticLongField(cls, "MB");
            MIN_BUFFER_SIZE_MB = env->getStaticLongField(cls, "MIN_BUFFER_SIZE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter::OfflineSorter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0, const ::org::apache::lucene::util::OfflineSorter$BufferSize & a1, const ::java::io::File & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_22c0d43b, a0.this$, a1.this$, a2.this$, a3)) {}

        ::java::io::File OfflineSorter::defaultTempDir()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::File(env->callStaticObjectMethod(cls, mids$[mid_defaultTempDir_a8eb7bbe]));
        }

        ::java::util::Comparator OfflineSorter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::OfflineSorter$SortInfo OfflineSorter::sort(const ::java::io::File & a0, const ::java::io::File & a1) const
        {
          return ::org::apache::lucene::util::OfflineSorter$SortInfo(env->callObjectMethod(this$, mids$[mid_sort_c917fc5b], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type);
        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args);
        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data);
        static PyGetSetDef t_OfflineSorter__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, defaultTempDir, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter, t_OfflineSorter, ::java::lang::Object, OfflineSorter, t_OfflineSorter_init_, 0, 0, t_OfflineSorter__fields_, 0, 0);

        void t_OfflineSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter), module, "OfflineSorter", 0);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesReader", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesReader)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesWriter", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesWriter)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "BufferSize", make_descriptor(&PY_TYPE(OfflineSorter$BufferSize)));
        }

        void t_OfflineSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "class_", make_descriptor(OfflineSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(OfflineSorter::initializeClass);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ABSOLUTE_MIN_SORT_BUFFER_SIZE", make_descriptor(OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*OfflineSorter::DEFAULT_COMPARATOR)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "GB", make_descriptor(OfflineSorter::GB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MAX_TEMPFILES", make_descriptor(OfflineSorter::MAX_TEMPFILES));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MB", make_descriptor(OfflineSorter::MB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MIN_BUFFER_SIZE_MB", make_descriptor(OfflineSorter::MIN_BUFFER_SIZE_MB));
        }

        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter::wrap_Object(OfflineSorter(((t_OfflineSorter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OfflineSorter object((jobject) NULL);

              INT_CALL(object = OfflineSorter());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                INT_CALL(object = OfflineSorter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::OfflineSorter$BufferSize a1((jobject) NULL);
              ::java::io::File a2((jobject) NULL);
              jint a3;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "KkkI", ::java::util::Comparator::initializeClass, ::org::apache::lucene::util::OfflineSorter$BufferSize::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_, &a1, &a2, &a3))
              {
                INT_CALL(object = OfflineSorter(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter::defaultTempDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);
          ::org::apache::lucene::util::OfflineSorter$SortInfo result((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.sort(a0, a1));
            return ::org::apache::lucene::util::t_OfflineSorter$SortInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }

        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelG.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelG::class$ = NULL;
          jmethodID *BasicModelG::mids$ = NULL;
          bool BasicModelG::live$ = false;

          jclass BasicModelG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelG::BasicModelG() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelG::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args);
          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args);

          static PyMethodDef t_BasicModelG__methods_[] = {
            DECLARE_METHOD(t_BasicModelG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelG, t_BasicModelG, ::org::apache::lucene::search::similarities::BasicModel, BasicModelG, t_BasicModelG_init_, 0, 0, 0, 0, 0);

          void t_BasicModelG::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelG), module, "BasicModelG", 0);
          }

          void t_BasicModelG::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "class_", make_descriptor(BasicModelG::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "wrapfn_", make_descriptor(t_BasicModelG::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelG::initializeClass, 1)))
              return NULL;
            return t_BasicModelG::wrap_Object(BasicModelG(((t_BasicModelG *) arg)->object.this$));
          }
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds)
          {
            BasicModelG object((jobject) NULL);

            INT_CALL(object = BasicModelG());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoReader::class$ = NULL;
        jmethodID *SegmentInfoReader::mids$ = NULL;
        bool SegmentInfoReader::live$ = false;

        jclass SegmentInfoReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::SegmentInfo SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args);

        static PyMethodDef t_SegmentInfoReader__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoReader, t_SegmentInfoReader, ::java::lang::Object, SegmentInfoReader, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoReader), module, "SegmentInfoReader", 0);
        }

        void t_SegmentInfoReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "class_", make_descriptor(SegmentInfoReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoReader::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoReader::wrap_Object(SegmentInfoReader(((t_SegmentInfoReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilter::class$ = NULL;
          jmethodID *SoraniNormalizationFilter::mids$ = NULL;
          bool SoraniNormalizationFilter::live$ = false;

          jclass SoraniNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilter::SoraniNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilter, t_SoraniNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniNormalizationFilter, t_SoraniNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilter), module, "SoraniNormalizationFilter", 0);
          }

          void t_SoraniNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "class_", make_descriptor(SoraniNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilter::wrap_Object(SoraniNormalizationFilter(((t_SoraniNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilterFactory::class$ = NULL;
          jmethodID *EnglishMinimalStemFilterFactory::mids$ = NULL;
          bool EnglishMinimalStemFilterFactory::live$ = false;

          jclass EnglishMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilterFactory::EnglishMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilterFactory), module, "EnglishMinimalStemFilterFactory", 0);
          }

          void t_EnglishMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilterFactory::wrap_Object(EnglishMinimalStemFilterFactory(((t_EnglishMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIne.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIne::class$ = NULL;
          jmethodID *BasicModelIne::mids$ = NULL;
          bool BasicModelIne::live$ = false;

          jclass BasicModelIne::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIne");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIne::BasicModelIne() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIne::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIne::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args);
          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args);

          static PyMethodDef t_BasicModelIne__methods_[] = {
            DECLARE_METHOD(t_BasicModelIne, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIne, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIne, t_BasicModelIne, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIne, t_BasicModelIne_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIne::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIne), module, "BasicModelIne", 0);
          }

          void t_BasicModelIne::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "class_", make_descriptor(BasicModelIne::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIne::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIne::initializeClass, 1)))
              return NULL;
            return t_BasicModelIne::wrap_Object(BasicModelIne(((t_BasicModelIne *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIne::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIne object((jobject) NULL);

            INT_CALL(object = BasicModelIne());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$RewriteMethod::class$ = NULL;
        jmethodID *MultiTermQuery$RewriteMethod::mids$ = NULL;
        bool MultiTermQuery$RewriteMethod::live$ = false;

        jclass MultiTermQuery$RewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$RewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getTermsEnum_432efaeb] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/search/MultiTermQuery;Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$RewriteMethod::MultiTermQuery$RewriteMethod() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query MultiTermQuery$RewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args);

        static PyMethodDef t_MultiTermQuery$RewriteMethod__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod, ::java::lang::Object, MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_MultiTermQuery$RewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$RewriteMethod), module, "MultiTermQuery$RewriteMethod", 0);
        }

        void t_MultiTermQuery$RewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "class_", make_descriptor(MultiTermQuery$RewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$RewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$RewriteMethod::wrap_Object(MultiTermQuery$RewriteMethod(((t_MultiTermQuery$RewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$RewriteMethod object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$RewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FuzzyConfig::class$ = NULL;
              jmethodID *FuzzyConfig::mids$ = NULL;
              bool FuzzyConfig::live$ = false;

              jclass FuzzyConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_setMinSimilarity_06298cab] = env->getMethodID(cls, "setMinSimilarity", "(F)V");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyConfig::FuzzyConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              jfloat FuzzyConfig::getMinSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
              }

              jint FuzzyConfig::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              void FuzzyConfig::setMinSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setMinSimilarity_06298cab], a0);
              }

              void FuzzyConfig::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyConfig, minSimilarity),
                DECLARE_GETSET_FIELD(t_FuzzyConfig, prefixLength),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyConfig__methods_[] = {
                DECLARE_METHOD(t_FuzzyConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, getMinSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, setMinSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyConfig, setPrefixLength, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyConfig, t_FuzzyConfig, ::java::lang::Object, FuzzyConfig, t_FuzzyConfig_init_, 0, 0, t_FuzzyConfig__fields_, 0, 0);

              void t_FuzzyConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyConfig), module, "FuzzyConfig", 0);
              }

              void t_FuzzyConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "class_", make_descriptor(FuzzyConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "wrapfn_", make_descriptor(t_FuzzyConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyConfig::initializeClass, 1)))
                  return NULL;
                return t_FuzzyConfig::wrap_Object(FuzzyConfig(((t_FuzzyConfig *) arg)->object.this$));
              }
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds)
              {
                FuzzyConfig object((jobject) NULL);

                INT_CALL(object = FuzzyConfig());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setMinSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setMinSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setMinSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "minSimilarity", arg);
                return -1;
              }

              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Lambda::class$ = NULL;
          jmethodID *Lambda::mids$ = NULL;
          bool Lambda::live$ = false;

          jclass Lambda::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Lambda");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lambda::Lambda() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Lambda::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat Lambda::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String Lambda::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args);

          static PyMethodDef t_Lambda__methods_[] = {
            DECLARE_METHOD(t_Lambda, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, explain, METH_O),
            DECLARE_METHOD(t_Lambda, lambda, METH_O),
            DECLARE_METHOD(t_Lambda, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lambda, t_Lambda, ::java::lang::Object, Lambda, t_Lambda_init_, 0, 0, 0, 0, 0);

          void t_Lambda::install(PyObject *module)
          {
            installType(&PY_TYPE(Lambda), module, "Lambda", 0);
          }

          void t_Lambda::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "class_", make_descriptor(Lambda::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "wrapfn_", make_descriptor(t_Lambda::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lambda::initializeClass, 1)))
              return NULL;
            return t_Lambda::wrap_Object(Lambda(((t_Lambda *) arg)->object.this$));
          }
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lambda::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds)
          {
            Lambda object((jobject) NULL);

            INT_CALL(object = Lambda());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lambda", arg);
            return NULL;
          }

          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lambda), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilter::class$ = NULL;
          jmethodID *StopFilter::mids$ = NULL;
          bool StopFilter::live$ = false;

          jclass StopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_makeStopSet_9f4ce96f] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_bbdc7fc0] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_08a7acff] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_81b79166] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilter::StopFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_9f4ce96f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_bbdc7fc0], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_08a7acff], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_81b79166], a0.this$, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StopFilter__methods_[] = {
            DECLARE_METHOD(t_StopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, makeStopSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilter, t_StopFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, StopFilter, t_StopFilter_init_, 0, 0, 0, 0, 0);

          void t_StopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilter), module, "StopFilter", 0);
          }

          void t_StopFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "class_", make_descriptor(StopFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "wrapfn_", make_descriptor(t_StopFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilter::initializeClass, 1)))
              return NULL;
            return t_StopFilter::wrap_Object(StopFilter(((t_StopFilter *) arg)->object.this$));
          }
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
            PyTypeObject **p2;
            StopFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = StopFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K[sZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeStopSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesReader::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesReader::mids$ = NULL;
        bool OfflineSorter$ByteSequencesReader::live$ = false;

        jclass OfflineSorter$ByteSequencesReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_read_dab10e7e] = env->getMethodID(cls, "read", "()[B");
            mids$[mid_read_7bc03dc8] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

        void OfflineSorter$ByteSequencesReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        JArray< jbyte > OfflineSorter$ByteSequencesReader::read() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_read_dab10e7e]));
        }

        jboolean OfflineSorter$ByteSequencesReader::read(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_read_7bc03dc8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self);
        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesReader__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader, ::java::lang::Object, OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesReader::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesReader), module, "OfflineSorter$ByteSequencesReader", 0);
        }

        void t_OfflineSorter$ByteSequencesReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesReader::wrap_Object(OfflineSorter$ByteSequencesReader(((t_OfflineSorter$ByteSequencesReader *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataInput a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.read());
              return result.wrap();
            }
            break;
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.read(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilterFactory::class$ = NULL;
          jmethodID *StopFilterFactory::mids$ = NULL;
          bool StopFilterFactory::live$ = false;
          ::java::lang::String *StopFilterFactory::FORMAT_SNOWBALL = NULL;
          ::java::lang::String *StopFilterFactory::FORMAT_WORDSET = NULL;

          jclass StopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopWords_d2d3505c] = env->getMethodID(cls, "getStopWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORMAT_SNOWBALL = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_SNOWBALL", "Ljava/lang/String;"));
              FORMAT_WORDSET = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_WORDSET", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilterFactory::StopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilterFactory::getStopWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopWords_d2d3505c]));
          }

          void StopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StopFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean StopFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args);
          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg);
          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data);
          static PyGetSetDef t_StopFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StopFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_StopFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_StopFilterFactory, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StopFilterFactory, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StopFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilterFactory, t_StopFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StopFilterFactory, t_StopFilterFactory_init_, 0, 0, t_StopFilterFactory__fields_, 0, 0);

          void t_StopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilterFactory), module, "StopFilterFactory", 0);
          }

          void t_StopFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "class_", make_descriptor(StopFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StopFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_SNOWBALL", make_descriptor(j2p(*StopFilterFactory::FORMAT_SNOWBALL)));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_WORDSET", make_descriptor(j2p(*StopFilterFactory::FORMAT_WORDSET)));
          }

          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StopFilterFactory::wrap_Object(StopFilterFactory(((t_StopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StopFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
