#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsWriter::class$ = NULL;
          jmethodID *BlockTreeTermsWriter::mids$ = NULL;
          bool BlockTreeTermsWriter::live$ = false;
          jint BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_APPEND_ONLY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CHECKSUM = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_META_ARRAY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass BlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3f2db6e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_APPEND_ONLY = env->getStaticIntField(cls, "VERSION_APPEND_ONLY");
              VERSION_CHECKSUM = env->getStaticIntField(cls, "VERSION_CHECKSUM");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_META_ARRAY = env->getStaticIntField(cls, "VERSION_META_ARRAY");
              VERSION_MIN_MAX_TERMS = env->getStaticIntField(cls, "VERSION_MIN_MAX_TERMS");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsWriter::BlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_3f2db6e1, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::codecs::TermsConsumer BlockTreeTermsWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
          }

          void BlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsWriter, t_BlockTreeTermsWriter, ::org::apache::lucene::codecs::FieldsConsumer, BlockTreeTermsWriter, t_BlockTreeTermsWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsWriter), module, "BlockTreeTermsWriter", 0);
          }

          void t_BlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "class_", make_descriptor(BlockTreeTermsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeTermsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_APPEND_ONLY", make_descriptor(BlockTreeTermsWriter::VERSION_APPEND_ONLY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CHECKSUM", make_descriptor(BlockTreeTermsWriter::VERSION_CHECKSUM));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CURRENT", make_descriptor(BlockTreeTermsWriter::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_META_ARRAY", make_descriptor(BlockTreeTermsWriter::VERSION_META_ARRAY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_MIN_MAX_TERMS", make_descriptor(BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_START", make_descriptor(BlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsWriter::wrap_Object(BlockTreeTermsWriter(((t_BlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            BlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addField(a0));
              return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$DoubleParser::class$ = NULL;
        jmethodID *FieldCache$DoubleParser::mids$ = NULL;
        bool FieldCache$DoubleParser::live$ = false;

        jclass FieldCache$DoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$DoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble FieldCache$DoubleParser::parseDouble(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_parseDouble_7bc03dd6], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$DoubleParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$DoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, parseDouble, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$DoubleParser, t_FieldCache$DoubleParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$DoubleParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$DoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$DoubleParser), module, "FieldCache$DoubleParser", 0);
        }

        void t_FieldCache$DoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "class_", make_descriptor(FieldCache$DoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$DoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$DoubleParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$DoubleParser::wrap_Object(FieldCache$DoubleParser(((t_FieldCache$DoubleParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$DoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jdouble result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseDouble", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesProducer::class$ = NULL;
        jmethodID *DocValuesProducer::mids$ = NULL;
        bool DocValuesProducer::live$ = false;

        jclass DocValuesProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getBinary_97c169be] = env->getMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e4c7eda7] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_9eab6241] = env->getMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_984b8536] = env->getMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_ccea608a] = env->getMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_05eaac8f] = env->getMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::index::BinaryDocValues DocValuesProducer::getBinary(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinary_97c169be], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValuesProducer::getDocsWithField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e4c7eda7], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValuesProducer::getNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumeric_9eab6241], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValuesProducer::getSorted(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSorted_984b8536], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValuesProducer::getSortedNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumeric_ccea608a], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValuesProducer::getSortedSet(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSet_05eaac8f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self);
        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg);

        static PyMethodDef t_DocValuesProducer__methods_[] = {
          DECLARE_METHOD(t_DocValuesProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesProducer, getBinary, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getDocsWithField, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSorted, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedSet, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesProducer, t_DocValuesProducer, ::java::lang::Object, DocValuesProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesProducer), module, "DocValuesProducer", 0);
        }

        void t_DocValuesProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "class_", make_descriptor(DocValuesProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesProducer::initializeClass, 1)))
            return NULL;
          return t_DocValuesProducer::wrap_Object(DocValuesProducer(((t_DocValuesProducer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getBinary(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinary", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNumeric(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSorted(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSorted", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedSet(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSet", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfigListener::class$ = NULL;
              jmethodID *FieldConfigListener::mids$ = NULL;
              bool FieldConfigListener::live$ = false;

              jclass FieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void FieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_FieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_FieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfigListener, t_FieldConfigListener, ::java::lang::Object, FieldConfigListener, abstract_init, 0, 0, 0, 0, 0);

              void t_FieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfigListener), module, "FieldConfigListener", 0);
              }

              void t_FieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "class_", make_descriptor(FieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_FieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_FieldConfigListener::wrap_Object(FieldConfigListener(((t_FieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource$ScoreValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource$ScoreValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource$ScoreValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource$ScoreValueSource::TaxonomyFacetSumValueSource$ScoreValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String TaxonomyFacetSumValueSource$ScoreValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean TaxonomyFacetSumValueSource$ScoreValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::queries::function::FunctionValues TaxonomyFacetSumValueSource$ScoreValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint TaxonomyFacetSumValueSource$ScoreValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacetSumValueSource$ScoreValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, description, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource, ::org::apache::lucene::queries::function::ValueSource, TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), module, "TaxonomyFacetSumValueSource$ScoreValueSource", 0);
          }

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_Object(TaxonomyFacetSumValueSource$ScoreValueSource(((t_TaxonomyFacetSumValueSource$ScoreValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyFacetSumValueSource$ScoreValueSource object((jobject) NULL);

            INT_CALL(object = TaxonomyFacetSumValueSource$ScoreValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.description());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "description", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "getValues", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ro/RomanianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {

          ::java::lang::Class *RomanianAnalyzer::class$ = NULL;
          jmethodID *RomanianAnalyzer::mids$ = NULL;
          bool RomanianAnalyzer::live$ = false;
          ::java::lang::String *RomanianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RomanianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ro/RomanianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RomanianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {
          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data);
          static PyGetSetDef t_RomanianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RomanianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RomanianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RomanianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RomanianAnalyzer, t_RomanianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RomanianAnalyzer, t_RomanianAnalyzer_init_, 0, 0, t_RomanianAnalyzer__fields_, 0, 0);

          void t_RomanianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RomanianAnalyzer), module, "RomanianAnalyzer", 0);
          }

          void t_RomanianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "class_", make_descriptor(RomanianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RomanianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RomanianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RomanianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RomanianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RomanianAnalyzer::wrap_Object(RomanianAnalyzer(((t_RomanianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RomanianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ro::RomanianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeTermsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeTermsEnum::class$ = NULL;
        jmethodID *TermRangeTermsEnum::mids$ = NULL;
        bool TermRangeTermsEnum::live$ = false;

        jclass TermRangeTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf65bdfc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeTermsEnum::TermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_cf65bdfc, a0.this$, a1.this$, a2.this$, a3, a4)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TermRangeTermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermRangeTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeTermsEnum, t_TermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, TermRangeTermsEnum, t_TermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_TermRangeTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeTermsEnum), module, "TermRangeTermsEnum", 0);
        }

        void t_TermRangeTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "class_", make_descriptor(TermRangeTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermRangeTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeTermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermRangeTermsEnum::wrap_Object(TermRangeTermsEnum(((t_TermRangeTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkZZ", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeTermsEnum(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$arguments_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$arguments_return::class$ = NULL;
          jmethodID *JavascriptParser$arguments_return::mids$ = NULL;
          bool JavascriptParser$arguments_return::live$ = false;

          jclass JavascriptParser$arguments_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$arguments_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$arguments_return::JavascriptParser$arguments_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$arguments_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$arguments_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$arguments_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$arguments_return, t_JavascriptParser$arguments_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$arguments_return, t_JavascriptParser$arguments_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$arguments_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$arguments_return), module, "JavascriptParser$arguments_return", 0);
          }

          void t_JavascriptParser$arguments_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "class_", make_descriptor(JavascriptParser$arguments_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$arguments_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$arguments_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$arguments_return::wrap_Object(JavascriptParser$arguments_return(((t_JavascriptParser$arguments_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$arguments_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$arguments_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$arguments_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicAnalyzer::class$ = NULL;
          jmethodID *ArabicAnalyzer::mids$ = NULL;
          bool ArabicAnalyzer::live$ = false;
          ::java::lang::String *ArabicAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArabicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArabicAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data);
          static PyGetSetDef t_ArabicAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArabicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicAnalyzer, t_ArabicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArabicAnalyzer, t_ArabicAnalyzer_init_, 0, 0, t_ArabicAnalyzer__fields_, 0, 0);

          void t_ArabicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicAnalyzer), module, "ArabicAnalyzer", 0);
          }

          void t_ArabicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "class_", make_descriptor(ArabicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArabicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArabicAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArabicAnalyzer::wrap_Object(ArabicAnalyzer(((t_ArabicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ar::ArabicAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FloatFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FloatFieldSource::class$ = NULL;
            jmethodID *FloatFieldSource::mids$ = NULL;
            bool FloatFieldSource::live$ = false;

            jclass FloatFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FloatFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_971bf26d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_971bf26d, a0.this$, a1.this$)) {}

            ::java::lang::String FloatFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FloatFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues FloatFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint FloatFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args);

            static PyMethodDef t_FloatFieldSource__methods_[] = {
              DECLARE_METHOD(t_FloatFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatFieldSource, t_FloatFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, FloatFieldSource, t_FloatFieldSource_init_, 0, 0, 0, 0, 0);

            void t_FloatFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatFieldSource), module, "FloatFieldSource", 0);
            }

            void t_FloatFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "class_", make_descriptor(FloatFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "wrapfn_", make_descriptor(t_FloatFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatFieldSource::initializeClass, 1)))
                return NULL;
              return t_FloatFieldSource::wrap_Object(FloatFieldSource(((t_FloatFieldSource *) arg)->object.this$));
            }
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = FloatFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FloatFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreQuery::class$ = NULL;
        jmethodID *CustomScoreQuery::mids$ = NULL;
        bool CustomScoreQuery::live$ = false;

        jclass CustomScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_bf3fc62f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_init$_02f9eae9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_clone_c1341b71] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queries/CustomScoreQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getScoringQueries_e66abcfa] = env->getMethodID(cls, "getScoringQueries", "()[Lorg/apache/lucene/search/Query;");
            mids$[mid_getSubQuery_97e3851a] = env->getMethodID(cls, "getSubQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isStrict_54c6a16a] = env->getMethodID(cls, "isStrict", "()Z");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setStrict_bb0c767f] = env->getMethodID(cls, "setStrict", "(Z)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCustomScoreProvider_a7245052] = env->getMethodID(cls, "getCustomScoreProvider", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/CustomScoreProvider;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const JArray< ::org::apache::lucene::queries::function::FunctionQuery > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bf3fc62f, a0.this$, a1.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::FunctionQuery & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_02f9eae9, a0.this$, a1.this$)) {}

        CustomScoreQuery CustomScoreQuery::clone() const
        {
          return CustomScoreQuery(env->callObjectMethod(this$, mids$[mid_clone_c1341b71]));
        }

        ::org::apache::lucene::search::Weight CustomScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean CustomScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CustomScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::Query > CustomScoreQuery::getScoringQueries() const
        {
          return JArray< ::org::apache::lucene::search::Query >(env->callObjectMethod(this$, mids$[mid_getScoringQueries_e66abcfa]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::getSubQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSubQuery_97e3851a]));
        }

        jint CustomScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CustomScoreQuery::isStrict() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStrict_54c6a16a]);
        }

        ::java::lang::String CustomScoreQuery::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CustomScoreQuery::setStrict(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStrict_bb0c767f], a0);
        }

        ::java::lang::String CustomScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg);
        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data);
        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data);
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data);
        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data);
        static PyGetSetDef t_CustomScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CustomScoreQuery, scoringQueries),
          DECLARE_GETSET_FIELD(t_CustomScoreQuery, strict),
          DECLARE_GET_FIELD(t_CustomScoreQuery, subQuery),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CustomScoreQuery__methods_[] = {
          DECLARE_METHOD(t_CustomScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getScoringQueries, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getSubQuery, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, isStrict, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, name, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, setStrict, METH_O),
          DECLARE_METHOD(t_CustomScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreQuery, t_CustomScoreQuery, ::org::apache::lucene::search::Query, CustomScoreQuery, t_CustomScoreQuery_init_, 0, 0, t_CustomScoreQuery__fields_, 0, 0);

        void t_CustomScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreQuery), module, "CustomScoreQuery", 0);
        }

        void t_CustomScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "class_", make_descriptor(CustomScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreQuery::initializeClass, 1)))
            return NULL;
          return t_CustomScoreQuery::wrap_Object(CustomScoreQuery(((t_CustomScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = CustomScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionQuery > a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionQuery a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args)
        {
          CustomScoreQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_CustomScoreQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self)
        {
          JArray< ::org::apache::lucene::search::Query > result((jobject) NULL);
          OBJ_CALL(result = self->object.getScoringQueries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStrict());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStrict(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStrict", arg);
          return NULL;
        }

        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::search::Query > value((jobject) NULL);
          OBJ_CALL(value = self->object.getScoringQueries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStrict());
          Py_RETURN_BOOL(value);
        }
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setStrict(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "strict", arg);
          return -1;
        }

        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemmer::class$ = NULL;
          jmethodID *LatvianStemmer::mids$ = NULL;
          bool LatvianStemmer::live$ = false;

          jclass LatvianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemmer::LatvianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint LatvianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args);

          static PyMethodDef t_LatvianStemmer__methods_[] = {
            DECLARE_METHOD(t_LatvianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemmer, t_LatvianStemmer, ::java::lang::Object, LatvianStemmer, t_LatvianStemmer_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemmer), module, "LatvianStemmer", 0);
          }

          void t_LatvianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "class_", make_descriptor(LatvianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemmer::initializeClass, 1)))
              return NULL;
            return t_LatvianStemmer::wrap_Object(LatvianStemmer(((t_LatvianStemmer *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds)
          {
            LatvianStemmer object((jobject) NULL);

            INT_CALL(object = LatvianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler::class$ = NULL;
              jmethodID *StandardQueryConfigHandler::mids$ = NULL;
              bool StandardQueryConfigHandler::live$ = false;

              jclass StandardQueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler::StandardQueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler, t_StandardQueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler, StandardQueryConfigHandler, t_StandardQueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler), module, "StandardQueryConfigHandler", 0);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "Operator", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$Operator)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "ConfigurationKeys", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys)));
              }

              void t_StandardQueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler::wrap_Object(StandardQueryConfigHandler(((t_StandardQueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CollisionMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CollisionMap::class$ = NULL;
            jmethodID *CollisionMap::mids$ = NULL;
            bool CollisionMap::live$ = false;

            jclass CollisionMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CollisionMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addLabel_71708aa9] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;II)I");
                mids$[mid_addLabelOffset_d3236aa4] = env->getMethodID(cls, "addLabelOffset", "(III)V");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_7ba580b7] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)I");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint CollisionMap::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1, jint a2) const
            {
              return env->callIntMethod(this$, mids$[mid_addLabel_71708aa9], a0.this$, a1, a2);
            }

            void CollisionMap::addLabelOffset(jint a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabelOffset_d3236aa4], a0, a1, a2);
            }

            jint CollisionMap::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jint CollisionMap::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_get_7ba580b7], a0.this$, a1);
            }

            jint CollisionMap::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self);
            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_size(t_CollisionMap *self);

            static PyMethodDef t_CollisionMap__methods_[] = {
              DECLARE_METHOD(t_CollisionMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, addLabelOffset, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CollisionMap, get, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CollisionMap, t_CollisionMap, ::java::lang::Object, CollisionMap, abstract_init, 0, 0, 0, 0, 0);

            void t_CollisionMap::install(PyObject *module)
            {
              installType(&PY_TYPE(CollisionMap), module, "CollisionMap", 0);
            }

            void t_CollisionMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "class_", make_descriptor(CollisionMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "wrapfn_", make_descriptor(t_CollisionMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CollisionMap::initializeClass, 1)))
                return NULL;
              return t_CollisionMap::wrap_Object(CollisionMap(((t_CollisionMap *) arg)->object.this$));
            }
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CollisionMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "kII", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.addLabel(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addLabelOffset(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabelOffset", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.get(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_size(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphenation::class$ = NULL;
            jmethodID *Hyphenation::mids$ = NULL;
            bool Hyphenation::live$ = false;

            jclass Hyphenation::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphenation");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getHyphenationPoints_dab10e75] = env->getMethodID(cls, "getHyphenationPoints", "()[I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< jint > Hyphenation::getHyphenationPoints() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getHyphenationPoints_dab10e75]));
            }

            jint Hyphenation::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self);
            static PyObject *t_Hyphenation_length(t_Hyphenation *self);
            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data);
            static PyGetSetDef t_Hyphenation__fields_[] = {
              DECLARE_GET_FIELD(t_Hyphenation, hyphenationPoints),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphenation__methods_[] = {
              DECLARE_METHOD(t_Hyphenation, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, getHyphenationPoints, METH_NOARGS),
              DECLARE_METHOD(t_Hyphenation, length, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphenation, t_Hyphenation, ::java::lang::Object, Hyphenation, abstract_init, 0, 0, t_Hyphenation__fields_, 0, 0);

            void t_Hyphenation::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphenation), module, "Hyphenation", 0);
            }

            void t_Hyphenation::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "class_", make_descriptor(Hyphenation::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "wrapfn_", make_descriptor(t_Hyphenation::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphenation::initializeClass, 1)))
                return NULL;
              return t_Hyphenation::wrap_Object(Hyphenation(((t_Hyphenation *) arg)->object.this$));
            }
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphenation::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getHyphenationPoints());
              return result.wrap();
            }

            static PyObject *t_Hyphenation_length(t_Hyphenation *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getHyphenationPoints());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphen.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphen::class$ = NULL;
            jmethodID *Hyphen::mids$ = NULL;
            jfieldID *Hyphen::fids$ = NULL;
            bool Hyphen::live$ = false;

            jclass Hyphen::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphen");

                mids$ = new jmethodID[max_mid];
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_noBreak] = env->getFieldID(cls, "noBreak", "Ljava/lang/String;");
                fids$[fid_postBreak] = env->getFieldID(cls, "postBreak", "Ljava/lang/String;");
                fids$[fid_preBreak] = env->getFieldID(cls, "preBreak", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String Hyphen::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String Hyphen::_get_noBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_noBreak]));
            }

            void Hyphen::_set_noBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_noBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_postBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_postBreak]));
            }

            void Hyphen::_set_postBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_postBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_preBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_preBreak]));
            }

            void Hyphen::_set_preBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_preBreak], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args);
            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data);

            static PyGetSetDef t_Hyphen__fields_[] = {
              DECLARE_GETSET_FIELD(t_Hyphen, noBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, postBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, preBreak),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphen__methods_[] = {
              DECLARE_METHOD(t_Hyphen, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphen, t_Hyphen, ::java::lang::Object, Hyphen, abstract_init, 0, 0, t_Hyphen__fields_, 0, 0);

            void t_Hyphen::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphen), module, "Hyphen", 0);
            }

            void t_Hyphen::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "class_", make_descriptor(Hyphen::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "wrapfn_", make_descriptor(t_Hyphen::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphen::initializeClass, 1)))
                return NULL;
              return t_Hyphen::wrap_Object(Hyphen(((t_Hyphen *) arg)->object.this$));
            }
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphen::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Hyphen), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_noBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_noBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "noBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_postBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_postBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "postBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_preBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_preBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "preBreak", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsConsumer::class$ = NULL;
        jmethodID *PostingsConsumer::mids$ = NULL;
        bool PostingsConsumer::live$ = false;

        jclass PostingsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
            mids$[mid_merge_3a3a1af6] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/DocsEnum;Lorg/apache/lucene/util/FixedBitSet;)Lorg/apache/lucene/codecs/TermStats;");
            mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsConsumer::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
        }

        void PostingsConsumer::finishDoc() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
        }

        ::org::apache::lucene::codecs::TermStats PostingsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::DocsEnum & a2, const ::org::apache::lucene::util::FixedBitSet & a3) const
        {
          return ::org::apache::lucene::codecs::TermStats(env->callObjectMethod(this$, mids$[mid_merge_3a3a1af6], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        void PostingsConsumer::startDoc(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self);
        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args);

        static PyMethodDef t_PostingsConsumer__methods_[] = {
          DECLARE_METHOD(t_PostingsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, finishDoc, METH_NOARGS),
          DECLARE_METHOD(t_PostingsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, startDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsConsumer, t_PostingsConsumer, ::java::lang::Object, PostingsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsConsumer), module, "PostingsConsumer", 0);
        }

        void t_PostingsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "class_", make_descriptor(PostingsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "wrapfn_", make_descriptor(t_PostingsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsConsumer::initializeClass, 1)))
            return NULL;
          return t_PostingsConsumer::wrap_Object(PostingsConsumer(((t_PostingsConsumer *) arg)->object.this$));
        }
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self)
        {
          OBJ_CALL(self->object.finishDoc());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::DocsEnum a2((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats result((jobject) NULL);

          if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2, &a3))
          {
            OBJ_CALL(result = self->object.merge(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermStats::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.startDoc(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDoc", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm$MatchingTermVisitor::class$ = NULL;
            jmethodID *SimpleTerm$MatchingTermVisitor::mids$ = NULL;
            bool SimpleTerm$MatchingTermVisitor::live$ = false;

            jclass SimpleTerm$MatchingTermVisitor::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor");

                mids$ = new jmethodID[max_mid];
                mids$[mid_visitMatchingTerm_7eca6a81] = env->getMethodID(cls, "visitMatchingTerm", "(Lorg/apache/lucene/index/Term;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void SimpleTerm$MatchingTermVisitor::visitMatchingTerm(const ::org::apache::lucene::index::Term & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerm_7eca6a81], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg);

            static PyMethodDef t_SimpleTerm$MatchingTermVisitor__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, visitMatchingTerm, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm$MatchingTermVisitor, t_SimpleTerm$MatchingTermVisitor, ::java::lang::Object, SimpleTerm$MatchingTermVisitor, abstract_init, 0, 0, 0, 0, 0);

            void t_SimpleTerm$MatchingTermVisitor::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm$MatchingTermVisitor), module, "SimpleTerm$MatchingTermVisitor", 0);
            }

            void t_SimpleTerm$MatchingTermVisitor::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "class_", make_descriptor(SimpleTerm$MatchingTermVisitor::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm$MatchingTermVisitor::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm$MatchingTermVisitor::wrap_Object(SimpleTerm$MatchingTermVisitor(((t_SimpleTerm$MatchingTermVisitor *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visitMatchingTerm(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerm", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/text/NumberFormat.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericQueryNode::class$ = NULL;
              jmethodID *NumericQueryNode::mids$ = NULL;
              bool NumericQueryNode::live$ = false;

              jclass NumericQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_42c517e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Number;Ljava/text/NumberFormat;)V");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getValue_ee47e3e1] = env->getMethodID(cls, "getValue", "()Ljava/lang/Number;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setValue_948ebebc] = env->getMethodID(cls, "setValue", "(Ljava/lang/Number;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNode::NumericQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::Number & a1, const ::java::text::NumberFormat & a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_42c517e2, a0.this$, a1.this$, a2.this$)) {}

              ::java::lang::CharSequence NumericQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::text::NumberFormat NumericQueryNode::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              ::java::lang::Number NumericQueryNode::getValue() const
              {
                return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getValue_ee47e3e1]));
              }

              void NumericQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void NumericQueryNode::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericQueryNode::setValue(const ::java::lang::Number & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_948ebebc], a0.this$);
              }

              ::java::lang::CharSequence NumericQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NumericQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericQueryNode, field),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, setField, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NumericQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNode, t_NumericQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, NumericQueryNode, t_NumericQueryNode_init_, 0, 0, t_NumericQueryNode__fields_, 0, 0);

              void t_NumericQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNode), module, "NumericQueryNode", 0);
              }

              void t_NumericQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "class_", make_descriptor(NumericQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNode::wrap_Object(NumericQueryNode(((t_NumericQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Number a1((jobject) NULL);
                ::java::text::NumberFormat a2((jobject) NULL);
                NumericQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOk", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(Number), ::java::text::NumberFormat::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NumericQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self)
              {
                ::java::lang::Number result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::Number a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::Number value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Number value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilder::class$ = NULL;
          jmethodID *QueryBuilder::mids$ = NULL;
          bool QueryBuilder::live$ = false;

          jclass QueryBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryBuilder__methods_[] = {
            DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
          }

          void t_QueryBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
              return NULL;
            return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CodecUtil::class$ = NULL;
        jmethodID *CodecUtil::mids$ = NULL;
        bool CodecUtil::live$ = false;
        jint CodecUtil::CODEC_MAGIC = (jint) 0;
        jint CodecUtil::FOOTER_MAGIC = (jint) 0;

        jclass CodecUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CodecUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkEOF_0441f0b2] = env->getStaticMethodID(cls, "checkEOF", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_checkFooter_f5e506b9] = env->getStaticMethodID(cls, "checkFooter", "(Lorg/apache/lucene/store/ChecksumIndexInput;)J");
            mids$[mid_checkHeader_128b127c] = env->getStaticMethodID(cls, "checkHeader", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checkHeaderNoMagic_128b127c] = env->getStaticMethodID(cls, "checkHeaderNoMagic", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checksumEntireFile_0441f0ae] = env->getStaticMethodID(cls, "checksumEntireFile", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_footerLength_54c6a179] = env->getStaticMethodID(cls, "footerLength", "()I");
            mids$[mid_headerLength_5fdc3f57] = env->getStaticMethodID(cls, "headerLength", "(Ljava/lang/String;)I");
            mids$[mid_retrieveChecksum_0441f0ae] = env->getStaticMethodID(cls, "retrieveChecksum", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_writeFooter_faad620a] = env->getStaticMethodID(cls, "writeFooter", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_writeHeader_6b5c1111] = env->getStaticMethodID(cls, "writeHeader", "(Lorg/apache/lucene/store/DataOutput;Ljava/lang/String;I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_MAGIC = env->getStaticIntField(cls, "CODEC_MAGIC");
            FOOTER_MAGIC = env->getStaticIntField(cls, "FOOTER_MAGIC");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CodecUtil::checkEOF(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkEOF_0441f0b2], a0.this$);
        }

        jlong CodecUtil::checkFooter(const ::org::apache::lucene::store::ChecksumIndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checkFooter_f5e506b9], a0.this$);
        }

        jint CodecUtil::checkHeader(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeader_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jint CodecUtil::checkHeaderNoMagic(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeaderNoMagic_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jlong CodecUtil::checksumEntireFile(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checksumEntireFile_0441f0ae], a0.this$);
        }

        jint CodecUtil::footerLength()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_footerLength_54c6a179]);
        }

        jint CodecUtil::headerLength(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_headerLength_5fdc3f57], a0.this$);
        }

        jlong CodecUtil::retrieveChecksum(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_retrieveChecksum_0441f0ae], a0.this$);
        }

        void CodecUtil::writeFooter(const ::org::apache::lucene::store::IndexOutput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeFooter_faad620a], a0.this$);
        }

        void CodecUtil::writeHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::java::lang::String & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeHeader_6b5c1111], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type);
        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CodecUtil__methods_[] = {
          DECLARE_METHOD(t_CodecUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkEOF, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeaderNoMagic, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checksumEntireFile, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, footerLength, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, headerLength, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, retrieveChecksum, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeHeader, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CodecUtil, t_CodecUtil, ::java::lang::Object, CodecUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CodecUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CodecUtil), module, "CodecUtil", 0);
        }

        void t_CodecUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "class_", make_descriptor(CodecUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "wrapfn_", make_descriptor(t_CodecUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CodecUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "CODEC_MAGIC", make_descriptor(CodecUtil::CODEC_MAGIC));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "FOOTER_MAGIC", make_descriptor(CodecUtil::FOOTER_MAGIC));
        }

        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CodecUtil::initializeClass, 1)))
            return NULL;
          return t_CodecUtil::wrap_Object(CodecUtil(((t_CodecUtil *) arg)->object.this$));
        }
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CodecUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::checkEOF(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkEOF", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkFooter(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checkFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeader(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeaderNoMagic(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeaderNoMagic", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checksumEntireFile(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checksumEntireFile", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::footerLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::headerLength(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "headerLength", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::retrieveChecksum(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "retrieveChecksum", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeFooter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "ksI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeHeader(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeHeader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacets.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacets::class$ = NULL;
          jmethodID *TaxonomyFacets::mids$ = NULL;
          bool TaxonomyFacets::live$ = false;

          jclass TaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_verifyDim_7d95dc61] = env->getMethodID(cls, "verifyDim", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List TaxonomyFacets::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, getAllDims, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacets, t_TaxonomyFacets, ::org::apache::lucene::facet::Facets, TaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacets), module, "TaxonomyFacets", 0);
          }

          void t_TaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "class_", make_descriptor(TaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacets::wrap_Object(TaxonomyFacets(((t_TaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(TaxonomyFacets), (PyObject *) self, "getAllDims", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttribute::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttribute::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttribute::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttribute::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttribute__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, automata, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute, t_FuzzyTermsEnum$LevenshteinAutomataAttribute, ::org::apache::lucene::util::Attribute, FuzzyTermsEnum$LevenshteinAutomataAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute), module, "FuzzyTermsEnum$LevenshteinAutomataAttribute", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttribute(((t_FuzzyTermsEnum$LevenshteinAutomataAttribute *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectWriter::class$ = NULL;
          jmethodID *DirectWriter::mids$ = NULL;
          bool DirectWriter::live$ = false;

          jclass DirectWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_getInstance_3b8d11ee] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/IndexOutput;JI)Lorg/apache/lucene/util/packed/DirectWriter;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DirectWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint DirectWriter::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void DirectWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          DirectWriter DirectWriter::getInstance(const ::org::apache::lucene::store::IndexOutput & a0, jlong a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectWriter(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3b8d11ee], a0.this$, a1, a2));
          }

          jint DirectWriter::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg);
          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_finish(t_DirectWriter *self);
          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DirectWriter__methods_[] = {
            DECLARE_METHOD(t_DirectWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, add, METH_O),
            DECLARE_METHOD(t_DirectWriter, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_DirectWriter, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectWriter, t_DirectWriter, ::java::lang::Object, DirectWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_DirectWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectWriter), module, "DirectWriter", 0);
          }

          void t_DirectWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "class_", make_descriptor(DirectWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectWriter::initializeClass, 1)))
              return NULL;
            return t_DirectWriter::wrap_Object(DirectWriter(((t_DirectWriter *) arg)->object.this$));
          }
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_finish(t_DirectWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            jlong a1;
            jint a2;
            DirectWriter result((jobject) NULL);

            if (!parseArgs(args, "kJI", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::getInstance(a0, a1, a2));
              return t_DirectWriter::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode$Modifier::class$ = NULL;
              jmethodID *ModifierQueryNode$Modifier::mids$ = NULL;
              bool ModifierQueryNode$Modifier::live$ = false;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NONE = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NOT = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_REQ = NULL;

              jclass ModifierQueryNode$Modifier::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_toDigitString_14c7b5c5] = env->getMethodID(cls, "toDigitString", "()Ljava/lang/String;");
                  mids$[mid_toLargeString_14c7b5c5] = env->getMethodID(cls, "toLargeString", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_valueOf_ceb5f083] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_values_05c3b6a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  MOD_NONE = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NONE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_NOT = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NOT", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_REQ = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_REQ", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::String ModifierQueryNode$Modifier::toDigitString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDigitString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toLargeString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLargeString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ModifierQueryNode$Modifier ModifierQueryNode$Modifier::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ModifierQueryNode$Modifier(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ceb5f083], a0.this$));
              }

              JArray< ModifierQueryNode$Modifier > ModifierQueryNode$Modifier::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ModifierQueryNode$Modifier >(env->callStaticObjectMethod(cls, mids$[mid_values_05c3b6a9]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type);
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data);
              static PyGetSetDef t_ModifierQueryNode$Modifier__fields_[] = {
                DECLARE_GET_FIELD(t_ModifierQueryNode$Modifier, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode$Modifier__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, of_, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toDigitString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toLargeString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode$Modifier, t_ModifierQueryNode$Modifier, ::java::lang::Enum, ModifierQueryNode$Modifier, abstract_init, 0, 0, t_ModifierQueryNode$Modifier__fields_, 0, 0);
              PyObject *t_ModifierQueryNode$Modifier::wrap_Object(const ModifierQueryNode$Modifier& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ModifierQueryNode$Modifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ModifierQueryNode$Modifier::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode$Modifier), module, "ModifierQueryNode$Modifier", 0);
              }

              void t_ModifierQueryNode$Modifier::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "class_", make_descriptor(ModifierQueryNode$Modifier::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode$Modifier::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ModifierQueryNode$Modifier::initializeClass);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NONE", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NONE)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NOT", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NOT)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_REQ", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_REQ)));
              }

              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode$Modifier::wrap_Object(ModifierQueryNode$Modifier(((t_ModifierQueryNode$Modifier *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toDigitString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toLargeString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode$Modifier), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ModifierQueryNode$Modifier result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::valueOf(a0));
                  return t_ModifierQueryNode$Modifier::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type)
              {
                JArray< ModifierQueryNode$Modifier > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::values());
                return JArray<jobject>(result.this$).wrap(t_ModifierQueryNode$Modifier::wrap_jobject);
              }
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool::class$ = NULL;
        jmethodID *TwoPhaseCommitTool::mids$ = NULL;
        bool TwoPhaseCommitTool::live$ = false;

        jclass TwoPhaseCommitTool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_execute_9f61f519] = env->getStaticMethodID(cls, "execute", "([Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommitTool::execute(const JArray< ::org::apache::lucene::index::TwoPhaseCommit > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_execute_9f61f519], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_TwoPhaseCommitTool__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, execute, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool, t_TwoPhaseCommitTool, ::java::lang::Object, TwoPhaseCommitTool, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool), module, "TwoPhaseCommitTool", 0);
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "CommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$CommitFailException)));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "PrepareCommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException)));
        }

        void t_TwoPhaseCommitTool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool::wrap_Object(TwoPhaseCommitTool(((t_TwoPhaseCommitTool *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::index::TwoPhaseCommit > a0((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::TwoPhaseCommitTool::execute(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "execute", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopResults::class$ = NULL;
          jmethodID *Util$TopResults::mids$ = NULL;
          jfieldID *Util$TopResults::fids$ = NULL;
          bool Util$TopResults::live$ = false;

          jclass Util$TopResults::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopResults");

              mids$ = new jmethodID[max_mid];
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isComplete] = env->getFieldID(cls, "isComplete", "Z");
              fids$[fid_topN] = env->getFieldID(cls, "topN", "Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Iterator Util$TopResults::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jboolean Util$TopResults::_get_isComplete() const
          {
            return env->getBooleanField(this$, fids$[fid_isComplete]);
          }

          ::java::util::List Util$TopResults::_get_topN() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_topN]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args);
          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self);
          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data);
          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data);

          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data);
          static PyGetSetDef t_Util$TopResults__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopResults, isComplete),
            DECLARE_GET_FIELD(t_Util$TopResults, topN),
            DECLARE_GET_FIELD(t_Util$TopResults, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopResults__methods_[] = {
            DECLARE_METHOD(t_Util$TopResults, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopResults, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopResults, t_Util$TopResults, ::java::lang::Object, Util$TopResults, abstract_init, ((PyObject *(*)(t_Util$TopResults *)) get_generic_iterator< t_Util$TopResults >), 0, t_Util$TopResults__fields_, 0, 0);
          PyObject *t_Util$TopResults::wrap_Object(const Util$TopResults& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopResults::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopResults::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopResults), module, "Util$TopResults", 0);
          }

          void t_Util$TopResults::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "class_", make_descriptor(Util$TopResults::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "wrapfn_", make_descriptor(t_Util$TopResults::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopResults::initializeClass, 1)))
              return NULL;
            return t_Util$TopResults::wrap_Object(Util$TopResults(((t_Util$TopResults *) arg)->object.this$));
          }
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopResults::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self)
          {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result);
          }
          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isComplete());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_topN());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *AbstractRangeQueryNode::class$ = NULL;
              jmethodID *AbstractRangeQueryNode::mids$ = NULL;
              bool AbstractRangeQueryNode::live$ = false;

              jclass AbstractRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");
                  mids$[mid_setBounds_b72fdc1c] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;ZZ)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean AbstractRangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean AbstractRangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }

              void AbstractRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a1, jboolean a2, jboolean a3) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b72fdc1c], a0.this$, a1.this$, a2, a3);
              }

              void AbstractRangeQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AbstractRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data);
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data);
              static PyGetSetDef t_AbstractRangeQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AbstractRangeQueryNode, field),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AbstractRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_AbstractRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isUpperInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractRangeQueryNode, t_AbstractRangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, AbstractRangeQueryNode, abstract_init, 0, 0, t_AbstractRangeQueryNode__fields_, 0, 0);
              PyObject *t_AbstractRangeQueryNode::wrap_Object(const AbstractRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_AbstractRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_AbstractRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractRangeQueryNode), module, "AbstractRangeQueryNode", 0);
              }

              void t_AbstractRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "class_", make_descriptor(AbstractRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AbstractRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AbstractRangeQueryNode::wrap_Object(AbstractRangeQueryNode(((t_AbstractRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;

                if (!parseArgs(args, "KKZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a2, &a3))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBounds", args);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseAnalyzer::class$ = NULL;
          jmethodID *ChineseAnalyzer::mids$ = NULL;
          bool ChineseAnalyzer::live$ = false;

          jclass ChineseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseAnalyzer::ChineseAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ChineseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ChineseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseAnalyzer, t_ChineseAnalyzer, ::org::apache::lucene::analysis::Analyzer, ChineseAnalyzer, t_ChineseAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_ChineseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseAnalyzer), module, "ChineseAnalyzer", 0);
          }

          void t_ChineseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "class_", make_descriptor(ChineseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ChineseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ChineseAnalyzer::wrap_Object(ChineseAnalyzer(((t_ChineseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ChineseAnalyzer object((jobject) NULL);

            INT_CALL(object = ChineseAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilter::class$ = NULL;
          jmethodID *GreekLowerCaseFilter::mids$ = NULL;
          bool GreekLowerCaseFilter::live$ = false;

          jclass GreekLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilter::GreekLowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean GreekLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_GreekLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilter, t_GreekLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, GreekLowerCaseFilter, t_GreekLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilter), module, "GreekLowerCaseFilter", 0);
          }

          void t_GreekLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "class_", make_descriptor(GreekLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilter::wrap_Object(GreekLowerCaseFilter(((t_GreekLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            GreekLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = GreekLowerCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher$LeafSlice::class$ = NULL;
        jmethodID *IndexSearcher$LeafSlice::mids$ = NULL;
        bool IndexSearcher$LeafSlice::live$ = false;

        jclass IndexSearcher$LeafSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher$LeafSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_683a6c7f] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher$LeafSlice::IndexSearcher$LeafSlice(const JArray< ::org::apache::lucene::index::AtomicReaderContext > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_683a6c7f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexSearcher$LeafSlice__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice, ::java::lang::Object, IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice_init_, 0, 0, 0, 0, 0);

        void t_IndexSearcher$LeafSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher$LeafSlice), module, "IndexSearcher$LeafSlice", 0);
        }

        void t_IndexSearcher$LeafSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "class_", make_descriptor(IndexSearcher$LeafSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher$LeafSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher$LeafSlice::wrap_Object(IndexSearcher$LeafSlice(((t_IndexSearcher$LeafSlice *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::AtomicReaderContext > a0((jobject) NULL);
          IndexSearcher$LeafSlice object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = IndexSearcher$LeafSlice(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *GrowableWriter::class$ = NULL;
          jmethodID *GrowableWriter::mids$ = NULL;
          bool GrowableWriter::live$ = false;

          jclass GrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/GrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_getMutable_ebbbff61] = env->getMethodID(cls, "getMutable", "()Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_585da437] = env->getMethodID(cls, "resize", "(I)Lorg/apache/lucene/util/packed/GrowableWriter;");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GrowableWriter::GrowableWriter(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::PackedInts$Mutable(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          void GrowableWriter::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void GrowableWriter::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jlong GrowableWriter::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint GrowableWriter::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable GrowableWriter::getMutable() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callObjectMethod(this$, mids$[mid_getMutable_ebbbff61]));
          }

          jlong GrowableWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          GrowableWriter GrowableWriter::resize(jint a0) const
          {
            return GrowableWriter(env->callObjectMethod(this$, mids$[mid_resize_585da437], a0));
          }

          void GrowableWriter::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void GrowableWriter::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint GrowableWriter::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self);
          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg);
          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data);
          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data);
          static PyGetSetDef t_GrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_GrowableWriter, bitsPerValue),
            DECLARE_GET_FIELD(t_GrowableWriter, mutable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GrowableWriter__methods_[] = {
            DECLARE_METHOD(t_GrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, clear, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, fill, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, get, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getBitsPerValue, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getMutable, METH_NOARGS),
            DECLARE_METHOD(t_GrowableWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, resize, METH_O),
            DECLARE_METHOD(t_GrowableWriter, save, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, set, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GrowableWriter, t_GrowableWriter, ::org::apache::lucene::util::packed::PackedInts$Mutable, GrowableWriter, t_GrowableWriter_init_, 0, 0, t_GrowableWriter__fields_, 0, 0);

          void t_GrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(GrowableWriter), module, "GrowableWriter", 0);
          }

          void t_GrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "class_", make_descriptor(GrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_GrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GrowableWriter::initializeClass, 1)))
              return NULL;
            return t_GrowableWriter::wrap_Object(GrowableWriter(((t_GrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jfloat a2;
            GrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              INT_CALL(object = GrowableWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "fill", args, 2);
          }

          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBitsPerValue());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "getBitsPerValue", args, 2);
          }

          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);
            OBJ_CALL(result = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
          }

          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg)
          {
            jint a0;
            GrowableWriter result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return t_GrowableWriter::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "save", args, 2);
          }

          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "set", args, 2);
          }

          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable value((jobject) NULL);
            OBJ_CALL(value = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FilterIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FilterIterator::class$ = NULL;
        jmethodID *FilterIterator::mids$ = NULL;
        bool FilterIterator::live$ = false;

        jclass FilterIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FilterIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_106d97d5] = env->getMethodID(cls, "<init>", "(Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_predicateFunction_290588e2] = env->getMethodID(cls, "predicateFunction", "(Ljava/lang/Object;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterIterator::FilterIterator(const ::java::util::Iterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_106d97d5, a0.this$)) {}

        jboolean FilterIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Object FilterIterator::next() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
        }

        void FilterIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args);
        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self);
        static PyObject *t_FilterIterator_next(t_FilterIterator *self);
        static PyObject *t_FilterIterator_remove(t_FilterIterator *self);
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data);
        static PyGetSetDef t_FilterIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilterIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterIterator__methods_[] = {
          DECLARE_METHOD(t_FilterIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterIterator, t_FilterIterator, ::java::lang::Object, FilterIterator, t_FilterIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_FilterIterator__fields_, 0, 0);
        PyObject *t_FilterIterator::wrap_Object(const FilterIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterIterator), module, "FilterIterator", 0);
        }

        void t_FilterIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "class_", make_descriptor(FilterIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "wrapfn_", make_descriptor(t_FilterIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterIterator::initializeClass, 1)))
            return NULL;
          return t_FilterIterator::wrap_Object(FilterIterator(((t_FilterIterator *) arg)->object.this$));
        }
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Iterator a0((jobject) NULL);
          PyTypeObject **p0;
          FilterIterator object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
          {
            INT_CALL(object = FilterIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FilterIterator_next(t_FilterIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FilterIterator_remove(t_FilterIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/FileDictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *FileDictionary::class$ = NULL;
          jmethodID *FileDictionary::mids$ = NULL;
          bool FileDictionary::live$ = false;
          ::java::lang::String *FileDictionary::DEFAULT_FIELD_DELIMITER = NULL;

          jclass FileDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/FileDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
              mids$[mid_init$_97a84c62] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_DELIMITER = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FIELD_DELIMITER", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FileDictionary::FileDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::Reader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97a84c62, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator FileDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self);
          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data);
          static PyGetSetDef t_FileDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_FileDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FileDictionary__methods_[] = {
            DECLARE_METHOD(t_FileDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FileDictionary, t_FileDictionary, ::java::lang::Object, FileDictionary, t_FileDictionary_init_, 0, 0, t_FileDictionary__fields_, 0, 0);

          void t_FileDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(FileDictionary), module, "FileDictionary", 0);
          }

          void t_FileDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "class_", make_descriptor(FileDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "wrapfn_", make_descriptor(t_FileDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FileDictionary::initializeClass);
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "DEFAULT_FIELD_DELIMITER", make_descriptor(j2p(*FileDictionary::DEFAULT_FIELD_DELIMITER)));
          }

          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FileDictionary::initializeClass, 1)))
              return NULL;
            return t_FileDictionary::wrap_Object(FileDictionary(((t_FileDictionary *) arg)->object.this$));
          }
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FileDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *ParserException::class$ = NULL;
          jmethodID *ParserException::mids$ = NULL;
          bool ParserException::live$ = false;

          jclass ParserException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/ParserException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserException::ParserException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParserException::ParserException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ParserException__methods_[] = {
            DECLARE_METHOD(t_ParserException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserException, t_ParserException, ::java::lang::Exception, ParserException, t_ParserException_init_, 0, 0, 0, 0, 0);

          void t_ParserException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserException), module, "ParserException", 0);
          }

          void t_ParserException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "class_", make_descriptor(ParserException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "wrapfn_", make_descriptor(t_ParserException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserException::initializeClass, 1)))
              return NULL;
            return t_ParserException::wrap_Object(ParserException(((t_ParserException *) arg)->object.this$));
          }
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParserException object((jobject) NULL);

                INT_CALL(object = ParserException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Throwable a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Throwable a1((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ParserException(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$BufferSize::class$ = NULL;
        jmethodID *OfflineSorter$BufferSize::mids$ = NULL;
        bool OfflineSorter$BufferSize::live$ = false;

        jclass OfflineSorter$BufferSize::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$BufferSize");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automatic_c261dc62] = env->getStaticMethodID(cls, "automatic", "()Lorg/apache/lucene/util/OfflineSorter$BufferSize;");
            mids$[mid_megabytes_80c67993] = env->getStaticMethodID(cls, "megabytes", "(J)Lorg/apache/lucene/util/OfflineSorter$BufferSize;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::automatic()
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_automatic_c261dc62]));
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::megabytes(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_megabytes_80c67993], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type);
        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_OfflineSorter$BufferSize__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$BufferSize, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, automatic, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, megabytes, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$BufferSize, t_OfflineSorter$BufferSize, ::java::lang::Object, OfflineSorter$BufferSize, abstract_init, 0, 0, 0, 0, 0);

        void t_OfflineSorter$BufferSize::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$BufferSize), module, "OfflineSorter$BufferSize", 0);
        }

        void t_OfflineSorter$BufferSize::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "class_", make_descriptor(OfflineSorter$BufferSize::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$BufferSize::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$BufferSize::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$BufferSize::wrap_Object(OfflineSorter$BufferSize(((t_OfflineSorter$BufferSize *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$BufferSize::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type)
        {
          OfflineSorter$BufferSize result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::automatic());
          return t_OfflineSorter$BufferSize::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          OfflineSorter$BufferSize result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::megabytes(a0));
            return t_OfflineSorter$BufferSize::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "megabytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttributeImpl::class$ = NULL;
        jmethodID *BoostAttributeImpl::mids$ = NULL;
        bool BoostAttributeImpl::live$ = false;

        jclass BoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostAttributeImpl::BoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jfloat BoostAttributeImpl::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttributeImpl::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self);
        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data);
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttributeImpl, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_BoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttributeImpl, t_BoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, BoostAttributeImpl, t_BoostAttributeImpl_init_, 0, 0, t_BoostAttributeImpl__fields_, 0, 0);

        void t_BoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttributeImpl), module, "BoostAttributeImpl", 0);
        }

        void t_BoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "class_", make_descriptor(BoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_BoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_BoostAttributeImpl::wrap_Object(BoostAttributeImpl(((t_BoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          BoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = BoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilterFactory::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilterFactory::mids$ = NULL;
          bool RemoveDuplicatesTokenFilterFactory::live$ = false;

          jclass RemoveDuplicatesTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f366c0be] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilterFactory::RemoveDuplicatesTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter RemoveDuplicatesTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f366c0be], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), module, "RemoveDuplicatesTokenFilterFactory", 0);
          }

          void t_RemoveDuplicatesTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilterFactory::wrap_Object(RemoveDuplicatesTokenFilterFactory(((t_RemoveDuplicatesTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RemoveDuplicatesTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_RemoveDuplicatesTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizer::class$ = NULL;
          jmethodID *EdgeNGramTokenizer::mids$ = NULL;
          bool EdgeNGramTokenizer::live$ = false;
          jint EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;

          jclass EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizer, t_EdgeNGramTokenizer, ::org::apache::lucene::analysis::ngram::NGramTokenizer, EdgeNGramTokenizer, t_EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizer), module, "EdgeNGramTokenizer", 0);
          }

          void t_EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
          }

          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizer::wrap_Object(EdgeNGramTokenizer(((t_EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanOrQuery::class$ = NULL;
          jmethodID *SpanOrQuery::mids$ = NULL;
          bool SpanOrQuery::live$ = false;

          jclass SpanOrQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanOrQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_272f3877] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_addClause_056c1897] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_clone_4d61402f] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanOrQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanOrQuery::SpanOrQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_272f3877, a0.this$)) {}

          void SpanOrQuery::addClause(const ::org::apache::lucene::search::spans::SpanQuery & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addClause_056c1897], a0.this$);
          }

          SpanOrQuery SpanOrQuery::clone() const
          {
            return SpanOrQuery(env->callObjectMethod(this$, mids$[mid_clone_4d61402f]));
          }

          jboolean SpanOrQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanOrQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanOrQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanOrQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanOrQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanOrQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanOrQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanOrQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg);
          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self);
          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data);
          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data);
          static PyGetSetDef t_SpanOrQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanOrQuery, clauses),
            DECLARE_GET_FIELD(t_SpanOrQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanOrQuery__methods_[] = {
            DECLARE_METHOD(t_SpanOrQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, addClause, METH_O),
            DECLARE_METHOD(t_SpanOrQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanOrQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanOrQuery, t_SpanOrQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanOrQuery, t_SpanOrQuery_init_, 0, 0, t_SpanOrQuery__fields_, 0, 0);

          void t_SpanOrQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanOrQuery), module, "SpanOrQuery", 0);
          }

          void t_SpanOrQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "class_", make_descriptor(SpanOrQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanOrQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanOrQuery::initializeClass, 1)))
              return NULL;
            return t_SpanOrQuery::wrap_Object(SpanOrQuery(((t_SpanOrQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanOrQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
            SpanOrQuery object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanOrQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addClause(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addClause", arg);
            return NULL;
          }

          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args)
          {
            SpanOrQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanOrQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilterFactory::class$ = NULL;
          jmethodID *IndicNormalizationFilterFactory::mids$ = NULL;
          bool IndicNormalizationFilterFactory::live$ = false;

          jclass IndicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilterFactory::IndicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IndicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self);
          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_IndicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IndicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory_init_, 0, 0, t_IndicNormalizationFilterFactory__fields_, 0, 0);

          void t_IndicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilterFactory), module, "IndicNormalizationFilterFactory", 0);
          }

          void t_IndicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(IndicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilterFactory::wrap_Object(IndicNormalizationFilterFactory(((t_IndicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttributeImpl::class$ = NULL;
          jmethodID *PositionLengthAttributeImpl::mids$ = NULL;
          bool PositionLengthAttributeImpl::live$ = false;

          jclass PositionLengthAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionLengthAttributeImpl::PositionLengthAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionLengthAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionLengthAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionLengthAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionLengthAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PositionLengthAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionLengthAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self);
          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data);
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttributeImpl, t_PositionLengthAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionLengthAttributeImpl, t_PositionLengthAttributeImpl_init_, 0, 0, t_PositionLengthAttributeImpl__fields_, 0, 0);

          void t_PositionLengthAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttributeImpl), module, "PositionLengthAttributeImpl", 0);
          }

          void t_PositionLengthAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "class_", make_descriptor(PositionLengthAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttributeImpl::wrap_Object(PositionLengthAttributeImpl(((t_PositionLengthAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionLengthAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionLengthAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *LowercaseExpandedTermsQueryNodeProcessor::class$ = NULL;
              jmethodID *LowercaseExpandedTermsQueryNodeProcessor::mids$ = NULL;
              bool LowercaseExpandedTermsQueryNodeProcessor::live$ = false;

              jclass LowercaseExpandedTermsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              LowercaseExpandedTermsQueryNodeProcessor::LowercaseExpandedTermsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode LowercaseExpandedTermsQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_LowercaseExpandedTermsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_LowercaseExpandedTermsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), module, "LowercaseExpandedTermsQueryNodeProcessor", 0);
              }

              void t_LowercaseExpandedTermsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "class_", make_descriptor(LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_LowercaseExpandedTermsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_LowercaseExpandedTermsQueryNodeProcessor::wrap_Object(LowercaseExpandedTermsQueryNodeProcessor(((t_LowercaseExpandedTermsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                LowercaseExpandedTermsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = LowercaseExpandedTermsQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanFilterBuilder::class$ = NULL;
            jmethodID *BooleanFilterBuilder::mids$ = NULL;
            bool BooleanFilterBuilder::live$ = false;

            jclass BooleanFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_26bb3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanFilterBuilder::BooleanFilterBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_26bb3a92, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanFilterBuilder, t_BooleanFilterBuilder, ::java::lang::Object, BooleanFilterBuilder, t_BooleanFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanFilterBuilder), module, "BooleanFilterBuilder", 0);
            }

            void t_BooleanFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "class_", make_descriptor(BooleanFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanFilterBuilder::wrap_Object(BooleanFilterBuilder(((t_BooleanFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              BooleanFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs::class$ = NULL;
          jmethodID *PairOutputs::mids$ = NULL;
          bool PairOutputs::live$ = false;

          jclass PairOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32f3530a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_add_f30532b1] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_common_f30532b1] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_getNoOutput_02379231] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_newPair_b457b73d] = env->getMethodID(cls, "newPair", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_outputToString_93c1f663] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_53ec2f78] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)J");
              mids$[mid_read_49c65b36] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_f30532b1] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_3e3045f1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PairOutputs::PairOutputs(const ::org::apache::lucene::util::fst::Outputs & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::org::apache::lucene::util::fst::Outputs(env->newObject(initializeClass, &mids$, mid_init$_32f3530a, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::add(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_add_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::common(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_common_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_getNoOutput_02379231]));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::newPair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_newPair_b457b73d], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::outputToString(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_93c1f663], a0.this$));
          }

          jlong PairOutputs::ramBytesUsed(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_53ec2f78], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_read_49c65b36], a0.this$));
          }

          void PairOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::subtract(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_subtract_f30532b1], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PairOutputs::write(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3e3045f1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args);
          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data);
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data);
          static PyGetSetDef t_PairOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs, noOutput),
            DECLARE_GET_FIELD(t_PairOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs__methods_[] = {
            DECLARE_METHOD(t_PairOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, newPair, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs, t_PairOutputs, ::org::apache::lucene::util::fst::Outputs, PairOutputs, t_PairOutputs_init_, 0, 0, t_PairOutputs__fields_, 0, 0);
          PyObject *t_PairOutputs::wrap_Object(const PairOutputs& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs), module, "PairOutputs", 0);
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "Pair", make_descriptor(&PY_TYPE(PairOutputs$Pair)));
          }

          void t_PairOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "class_", make_descriptor(PairOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs::initializeClass, 1)))
              return NULL;
            return t_PairOutputs::wrap_Object(PairOutputs(((t_PairOutputs *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Outputs a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            PairOutputs object((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              INT_CALL(object = PairOutputs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
              OBJ_CALL(result = self->object.newPair(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            PyErr_SetArgsError((PyObject *) self, "newPair", args);
            return NULL;
          }

          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            jlong result;

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/io/PrintStream.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Enumeration.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree::class$ = NULL;
            jmethodID *TernaryTree::mids$ = NULL;
            bool TernaryTree::live$ = false;

            jclass TernaryTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balance_54c6a166] = env->getMethodID(cls, "balance", "()V");
                mids$[mid_clone_30bcff98] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;");
                mids$[mid_find_5fdc3f57] = env->getMethodID(cls, "find", "(Ljava/lang/String;)I");
                mids$[mid_find_ec6430eb] = env->getMethodID(cls, "find", "([CI)I");
                mids$[mid_insert_7420ac50] = env->getMethodID(cls, "insert", "(Ljava/lang/String;C)V");
                mids$[mid_insert_6d377140] = env->getMethodID(cls, "insert", "([CIC)V");
                mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_knows_5fdc3f44] = env->getMethodID(cls, "knows", "(Ljava/lang/String;)Z");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_strcmp_979cf09d] = env->getStaticMethodID(cls, "strcmp", "(Ljava/lang/String;[CI)I");
                mids$[mid_strcmp_aa5dc2ed] = env->getStaticMethodID(cls, "strcmp", "([CI[CI)I");
                mids$[mid_strcpy_aa5dc2f2] = env->getStaticMethodID(cls, "strcpy", "([CI[CI)V");
                mids$[mid_strlen_700e23c9] = env->getStaticMethodID(cls, "strlen", "([C)I");
                mids$[mid_strlen_ec6430eb] = env->getStaticMethodID(cls, "strlen", "([CI)I");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
                mids$[mid_insertBalanced_7e9fa7a8] = env->getMethodID(cls, "insertBalanced", "([Ljava/lang/String;[CII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TernaryTree::balance() const
            {
              env->callVoidMethod(this$, mids$[mid_balance_54c6a166]);
            }

            TernaryTree TernaryTree::clone() const
            {
              return TernaryTree(env->callObjectMethod(this$, mids$[mid_clone_30bcff98]));
            }

            jint TernaryTree::find(const ::java::lang::String & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_find_5fdc3f57], a0.this$);
            }

            jint TernaryTree::find(const JArray< jchar > & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_find_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::insert(const ::java::lang::String & a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_7420ac50], a0.this$, a1);
            }

            void TernaryTree::insert(const JArray< jchar > & a0, jint a1, jchar a2) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_6d377140], a0.this$, a1, a2);
            }

            ::java::util::Enumeration TernaryTree::keys() const
            {
              return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
            }

            jboolean TernaryTree::knows(const ::java::lang::String & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_knows_5fdc3f44], a0.this$);
            }

            void TernaryTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }

            jint TernaryTree::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }

            jint TernaryTree::strcmp(const ::java::lang::String & a0, const JArray< jchar > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_979cf09d], a0.this$, a1.this$, a2);
            }

            jint TernaryTree::strcmp(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_aa5dc2ed], a0.this$, a1, a2.this$, a3);
            }

            void TernaryTree::strcpy(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_strcpy_aa5dc2f2], a0.this$, a1, a2.this$, a3);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_700e23c9], a0.this$);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0, jint a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_balance(t_TernaryTree *self);
            static PyObject *t_TernaryTree_clone(t_TernaryTree *self);
            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_keys(t_TernaryTree *self);
            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_size(t_TernaryTree *self);
            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self);

            static PyMethodDef t_TernaryTree__methods_[] = {
              DECLARE_METHOD(t_TernaryTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, balance, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, clone, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, find, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, insert, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, keys, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, knows, METH_O),
              DECLARE_METHOD(t_TernaryTree, printStats, METH_O),
              DECLARE_METHOD(t_TernaryTree, size, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, strcmp, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strcpy, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strlen, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree, t_TernaryTree, ::java::lang::Object, TernaryTree, abstract_init, 0, 0, 0, 0, 0);

            void t_TernaryTree::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree), module, "TernaryTree", 0);
            }

            void t_TernaryTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "class_", make_descriptor(TernaryTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree::initializeClass, 1)))
                return NULL;
              return t_TernaryTree::wrap_Object(TernaryTree(((t_TernaryTree *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TernaryTree_balance(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.balance());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree_clone(t_TernaryTree *self)
            {
              TernaryTree result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_TernaryTree::wrap_Object(result);
            }

            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.find(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.find(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "find", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jchar a1;

                  if (!parseArgs(args, "sC", &a0, &a1))
                  {
                    OBJ_CALL(self->object.insert(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jchar a2;

                  if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
                  {
                    OBJ_CALL(self->object.insert(a0, a1, a2));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_keys(t_TernaryTree *self)
            {
              ::java::util::Enumeration result((jobject) NULL);
              OBJ_CALL(result = self->object.keys());
              return ::java::util::t_Enumeration::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.knows(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "knows", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "printStats", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_size(t_TernaryTree *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< jchar > a1((jobject) NULL);
                  jint a2;
                  jint result;

                  if (!parseArgs(args, "s[CI", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 4:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  JArray< jchar > a2((jobject) NULL);
                  jint a3;
                  jint result;

                  if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2, a3));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strcmp", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;

              if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcpy(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "strcpy", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "[C", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strlen", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector::mids$ = NULL;
          bool AbstractGroupFacetCollector::live$ = false;

          jclass AbstractGroupFacetCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_mergeSegmentResults_e901ef94] = env->getMethodID(cls, "mergeSegmentResults", "(IIZ)Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_createSegmentResult_d8ccc374] = env->getMethodID(cls, "createSegmentResult", "()Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$SegmentResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractGroupFacetCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult AbstractGroupFacetCollector::mergeSegmentResults(jint a0, jint a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult(env->callObjectMethod(this$, mids$[mid_mergeSegmentResults_e901ef94], a0, a1, a2));
          }

          void AbstractGroupFacetCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args);
          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractGroupFacetCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, mergeSegmentResults, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector, t_AbstractGroupFacetCollector, ::org::apache::lucene::search::Collector, AbstractGroupFacetCollector, abstract_init, 0, 0, t_AbstractGroupFacetCollector__fields_, 0, 0);

          void t_AbstractGroupFacetCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector), module, "AbstractGroupFacetCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "FacetEntry", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry)));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "GroupedFacetResult", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult)));
          }

          void t_AbstractGroupFacetCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector::wrap_Object(AbstractGroupFacetCollector(((t_AbstractGroupFacetCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult result((jobject) NULL);

            if (!parseArgs(args, "IIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.mergeSegmentResults(a0, a1, a2));
              return ::org::apache::lucene::search::grouping::t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "mergeSegmentResults", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleFieldSource::class$ = NULL;
            jmethodID *DoubleFieldSource::mids$ = NULL;
            bool DoubleFieldSource::live$ = false;

            jclass DoubleFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_5456b073] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5456b073, a0.this$, a1.this$)) {}

            ::java::lang::String DoubleFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args);

            static PyMethodDef t_DoubleFieldSource__methods_[] = {
              DECLARE_METHOD(t_DoubleFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleFieldSource, t_DoubleFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, DoubleFieldSource, t_DoubleFieldSource_init_, 0, 0, 0, 0, 0);

            void t_DoubleFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleFieldSource), module, "DoubleFieldSource", 0);
            }

            void t_DoubleFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "class_", make_descriptor(DoubleFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleFieldSource::initializeClass, 1)))
                return NULL;
              return t_DoubleFieldSource::wrap_Object(DoubleFieldSource(((t_DoubleFieldSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = DoubleFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = DoubleFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/HungarianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *HungarianStemmer::class$ = NULL;
        jmethodID *HungarianStemmer::mids$ = NULL;
        bool HungarianStemmer::live$ = false;

        jclass HungarianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/HungarianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HungarianStemmer::HungarianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean HungarianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint HungarianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean HungarianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args);

        static PyMethodDef t_HungarianStemmer__methods_[] = {
          DECLARE_METHOD(t_HungarianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(HungarianStemmer, t_HungarianStemmer, ::org::tartarus::snowball::SnowballProgram, HungarianStemmer, t_HungarianStemmer_init_, 0, 0, 0, 0, 0);

        void t_HungarianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(HungarianStemmer), module, "HungarianStemmer", 0);
        }

        void t_HungarianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "class_", make_descriptor(HungarianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HungarianStemmer::initializeClass, 1)))
            return NULL;
          return t_HungarianStemmer::wrap_Object(HungarianStemmer(((t_HungarianStemmer *) arg)->object.this$));
        }
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HungarianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds)
        {
          HungarianStemmer object((jobject) NULL);

          INT_CALL(object = HungarianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause::class$ = NULL;
        jmethodID *BooleanClause::mids$ = NULL;
        bool BooleanClause::live$ = false;

        jclass BooleanClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_827be425] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isProhibited_54c6a16a] = env->getMethodID(cls, "isProhibited", "()Z");
            mids$[mid_isRequired_54c6a16a] = env->getMethodID(cls, "isRequired", "()Z");
            mids$[mid_setOccur_23bdc104] = env->getMethodID(cls, "setOccur", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_setQuery_6e301113] = env->getMethodID(cls, "setQuery", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause::BooleanClause(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_827be425, a0.this$, a1.this$)) {}

        jboolean BooleanClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::BooleanClause$Occur BooleanClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        ::org::apache::lucene::search::Query BooleanClause::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint BooleanClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanClause::isProhibited() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isProhibited_54c6a16a]);
        }

        jboolean BooleanClause::isRequired() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isRequired_54c6a16a]);
        }

        void BooleanClause::setOccur(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOccur_23bdc104], a0.this$);
        }

        void BooleanClause::setQuery(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setQuery_6e301113], a0.this$);
        }

        ::java::lang::String BooleanClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self);
        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self);
        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self);
        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self);
        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data);
        static PyGetSetDef t_BooleanClause__fields_[] = {
          DECLARE_GETSET_FIELD(t_BooleanClause, occur),
          DECLARE_GET_FIELD(t_BooleanClause, prohibited),
          DECLARE_GETSET_FIELD(t_BooleanClause, query),
          DECLARE_GET_FIELD(t_BooleanClause, required),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause__methods_[] = {
          DECLARE_METHOD(t_BooleanClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, isProhibited, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, isRequired, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, setOccur, METH_O),
          DECLARE_METHOD(t_BooleanClause, setQuery, METH_O),
          DECLARE_METHOD(t_BooleanClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause, t_BooleanClause, ::java::lang::Object, BooleanClause, t_BooleanClause_init_, 0, 0, t_BooleanClause__fields_, 0, 0);

        void t_BooleanClause::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause), module, "BooleanClause", 0);
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "Occur", make_descriptor(&PY_TYPE(BooleanClause$Occur)));
        }

        void t_BooleanClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "class_", make_descriptor(BooleanClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause::initializeClass, 1)))
            return NULL;
          return t_BooleanClause::wrap_Object(BooleanClause(((t_BooleanClause *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          BooleanClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = BooleanClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isProhibited());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isRequired());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            OBJ_CALL(self->object.setOccur(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOccur", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setQuery(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
            {
              INT_CALL(self->object.setOccur(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "occur", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isProhibited());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              INT_CALL(self->object.setQuery(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "query", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isRequired());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilterFactory::class$ = NULL;
          jmethodID *StemmerOverrideFilterFactory::mids$ = NULL;
          bool StemmerOverrideFilterFactory::live$ = false;

          jclass StemmerOverrideFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilterFactory::StemmerOverrideFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StemmerOverrideFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void StemmerOverrideFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StemmerOverrideFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self);
          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory_init_, 0, 0, t_StemmerOverrideFilterFactory__fields_, 0, 0);

          void t_StemmerOverrideFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilterFactory), module, "StemmerOverrideFilterFactory", 0);
          }

          void t_StemmerOverrideFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "class_", make_descriptor(StemmerOverrideFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilterFactory::wrap_Object(StemmerOverrideFilterFactory(((t_StemmerOverrideFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StemmerOverrideFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StemmerOverrideFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemFilter::class$ = NULL;
          jmethodID *FrenchStemFilter::mids$ = NULL;
          bool FrenchStemFilter::live$ = false;

          jclass FrenchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_d53125fa] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/fr/FrenchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemFilter::FrenchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FrenchStemFilter::setStemmer(const ::org::apache::lucene::analysis::fr::FrenchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_d53125fa], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args);
          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg);
          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FrenchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_FrenchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FrenchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemFilter, t_FrenchStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchStemFilter, t_FrenchStemFilter_init_, 0, 0, t_FrenchStemFilter__fields_, 0, 0);

          void t_FrenchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemFilter), module, "FrenchStemFilter", 0);
          }

          void t_FrenchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "class_", make_descriptor(FrenchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchStemFilter::wrap_Object(FrenchStemFilter(((t_FrenchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::fr::FrenchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::fr::FrenchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.h"
#include "java/lang/Number.h"
#include "java/text/DateFormat.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumberDateFormat::class$ = NULL;
              jmethodID *NumberDateFormat::mids$ = NULL;
              bool NumberDateFormat::live$ = false;

              jclass NumberDateFormat::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumberDateFormat::NumberDateFormat(const ::java::text::DateFormat & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumberDateFormat__methods_[] = {
                DECLARE_METHOD(t_NumberDateFormat, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumberDateFormat, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumberDateFormat, t_NumberDateFormat, ::java::text::NumberFormat, NumberDateFormat, t_NumberDateFormat_init_, 0, 0, 0, 0, 0);

              void t_NumberDateFormat::install(PyObject *module)
              {
                installType(&PY_TYPE(NumberDateFormat), module, "NumberDateFormat", 0);
              }

              void t_NumberDateFormat::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "class_", make_descriptor(NumberDateFormat::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberDateFormat::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumberDateFormat::initializeClass, 1)))
                  return NULL;
                return t_NumberDateFormat::wrap_Object(NumberDateFormat(((t_NumberDateFormat *) arg)->object.this$));
              }
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumberDateFormat::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds)
              {
                ::java::text::DateFormat a0((jobject) NULL);
                NumberDateFormat object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = NumberDateFormat(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSet::class$ = NULL;
        jmethodID *FilteredDocIdSet::mids$ = NULL;
        bool FilteredDocIdSet::live$ = false;

        jclass FilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52bc98cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSet::FilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_52bc98cb, a0.this$)) {}

        ::org::apache::lucene::util::Bits FilteredDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FilteredDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FilteredDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong FilteredDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data);
        static PyGetSetDef t_FilteredDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSet, t_FilteredDocIdSet, ::org::apache::lucene::search::DocIdSet, FilteredDocIdSet, t_FilteredDocIdSet_init_, 0, 0, t_FilteredDocIdSet__fields_, 0, 0);

        void t_FilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSet), module, "FilteredDocIdSet", 0);
        }

        void t_FilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "class_", make_descriptor(FilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSet::wrap_Object(FilteredDocIdSet(((t_FilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          FilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilter::class$ = NULL;
          jmethodID *StandardFilter::mids$ = NULL;
          bool StandardFilter::live$ = false;

          jclass StandardFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_incrementTokenClassic_54c6a16a] = env->getMethodID(cls, "incrementTokenClassic", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilter::StandardFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean StandardFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean StandardFilter::incrementTokenClassic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementTokenClassic_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args);
          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self);

          static PyMethodDef t_StandardFilter__methods_[] = {
            DECLARE_METHOD(t_StandardFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardFilter, incrementTokenClassic, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilter, t_StandardFilter, ::org::apache::lucene::analysis::TokenFilter, StandardFilter, t_StandardFilter_init_, 0, 0, 0, 0, 0);

          void t_StandardFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilter), module, "StandardFilter", 0);
          }

          void t_StandardFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "class_", make_descriptor(StandardFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "wrapfn_", make_descriptor(t_StandardFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilter::initializeClass, 1)))
              return NULL;
            return t_StandardFilter::wrap_Object(StandardFilter(((t_StandardFilter *) arg)->object.this$));
          }
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            StandardFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = StandardFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.incrementTokenClassic());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupingSearch.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupingSearch::class$ = NULL;
          jmethodID *GroupingSearch::mids$ = NULL;
          bool GroupingSearch::live$ = false;

          jclass GroupingSearch::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupingSearch");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
              mids$[mid_disableCaching_bd44cd2b] = env->getMethodID(cls, "disableCaching", "()Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_getAllGroupHeads_03c2457d] = env->getMethodID(cls, "getAllGroupHeads", "()Lorg/apache/lucene/util/Bits;");
              mids$[mid_getAllMatchingGroups_2d2d7de4] = env->getMethodID(cls, "getAllMatchingGroups", "()Ljava/util/Collection;");
              mids$[mid_search_cc5c11db] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_search_2bb63d27] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setAllGroupHeads_b6dc0458] = env->getMethodID(cls, "setAllGroupHeads", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setAllGroups_b6dc0458] = env->getMethodID(cls, "setAllGroups", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCaching_8d110dba] = env->getMethodID(cls, "setCaching", "(IZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCachingInMB_c48a1ff7] = env->getMethodID(cls, "setCachingInMB", "(DZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setFillSortFields_b6dc0458] = env->getMethodID(cls, "setFillSortFields", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsLimit_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsLimit", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsOffset_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsOffset", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupSort_a0e5bdf3] = env->getMethodID(cls, "setGroupSort", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeMaxScore_b6dc0458] = env->getMethodID(cls, "setIncludeMaxScore", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeScores_b6dc0458] = env->getMethodID(cls, "setIncludeScores", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setInitialSize_2cfcb8b1] = env->getMethodID(cls, "setInitialSize", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setSortWithinGroup_a0e5bdf3] = env->getMethodID(cls, "setSortWithinGroup", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_groupByFieldOrFunction_2bb63d27] = env->getMethodID(cls, "groupByFieldOrFunction", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_groupByDocBlock_2bb63d27] = env->getMethodID(cls, "groupByDocBlock", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::search::Filter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

          GroupingSearch GroupingSearch::disableCaching() const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_disableCaching_bd44cd2b]));
          }

          ::org::apache::lucene::util::Bits GroupingSearch::getAllGroupHeads() const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getAllGroupHeads_03c2457d]));
          }

          ::java::util::Collection GroupingSearch::getAllMatchingGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getAllMatchingGroups_2d2d7de4]));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, jint a3) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_cc5c11db], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Query & a2, jint a3, jint a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_2bb63d27], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          GroupingSearch GroupingSearch::setAllGroupHeads(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroupHeads_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setAllGroups(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroups_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setCaching(jint a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCaching_8d110dba], a0, a1));
          }

          GroupingSearch GroupingSearch::setCachingInMB(jdouble a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCachingInMB_c48a1ff7], a0, a1));
          }

          GroupingSearch GroupingSearch::setFillSortFields(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setFillSortFields_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsLimit(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsLimit_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsOffset(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsOffset_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupSort(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupSort_a0e5bdf3], a0.this$));
          }

          GroupingSearch GroupingSearch::setIncludeMaxScore(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeMaxScore_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setIncludeScores(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeScores_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setInitialSize(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setInitialSize_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setSortWithinGroup(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setSortWithinGroup_a0e5bdf3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyGetSetDef t_GroupingSearch__fields_[] = {
            DECLARE_GETSET_FIELD(t_GroupingSearch, allGroupHeads),
            DECLARE_SET_FIELD(t_GroupingSearch, allGroups),
            DECLARE_GET_FIELD(t_GroupingSearch, allMatchingGroups),
            DECLARE_SET_FIELD(t_GroupingSearch, fillSortFields),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsLimit),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsOffset),
            DECLARE_SET_FIELD(t_GroupingSearch, groupSort),
            DECLARE_SET_FIELD(t_GroupingSearch, includeMaxScore),
            DECLARE_SET_FIELD(t_GroupingSearch, includeScores),
            DECLARE_SET_FIELD(t_GroupingSearch, initialSize),
            DECLARE_SET_FIELD(t_GroupingSearch, sortWithinGroup),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupingSearch__methods_[] = {
            DECLARE_METHOD(t_GroupingSearch, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, disableCaching, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllGroupHeads, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllMatchingGroups, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, search, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setAllGroupHeads, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setAllGroups, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setCaching, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setCachingInMB, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setFillSortFields, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsLimit, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsOffset, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupSort, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeMaxScore, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeScores, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setInitialSize, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setSortWithinGroup, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupingSearch, t_GroupingSearch, ::java::lang::Object, GroupingSearch, t_GroupingSearch_init_, 0, 0, t_GroupingSearch__fields_, 0, 0);

          void t_GroupingSearch::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupingSearch), module, "GroupingSearch", 0);
          }

          void t_GroupingSearch::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "class_", make_descriptor(GroupingSearch::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "wrapfn_", make_descriptor(t_GroupingSearch::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupingSearch::initializeClass, 1)))
              return NULL;
            return t_GroupingSearch::wrap_Object(GroupingSearch(((t_GroupingSearch *) arg)->object.this$));
          }
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupingSearch::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = GroupingSearch(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self)
          {
            GroupingSearch result((jobject) NULL);
            OBJ_CALL(result = self->object.disableCaching());
            return t_GroupingSearch::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self)
          {
            ::org::apache::lucene::util::Bits result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                jint a2;
                jint a3;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Filter a1((jobject) NULL);
                ::org::apache::lucene::search::Query a2((jobject) NULL);
                jint a3;
                jint a4;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "search", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroupHeads(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroupHeads", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroups(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCaching(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCaching", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args)
          {
            jdouble a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "DZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCachingInMB(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCachingInMB", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setFillSortFields(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setFillSortFields", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsLimit(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsLimit", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsOffset(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsOffset", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setGroupSort(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupSort", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeMaxScore(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeMaxScore", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeScores(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeScores", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setInitialSize(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setInitialSize", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setSortWithinGroup(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setSortWithinGroup", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data)
          {
            ::org::apache::lucene::util::Bits value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
          }
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroupHeads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroupHeads", arg);
            return -1;
          }

          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroups", arg);
            return -1;
          }

          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setFillSortFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillSortFields", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsLimit", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsOffset", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setGroupSort(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupSort", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeMaxScore(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeMaxScore", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeScores(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeScores", arg);
            return -1;
          }

          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setInitialSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "initialSize", arg);
            return -1;
          }

          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setSortWithinGroup(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "sortWithinGroup", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilter::class$ = NULL;
          jmethodID *MappingCharFilter::mids$ = NULL;
          bool MappingCharFilter::live$ = false;

          jclass MappingCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0fc966df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilter::MappingCharFilter(const ::org::apache::lucene::analysis::charfilter::NormalizeCharMap & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_0fc966df, a0.this$, a1.this$)) {}

          jint MappingCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint MappingCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }

          void MappingCharFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args);
          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args);

          static PyMethodDef t_MappingCharFilter__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, read, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilter, t_MappingCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, MappingCharFilter, t_MappingCharFilter_init_, 0, 0, 0, 0, 0);

          void t_MappingCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilter), module, "MappingCharFilter", 0);
          }

          void t_MappingCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "class_", make_descriptor(MappingCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilter::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilter::wrap_Object(MappingCharFilter(((t_MappingCharFilter *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            MappingCharFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::charfilter::NormalizeCharMap::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MappingCharFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Query::class$ = NULL;
        jmethodID *Query::mids$ = NULL;
        bool Query::live$ = false;

        jclass Query::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Query");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_97e3851a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Query::Query() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Query Query::clone() const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_clone_97e3851a]));
        }

        ::org::apache::lucene::search::Weight Query::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean Query::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void Query::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat Query::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint Query::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        Query Query::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void Query::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        ::java::lang::String Query::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Query::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Query_clone(t_Query *self);
        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg);
        static PyObject *t_Query_equals(t_Query *self, PyObject *args);
        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg);
        static PyObject *t_Query_getBoost(t_Query *self);
        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args);
        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg);
        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg);
        static PyObject *t_Query_toString(t_Query *self, PyObject *args);
        static PyObject *t_Query_get__boost(t_Query *self, void *data);
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data);
        static PyGetSetDef t_Query__fields_[] = {
          DECLARE_GETSET_FIELD(t_Query, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Query__methods_[] = {
          DECLARE_METHOD(t_Query, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, clone, METH_NOARGS),
          DECLARE_METHOD(t_Query, createWeight, METH_O),
          DECLARE_METHOD(t_Query, equals, METH_VARARGS),
          DECLARE_METHOD(t_Query, extractTerms, METH_O),
          DECLARE_METHOD(t_Query, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_Query, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Query, rewrite, METH_O),
          DECLARE_METHOD(t_Query, setBoost, METH_O),
          DECLARE_METHOD(t_Query, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Query, t_Query, ::java::lang::Object, Query, t_Query_init_, 0, 0, t_Query__fields_, 0, 0);

        void t_Query::install(PyObject *module)
        {
          installType(&PY_TYPE(Query), module, "Query", 0);
        }

        void t_Query::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "class_", make_descriptor(Query::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "wrapfn_", make_descriptor(t_Query::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Query::initializeClass, 1)))
            return NULL;
          return t_Query::wrap_Object(Query(((t_Query *) arg)->object.this$));
        }
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Query::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds)
        {
          Query object((jobject) NULL);

          INT_CALL(object = Query());
          self->object = object;

          return 0;
        }

        static PyObject *t_Query_clone(t_Query *self)
        {
          Query result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_Query::wrap_Object(result);
        }

        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createWeight", arg);
          return NULL;
        }

        static PyObject *t_Query_equals(t_Query *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "extractTerms", arg);
          return NULL;
        }

        static PyObject *t_Query_getBoost(t_Query *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Query_toString(t_Query *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Query_get__boost(t_Query *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsWriterBase::class$ = NULL;
        jmethodID *PostingsWriterBase::mids$ = NULL;
        bool PostingsWriterBase::live$ = false;

        jclass PostingsWriterBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsWriterBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
            mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
            mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
            mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsWriterBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsWriterBase::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        void PostingsWriterBase::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
        }

        void PostingsWriterBase::init(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsWriterBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }

        jint PostingsWriterBase::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
        }

        void PostingsWriterBase::startTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args);
        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self);
        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data);
        static PyGetSetDef t_PostingsWriterBase__fields_[] = {
          DECLARE_SET_FIELD(t_PostingsWriterBase, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsWriterBase__methods_[] = {
          DECLARE_METHOD(t_PostingsWriterBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, encodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsWriterBase, finishTerm, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, init, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, newTermState, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, setField, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, startTerm, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsWriterBase, t_PostingsWriterBase, ::org::apache::lucene::codecs::PostingsConsumer, PostingsWriterBase, abstract_init, 0, 0, t_PostingsWriterBase__fields_, 0, 0);

        void t_PostingsWriterBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsWriterBase), module, "PostingsWriterBase", 0);
        }

        void t_PostingsWriterBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "class_", make_descriptor(PostingsWriterBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsWriterBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsWriterBase::initializeClass, 1)))
            return NULL;
          return t_PostingsWriterBase::wrap_Object(PostingsWriterBase(((t_PostingsWriterBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsWriterBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "encodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.finishTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }

        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setField(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "setField", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.startTerm());
          Py_RETURN_NONE;
        }

        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/PackedLongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *PackedLongDocValuesField::class$ = NULL;
        jmethodID *PackedLongDocValuesField::mids$ = NULL;
        bool PackedLongDocValuesField::live$ = false;

        jclass PackedLongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/PackedLongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PackedLongDocValuesField::PackedLongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PackedLongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_PackedLongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PackedLongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PackedLongDocValuesField, t_PackedLongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, PackedLongDocValuesField, t_PackedLongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_PackedLongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(PackedLongDocValuesField), module, "PackedLongDocValuesField", 0);
        }

        void t_PackedLongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "class_", make_descriptor(PackedLongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_PackedLongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PackedLongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_PackedLongDocValuesField::wrap_Object(PackedLongDocValuesField(((t_PackedLongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PackedLongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          PackedLongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = PackedLongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilterFactory::class$ = NULL;
          jmethodID *RussianLightStemFilterFactory::mids$ = NULL;
          bool RussianLightStemFilterFactory::live$ = false;

          jclass RussianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilterFactory::RussianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream RussianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilterFactory, t_RussianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RussianLightStemFilterFactory, t_RussianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilterFactory), module, "RussianLightStemFilterFactory", 0);
          }

          void t_RussianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "class_", make_descriptor(RussianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilterFactory::wrap_Object(RussianLightStemFilterFactory(((t_RussianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *TooManyBasicQueries::class$ = NULL;
            jmethodID *TooManyBasicQueries::mids$ = NULL;
            bool TooManyBasicQueries::live$ = false;

            jclass TooManyBasicQueries::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/TooManyBasicQueries");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TooManyBasicQueries::TooManyBasicQueries(jint a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TooManyBasicQueries__methods_[] = {
              DECLARE_METHOD(t_TooManyBasicQueries, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TooManyBasicQueries, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TooManyBasicQueries, t_TooManyBasicQueries, ::java::io::IOException, TooManyBasicQueries, t_TooManyBasicQueries_init_, 0, 0, 0, 0, 0);

            void t_TooManyBasicQueries::install(PyObject *module)
            {
              installType(&PY_TYPE(TooManyBasicQueries), module, "TooManyBasicQueries", 0);
            }

            void t_TooManyBasicQueries::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "class_", make_descriptor(TooManyBasicQueries::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "wrapfn_", make_descriptor(t_TooManyBasicQueries::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TooManyBasicQueries::initializeClass, 1)))
                return NULL;
              return t_TooManyBasicQueries::wrap_Object(TooManyBasicQueries(((t_TooManyBasicQueries *) arg)->object.this$));
            }
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TooManyBasicQueries::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              TooManyBasicQueries object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = TooManyBasicQueries(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$QueryAndLimit::class$ = NULL;
        jmethodID *BufferedUpdatesStream$QueryAndLimit::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$QueryAndLimit::fids$ = NULL;
        bool BufferedUpdatesStream$QueryAndLimit::live$ = false;

        jclass BufferedUpdatesStream$QueryAndLimit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e29027ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_limit] = env->getFieldID(cls, "limit", "I");
            fids$[fid_query] = env->getFieldID(cls, "query", "Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedUpdatesStream$QueryAndLimit::BufferedUpdatesStream$QueryAndLimit(const ::org::apache::lucene::search::Query & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e29027ff, a0.this$, a1)) {}

        jint BufferedUpdatesStream$QueryAndLimit::_get_limit() const
        {
          return env->getIntField(this$, fids$[fid_limit]);
        }

        ::org::apache::lucene::search::Query BufferedUpdatesStream$QueryAndLimit::_get_query() const
        {
          return ::org::apache::lucene::search::Query(env->getObjectField(this$, fids$[fid_query]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$QueryAndLimit__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, limit),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$QueryAndLimit__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit, ::java::lang::Object, BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit_init_, 0, 0, t_BufferedUpdatesStream$QueryAndLimit__fields_, 0, 0);

        void t_BufferedUpdatesStream$QueryAndLimit::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$QueryAndLimit), module, "BufferedUpdatesStream$QueryAndLimit", 0);
        }

        void t_BufferedUpdatesStream$QueryAndLimit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$QueryAndLimit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$QueryAndLimit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$QueryAndLimit::wrap_Object(BufferedUpdatesStream$QueryAndLimit(((t_BufferedUpdatesStream$QueryAndLimit *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          BufferedUpdatesStream$QueryAndLimit object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BufferedUpdatesStream$QueryAndLimit(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_limit());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object._get_query());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *Token::class$ = NULL;
            jmethodID *Token::mids$ = NULL;
            jfieldID *Token::fids$ = NULL;
            bool Token::live$ = false;

            jclass Token::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/Token");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                mids$[mid_newToken_1162c488] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_newToken_b6d076fa] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

            ::java::lang::Object Token::getValue() const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
            }

            Token Token::newToken(jint a0)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_1162c488], a0));
            }

            Token Token::newToken(jint a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b6d076fa], a0, a1.this$));
            }

            ::java::lang::String Token::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint Token::_get_beginColumn() const
            {
              return env->getIntField(this$, fids$[fid_beginColumn]);
            }

            void Token::_set_beginColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginColumn], a0);
            }

            jint Token::_get_beginLine() const
            {
              return env->getIntField(this$, fids$[fid_beginLine]);
            }

            void Token::_set_beginLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginLine], a0);
            }

            jint Token::_get_endColumn() const
            {
              return env->getIntField(this$, fids$[fid_endColumn]);
            }

            void Token::_set_endColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endColumn], a0);
            }

            jint Token::_get_endLine() const
            {
              return env->getIntField(this$, fids$[fid_endLine]);
            }

            void Token::_set_endLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endLine], a0);
            }

            ::java::lang::String Token::_get_image() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
            }

            void Token::_set_image(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_image], a0.this$);
            }

            jint Token::_get_kind() const
            {
              return env->getIntField(this$, fids$[fid_kind]);
            }

            void Token::_set_kind(jint a0) const
            {
              env->setIntField(this$, fids$[fid_kind], a0);
            }

            Token Token::_get_next() const
            {
              return Token(env->getObjectField(this$, fids$[fid_next]));
            }

            void Token::_set_next(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_next], a0.this$);
            }

            Token Token::_get_specialToken() const
            {
              return Token(env->getObjectField(this$, fids$[fid_specialToken]));
            }

            void Token::_set_specialToken(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Token_getValue(t_Token *self);
            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
            static PyObject *t_Token_toString(t_Token *self, PyObject *args);
            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endLine(t_Token *self, void *data);
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__image(t_Token *self, void *data);
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__kind(t_Token *self, void *data);
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__next(t_Token *self, void *data);
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

            static PyObject *t_Token_get__value(t_Token *self, void *data);
            static PyGetSetDef t_Token__fields_[] = {
              DECLARE_GETSET_FIELD(t_Token, beginColumn),
              DECLARE_GETSET_FIELD(t_Token, beginLine),
              DECLARE_GETSET_FIELD(t_Token, endColumn),
              DECLARE_GETSET_FIELD(t_Token, endLine),
              DECLARE_GETSET_FIELD(t_Token, image),
              DECLARE_GETSET_FIELD(t_Token, kind),
              DECLARE_GETSET_FIELD(t_Token, next),
              DECLARE_GETSET_FIELD(t_Token, specialToken),
              DECLARE_GET_FIELD(t_Token, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Token__methods_[] = {
              DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
              DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_Token, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

            void t_Token::install(PyObject *module)
            {
              installType(&PY_TYPE(Token), module, "Token", 0);
            }

            void t_Token::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                return NULL;
              return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
            }
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Token::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Token object((jobject) NULL);

                  INT_CALL(object = Token());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = Token(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    INT_CALL(object = Token(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Token_getValue(t_Token *self)
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0));
                    return t_Token::wrap_Object(result);
                  }
                }
                break;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0, a1));
                    return t_Token::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "newToken", args);
              return NULL;
            }

            static PyObject *t_Token_toString(t_Token *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__endLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__image(t_Token *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_image());
              return j2p(value);
            }
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_image(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "image", arg);
              return -1;
            }

            static PyObject *t_Token_get__kind(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_kind());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_kind(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "kind", arg);
              return -1;
            }

            static PyObject *t_Token_get__next(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_next());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_next(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "next", arg);
              return -1;
            }

            static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_specialToken());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_specialToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
              return -1;
            }

            static PyObject *t_Token_get__value(t_Token *self, void *data)
            {
              ::java::lang::Object value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilterFactory::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilterFactory::live$ = false;

          jclass HyphenationCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_bdbb32a7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilterFactory::HyphenationCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter HyphenationCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter(env->callObjectMethod(this$, mids$[mid_create_bdbb32a7], a0.this$));
          }

          void HyphenationCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HyphenationCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), module, "HyphenationCompoundWordTokenFilterFactory", 0);
          }

          void t_HyphenationCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilterFactory::wrap_Object(HyphenationCompoundWordTokenFilterFactory(((t_HyphenationCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenationCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenationCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::compound::t_HyphenationCompoundWordTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/Closeable.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingInfixSuggester::class$ = NULL;
            jmethodID *AnalyzingInfixSuggester::mids$ = NULL;
            bool AnalyzingInfixSuggester::live$ = false;
            jint AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS = (jint) 0;

            jclass AnalyzingInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_3b9404b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_add_2d27343d] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_3273017a] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;IZZ)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_refresh_54c6a166] = env->getMethodID(cls, "refresh", "()V");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_update_2d27343d] = env->getMethodID(cls, "update", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getDirectory_c34cda9e] = env->getMethodID(cls, "getDirectory", "(Ljava/io/File;)Lorg/apache/lucene/store/Directory;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_highlight_6b3f1693] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_getIndexWriterConfig_04dea876] = env->getMethodID(cls, "getIndexWriterConfig", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_getLastTokenQuery_fbed2634] = env->getMethodID(cls, "getLastTokenQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_finishQuery_4a287f5d] = env->getMethodID(cls, "finishQuery", "(Lorg/apache/lucene/search/BooleanQuery;Z)Lorg/apache/lucene/search/Query;");
                mids$[mid_addNonMatch_2e1c61a6] = env->getMethodID(cls, "addNonMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V");
                mids$[mid_addWholeMatch_55a79f28] = env->getMethodID(cls, "addWholeMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_addPrefixMatch_539c241a] = env->getMethodID(cls, "addPrefixMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MIN_PREFIX_CHARS = env->getStaticIntField(cls, "DEFAULT_MIN_PREFIX_CHARS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_3b9404b5, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

            void AnalyzingInfixSuggester::add(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_add_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }

            void AnalyzingInfixSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void AnalyzingInfixSuggester::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jlong AnalyzingInfixSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingInfixSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1, jboolean a2, jboolean a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_3273017a], a0.this$, a1, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }

            jlong AnalyzingInfixSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void AnalyzingInfixSuggester::refresh() const
            {
              env->callVoidMethod(this$, mids$[mid_refresh_54c6a166]);
            }

            jboolean AnalyzingInfixSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }

            void AnalyzingInfixSuggester::update(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_update_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingInfixSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingInfixSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, add, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, close, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, refresh, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, store, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, update, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingInfixSuggester, t_AnalyzingInfixSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingInfixSuggester, t_AnalyzingInfixSuggester_init_, 0, 0, t_AnalyzingInfixSuggester__fields_, 0, 0);

            void t_AnalyzingInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingInfixSuggester), module, "AnalyzingInfixSuggester", 0);
            }

            void t_AnalyzingInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "class_", make_descriptor(AnalyzingInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "DEFAULT_MIN_PREFIX_CHARS", make_descriptor(AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS));
            }

            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingInfixSuggester::wrap_Object(AnalyzingInfixSuggester(((t_AnalyzingInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 5:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "KkkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.add(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  jboolean a2;
                  jboolean a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OIZZ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.refresh());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.update(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "update", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilterFactory::class$ = NULL;
          jmethodID *MappingCharFilterFactory::mids$ = NULL;
          bool MappingCharFilterFactory::live$ = false;

          jclass MappingCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_parseRules_c71ecf97] = env->getMethodID(cls, "parseRules", "(Ljava/util/List;Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder;)V");
              mids$[mid_parseString_97a5258f] = env->getMethodID(cls, "parseString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilterFactory::MappingCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::java::io::Reader MappingCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MappingCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void MappingCharFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args);
          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self);
          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data);
          static PyGetSetDef t_MappingCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_MappingCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MappingCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilterFactory, t_MappingCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, MappingCharFilterFactory, t_MappingCharFilterFactory_init_, 0, 0, t_MappingCharFilterFactory__fields_, 0, 0);

          void t_MappingCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilterFactory), module, "MappingCharFilterFactory", 0);
          }

          void t_MappingCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "class_", make_descriptor(MappingCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilterFactory::wrap_Object(MappingCharFilterFactory(((t_MappingCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            MappingCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = MappingCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MappingCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeFilter.h"
#include "java/lang/Number.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeFilter::class$ = NULL;
        jmethodID *NumericRangeFilter::mids$ = NULL;
        bool NumericRangeFilter::live$ = false;

        jclass NumericRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_dba8ce37] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newDoubleRange_086f57c9] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_a2bb5c27] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_ba518bd5] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_0551a8cf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_eeb70fc1] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_557bc96b] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_b95b6e4d] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Number NumericRangeFilter::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeFilter::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeFilter::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericRangeFilter::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeFilter::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_dba8ce37], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_086f57c9], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_a2bb5c27], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ba518bd5], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_0551a8cf], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_eeb70fc1], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_557bc96b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_b95b6e4d], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args);
        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data);
        static PyGetSetDef t_NumericRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeFilter, max),
          DECLARE_GET_FIELD(t_NumericRangeFilter, min),
          DECLARE_GET_FIELD(t_NumericRangeFilter, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeFilter__methods_[] = {
          DECLARE_METHOD(t_NumericRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeFilter, t_NumericRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, NumericRangeFilter, abstract_init, 0, 0, t_NumericRangeFilter__fields_, 0, 0);
        PyObject *t_NumericRangeFilter::wrap_Object(const NumericRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeFilter), module, "NumericRangeFilter", 0);
        }

        void t_NumericRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "class_", make_descriptor(NumericRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeFilter::initializeClass, 1)))
            return NULL;
          return t_NumericRangeFilter::wrap_Object(NumericRangeFilter(((t_NumericRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$conditional_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$conditional_return::class$ = NULL;
          jmethodID *JavascriptParser$conditional_return::mids$ = NULL;
          bool JavascriptParser$conditional_return::live$ = false;

          jclass JavascriptParser$conditional_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$conditional_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$conditional_return::JavascriptParser$conditional_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$conditional_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$conditional_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$conditional_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$conditional_return, t_JavascriptParser$conditional_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$conditional_return, t_JavascriptParser$conditional_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$conditional_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$conditional_return), module, "JavascriptParser$conditional_return", 0);
          }

          void t_JavascriptParser$conditional_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "class_", make_descriptor(JavascriptParser$conditional_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$conditional_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$conditional_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$conditional_return::wrap_Object(JavascriptParser$conditional_return(((t_JavascriptParser$conditional_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$conditional_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$conditional_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$conditional_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntroSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntroSorter::class$ = NULL;
        jmethodID *IntroSorter::mids$ = NULL;
        bool IntroSorter::live$ = false;

        jclass IntroSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntroSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_setPivot_39c7bd3c] = env->getMethodID(cls, "setPivot", "(I)V");
            mids$[mid_comparePivot_39c7bd23] = env->getMethodID(cls, "comparePivot", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntroSorter::IntroSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntroSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args);

        static PyMethodDef t_IntroSorter__methods_[] = {
          DECLARE_METHOD(t_IntroSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntroSorter, t_IntroSorter, ::org::apache::lucene::util::Sorter, IntroSorter, t_IntroSorter_init_, 0, 0, 0, 0, 0);

        void t_IntroSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntroSorter), module, "IntroSorter", 0);
        }

        void t_IntroSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "class_", make_descriptor(IntroSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "wrapfn_", make_descriptor(t_IntroSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntroSorter::initializeClass, 1)))
            return NULL;
          return t_IntroSorter::wrap_Object(IntroSorter(((t_IntroSorter *) arg)->object.this$));
        }
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntroSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds)
        {
          IntroSorter object((jobject) NULL);

          INT_CALL(object = IntroSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntroSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *StringHelper::class$ = NULL;
        jmethodID *StringHelper::mids$ = NULL;
        bool StringHelper::live$ = false;
        jint StringHelper::GOOD_FAST_HASH_SEED = (jint) 0;

        jclass StringHelper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/StringHelper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bytesDifference_594e5ef9] = env->getStaticMethodID(cls, "bytesDifference", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_endsWith_594e5eea] = env->getStaticMethodID(cls, "endsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_equals_4a26474e] = env->getStaticMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_getVersionComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getVersionComparator", "()Ljava/util/Comparator;");
            mids$[mid_murmurhash3_x86_32_738fc2d1] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "(Lorg/apache/lucene/util/BytesRef;I)I");
            mids$[mid_murmurhash3_x86_32_96a25f14] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "([BIII)I");
            mids$[mid_startsWith_594e5eea] = env->getStaticMethodID(cls, "startsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GOOD_FAST_HASH_SEED = env->getStaticIntField(cls, "GOOD_FAST_HASH_SEED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint StringHelper::bytesDifference(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bytesDifference_594e5ef9], a0.this$, a1.this$);
        }

        jboolean StringHelper::endsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_594e5eea], a0.this$, a1.this$);
        }

        jboolean StringHelper::equals(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
        }

        ::java::util::Comparator StringHelper::getVersionComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getVersionComparator_5a7ff2fc]));
        }

        jint StringHelper::murmurhash3_x86_32(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_738fc2d1], a0.this$, a1);
        }

        jint StringHelper::murmurhash3_x86_32(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_96a25f14], a0.this$, a1, a2, a3);
        }

        jboolean StringHelper::startsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_594e5eea], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_getVersionComparator(PyTypeObject *type);
        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_get__versionComparator(t_StringHelper *self, void *data);
        static PyGetSetDef t_StringHelper__fields_[] = {
          DECLARE_GET_FIELD(t_StringHelper, versionComparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StringHelper__methods_[] = {
          DECLARE_METHOD(t_StringHelper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, bytesDifference, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, endsWith, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, getVersionComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, murmurhash3_x86_32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, startsWith, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringHelper, t_StringHelper, ::java::lang::Object, StringHelper, abstract_init, 0, 0, t_StringHelper__fields_, 0, 0);

        void t_StringHelper::install(PyObject *module)
        {
          installType(&PY_TYPE(StringHelper), module, "StringHelper", 0);
        }

        void t_StringHelper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "class_", make_descriptor(StringHelper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "wrapfn_", make_descriptor(t_StringHelper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringHelper::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "GOOD_FAST_HASH_SEED", make_descriptor(StringHelper::GOOD_FAST_HASH_SEED));
        }

        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringHelper::initializeClass, 1)))
            return NULL;
          return t_StringHelper::wrap_Object(StringHelper(((t_StringHelper *) arg)->object.this$));
        }
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringHelper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::bytesDifference(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bytesDifference", args);
          return NULL;
        }

        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::endsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "endsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_StringHelper_getVersionComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::getVersionComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "murmurhash3_x86_32", args);
          return NULL;
        }

        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "startsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_get__versionComparator(t_StringHelper *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersionComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/GermanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *GermanStemmer::class$ = NULL;
        jmethodID *GermanStemmer::mids$ = NULL;
        bool GermanStemmer::live$ = false;

        jclass GermanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/GermanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GermanStemmer::GermanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean GermanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint GermanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean GermanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args);

        static PyMethodDef t_GermanStemmer__methods_[] = {
          DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::org::tartarus::snowball::SnowballProgram, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

        void t_GermanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
        }

        void t_GermanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
            return NULL;
          return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
        }
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GermanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
        {
          GermanStemmer object((jobject) NULL);

          INT_CALL(object = GermanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "java/lang/Number.h"
#include "java/lang/Float.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeQuery::class$ = NULL;
        jmethodID *NumericRangeQuery::mids$ = NULL;
        bool NumericRangeQuery::live$ = false;

        jclass NumericRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_132cc8c2] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newDoubleRange_b1350bd0] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_ff7ed1ca] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_3f37d14c] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_dfaf9ce2] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_25dc6448] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_8e5c5fbe] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_d325b43c] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean NumericRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Number NumericRangeQuery::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeQuery::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeQuery::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jint NumericRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NumericRangeQuery::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeQuery::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_132cc8c2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_b1350bd0], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ff7ed1ca], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_3f37d14c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dfaf9ce2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_25dc6448], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_8e5c5fbe], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_d325b43c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        ::java::lang::String NumericRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data);
        static PyGetSetDef t_NumericRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeQuery, max),
          DECLARE_GET_FIELD(t_NumericRangeQuery, min),
          DECLARE_GET_FIELD(t_NumericRangeQuery, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeQuery, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeQuery__methods_[] = {
          DECLARE_METHOD(t_NumericRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeQuery, t_NumericRangeQuery, ::org::apache::lucene::search::MultiTermQuery, NumericRangeQuery, abstract_init, 0, 0, t_NumericRangeQuery__fields_, 0, 0);
        PyObject *t_NumericRangeQuery::wrap_Object(const NumericRangeQuery& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeQuery::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeQuery), module, "NumericRangeQuery", 0);
        }

        void t_NumericRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "class_", make_descriptor(NumericRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeQuery::initializeClass, 1)))
            return NULL;
          return t_NumericRangeQuery::wrap_Object(NumericRangeQuery(((t_NumericRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer.h"
#include "org/egothor/stemmer/Row.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer::class$ = NULL;
      jmethodID *Optimizer::mids$ = NULL;
      bool Optimizer::live$ = false;

      jclass Optimizer::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_merge_4f5b02a1] = env->getMethodID(cls, "merge", "(Lorg/egothor/stemmer/Row;Lorg/egothor/stemmer/Row;)Lorg/egothor/stemmer/Row;");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer::Optimizer() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Row Optimizer::merge(const ::org::egothor::stemmer::Row & a0, const ::org::egothor::stemmer::Row & a1) const
      {
        return ::org::egothor::stemmer::Row(env->callObjectMethod(this$, mids$[mid_merge_4f5b02a1], a0.this$, a1.this$));
      }

      ::org::egothor::stemmer::Trie Optimizer::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args);
      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args);

      static PyMethodDef t_Optimizer__methods_[] = {
        DECLARE_METHOD(t_Optimizer, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, merge, METH_VARARGS),
        DECLARE_METHOD(t_Optimizer, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer, t_Optimizer, ::org::egothor::stemmer::Reduce, Optimizer, t_Optimizer_init_, 0, 0, 0, 0, 0);

      void t_Optimizer::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer), module, "Optimizer", 0);
      }

      void t_Optimizer::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "class_", make_descriptor(Optimizer::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "wrapfn_", make_descriptor(t_Optimizer::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer::initializeClass, 1)))
          return NULL;
        return t_Optimizer::wrap_Object(Optimizer(((t_Optimizer *) arg)->object.this$));
      }
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds)
      {
        Optimizer object((jobject) NULL);

        INT_CALL(object = Optimizer());
        self->object = object;

        return 0;
      }

      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::org::egothor::stemmer::Row a1((jobject) NULL);
        ::org::egothor::stemmer::Row result((jobject) NULL);

        if (!parseArgs(args, "kk", ::org::egothor::stemmer::Row::initializeClass, ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.merge(a0, a1));
          return ::org::egothor::stemmer::t_Row::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "merge", args);
        return NULL;
      }

      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Optimizer), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixFilter::class$ = NULL;
        jmethodID *PrefixFilter::mids$ = NULL;
        bool PrefixFilter::live$ = false;

        jclass PrefixFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixFilter::PrefixFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term PrefixFilter::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        ::java::lang::String PrefixFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args);
        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self);
        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args);
        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data);
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data);
        static PyGetSetDef t_PrefixFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixFilter, prefix),
          DECLARE_GET_FIELD(t_PrefixFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixFilter__methods_[] = {
          DECLARE_METHOD(t_PrefixFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_PrefixFilter, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixFilter, t_PrefixFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, PrefixFilter, t_PrefixFilter_init_, 0, 0, t_PrefixFilter__fields_, 0, 0);
        PyObject *t_PrefixFilter::wrap_Object(const PrefixFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PrefixFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PrefixFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixFilter), module, "PrefixFilter", 0);
        }

        void t_PrefixFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "class_", make_descriptor(PrefixFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixFilter::initializeClass, 1)))
            return NULL;
          return t_PrefixFilter::wrap_Object(PrefixFilter(((t_PrefixFilter *) arg)->object.this$));
        }
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixFilter(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(PrefixQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IndexableBinaryStringTools.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IndexableBinaryStringTools::class$ = NULL;
        jmethodID *IndexableBinaryStringTools::mids$ = NULL;
        bool IndexableBinaryStringTools::live$ = false;

        jclass IndexableBinaryStringTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IndexableBinaryStringTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_decode_af6092ff] = env->getStaticMethodID(cls, "decode", "([CII[BII)V");
            mids$[mid_encode_f24ebb03] = env->getStaticMethodID(cls, "encode", "([BII[CII)V");
            mids$[mid_getDecodedLength_6f0bb349] = env->getStaticMethodID(cls, "getDecodedLength", "([CII)I");
            mids$[mid_getEncodedLength_86f44340] = env->getStaticMethodID(cls, "getEncodedLength", "([BII)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexableBinaryStringTools::decode(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_decode_af6092ff], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        void IndexableBinaryStringTools::encode(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encode_f24ebb03], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint IndexableBinaryStringTools::getDecodedLength(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDecodedLength_6f0bb349], a0.this$, a1, a2);
        }

        jint IndexableBinaryStringTools::getEncodedLength(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getEncodedLength_86f44340], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_IndexableBinaryStringTools__methods_[] = {
          DECLARE_METHOD(t_IndexableBinaryStringTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, decode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, encode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getDecodedLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getEncodedLength, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableBinaryStringTools, t_IndexableBinaryStringTools, ::java::lang::Object, IndexableBinaryStringTools, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableBinaryStringTools::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableBinaryStringTools), module, "IndexableBinaryStringTools", 0);
        }

        void t_IndexableBinaryStringTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "class_", make_descriptor(IndexableBinaryStringTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "wrapfn_", make_descriptor(t_IndexableBinaryStringTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableBinaryStringTools::initializeClass, 1)))
            return NULL;
          return t_IndexableBinaryStringTools::wrap_Object(IndexableBinaryStringTools(((t_IndexableBinaryStringTools *) arg)->object.this$));
        }
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableBinaryStringTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[CII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::decode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "decode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[BII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::encode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getDecodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getDecodedLength", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getEncodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getEncodedLength", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TokenizedPhraseQueryNode::class$ = NULL;
              jmethodID *TokenizedPhraseQueryNode::mids$ = NULL;
              bool TokenizedPhraseQueryNode::live$ = false;

              jclass TokenizedPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenizedPhraseQueryNode::TokenizedPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode TokenizedPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void TokenizedPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String TokenizedPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self);
              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data);
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TokenizedPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TokenizedPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenizedPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode_init_, 0, 0, t_TokenizedPhraseQueryNode__fields_, 0, 0);

              void t_TokenizedPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenizedPhraseQueryNode), module, "TokenizedPhraseQueryNode", 0);
              }

              void t_TokenizedPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "class_", make_descriptor(TokenizedPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TokenizedPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TokenizedPhraseQueryNode::wrap_Object(TokenizedPhraseQueryNode(((t_TokenizedPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                TokenizedPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = TokenizedPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseStemFilterFactory::mids$ = NULL;
          bool PortugueseStemFilterFactory::live$ = false;

          jclass PortugueseStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilterFactory::PortugueseStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilterFactory, t_PortugueseStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseStemFilterFactory, t_PortugueseStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilterFactory), module, "PortugueseStemFilterFactory", 0);
          }

          void t_PortugueseStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilterFactory::wrap_Object(PortugueseStemFilterFactory(((t_PortugueseStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelPolishStemFilterFactory::class$ = NULL;
          jmethodID *StempelPolishStemFilterFactory::mids$ = NULL;
          bool StempelPolishStemFilterFactory::live$ = false;

          jclass StempelPolishStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelPolishStemFilterFactory::StempelPolishStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StempelPolishStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_StempelPolishStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StempelPolishStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelPolishStemFilterFactory), module, "StempelPolishStemFilterFactory", 0);
          }

          void t_StempelPolishStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "class_", make_descriptor(StempelPolishStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StempelPolishStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StempelPolishStemFilterFactory::wrap_Object(StempelPolishStemFilterFactory(((t_StempelPolishStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StempelPolishStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StempelPolishStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StempelPolishStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimScorer::class$ = NULL;
          jmethodID *Similarity$SimScorer::mids$ = NULL;
          bool Similarity$SimScorer::live$ = false;

          jclass Similarity$SimScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computePayloadFactor_ffd34a82] = env->getMethodID(cls, "computePayloadFactor", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_computeSlopFactor_39c7bd2c] = env->getMethodID(cls, "computeSlopFactor", "(I)F");
              mids$[mid_explain_d1ebfb75] = env->getMethodID(cls, "explain", "(ILorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_abdf2c41] = env->getMethodID(cls, "score", "(IF)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimScorer::Similarity$SimScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimScorer::computePayloadFactor(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_computePayloadFactor_ffd34a82], a0, a1, a2, a3.this$);
          }

          jfloat Similarity$SimScorer::computeSlopFactor(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeSlopFactor_39c7bd2c], a0);
          }

          ::org::apache::lucene::search::Explanation Similarity$SimScorer::explain(jint a0, const ::org::apache::lucene::search::Explanation & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_d1ebfb75], a0, a1.this$));
          }

          jfloat Similarity$SimScorer::score(jint a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_abdf2c41], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args);

          static PyMethodDef t_Similarity$SimScorer__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, computePayloadFactor, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, computeSlopFactor, METH_O),
            DECLARE_METHOD(t_Similarity$SimScorer, explain, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimScorer, t_Similarity$SimScorer, ::java::lang::Object, Similarity$SimScorer, t_Similarity$SimScorer_init_, 0, 0, 0, 0, 0);

          void t_Similarity$SimScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimScorer), module, "Similarity$SimScorer", 0);
          }

          void t_Similarity$SimScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "class_", make_descriptor(Similarity$SimScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimScorer::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimScorer::wrap_Object(Similarity$SimScorer(((t_Similarity$SimScorer *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimScorer object((jobject) NULL);

            INT_CALL(object = Similarity$SimScorer());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.computePayloadFactor(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computePayloadFactor", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.computeSlopFactor(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeSlopFactor", arg);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "IF", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilter::class$ = NULL;
          jmethodID *PersianNormalizationFilter::mids$ = NULL;
          bool PersianNormalizationFilter::live$ = false;

          jclass PersianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilter::PersianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PersianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_PersianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilter, t_PersianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, PersianNormalizationFilter, t_PersianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilter), module, "PersianNormalizationFilter", 0);
          }

          void t_PersianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "class_", make_descriptor(PersianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilter::wrap_Object(PersianNormalizationFilter(((t_PersianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PersianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PersianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedStringComparator.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/text/Collator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedStringComparator::class$ = NULL;
          jmethodID *SlowCollatedStringComparator::mids$ = NULL;
          bool SlowCollatedStringComparator::live$ = false;

          jclass SlowCollatedStringComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedStringComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4353060] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/text/Collator;)V");
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_compareValues_4a26475d] = env->getMethodID(cls, "compareValues", "(Ljava/lang/String;Ljava/lang/String;)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_5fdc3f48] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/String;)V");
              mids$[mid_value_141401b3] = env->getMethodID(cls, "value", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedStringComparator::SlowCollatedStringComparator(jint a0, const ::java::lang::String & a1, const ::java::text::Collator & a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f4353060, a0, a1.this$, a2.this$)) {}

          jint SlowCollatedStringComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          jint SlowCollatedStringComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareValues(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compareValues_4a26475d], a0.this$, a1.this$);
          }

          void SlowCollatedStringComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }

          void SlowCollatedStringComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator SlowCollatedStringComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void SlowCollatedStringComparator::setTopValue(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_5fdc3f48], a0.this$);
          }

          ::java::lang::String SlowCollatedStringComparator::value(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_value_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data);
          static PyGetSetDef t_SlowCollatedStringComparator__fields_[] = {
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, bottom),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, nextReader),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, topValue),
            DECLARE_GET_FIELD(t_SlowCollatedStringComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedStringComparator__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedStringComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareValues, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedStringComparator, t_SlowCollatedStringComparator, ::org::apache::lucene::search::FieldComparator, SlowCollatedStringComparator, t_SlowCollatedStringComparator_init_, 0, 0, t_SlowCollatedStringComparator__fields_, 0, 0);
          PyObject *t_SlowCollatedStringComparator::wrap_Object(const SlowCollatedStringComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedStringComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedStringComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedStringComparator), module, "SlowCollatedStringComparator", 0);
          }

          void t_SlowCollatedStringComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "class_", make_descriptor(SlowCollatedStringComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedStringComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedStringComparator::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedStringComparator::wrap_Object(SlowCollatedStringComparator(((t_SlowCollatedStringComparator *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedStringComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::text::Collator a2((jobject) NULL);
            SlowCollatedStringComparator object((jobject) NULL);

            if (!parseArgs(args, "Isk", ::java::text::Collator::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SlowCollatedStringComparator(a0, a1, a2));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(String);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compareValues(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareValues", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilterFactory::class$ = NULL;
          jmethodID *HindiStemFilterFactory::mids$ = NULL;
          bool HindiStemFilterFactory::live$ = false;

          jclass HindiStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilterFactory::HindiStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HindiStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilterFactory, t_HindiStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiStemFilterFactory, t_HindiStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilterFactory), module, "HindiStemFilterFactory", 0);
          }

          void t_HindiStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "class_", make_descriptor(HindiStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilterFactory::wrap_Object(HindiStemFilterFactory(((t_HindiStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNearBuilder::class$ = NULL;
            jmethodID *SpanNearBuilder::mids$ = NULL;
            bool SpanNearBuilder::live$ = false;

            jclass SpanNearBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNearBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearBuilder::SpanNearBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNearBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNearBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearBuilder, t_SpanNearBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNearBuilder, t_SpanNearBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNearBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearBuilder), module, "SpanNearBuilder", 0);
            }

            void t_SpanNearBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "class_", make_descriptor(SpanNearBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNearBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNearBuilder::wrap_Object(SpanNearBuilder(((t_SpanNearBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNearBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNearBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/BasicAutomata.h"
#include "java/util/Collection.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *BasicAutomata::class$ = NULL;
          jmethodID *BasicAutomata::mids$ = NULL;
          bool BasicAutomata::live$ = false;

          jclass BasicAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/BasicAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeAnyChar_9b0d5999] = env->getStaticMethodID(cls, "makeAnyChar", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeAnyString_9b0d5999] = env->getStaticMethodID(cls, "makeAnyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeChar_d5b8a843] = env->getStaticMethodID(cls, "makeChar", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeCharRange_42dcb2dd] = env->getStaticMethodID(cls, "makeCharRange", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmpty_9b0d5999] = env->getStaticMethodID(cls, "makeEmpty", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmptyString_9b0d5999] = env->getStaticMethodID(cls, "makeEmptyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeInterval_86ba9f2f] = env->getStaticMethodID(cls, "makeInterval", "(III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_af13056f] = env->getStaticMethodID(cls, "makeString", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_1c95d487] = env->getStaticMethodID(cls, "makeString", "([III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeStringUnion_40d33194] = env->getStaticMethodID(cls, "makeStringUnion", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeAnyChar()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyChar_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeAnyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeChar(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeChar_d5b8a843], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeCharRange(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeCharRange_42dcb2dd], a0, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeEmpty()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmpty_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeEmptyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmptyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeInterval(jint a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeInterval_86ba9f2f], a0, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeString(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_af13056f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeString(const JArray< jint > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_1c95d487], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeStringUnion(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeStringUnion_40d33194], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_BasicAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_makeAnyChar(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeAnyString(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeChar(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_makeCharRange(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeEmpty(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeEmptyString(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeInterval(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeString(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeStringUnion(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_BasicAutomata__methods_[] = {
            DECLARE_METHOD(t_BasicAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeAnyChar, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeAnyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeChar, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeCharRange, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeEmpty, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeEmptyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeInterval, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeString, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeStringUnion, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicAutomata, t_BasicAutomata, ::java::lang::Object, BasicAutomata, abstract_init, 0, 0, 0, 0, 0);

          void t_BasicAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicAutomata), module, "BasicAutomata", 0);
          }

          void t_BasicAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "class_", make_descriptor(BasicAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "wrapfn_", make_descriptor(t_BasicAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicAutomata::initializeClass, 1)))
              return NULL;
            return t_BasicAutomata::wrap_Object(BasicAutomata(((t_BasicAutomata *) arg)->object.this$));
          }
          static PyObject *t_BasicAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BasicAutomata_makeAnyChar(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeAnyChar());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeAnyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeAnyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeChar(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeChar(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeChar", arg);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeCharRange(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeCharRange(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeCharRange", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeEmpty(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeEmpty());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeEmptyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeEmptyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeInterval(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeInterval(a0, a1, a2));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeInterval", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeString(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeString(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeString(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeString", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeStringUnion(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeStringUnion(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeStringUnion", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFilter::class$ = NULL;
        jmethodID *PythonFilter::mids$ = NULL;
        bool PythonFilter::live$ = false;

        jclass PythonFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilter::PythonFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self);
        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args);
        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data);
        static PyGetSetDef t_PythonFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilter, t_PythonFilter, ::org::apache::lucene::search::Filter, PythonFilter, t_PythonFilter_init_, 0, 0, t_PythonFilter__fields_, 0, 0);

        void t_PythonFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilter), module, "PythonFilter", 1);
        }

        void t_PythonFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "class_", make_descriptor(PythonFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;", (void *) t_PythonFilter_getDocIdSet0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilter::wrap_Object(PythonFilter(((t_PythonFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds)
        {
          PythonFilter object((jobject) NULL);

          INT_CALL(object = PythonFilter());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *o1 = ::org::apache::lucene::util::t_Bits::wrap_Object(::org::apache::lucene::util::Bits(a1));
          PyObject *result = PyObject_CallMethod(obj, "getDocIdSet", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &value))
          {
            throwTypeError("getDocIdSet", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MultiPhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *MultiPhraseQueryNodeBuilder::mids$ = NULL;
              bool MultiPhraseQueryNodeBuilder::live$ = false;

              jclass MultiPhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_5363542a] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MultiPhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNodeBuilder::MultiPhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MultiPhraseQuery MultiPhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MultiPhraseQuery(env->callObjectMethod(this$, mids$[mid_build_5363542a], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MultiPhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder, ::java::lang::Object, MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MultiPhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNodeBuilder), module, "MultiPhraseQueryNodeBuilder", 0);
              }

              void t_MultiPhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(MultiPhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNodeBuilder::wrap_Object(MultiPhraseQueryNodeBuilder(((t_MultiPhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MultiPhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MultiPhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedTerm::class$ = NULL;
          jmethodID *WeightedTerm::mids$ = NULL;
          bool WeightedTerm::live$ = false;

          jclass WeightedTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_getTerm_14c7b5c5] = env->getMethodID(cls, "getTerm", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_setTerm_5fdc3f48] = env->getMethodID(cls, "setTerm", "(Ljava/lang/String;)V");
              mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedTerm::WeightedTerm(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          ::java::lang::String WeightedTerm::getTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTerm_14c7b5c5]));
          }

          jfloat WeightedTerm::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          void WeightedTerm::setTerm(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTerm_5fdc3f48], a0.this$);
          }

          void WeightedTerm::setWeight(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedTerm, term),
            DECLARE_GETSET_FIELD(t_WeightedTerm, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, setTerm, METH_O),
            DECLARE_METHOD(t_WeightedTerm, setWeight, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedTerm, t_WeightedTerm, ::java::lang::Object, WeightedTerm, t_WeightedTerm_init_, 0, 0, t_WeightedTerm__fields_, 0, 0);

          void t_WeightedTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedTerm), module, "WeightedTerm", 0);
          }

          void t_WeightedTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "class_", make_descriptor(WeightedTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedTerm::wrap_Object(WeightedTerm(((t_WeightedTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            WeightedTerm object((jobject) NULL);

            if (!parseArgs(args, "Fs", &a0, &a1))
            {
              INT_CALL(object = WeightedTerm(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return j2p(result);
          }

          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTerm(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTerm", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setWeight(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return j2p(value);
          }
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTerm(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "term", arg);
            return -1;
          }

          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setWeight(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "weight", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStreamToAutomaton.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStreamToAutomaton::class$ = NULL;
        jmethodID *TokenStreamToAutomaton::mids$ = NULL;
        bool TokenStreamToAutomaton::live$ = false;
        jint TokenStreamToAutomaton::HOLE = (jint) 0;
        jint TokenStreamToAutomaton::POS_SEP = (jint) 0;

        jclass TokenStreamToAutomaton::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStreamToAutomaton");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setPreservePositionIncrements_bb0c767f] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_setUnicodeArcs_bb0c767f] = env->getMethodID(cls, "setUnicodeArcs", "(Z)V");
            mids$[mid_toAutomaton_6e59061f] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_changeToken_21e43cb7] = env->getMethodID(cls, "changeToken", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            HOLE = env->getStaticIntField(cls, "HOLE");
            POS_SEP = env->getStaticIntField(cls, "POS_SEP");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToAutomaton::TokenStreamToAutomaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TokenStreamToAutomaton::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_bb0c767f], a0);
        }

        void TokenStreamToAutomaton::setUnicodeArcs(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUnicodeArcs_bb0c767f], a0);
        }

        ::org::apache::lucene::util::automaton::Automaton TokenStreamToAutomaton::toAutomaton(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_6e59061f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg);
        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToAutomaton__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, preservePositionIncrements),
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, unicodeArcs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToAutomaton__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToAutomaton, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setUnicodeArcs, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, toAutomaton, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStreamToAutomaton, t_TokenStreamToAutomaton, ::java::lang::Object, TokenStreamToAutomaton, t_TokenStreamToAutomaton_init_, 0, 0, t_TokenStreamToAutomaton__fields_, 0, 0);

        void t_TokenStreamToAutomaton::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToAutomaton), module, "TokenStreamToAutomaton", 0);
        }

        void t_TokenStreamToAutomaton::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "class_", make_descriptor(TokenStreamToAutomaton::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamToAutomaton::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStreamToAutomaton::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "HOLE", make_descriptor(TokenStreamToAutomaton::HOLE));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "POS_SEP", make_descriptor(TokenStreamToAutomaton::POS_SEP));
        }

        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToAutomaton::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToAutomaton::wrap_Object(TokenStreamToAutomaton(((t_TokenStreamToAutomaton *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToAutomaton::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToAutomaton object((jobject) NULL);

          INT_CALL(object = TokenStreamToAutomaton());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUnicodeArcs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUnicodeArcs", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
          return NULL;
        }

        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }

        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUnicodeArcs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "unicodeArcs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField::class$ = NULL;
        jmethodID *SortField::mids$ = NULL;
        jfieldID *SortField::fids$ = NULL;
        bool SortField::live$ = false;
        SortField *SortField::FIELD_DOC = NULL;
        SortField *SortField::FIELD_SCORE = NULL;
        ::java::lang::Object *SortField::STRING_FIRST = NULL;
        ::java::lang::Object *SortField::STRING_LAST = NULL;

        jclass SortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a9ca3e5c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;)V");
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_37ee6f9c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;)V");
            mids$[mid_init$_3e864231] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;Z)V");
            mids$[mid_init$_082cc791] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Z)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesComparator_5a7ff2fc] = env->getMethodID(cls, "getBytesComparator", "()Ljava/util/Comparator;");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getComparatorSource_3ca10de3] = env->getMethodID(cls, "getComparatorSource", "()Lorg/apache/lucene/search/FieldComparatorSource;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getReverse_54c6a16a] = env->getMethodID(cls, "getReverse", "()Z");
            mids$[mid_getType_e5057cd5] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_da4dd7ac] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_setBytesComparator_6ffdd545] = env->getMethodID(cls, "setBytesComparator", "(Ljava/util/Comparator;)V");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_missingValue] = env->getFieldID(cls, "missingValue", "Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FIELD_DOC = new SortField(env->getStaticObjectField(cls, "FIELD_DOC", "Lorg/apache/lucene/search/SortField;"));
            FIELD_SCORE = new SortField(env->getStaticObjectField(cls, "FIELD_SCORE", "Lorg/apache/lucene/search/SortField;"));
            STRING_FIRST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_FIRST", "Ljava/lang/Object;"));
            STRING_LAST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_LAST", "Ljava/lang/Object;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a9ca3e5c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37ee6f9c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e864231, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_082cc791, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        jboolean SortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator SortField::getBytesComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getBytesComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::search::FieldComparator SortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::FieldComparatorSource SortField::getComparatorSource() const
        {
          return ::org::apache::lucene::search::FieldComparatorSource(env->callObjectMethod(this$, mids$[mid_getComparatorSource_3ca10de3]));
        }

        ::java::lang::String SortField::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::FieldCache$Parser SortField::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        jboolean SortField::getReverse() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReverse_54c6a16a]);
        }

        ::org::apache::lucene::search::SortField$Type SortField::getType() const
        {
          return ::org::apache::lucene::search::SortField$Type(env->callObjectMethod(this$, mids$[mid_getType_e5057cd5]));
        }

        jint SortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SortField::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        SortField SortField::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return SortField(env->callObjectMethod(this$, mids$[mid_rewrite_da4dd7ac], a0.this$));
        }

        void SortField::setBytesComparator(const ::java::util::Comparator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesComparator_6ffdd545], a0.this$);
        }

        void SortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::Object SortField::_get_missingValue() const
        {
          return ::java::lang::Object(env->getObjectField(this$, fids$[fid_missingValue]));
        }

        void SortField::_set_missingValue(const ::java::lang::Object & a0) const
        {
          env->setObjectField(this$, fids$[fid_missingValue], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getBytesComparator(t_SortField *self);
        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getComparatorSource(t_SortField *self);
        static PyObject *t_SortField_getField(t_SortField *self);
        static PyObject *t_SortField_getParser(t_SortField *self);
        static PyObject *t_SortField_getReverse(t_SortField *self);
        static PyObject *t_SortField_getType(t_SortField *self);
        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_needsScores(t_SortField *self);
        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args);

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data);
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data);
        static PyObject *t_SortField_get__field(t_SortField *self, void *data);
        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__parser(t_SortField *self, void *data);
        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data);
        static PyObject *t_SortField_get__type(t_SortField *self, void *data);
        static PyGetSetDef t_SortField__fields_[] = {
          DECLARE_GETSET_FIELD(t_SortField, bytesComparator),
          DECLARE_GET_FIELD(t_SortField, comparatorSource),
          DECLARE_GET_FIELD(t_SortField, field),
          DECLARE_SET_FIELD(t_SortField, missingValue),
          DECLARE_GET_FIELD(t_SortField, parser),
          DECLARE_GET_FIELD(t_SortField, reverse),
          DECLARE_GET_FIELD(t_SortField, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField__methods_[] = {
          DECLARE_METHOD(t_SortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getBytesComparator, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getComparatorSource, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getField, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getParser, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getReverse, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getType, METH_NOARGS),
          DECLARE_METHOD(t_SortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortField, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_SortField, rewrite, METH_O),
          DECLARE_METHOD(t_SortField, setBytesComparator, METH_O),
          DECLARE_METHOD(t_SortField, setMissingValue, METH_O),
          DECLARE_METHOD(t_SortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField, t_SortField, ::java::lang::Object, SortField, t_SortField_init_, 0, 0, t_SortField__fields_, 0, 0);

        void t_SortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField), module, "SortField", 0);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "Type", make_descriptor(&PY_TYPE(SortField$Type)));
        }

        void t_SortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "class_", make_descriptor(SortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "wrapfn_", make_descriptor(t_SortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_DOC", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_DOC)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_SCORE", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_FIRST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_FIRST)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_LAST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_LAST)));
        }

        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField::initializeClass, 1)))
            return NULL;
          return t_SortField::wrap_Object(SortField(((t_SortField *) arg)->object.this$));
        }
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortField_getBytesComparator(t_SortField *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparator", args);
          return NULL;
        }

        static PyObject *t_SortField_getComparatorSource(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldComparatorSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(result);
        }

        static PyObject *t_SortField_getField(t_SortField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_SortField_getParser(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_SortField_getReverse(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReverse());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_getType(t_SortField *self)
        {
          ::org::apache::lucene::search::SortField$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(result);
        }

        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortField_needsScores(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          SortField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(self->object.setBytesComparator(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesComparator", arg);
          return NULL;
        }

        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMissingValue", arg);
          return NULL;
        }

        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Comparator value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesComparator(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesComparator", arg);
          return -1;
        }

        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldComparatorSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(value);
        }

        static PyObject *t_SortField_get__field(t_SortField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortField_get__parser(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReverse());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SortField_get__type(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::SortField$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/IllegalStateException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *BytesRefSorter::class$ = NULL;
            jmethodID *BytesRefSorter::mids$ = NULL;
            bool BytesRefSorter::live$ = false;

            jclass BytesRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/BytesRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void BytesRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            ::java::util::Comparator BytesRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator BytesRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg);
            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data);
            static PyGetSetDef t_BytesRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_BytesRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BytesRefSorter__methods_[] = {
              DECLARE_METHOD(t_BytesRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, add, METH_O),
              DECLARE_METHOD(t_BytesRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_BytesRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefSorter, t_BytesRefSorter, ::java::lang::Object, BytesRefSorter, abstract_init, 0, 0, t_BytesRefSorter__fields_, 0, 0);

            void t_BytesRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefSorter), module, "BytesRefSorter", 0);
            }

            void t_BytesRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "class_", make_descriptor(BytesRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "wrapfn_", make_descriptor(t_BytesRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefSorter::initializeClass, 1)))
                return NULL;
              return t_BytesRefSorter::wrap_Object(BytesRefSorter(((t_BytesRefSorter *) arg)->object.this$));
            }
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode::class$ = NULL;
              jmethodID *ProximityQueryNode::mids$ = NULL;
              bool ProximityQueryNode::live$ = false;

              jclass ProximityQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8db4cd70] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;Z)V");
                  mids$[mid_init$_0740981c] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;IZ)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getDistance_54c6a179] = env->getMethodID(cls, "getDistance", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getProximityType_9b7235cd] = env->getMethodID(cls, "getProximityType", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_8db4cd70, a0.this$, a1.this$, a2.this$, a3)) {}

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jint a3, jboolean a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0740981c, a0.this$, a1.this$, a2.this$, a3, a4)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ProximityQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jint ProximityQueryNode::getDistance() const
              {
                return env->callIntMethod(this$, mids$[mid_getDistance_54c6a179]);
              }

              ::java::lang::CharSequence ProximityQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String ProximityQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type ProximityQueryNode::getProximityType() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type(env->callObjectMethod(this$, mids$[mid_getProximityType_9b7235cd]));
              }

              jboolean ProximityQueryNode::isInOrder() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
              }

              void ProximityQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence ProximityQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ProximityQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg);
              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data);
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data);
              static PyGetSetDef t_ProximityQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode, distance),
                DECLARE_GETSET_FIELD(t_ProximityQueryNode, field),
                DECLARE_GET_FIELD(t_ProximityQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_ProximityQueryNode, inOrder),
                DECLARE_GET_FIELD(t_ProximityQueryNode, proximityType),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getDistance, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getProximityType, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, isInOrder, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, setField, METH_O),
                DECLARE_METHOD(t_ProximityQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode, t_ProximityQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, ProximityQueryNode, t_ProximityQueryNode_init_, 0, 0, t_ProximityQueryNode__fields_, 0, 0);

              void t_ProximityQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode), module, "ProximityQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "ProximityType", make_descriptor(&PY_TYPE(ProximityQueryNode$ProximityType)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "Type", make_descriptor(&PY_TYPE(ProximityQueryNode$Type)));
              }

              void t_ProximityQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "class_", make_descriptor(ProximityQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode::wrap_Object(ProximityQueryNode(((t_ProximityQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 4:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jboolean a3;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 5:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jint a3;
                    jboolean a4;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKIZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3, &a4))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3, a4));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getDistance());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type result((jobject) NULL);
                OBJ_CALL(result = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isInOrder());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getDistance());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isInOrder());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type value((jobject) NULL);
                OBJ_CALL(value = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsWriter::mids$ = NULL;
          bool CompressingStoredFieldsWriter::live$ = false;

          jclass CompressingStoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsWriter::CompressingStoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingStoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingStoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingStoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingStoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint CompressingStoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingStoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void CompressingStoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsWriter), module, "CompressingStoredFieldsWriter", 0);
          }

          void t_CompressingStoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsWriter::wrap_Object(CompressingStoredFieldsWriter(((t_CompressingStoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingStoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadTermQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadTermQuery::class$ = NULL;
          jmethodID *PayloadTermQuery::mids$ = NULL;
          bool PayloadTermQuery::live$ = false;

          jclass PayloadTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c933262d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_init$_dc8be042] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;Z)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_c933262d, a0.this$, a1.this$)) {}

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_dc8be042, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::Weight PayloadTermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args);

          static PyMethodDef t_PayloadTermQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadTermQuery, t_PayloadTermQuery, ::org::apache::lucene::search::spans::SpanTermQuery, PayloadTermQuery, t_PayloadTermQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadTermQuery), module, "PayloadTermQuery", 0);
          }

          void t_PayloadTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "class_", make_descriptor(PayloadTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadTermQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadTermQuery::wrap_Object(PayloadTermQuery(((t_PayloadTermQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                jboolean a2;
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Enum::class$ = NULL;
    jmethodID *Enum::mids$ = NULL;
    bool Enum::live$ = false;

    jclass Enum::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Enum");

        mids$ = new jmethodID[max_mid];
        mids$[mid_compareTo_618aa849] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
        mids$[mid_ordinal_54c6a179] = env->getMethodID(cls, "ordinal", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_valueOf_46e8491f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint Enum::compareTo(const Enum & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_618aa849], a0.this$);
    }

    jboolean Enum::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Enum::getDeclaringClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    jint Enum::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::String Enum::name() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
    }

    jint Enum::ordinal() const
    {
      return env->callIntMethod(this$, mids$[mid_ordinal_54c6a179]);
    }

    ::java::lang::String Enum::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e8491f], a0.this$, a1.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg);
    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_name(t_Enum *self);
    static PyObject *t_Enum_ordinal(t_Enum *self);
    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
    static PyGetSetDef t_Enum__fields_[] = {
      DECLARE_GET_FIELD(t_Enum, declaringClass),
      DECLARE_GET_FIELD(t_Enum, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enum__methods_[] = {
      DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enum, compareTo, METH_O),
      DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
      DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Enum, name, METH_NOARGS),
      DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
      DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
      DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enum, t_Enum, ::java::lang::Object, Enum, abstract_init, 0, 0, t_Enum__fields_, 0, 0);
    PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enum::install(PyObject *module)
    {
      installType(&PY_TYPE(Enum), module, "Enum", 0);
    }

    void t_Enum::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "class_", make_descriptor(Enum::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
        return NULL;
      return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
    }
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enum::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg)
    {
      Enum a0((jobject) NULL);
      PyTypeObject **p0;
      jint result;

      if (!parseArg(arg, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Enum_name(t_Enum *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.name());
      return j2p(result);
    }

    static PyObject *t_Enum_ordinal(t_Enum *self)
    {
      jint result;
      OBJ_CALL(result = self->object.ordinal());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Class a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::String a1((jobject) NULL);
      Enum result((jobject) NULL);

      if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
        return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$PruneByAge::class$ = NULL;
        jmethodID *SearcherLifetimeManager$PruneByAge::mids$ = NULL;
        bool SearcherLifetimeManager$PruneByAge::live$ = false;

        jclass SearcherLifetimeManager$PruneByAge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$PruneByAge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager$PruneByAge::SearcherLifetimeManager$PruneByAge(jdouble a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jboolean SearcherLifetimeManager$PruneByAge::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$PruneByAge__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge, ::java::lang::Object, SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$PruneByAge::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$PruneByAge), module, "SearcherLifetimeManager$PruneByAge", 0);
        }

        void t_SearcherLifetimeManager$PruneByAge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$PruneByAge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$PruneByAge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$PruneByAge::wrap_Object(SearcherLifetimeManager$PruneByAge(((t_SearcherLifetimeManager$PruneByAge *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          SearcherLifetimeManager$PruneByAge object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = SearcherLifetimeManager$PruneByAge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataOutput::class$ = NULL;
          jmethodID *PackedDataOutput::mids$ = NULL;
          bool PackedDataOutput::live$ = false;

          jclass PackedDataOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_27875f57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeLong_25d05c8f] = env->getMethodID(cls, "writeLong", "(JI)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataOutput::PackedDataOutput(const ::org::apache::lucene::store::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27875f57, a0.this$)) {}

          void PackedDataOutput::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          void PackedDataOutput::writeLong(jlong a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLong_25d05c8f], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self);
          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args);

          static PyMethodDef t_PackedDataOutput__methods_[] = {
            DECLARE_METHOD(t_PackedDataOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, flush, METH_NOARGS),
            DECLARE_METHOD(t_PackedDataOutput, writeLong, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataOutput, t_PackedDataOutput, ::java::lang::Object, PackedDataOutput, t_PackedDataOutput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataOutput), module, "PackedDataOutput", 0);
          }

          void t_PackedDataOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "class_", make_descriptor(PackedDataOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataOutput::initializeClass, 1)))
              return NULL;
            return t_PackedDataOutput::wrap_Object(PackedDataOutput(((t_PackedDataOutput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            PackedDataOutput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataOutput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args)
          {
            jlong a0;
            jint a1;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
              OBJ_CALL(self->object.writeLong(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeLong", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_adde7c2e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;)V");
              mids$[mid_init$_1134ad3e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/util/List;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_adde7c2e, a0.this$, a1.this$)) {}

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::util::List & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1134ad3e, a0.this$, a1.this$, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, t_Dictionary_init_, 0, 0, 0, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Dictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::java::io::InputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  INT_CALL(object = Dictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RefCount.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RefCount::class$ = NULL;
        jmethodID *RefCount::mids$ = NULL;
        bool RefCount::live$ = false;

        jclass RefCount::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RefCount");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RefCount::RefCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        void RefCount::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        ::java::lang::Object RefCount::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        jint RefCount::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        void RefCount::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args);
        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RefCount_decRef(t_RefCount *self);
        static PyObject *t_RefCount_get(t_RefCount *self);
        static PyObject *t_RefCount_getRefCount(t_RefCount *self);
        static PyObject *t_RefCount_incRef(t_RefCount *self);
        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data);
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data);
        static PyGetSetDef t_RefCount__fields_[] = {
          DECLARE_GET_FIELD(t_RefCount, refCount),
          DECLARE_GET_FIELD(t_RefCount, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RefCount__methods_[] = {
          DECLARE_METHOD(t_RefCount, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, of_, METH_VARARGS),
          DECLARE_METHOD(t_RefCount, decRef, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, get, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, incRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RefCount, t_RefCount, ::java::lang::Object, RefCount, t_RefCount_init_, 0, 0, t_RefCount__fields_, 0, 0);
        PyObject *t_RefCount::wrap_Object(const RefCount& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RefCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RefCount::install(PyObject *module)
        {
          installType(&PY_TYPE(RefCount), module, "RefCount", 0);
        }

        void t_RefCount::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "class_", make_descriptor(RefCount::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "wrapfn_", make_descriptor(t_RefCount::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RefCount::initializeClass, 1)))
            return NULL;
          return t_RefCount::wrap_Object(RefCount(((t_RefCount *) arg)->object.this$));
        }
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RefCount::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          RefCount object((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            INT_CALL(object = RefCount(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RefCount_decRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_RefCount_get(t_RefCount *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_RefCount_getRefCount(t_RefCount *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RefCount_incRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilter::class$ = NULL;
          jmethodID *KeywordMarkerFilter::mids$ = NULL;
          bool KeywordMarkerFilter::live$ = false;

          jclass KeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordMarkerFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args);

          static PyMethodDef t_KeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilter, t_KeywordMarkerFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordMarkerFilter, abstract_init, 0, 0, 0, 0, 0);

          void t_KeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilter), module, "KeywordMarkerFilter", 0);
          }

          void t_KeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "class_", make_descriptor(KeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilter::wrap_Object(KeywordMarkerFilter(((t_KeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldQueryNode::class$ = NULL;
              jmethodID *FieldQueryNode::mids$ = NULL;
              bool FieldQueryNode::live$ = false;

              jclass FieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_010ca031] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_getTextAsString_14c7b5c5] = env->getMethodID(cls, "getTextAsString", "()Ljava/lang/String;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_setBegin_39c7bd3c] = env->getMethodID(cls, "setBegin", "(I)V");
                  mids$[mid_setEnd_39c7bd3c] = env->getMethodID(cls, "setEnd", "(I)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setValue_a8afc64a] = env->getMethodID(cls, "setValue", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_getTermEscapeQuoted_99b8dfe1] = env->getMethodID(cls, "getTermEscapeQuoted", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNode::FieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              FieldQueryNode FieldQueryNode::cloneTree() const
              {
                return FieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_010ca031]));
              }

              jint FieldQueryNode::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint FieldQueryNode::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint FieldQueryNode::getPositionIncrement() const
              {
                return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getTextAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTextAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence FieldQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              void FieldQueryNode::setBegin(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setBegin_39c7bd3c], a0);
              }

              void FieldQueryNode::setEnd(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setEnd_39c7bd3c], a0);
              }

              void FieldQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setPositionIncrement(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
              }

              void FieldQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setValue(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence FieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldQueryNode, begin),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, end),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, field),
                DECLARE_GET_FIELD(t_FieldQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, positionIncrement),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, text),
                DECLARE_GET_FIELD(t_FieldQueryNode, textAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getPositionIncrement, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getTextAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, setBegin, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setEnd, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setField, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setPositionIncrement, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setText, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNode, t_FieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, FieldQueryNode, t_FieldQueryNode_init_, 0, 0, t_FieldQueryNode__fields_, 0, 0);

              void t_FieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNode), module, "FieldQueryNode", 0);
              }

              void t_FieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "class_", make_descriptor(FieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNode::wrap_Object(FieldQueryNode(((t_FieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                FieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args)
              {
                FieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPositionIncrement());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getTextAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setBegin(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBegin", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setEnd(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setEnd", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPositionIncrement(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setBegin(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "begin", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setEnd(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "end", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPositionIncrement());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPositionIncrement(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getTextAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryRescorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryRescorer::class$ = NULL;
        jmethodID *QueryRescorer::mids$ = NULL;
        bool QueryRescorer::live$ = false;

        jclass QueryRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_rescore_93dee955] = env->getStaticMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;Lorg/apache/lucene/search/Query;DI)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_combine_a950a3d1] = env->getMethodID(cls, "combine", "(FZF)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryRescorer::QueryRescorer(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ::org::apache::lucene::search::Explanation QueryRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, const ::org::apache::lucene::search::Query & a2, jdouble a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_rescore_93dee955], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_QueryRescorer__methods_[] = {
          DECLARE_METHOD(t_QueryRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore_, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryRescorer, t_QueryRescorer, ::org::apache::lucene::search::Rescorer, QueryRescorer, t_QueryRescorer_init_, 0, 0, 0, 0, 0);

        void t_QueryRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryRescorer), module, "QueryRescorer", 0);
        }

        void t_QueryRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "class_", make_descriptor(QueryRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "wrapfn_", make_descriptor(t_QueryRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryRescorer::initializeClass, 1)))
            return NULL;
          return t_QueryRescorer::wrap_Object(QueryRescorer(((t_QueryRescorer *) arg)->object.this$));
        }
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "rescore", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jdouble a3;
          jint a4;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkDI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::QueryRescorer::rescore(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "rescore_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilterFactory::class$ = NULL;
          jmethodID *HunspellStemFilterFactory::mids$ = NULL;
          bool HunspellStemFilterFactory::live$ = false;

          jclass HunspellStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilterFactory::HunspellStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HunspellStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void HunspellStemFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args);
          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HunspellStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilterFactory, t_HunspellStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HunspellStemFilterFactory, t_HunspellStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilterFactory), module, "HunspellStemFilterFactory", 0);
          }

          void t_HunspellStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "class_", make_descriptor(HunspellStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilterFactory::wrap_Object(HunspellStemFilterFactory(((t_HunspellStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HunspellStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HunspellStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermStatistics::class$ = NULL;
        jmethodID *TermStatistics::mids$ = NULL;
        bool TermStatistics::live$ = false;

        jclass TermStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b78af156] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;JJ)V");
            mids$[mid_docFreq_54c6a17a] = env->getMethodID(cls, "docFreq", "()J");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStatistics::TermStatistics(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b78af156, a0.this$, a1, a2)) {}

        jlong TermStatistics::docFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_docFreq_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef TermStatistics::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong TermStatistics::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self);
        static PyObject *t_TermStatistics_term(t_TermStatistics *self);
        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self);

        static PyMethodDef t_TermStatistics__methods_[] = {
          DECLARE_METHOD(t_TermStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, term, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStatistics, t_TermStatistics, ::java::lang::Object, TermStatistics, t_TermStatistics_init_, 0, 0, 0, 0, 0);

        void t_TermStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStatistics), module, "TermStatistics", 0);
        }

        void t_TermStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "class_", make_descriptor(TermStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "wrapfn_", make_descriptor(t_TermStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStatistics::initializeClass, 1)))
            return NULL;
          return t_TermStatistics::wrap_Object(TermStatistics(((t_TermStatistics *) arg)->object.this$));
        }
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jlong a2;
          TermStatistics object((jobject) NULL);

          if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TermStatistics(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermStatistics_term(t_TermStatistics *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Sorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Sorter::class$ = NULL;
        jmethodID *Sorter::mids$ = NULL;
        bool Sorter::live$ = false;

        jclass Sorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Sorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_swap_d8d154a6] = env->getMethodID(cls, "swap", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Sorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args);

        static PyMethodDef t_Sorter__methods_[] = {
          DECLARE_METHOD(t_Sorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sorter, t_Sorter, ::java::lang::Object, Sorter, abstract_init, 0, 0, 0, 0, 0);

        void t_Sorter::install(PyObject *module)
        {
          installType(&PY_TYPE(Sorter), module, "Sorter", 0);
        }

        void t_Sorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "class_", make_descriptor(Sorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "wrapfn_", make_descriptor(t_Sorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sorter::initializeClass, 1)))
            return NULL;
          return t_Sorter::wrap_Object(Sorter(((t_Sorter *) arg)->object.this$));
        }
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InfoStream::class$ = NULL;
        jmethodID *InfoStream::mids$ = NULL;
        bool InfoStream::live$ = false;
        InfoStream *InfoStream::NO_OUTPUT = NULL;

        jclass InfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDefault_1923150b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setDefault_a5e6dfa2] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/util/InfoStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_OUTPUT = new InfoStream(env->getStaticObjectField(cls, "NO_OUTPUT", "Lorg/apache/lucene/util/InfoStream;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InfoStream::InfoStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        InfoStream InfoStream::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return InfoStream(env->callStaticObjectMethod(cls, mids$[mid_getDefault_1923150b]));
        }

        jboolean InfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        void InfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }

        void InfoStream::setDefault(const InfoStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_a5e6dfa2], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InfoStream_getDefault(PyTypeObject *type);
        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg);
        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args);
        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data);
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data);
        static PyGetSetDef t_InfoStream__fields_[] = {
          DECLARE_GETSET_FIELD(t_InfoStream, default),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_InfoStream__methods_[] = {
          DECLARE_METHOD(t_InfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, isEnabled, METH_O),
          DECLARE_METHOD(t_InfoStream, message, METH_VARARGS),
          DECLARE_METHOD(t_InfoStream, setDefault, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InfoStream, t_InfoStream, ::java::lang::Object, InfoStream, t_InfoStream_init_, 0, 0, t_InfoStream__fields_, 0, 0);

        void t_InfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(InfoStream), module, "InfoStream", 0);
        }

        void t_InfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "class_", make_descriptor(InfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "wrapfn_", make_descriptor(t_InfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(InfoStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "NO_OUTPUT", make_descriptor(t_InfoStream::wrap_Object(*InfoStream::NO_OUTPUT)));
        }

        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InfoStream::initializeClass, 1)))
            return NULL;
          return t_InfoStream::wrap_Object(InfoStream(((t_InfoStream *) arg)->object.this$));
        }
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds)
        {
          InfoStream object((jobject) NULL);

          INT_CALL(object = InfoStream());
          self->object = object;

          return 0;
        }

        static PyObject *t_InfoStream_getDefault(PyTypeObject *type)
        {
          InfoStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::InfoStream::getDefault());
          return t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isEnabled", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "message", args);
          return NULL;
        }

        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg)
        {
          InfoStream a0((jobject) NULL);

          if (!parseArg(arg, "k", InfoStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::InfoStream::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data)
        {
          InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_InfoStream::wrap_Object(value);
        }
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data)
        {
          {
            InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilterFactory::class$ = NULL;
          jmethodID *FrenchLightStemFilterFactory::mids$ = NULL;
          bool FrenchLightStemFilterFactory::live$ = false;

          jclass FrenchLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilterFactory::FrenchLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilterFactory), module, "FrenchLightStemFilterFactory", 0);
          }

          void t_FrenchLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilterFactory::wrap_Object(FrenchLightStemFilterFactory(((t_FrenchLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PriorityQueue::class$ = NULL;
        jmethodID *PriorityQueue::mids$ = NULL;
        bool PriorityQueue::live$ = false;

        jclass PriorityQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PriorityQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
            mids$[mid_add_a932a95f] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_insertWithOverflow_a932a95f] = env->getMethodID(cls, "insertWithOverflow", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_pop_846352c3] = env->getMethodID(cls, "pop", "()Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_top_846352c3] = env->getMethodID(cls, "top", "()Ljava/lang/Object;");
            mids$[mid_updateTop_846352c3] = env->getMethodID(cls, "updateTop", "()Ljava/lang/Object;");
            mids$[mid_getSentinelObject_846352c3] = env->getMethodID(cls, "getSentinelObject", "()Ljava/lang/Object;");
            mids$[mid_getHeapArray_94e49c77] = env->getMethodID(cls, "getHeapArray", "()[Ljava/lang/Object;");
            mids$[mid_lessThan_466982fe] = env->getMethodID(cls, "lessThan", "(Ljava/lang/Object;Ljava/lang/Object;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PriorityQueue::PriorityQueue(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        PriorityQueue::PriorityQueue(jint a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

        ::java::lang::Object PriorityQueue::add(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_a932a95f], a0.this$));
        }

        void PriorityQueue::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object PriorityQueue::insertWithOverflow(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_insertWithOverflow_a932a95f], a0.this$));
        }

        ::java::lang::Object PriorityQueue::pop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pop_846352c3]));
        }

        jint PriorityQueue::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::Object PriorityQueue::top() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_top_846352c3]));
        }

        ::java::lang::Object PriorityQueue::updateTop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_updateTop_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args);
        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data);
        static PyGetSetDef t_PriorityQueue__fields_[] = {
          DECLARE_GET_FIELD(t_PriorityQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PriorityQueue__methods_[] = {
          DECLARE_METHOD(t_PriorityQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_PriorityQueue, add, METH_O),
          DECLARE_METHOD(t_PriorityQueue, clear, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, insertWithOverflow, METH_O),
          DECLARE_METHOD(t_PriorityQueue, pop, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, size, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, top, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, updateTop, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PriorityQueue, t_PriorityQueue, ::java::lang::Object, PriorityQueue, t_PriorityQueue_init_, 0, 0, t_PriorityQueue__fields_, 0, 0);
        PyObject *t_PriorityQueue::wrap_Object(const PriorityQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PriorityQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(PriorityQueue), module, "PriorityQueue", 0);
        }

        void t_PriorityQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "class_", make_descriptor(PriorityQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_PriorityQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PriorityQueue::initializeClass, 1)))
            return NULL;
          return t_PriorityQueue::wrap_Object(PriorityQueue(((t_PriorityQueue *) arg)->object.this$));
        }
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PriorityQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = PriorityQueue(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jboolean a1;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = PriorityQueue(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.insertWithOverflow(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "insertWithOverflow", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.pop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.top());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.updateTop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThisQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThisQuery::class$ = NULL;
          jmethodID *MoreLikeThisQuery::mids$ = NULL;
          bool MoreLikeThisQuery::live$ = false;

          jclass MoreLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e36f88de] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getLikeText_14c7b5c5] = env->getMethodID(cls, "getLikeText", "()Ljava/lang/String;");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFrequency_54c6a179] = env->getMethodID(cls, "getMinTermFrequency", "()I");
              mids$[mid_getMoreLikeFields_2e6d5245] = env->getMethodID(cls, "getMoreLikeFields", "()[Ljava/lang/String;");
              mids$[mid_getPercentTermsToMatch_54c6a176] = env->getMethodID(cls, "getPercentTermsToMatch", "()F");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setLikeText_5fdc3f48] = env->getMethodID(cls, "setLikeText", "(Ljava/lang/String;)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFrequency_39c7bd3c] = env->getMethodID(cls, "setMinTermFrequency", "(I)V");
              mids$[mid_setMoreLikeFields_4dd4540c] = env->getMethodID(cls, "setMoreLikeFields", "([Ljava/lang/String;)V");
              mids$[mid_setPercentTermsToMatch_06298cab] = env->getMethodID(cls, "setPercentTermsToMatch", "(F)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThisQuery::MoreLikeThisQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e36f88de, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jboolean MoreLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThisQuery::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          ::java::lang::String MoreLikeThisQuery::getLikeText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLikeText_14c7b5c5]));
          }

          jint MoreLikeThisQuery::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFrequency_54c6a179]);
          }

          JArray< ::java::lang::String > MoreLikeThisQuery::getMoreLikeFields() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getMoreLikeFields_2e6d5245]));
          }

          jfloat MoreLikeThisQuery::getPercentTermsToMatch() const
          {
            return env->callFloatMethod(this$, mids$[mid_getPercentTermsToMatch_54c6a176]);
          }

          ::java::util::Set MoreLikeThisQuery::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jint MoreLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query MoreLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void MoreLikeThisQuery::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThisQuery::setLikeText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLikeText_5fdc3f48], a0.this$);
          }

          void MoreLikeThisQuery::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFrequency_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMoreLikeFields(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMoreLikeFields_4dd4540c], a0.this$);
          }

          void MoreLikeThisQuery::setPercentTermsToMatch(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPercentTermsToMatch_06298cab], a0);
          }

          void MoreLikeThisQuery::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }

          ::java::lang::String MoreLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, likeText),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minTermFrequency),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, moreLikeFields),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, percentTermsToMatch),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getLikeText, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMoreLikeFields, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getPercentTermsToMatch, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setLikeText, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinTermFrequency, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMoreLikeFields, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setPercentTermsToMatch, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setStopWords, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThisQuery, t_MoreLikeThisQuery, ::org::apache::lucene::search::Query, MoreLikeThisQuery, t_MoreLikeThisQuery_init_, 0, 0, t_MoreLikeThisQuery__fields_, 0, 0);

          void t_MoreLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThisQuery), module, "MoreLikeThisQuery", 0);
          }

          void t_MoreLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "class_", make_descriptor(MoreLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThisQuery::wrap_Object(MoreLikeThisQuery(((t_MoreLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            MoreLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "s[sks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = MoreLikeThisQuery(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLikeText());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMoreLikeFields());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setLikeText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLikeText", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setMoreLikeFields(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMoreLikeFields", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setPercentTermsToMatch(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPercentTermsToMatch", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLikeText());
            return j2p(value);
          }
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setLikeText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "likeText", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFrequency", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMoreLikeFields());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setMoreLikeFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "moreLikeFields", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setPercentTermsToMatch(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "percentTermsToMatch", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *BaseCharFilter::class$ = NULL;
          jmethodID *BaseCharFilter::mids$ = NULL;
          bool BaseCharFilter::live$ = false;

          jclass BaseCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/BaseCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getLastCumulativeDiff_54c6a179] = env->getMethodID(cls, "getLastCumulativeDiff", "()I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");
              mids$[mid_addOffCorrectMap_d8d154a6] = env->getMethodID(cls, "addOffCorrectMap", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseCharFilter::BaseCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseCharFilter__methods_[] = {
            DECLARE_METHOD(t_BaseCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseCharFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseCharFilter, t_BaseCharFilter, ::org::apache::lucene::analysis::CharFilter, BaseCharFilter, t_BaseCharFilter_init_, 0, 0, 0, 0, 0);

          void t_BaseCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseCharFilter), module, "BaseCharFilter", 0);
          }

          void t_BaseCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "class_", make_descriptor(BaseCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "wrapfn_", make_descriptor(t_BaseCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseCharFilter::initializeClass, 1)))
              return NULL;
            return t_BaseCharFilter::wrap_Object(BaseCharFilter(((t_BaseCharFilter *) arg)->object.this$));
          }
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            BaseCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = BaseCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingCollector::class$ = NULL;
        jmethodID *CachingCollector::mids$ = NULL;
        bool CachingCollector::live$ = false;

        jclass CachingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_e449836e] = env->getStaticMethodID(cls, "create", "(ZZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_69c8fe09] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_e9d072d8] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZI)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_isCached_54c6a16a] = env->getMethodID(cls, "isCached", "()Z");
            mids$[mid_replay_77379ce0] = env->getMethodID(cls, "replay", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CachingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        CachingCollector CachingCollector::create(jboolean a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_e449836e], a0, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_69c8fe09], a0.this$, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_e9d072d8], a0.this$, a1, a2));
        }

        jboolean CachingCollector::isCached() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCached_54c6a16a]);
        }

        void CachingCollector::replay(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_replay_77379ce0], a0.this$);
        }

        void CachingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_acceptsDocsOutOfOrder(t_CachingCollector *self, PyObject *args);
        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self);
        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg);
        static PyObject *t_CachingCollector_setNextReader(t_CachingCollector *self, PyObject *args);
        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data);
        static int t_CachingCollector_set__nextReader(t_CachingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_CachingCollector__fields_[] = {
          DECLARE_GET_FIELD(t_CachingCollector, cached),
          DECLARE_SET_FIELD(t_CachingCollector, nextReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingCollector__methods_[] = {
          DECLARE_METHOD(t_CachingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_CachingCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, isCached, METH_NOARGS),
          DECLARE_METHOD(t_CachingCollector, replay, METH_O),
          DECLARE_METHOD(t_CachingCollector, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingCollector, t_CachingCollector, ::org::apache::lucene::search::Collector, CachingCollector, abstract_init, 0, 0, t_CachingCollector__fields_, 0, 0);

        void t_CachingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingCollector), module, "CachingCollector", 0);
        }

        void t_CachingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "class_", make_descriptor(CachingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "wrapfn_", make_descriptor(t_CachingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingCollector::initializeClass, 1)))
            return NULL;
          return t_CachingCollector::wrap_Object(CachingCollector(((t_CachingCollector *) arg)->object.this$));
        }
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CachingCollector_acceptsDocsOutOfOrder(t_CachingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "ZZD", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZD", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jint a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCached());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.replay(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "replay", arg);
          return NULL;
        }

        static PyObject *t_CachingCollector_setNextReader(t_CachingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCached());
          Py_RETURN_BOOL(value);
        }

        static int t_CachingCollector_set__nextReader(t_CachingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/AbstractEncoder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *AbstractEncoder::class$ = NULL;
          jmethodID *AbstractEncoder::mids$ = NULL;
          bool AbstractEncoder::live$ = false;

          jclass AbstractEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/AbstractEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractEncoder::AbstractEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef AbstractEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg);

          static PyMethodDef t_AbstractEncoder__methods_[] = {
            DECLARE_METHOD(t_AbstractEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, encode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractEncoder, t_AbstractEncoder, ::java::lang::Object, AbstractEncoder, t_AbstractEncoder_init_, 0, 0, 0, 0, 0);

          void t_AbstractEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractEncoder), module, "AbstractEncoder", 0);
          }

          void t_AbstractEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "class_", make_descriptor(AbstractEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "wrapfn_", make_descriptor(t_AbstractEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractEncoder::initializeClass, 1)))
              return NULL;
            return t_AbstractEncoder::wrap_Object(AbstractEncoder(((t_AbstractEncoder *) arg)->object.this$));
          }
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds)
          {
            AbstractEncoder object((jobject) NULL);

            INT_CALL(object = AbstractEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg)
          {
            JArray< jchar > a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "[C", &a0))
            {
              OBJ_CALL(result = self->object.encode(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenGroup::class$ = NULL;
          jmethodID *TokenGroup::mids$ = NULL;
          bool TokenGroup::live$ = false;

          jclass TokenGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNumTokens_54c6a179] = env->getMethodID(cls, "getNumTokens", "()I");
              mids$[mid_getScore_39c7bd2c] = env->getMethodID(cls, "getScore", "(I)F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getToken_2e456a21] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_getTotalScore_54c6a176] = env->getMethodID(cls, "getTotalScore", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenGroup::TokenGroup(const ::org::apache::lucene::analysis::TokenStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jint TokenGroup::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint TokenGroup::getNumTokens() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTokens_54c6a179]);
          }

          jfloat TokenGroup::getScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_39c7bd2c], a0);
          }

          jint TokenGroup::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::org::apache::lucene::analysis::Token TokenGroup::getToken(jint a0) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_2e456a21], a0));
          }

          jfloat TokenGroup::getTotalScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalScore_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self);
          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data);
          static PyGetSetDef t_TokenGroup__fields_[] = {
            DECLARE_GET_FIELD(t_TokenGroup, endOffset),
            DECLARE_GET_FIELD(t_TokenGroup, numTokens),
            DECLARE_GET_FIELD(t_TokenGroup, startOffset),
            DECLARE_GET_FIELD(t_TokenGroup, totalScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenGroup__methods_[] = {
            DECLARE_METHOD(t_TokenGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getNumTokens, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getScore, METH_O),
            DECLARE_METHOD(t_TokenGroup, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getToken, METH_O),
            DECLARE_METHOD(t_TokenGroup, getTotalScore, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenGroup, t_TokenGroup, ::java::lang::Object, TokenGroup, t_TokenGroup_init_, 0, 0, t_TokenGroup__fields_, 0, 0);

          void t_TokenGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenGroup), module, "TokenGroup", 0);
          }

          void t_TokenGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "class_", make_descriptor(TokenGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "wrapfn_", make_descriptor(t_TokenGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenGroup::initializeClass, 1)))
              return NULL;
            return t_TokenGroup::wrap_Object(TokenGroup(((t_TokenGroup *) arg)->object.this$));
          }
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenGroup object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenGroup(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumTokens());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScore", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumTokens());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MultiDocValues$MultiSortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint MultiDocValues$MultiSortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        JArray< jint > MultiDocValues$MultiSortedDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedDocValues > MultiDocValues$MultiSortedDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data);

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, values),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, lookupOrd, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedDocValues, t_MultiDocValues$MultiSortedDocValues, ::org::apache::lucene::index::SortedDocValues, MultiDocValues$MultiSortedDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedDocValues), module, "MultiDocValues$MultiSortedDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedDocValues::wrap_Object(MultiDocValues$MultiSortedDocValues(((t_MultiDocValues$MultiSortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedDocValues::wrap_jobject);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Float::class$ = NULL;
    jmethodID *Float::mids$ = NULL;
    bool Float::live$ = false;
    jint Float::MAX_EXPONENT = (jint) 0;
    jfloat Float::MAX_VALUE = (jfloat) 0;
    jint Float::MIN_EXPONENT = (jint) 0;
    jfloat Float::MIN_NORMAL = (jfloat) 0;
    jfloat Float::MIN_VALUE = (jfloat) 0;
    jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
    jfloat Float::NaN = (jfloat) 0;
    jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
    jint Float::SIZE = (jint) 0;
    ::java::lang::Class *Float::TYPE = NULL;

    jclass Float::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Float");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_f1b0c01b] = env->getStaticMethodID(cls, "compare", "(FF)I");
        mids$[mid_compareTo_6b30eb75] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatToIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
        mids$[mid_floatToRawIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intBitsToFloat_39c7bd2c] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_06298ca7] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_06298ca7] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseFloat_5fdc3f58] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toHexString_5ded254a] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_5ded254a] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_685a245e] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");
        mids$[mid_valueOf_b837041d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticFloatField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

    jbyte Float::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Float::compare(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_f1b0c01b], a0, a1);
    }

    jint Float::compareTo(const Float & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b30eb75], a0.this$);
    }

    jdouble Float::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Float::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint Float::floatToIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_06298cb4], a0);
    }

    jint Float::floatToRawIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_06298cb4], a0);
    }

    jfloat Float::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Float::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jfloat Float::intBitsToFloat(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_39c7bd2c], a0);
    }

    jint Float::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Float::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Float::isInfinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_06298ca7], a0);
    }

    jboolean Float::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Float::isNaN(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_06298ca7], a0);
    }

    jlong Float::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jfloat Float::parseFloat(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_5fdc3f58], a0.this$);
    }

    jshort Float::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Float::toHexString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_5ded254a], a0));
    }

    ::java::lang::String Float::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Float::toString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_5ded254a], a0));
    }

    Float Float::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_685a245e], a0));
    }

    Float Float::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b837041d], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg);
    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_equals(t_Float *self, PyObject *args);
    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_isInfinite(t_Float *self);
    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isNaN(t_Float *self);
    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_toString(t_Float *self, PyObject *args);
    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_get__infinite(t_Float *self, void *data);
    static PyObject *t_Float_get__naN(t_Float *self, void *data);
    static PyGetSetDef t_Float__fields_[] = {
      DECLARE_GET_FIELD(t_Float, infinite),
      DECLARE_GET_FIELD(t_Float, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Float__methods_[] = {
      DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, compareTo, METH_O),
      DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, equals, METH_VARARGS),
      DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, toString, METH_VARARGS),
      DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Float, t_Float, ::java::lang::Number, Float, t_Float_init_, 0, 0, t_Float__fields_, 0, 0);

    void t_Float::install(PyObject *module)
    {
      installType(&PY_TYPE(Float), module, "Float", 0);
    }

    void t_Float::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "class_", make_descriptor(Float::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "wrapfn_", make_descriptor(unboxFloat));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "boxfn_", make_descriptor(boxFloat));
      env->getClass(Float::initializeClass);
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NaN", make_descriptor(Float::NaN));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "SIZE", make_descriptor(Float::SIZE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
    }

    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Float::initializeClass, 1)))
        return NULL;
      return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
    }
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Float::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Float object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jfloat a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jint result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg)
    {
      Float a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Float_equals(t_Float *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToRawIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jfloat result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "intBitsToFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Float_isInfinite(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Float_isNaN(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jfloat result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Float_toString(t_Float *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jfloat a0;
          Float result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Float result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Float_get__infinite(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Float_get__naN(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack$TermInfo::class$ = NULL;
          jmethodID *FieldTermStack$TermInfo::mids$ = NULL;
          bool FieldTermStack$TermInfo::live$ = false;

          jclass FieldTermStack$TermInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_649c5657] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIF)V");
              mids$[mid_compareTo_a7ece374] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNext_9d9e3d4a] = env->getMethodID(cls, "getNext", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack$TermInfo::FieldTermStack$TermInfo(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jfloat a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_649c5657, a0.this$, a1, a2, a3, a4)) {}

          jint FieldTermStack$TermInfo::compareTo(const FieldTermStack$TermInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_a7ece374], a0.this$);
          }

          jboolean FieldTermStack$TermInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldTermStack$TermInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          FieldTermStack$TermInfo FieldTermStack$TermInfo::getNext() const
          {
            return FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_getNext_9d9e3d4a]));
          }

          jint FieldTermStack$TermInfo::getPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
          }

          jint FieldTermStack$TermInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jfloat FieldTermStack$TermInfo::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          jint FieldTermStack$TermInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data);
          static PyGetSetDef t_FieldTermStack$TermInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, next),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, position),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, text),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack$TermInfo__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack$TermInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getNext, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack$TermInfo, t_FieldTermStack$TermInfo, ::java::lang::Object, FieldTermStack$TermInfo, t_FieldTermStack$TermInfo_init_, 0, 0, t_FieldTermStack$TermInfo__fields_, 0, 0);

          void t_FieldTermStack$TermInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack$TermInfo), module, "FieldTermStack$TermInfo", 0);
          }

          void t_FieldTermStack$TermInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "class_", make_descriptor(FieldTermStack$TermInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack$TermInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack$TermInfo::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack$TermInfo::wrap_Object(FieldTermStack$TermInfo(((t_FieldTermStack$TermInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack$TermInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jfloat a4;
            FieldTermStack$TermInfo object((jobject) NULL);

            if (!parseArgs(args, "sIIIF", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = FieldTermStack$TermInfo(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg)
          {
            FieldTermStack$TermInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self)
          {
            FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPosition());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data)
          {
            FieldTermStack$TermInfo value((jobject) NULL);
            OBJ_CALL(value = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPosition());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianAnalyzer::class$ = NULL;
          jmethodID *BulgarianAnalyzer::mids$ = NULL;
          bool BulgarianAnalyzer::live$ = false;
          ::java::lang::String *BulgarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BulgarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents BulgarianAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet BulgarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args);
          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data);
          static PyGetSetDef t_BulgarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BulgarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BulgarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BulgarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_BulgarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianAnalyzer, t_BulgarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BulgarianAnalyzer, t_BulgarianAnalyzer_init_, 0, 0, t_BulgarianAnalyzer__fields_, 0, 0);

          void t_BulgarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianAnalyzer), module, "BulgarianAnalyzer", 0);
          }

          void t_BulgarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "class_", make_descriptor(BulgarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BulgarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BulgarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BulgarianAnalyzer::wrap_Object(BulgarianAnalyzer(((t_BulgarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::bg::BulgarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilterFactory::class$ = NULL;
          jmethodID *CJKBigramFilterFactory::mids$ = NULL;
          bool CJKBigramFilterFactory::live$ = false;

          jclass CJKBigramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilterFactory::CJKBigramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKBigramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilterFactory, t_CJKBigramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKBigramFilterFactory, t_CJKBigramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilterFactory), module, "CJKBigramFilterFactory", 0);
          }

          void t_CJKBigramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "class_", make_descriptor(CJKBigramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilterFactory::wrap_Object(CJKBigramFilterFactory(((t_CJKBigramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKBigramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKBigramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ShortParser::class$ = NULL;
        jmethodID *FieldCache$ShortParser::mids$ = NULL;
        bool FieldCache$ShortParser::live$ = false;

        jclass FieldCache$ShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jshort FieldCache$ShortParser::parseShort(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callShortMethod(this$, mids$[mid_parseShort_7bc03dc1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ShortParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, parseShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ShortParser, t_FieldCache$ShortParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ShortParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ShortParser), module, "FieldCache$ShortParser", 0);
        }

        void t_FieldCache$ShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "class_", make_descriptor(FieldCache$ShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ShortParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ShortParser::wrap_Object(FieldCache$ShortParser(((t_FieldCache$ShortParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jshort result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *BooleanQueryNodeBuilder::mids$ = NULL;
              bool BooleanQueryNodeBuilder::live$ = false;

              jclass BooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNodeBuilder::BooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery BooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder, ::java::lang::Object, BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNodeBuilder), module, "BooleanQueryNodeBuilder", 0);
              }

              void t_BooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(BooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNodeBuilder::wrap_Object(BooleanQueryNodeBuilder(((t_BooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor$Status::class$ = NULL;
        jmethodID *StoredFieldVisitor$Status::mids$ = NULL;
        bool StoredFieldVisitor$Status::live$ = false;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::NO = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::STOP = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::YES = NULL;

        jclass StoredFieldVisitor$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor$Status");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_92de5032] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_values_fd94bdd0] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/StoredFieldVisitor$Status;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            STOP = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "STOP", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            YES = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredFieldVisitor$Status StoredFieldVisitor$Status::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return StoredFieldVisitor$Status(env->callStaticObjectMethod(cls, mids$[mid_valueOf_92de5032], a0.this$));
        }

        JArray< StoredFieldVisitor$Status > StoredFieldVisitor$Status::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< StoredFieldVisitor$Status >(env->callStaticObjectMethod(cls, mids$[mid_values_fd94bdd0]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type);
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data);
        static PyGetSetDef t_StoredFieldVisitor$Status__fields_[] = {
          DECLARE_GET_FIELD(t_StoredFieldVisitor$Status, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StoredFieldVisitor$Status__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, of_, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor$Status, t_StoredFieldVisitor$Status, ::java::lang::Enum, StoredFieldVisitor$Status, abstract_init, 0, 0, t_StoredFieldVisitor$Status__fields_, 0, 0);
        PyObject *t_StoredFieldVisitor$Status::wrap_Object(const StoredFieldVisitor$Status& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_StoredFieldVisitor$Status::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_StoredFieldVisitor$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor$Status), module, "StoredFieldVisitor$Status", 0);
        }

        void t_StoredFieldVisitor$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "class_", make_descriptor(StoredFieldVisitor$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredFieldVisitor$Status::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "NO", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::NO)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "STOP", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::STOP)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "YES", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::YES)));
        }

        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor$Status::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor$Status::wrap_Object(StoredFieldVisitor$Status(((t_StoredFieldVisitor$Status *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::valueOf(a0));
            return t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type)
        {
          JArray< StoredFieldVisitor$Status > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::values());
          return JArray<jobject>(result.this$).wrap(t_StoredFieldVisitor$Status::wrap_jobject);
        }
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MutableBits::class$ = NULL;
        jmethodID *MutableBits::mids$ = NULL;
        bool MutableBits::live$ = false;

        jclass MutableBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MutableBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MutableBits::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg);

        static PyMethodDef t_MutableBits__methods_[] = {
          DECLARE_METHOD(t_MutableBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, clear, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MutableBits, t_MutableBits, ::org::apache::lucene::util::Bits, MutableBits, abstract_init, 0, 0, 0, 0, 0);

        void t_MutableBits::install(PyObject *module)
        {
          installType(&PY_TYPE(MutableBits), module, "MutableBits", 0);
        }

        void t_MutableBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "class_", make_descriptor(MutableBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "wrapfn_", make_descriptor(t_MutableBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MutableBits::initializeClass, 1)))
            return NULL;
          return t_MutableBits::wrap_Object(MutableBits(((t_MutableBits *) arg)->object.this$));
        }
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MutableBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.clear(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clear", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/String.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/io/OutputStream.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *PrintWriter::class$ = NULL;
    jmethodID *PrintWriter::mids$ = NULL;
    bool PrintWriter::live$ = false;

    jclass PrintWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/PrintWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
        mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
        mids$[mid_init$_a0fd6605] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
        mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
        mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
        mids$[mid_init$_53203e9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
        mids$[mid_append_4ea4b69d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
        mids$[mid_append_6cdbddb5] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
        mids$[mid_append_19a20159] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
        mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_format_d515d1d7] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_format_0bde164c] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
        mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
        mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
        mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
        mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
        mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
        mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
        mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
        mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
        mids$[mid_printf_d515d1d7] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_printf_0bde164c] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
        mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
        mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
        mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
        mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
        mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
        mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
        mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
        mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
        mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
        mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_a0fd6605, a0.this$, a1)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_53203e9d, a0.this$, a1)) {}

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ea4b69d], a0.this$));
    }

    PrintWriter PrintWriter::append(jchar a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_6cdbddb5], a0));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_19a20159], a0.this$, a1, a2));
    }

    jboolean PrintWriter::checkError() const
    {
      return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
    }

    void PrintWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void PrintWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::print(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
    }

    void PrintWriter::print(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
    }

    void PrintWriter::print(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
    }

    void PrintWriter::print(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
    }

    void PrintWriter::print(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
    }

    void PrintWriter::print(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
    }

    void PrintWriter::print(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
    }

    void PrintWriter::print(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
    }

    void PrintWriter::print(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
    }

    PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::println() const
    {
      env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
    }

    void PrintWriter::println(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
    }

    void PrintWriter::println(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
    }

    void PrintWriter::println(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
    }

    void PrintWriter::println(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
    }

    void PrintWriter::println(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
    }

    void PrintWriter::println(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
    }

    void PrintWriter::println(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
    }

    void PrintWriter::println(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
    }

    void PrintWriter::println(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
    }

    void PrintWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void PrintWriter::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void PrintWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

    static PyMethodDef t_PrintWriter__methods_[] = {
      DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
      DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(PrintWriter, t_PrintWriter, ::java::io::Writer, PrintWriter, t_PrintWriter_init_, 0, 0, 0, 0, 0);

    void t_PrintWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(PrintWriter), module, "PrintWriter", 0);
    }

    void t_PrintWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "class_", make_descriptor(PrintWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
        return NULL;
      return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
    }
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, PrintWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::OutputStream a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        {
          jchar a0;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.checkError());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.format(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.format(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "format", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "print", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.printf(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.printf(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printf", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.println());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "println", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ArmenianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ArmenianStemmer::class$ = NULL;
        jmethodID *ArmenianStemmer::mids$ = NULL;
        bool ArmenianStemmer::live$ = false;

        jclass ArmenianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ArmenianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ArmenianStemmer::ArmenianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ArmenianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ArmenianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ArmenianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args);

        static PyMethodDef t_ArmenianStemmer__methods_[] = {
          DECLARE_METHOD(t_ArmenianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArmenianStemmer, t_ArmenianStemmer, ::org::tartarus::snowball::SnowballProgram, ArmenianStemmer, t_ArmenianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ArmenianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ArmenianStemmer), module, "ArmenianStemmer", 0);
        }

        void t_ArmenianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "class_", make_descriptor(ArmenianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArmenianStemmer::initializeClass, 1)))
            return NULL;
          return t_ArmenianStemmer::wrap_Object(ArmenianStemmer(((t_ArmenianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArmenianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ArmenianStemmer object((jobject) NULL);

          INT_CALL(object = ArmenianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/CompressionTools.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *CompressionTools::class$ = NULL;
        jmethodID *CompressionTools::mids$ = NULL;
        bool CompressionTools::live$ = false;

        jclass CompressionTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/CompressionTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compress_1193226d] = env->getStaticMethodID(cls, "compress", "([B)[B");
            mids$[mid_compress_3d448975] = env->getStaticMethodID(cls, "compress", "([BII)[B");
            mids$[mid_compress_dad27ce1] = env->getStaticMethodID(cls, "compress", "([BIII)[B");
            mids$[mid_compressString_94a731a4] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;)[B");
            mids$[mid_compressString_7bb29782] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;I)[B");
            mids$[mid_decompress_1193226d] = env->getStaticMethodID(cls, "decompress", "([B)[B");
            mids$[mid_decompress_942a4f60] = env->getStaticMethodID(cls, "decompress", "(Lorg/apache/lucene/util/BytesRef;)[B");
            mids$[mid_decompress_3d448975] = env->getStaticMethodID(cls, "decompress", "([BII)[B");
            mids$[mid_decompressString_edfda73b] = env->getStaticMethodID(cls, "decompressString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
            mids$[mid_decompressString_0f6e0f86] = env->getStaticMethodID(cls, "decompressString", "([B)Ljava/lang/String;");
            mids$[mid_decompressString_f7ab0d9e] = env->getStaticMethodID(cls, "decompressString", "([BII)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_3d448975], a0.this$, a1, a2));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_dad27ce1], a0.this$, a1, a2, a3));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_94a731a4], a0.this$));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_7bb29782], a0.this$, a1));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_942a4f60], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_3d448975], a0.this$, a1, a2));
        }

        ::java::lang::String CompressionTools::decompressString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_edfda73b], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_0f6e0f86], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_f7ab0d9e], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CompressionTools__methods_[] = {
          DECLARE_METHOD(t_CompressionTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compressString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompressString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompressionTools, t_CompressionTools, ::java::lang::Object, CompressionTools, abstract_init, 0, 0, 0, 0, 0);

        void t_CompressionTools::install(PyObject *module)
        {
          installType(&PY_TYPE(CompressionTools), module, "CompressionTools", 0);
        }

        void t_CompressionTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "class_", make_descriptor(CompressionTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "wrapfn_", make_descriptor(t_CompressionTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompressionTools::initializeClass, 1)))
            return NULL;
          return t_CompressionTools::wrap_Object(CompressionTools(((t_CompressionTools *) arg)->object.this$));
        }
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompressionTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2));
                return result.wrap();
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2, a3));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compressString", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0, a1, a2));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "decompress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0, a1, a2));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "decompressString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchAllBits::class$ = NULL;
        jmethodID *Bits$MatchAllBits::mids$ = NULL;
        bool Bits$MatchAllBits::live$ = false;

        jclass Bits$MatchAllBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchAllBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchAllBits::Bits$MatchAllBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchAllBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchAllBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self);

        static PyMethodDef t_Bits$MatchAllBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchAllBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchAllBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchAllBits, t_Bits$MatchAllBits, ::java::lang::Object, Bits$MatchAllBits, t_Bits$MatchAllBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchAllBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchAllBits), module, "Bits$MatchAllBits", 0);
        }

        void t_Bits$MatchAllBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "class_", make_descriptor(Bits$MatchAllBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchAllBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchAllBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchAllBits::wrap_Object(Bits$MatchAllBits(((t_Bits$MatchAllBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchAllBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchAllBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchAllBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LabelToOrdinal::class$ = NULL;
            jmethodID *LabelToOrdinal::mids$ = NULL;
            bool LabelToOrdinal::live$ = false;
            jint LabelToOrdinal::INVALID_ORDINAL = (jint) 0;

            jclass LabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getMaxOrdinal_54c6a179] = env->getMethodID(cls, "getMaxOrdinal", "()I");
                mids$[mid_getNextOrdinal_54c6a179] = env->getMethodID(cls, "getNextOrdinal", "()I");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LabelToOrdinal::LabelToOrdinal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void LabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint LabelToOrdinal::getMaxOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getNextOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args);
            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg);
            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data);
            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data);
            static PyGetSetDef t_LabelToOrdinal__fields_[] = {
              DECLARE_GET_FIELD(t_LabelToOrdinal, maxOrdinal),
              DECLARE_GET_FIELD(t_LabelToOrdinal, nextOrdinal),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_LabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getMaxOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getNextOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getOrdinal, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LabelToOrdinal, t_LabelToOrdinal, ::java::lang::Object, LabelToOrdinal, t_LabelToOrdinal_init_, 0, 0, t_LabelToOrdinal__fields_, 0, 0);

            void t_LabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(LabelToOrdinal), module, "LabelToOrdinal", 0);
            }

            void t_LabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "class_", make_descriptor(LabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_LabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "INVALID_ORDINAL", make_descriptor(LabelToOrdinal::INVALID_ORDINAL));
            }

            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_LabelToOrdinal::wrap_Object(LabelToOrdinal(((t_LabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              LabelToOrdinal object((jobject) NULL);

              INT_CALL(object = LabelToOrdinal());
              self->object = object;

              return 0;
            }

            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getOrdinal", arg);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextOrdinal());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Attribute::class$ = NULL;
        jmethodID *Attribute::mids$ = NULL;
        bool Attribute::live$ = false;

        jclass Attribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Attribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Attribute__methods_[] = {
          DECLARE_METHOD(t_Attribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Attribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Attribute, t_Attribute, ::java::lang::Object, Attribute, abstract_init, 0, 0, 0, 0, 0);

        void t_Attribute::install(PyObject *module)
        {
          installType(&PY_TYPE(Attribute), module, "Attribute", 0);
        }

        void t_Attribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "class_", make_descriptor(Attribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "wrapfn_", make_descriptor(t_Attribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Attribute::initializeClass, 1)))
            return NULL;
          return t_Attribute::wrap_Object(Attribute(((t_Attribute *) arg)->object.this$));
        }
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Attribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl34::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl34::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl34::live$ = false;
            jint UAX29URLEmailTokenizerImpl34::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl34::UAX29URLEmailTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl34__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34, ::java::lang::Object, UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34_init_, 0, 0, t_UAX29URLEmailTokenizerImpl34__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl34), module, "UAX29URLEmailTokenizerImpl34", 0);
            }

            void t_UAX29URLEmailTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl34::wrap_Object(UAX29URLEmailTokenizerImpl34(((t_UAX29URLEmailTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHitCountCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHitCountCollector::class$ = NULL;
        jmethodID *TotalHitCountCollector::mids$ = NULL;
        bool TotalHitCountCollector::live$ = false;

        jclass TotalHitCountCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHitCountCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHitCountCollector::TotalHitCountCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TotalHitCountCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TotalHitCountCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jint TotalHitCountCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        void TotalHitCountCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TotalHitCountCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self);
        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args);
        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data);
        static PyGetSetDef t_TotalHitCountCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TotalHitCountCollector, nextReader),
          DECLARE_SET_FIELD(t_TotalHitCountCollector, scorer),
          DECLARE_GET_FIELD(t_TotalHitCountCollector, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHitCountCollector__methods_[] = {
          DECLARE_METHOD(t_TotalHitCountCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TotalHitCountCollector, t_TotalHitCountCollector, ::org::apache::lucene::search::Collector, TotalHitCountCollector, t_TotalHitCountCollector_init_, 0, 0, t_TotalHitCountCollector__fields_, 0, 0);

        void t_TotalHitCountCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHitCountCollector), module, "TotalHitCountCollector", 0);
        }

        void t_TotalHitCountCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "class_", make_descriptor(TotalHitCountCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "wrapfn_", make_descriptor(t_TotalHitCountCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHitCountCollector::initializeClass, 1)))
            return NULL;
          return t_TotalHitCountCollector::wrap_Object(TotalHitCountCollector(((t_TotalHitCountCollector *) arg)->object.this$));
        }
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHitCountCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds)
        {
          TotalHitCountCollector object((jobject) NULL);

          INT_CALL(object = TotalHitCountCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilterFactory::class$ = NULL;
        jmethodID *CollationKeyFilterFactory::mids$ = NULL;
        bool CollationKeyFilterFactory::live$ = false;

        jclass CollationKeyFilterFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilterFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
            mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilterFactory::CollationKeyFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::org::apache::lucene::analysis::TokenStream CollationKeyFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
        }

        ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CollationKeyFilterFactory::getMultiTermComponent() const
        {
          return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
        }

        void CollationKeyFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args);
        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self);
        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data);
        static PyGetSetDef t_CollationKeyFilterFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationKeyFilterFactory, multiTermComponent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationKeyFilterFactory__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilterFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, create, METH_VARARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, getMultiTermComponent, METH_NOARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, inform, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilterFactory, t_CollationKeyFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CollationKeyFilterFactory, t_CollationKeyFilterFactory_init_, 0, 0, t_CollationKeyFilterFactory__fields_, 0, 0);

        void t_CollationKeyFilterFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilterFactory), module, "CollationKeyFilterFactory", 0);
        }

        void t_CollationKeyFilterFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "class_", make_descriptor(CollationKeyFilterFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilterFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilterFactory::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilterFactory::wrap_Object(CollationKeyFilterFactory(((t_CollationKeyFilterFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilterFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          CollationKeyFilterFactory object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = CollationKeyFilterFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.create(a0));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilterFactory), (PyObject *) self, "create", args, 2);
        }

        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
        }

        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inform(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inform", arg);
          return NULL;
        }

        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemmer::class$ = NULL;
          jmethodID *EnglishMinimalStemmer::mids$ = NULL;
          bool EnglishMinimalStemmer::live$ = false;

          jclass EnglishMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemmer::EnglishMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint EnglishMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemmer, t_EnglishMinimalStemmer, ::java::lang::Object, EnglishMinimalStemmer, t_EnglishMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemmer), module, "EnglishMinimalStemmer", 0);
          }

          void t_EnglishMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "class_", make_descriptor(EnglishMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemmer::wrap_Object(EnglishMinimalStemmer(((t_EnglishMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            EnglishMinimalStemmer object((jobject) NULL);

            INT_CALL(object = EnglishMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageFormatter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageFormatter::class$ = NULL;
          jmethodID *PassageFormatter::mids$ = NULL;
          bool PassageFormatter::live$ = false;

          jclass PassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_format_2ef5b250] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageFormatter::PassageFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object PassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_format_2ef5b250], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args);

          static PyMethodDef t_PassageFormatter__methods_[] = {
            DECLARE_METHOD(t_PassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageFormatter, t_PassageFormatter, ::java::lang::Object, PassageFormatter, t_PassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_PassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageFormatter), module, "PassageFormatter", 0);
          }

          void t_PassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "class_", make_descriptor(PassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_PassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageFormatter::initializeClass, 1)))
              return NULL;
            return t_PassageFormatter::wrap_Object(PassageFormatter(((t_PassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            PassageFormatter object((jobject) NULL);

            INT_CALL(object = PassageFormatter());
            self->object = object;

            return 0;
          }

          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemmer::class$ = NULL;
          jmethodID *NorwegianMinimalStemmer::mids$ = NULL;
          bool NorwegianMinimalStemmer::live$ = false;

          jclass NorwegianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemmer::NorwegianMinimalStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemmer, t_NorwegianMinimalStemmer, ::java::lang::Object, NorwegianMinimalStemmer, t_NorwegianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemmer), module, "NorwegianMinimalStemmer", 0);
          }

          void t_NorwegianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "class_", make_descriptor(NorwegianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemmer::wrap_Object(NorwegianMinimalStemmer(((t_NorwegianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianMinimalStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianMinimalStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttributeImpl::class$ = NULL;
          jmethodID *KeywordAttributeImpl::mids$ = NULL;
          bool KeywordAttributeImpl::live$ = false;

          jclass KeywordAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAttributeImpl::KeywordAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void KeywordAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void KeywordAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean KeywordAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint KeywordAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean KeywordAttributeImpl::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttributeImpl::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self);
          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data);
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttributeImpl, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_KeywordAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttributeImpl, t_KeywordAttributeImpl, ::org::apache::lucene::util::AttributeImpl, KeywordAttributeImpl, t_KeywordAttributeImpl_init_, 0, 0, t_KeywordAttributeImpl__fields_, 0, 0);

          void t_KeywordAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttributeImpl), module, "KeywordAttributeImpl", 0);
          }

          void t_KeywordAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "class_", make_descriptor(KeywordAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_KeywordAttributeImpl::wrap_Object(KeywordAttributeImpl(((t_KeywordAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            KeywordAttributeImpl object((jobject) NULL);

            INT_CALL(object = KeywordAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttribute::class$ = NULL;
          jmethodID *PositionIncrementAttribute::mids$ = NULL;
          bool PositionIncrementAttribute::live$ = false;

          jclass PositionIncrementAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionIncrementAttribute::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          void PositionIncrementAttribute::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self);
          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data);
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttribute, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttribute, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttribute, t_PositionIncrementAttribute, ::org::apache::lucene::util::Attribute, PositionIncrementAttribute, abstract_init, 0, 0, t_PositionIncrementAttribute__fields_, 0, 0);

          void t_PositionIncrementAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttribute), module, "PositionIncrementAttribute", 0);
          }

          void t_PositionIncrementAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "class_", make_descriptor(PositionIncrementAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttribute::wrap_Object(PositionIncrementAttribute(((t_PositionIncrementAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StemmerUtil::class$ = NULL;
          jmethodID *StemmerUtil::mids$ = NULL;
          bool StemmerUtil::live$ = false;

          jclass StemmerUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StemmerUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_delete_6f0bb349] = env->getStaticMethodID(cls, "delete", "([CII)I");
              mids$[mid_deleteN_afe81cab] = env->getStaticMethodID(cls, "deleteN", "([CIII)I");
              mids$[mid_endsWith_510fc742] = env->getStaticMethodID(cls, "endsWith", "([CILjava/lang/String;)Z");
              mids$[mid_endsWith_cf61b894] = env->getStaticMethodID(cls, "endsWith", "([CI[C)Z");
              mids$[mid_startsWith_510fc742] = env->getStaticMethodID(cls, "startsWith", "([CILjava/lang/String;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StemmerUtil::delete$(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_delete_6f0bb349], a0.this$, a1, a2);
          }

          jint StemmerUtil::deleteN(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_deleteN_afe81cab], a0.this$, a1, a2, a3);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_510fc742], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_cf61b894], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::startsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_510fc742], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StemmerUtil__methods_[] = {
            DECLARE_METHOD(t_StemmerUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, delete, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, deleteN, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, endsWith, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, startsWith, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerUtil, t_StemmerUtil, ::java::lang::Object, StemmerUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_StemmerUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerUtil), module, "StemmerUtil", 0);
          }

          void t_StemmerUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "class_", make_descriptor(StemmerUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "wrapfn_", make_descriptor(t_StemmerUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerUtil::initializeClass, 1)))
              return NULL;
            return t_StemmerUtil::wrap_Object(StemmerUtil(((t_StemmerUtil *) arg)->object.this$));
          }
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::delete$(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "delete", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::deleteN(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "deleteN", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                JArray< jchar > a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CI[C", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "endsWith", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::startsWith(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "startsWith", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilterFactory.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilterFactory::class$ = NULL;
          jmethodID *PersianCharFilterFactory::mids$ = NULL;
          bool PersianCharFilterFactory::live$ = false;

          jclass PersianCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilterFactory::PersianCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PersianCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args);
          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self);
          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data);
          static PyGetSetDef t_PersianCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilterFactory, t_PersianCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PersianCharFilterFactory, t_PersianCharFilterFactory_init_, 0, 0, t_PersianCharFilterFactory__fields_, 0, 0);

          void t_PersianCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilterFactory), module, "PersianCharFilterFactory", 0);
          }

          void t_PersianCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "class_", make_descriptor(PersianCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilterFactory::wrap_Object(PersianCharFilterFactory(((t_PersianCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization::class$ = NULL;
          jmethodID *Normalization::mids$ = NULL;
          bool Normalization::live$ = false;

          jclass Normalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization::Normalization() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args);

          static PyMethodDef t_Normalization__methods_[] = {
            DECLARE_METHOD(t_Normalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization, t_Normalization, ::java::lang::Object, Normalization, t_Normalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization), module, "Normalization", 0);
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "NoNormalization", make_descriptor(&PY_TYPE(Normalization$NoNormalization)));
          }

          void t_Normalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "class_", make_descriptor(Normalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization::initializeClass, 1)))
              return NULL;
            return t_Normalization::wrap_Object(Normalization(((t_Normalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization object((jobject) NULL);

            INT_CALL(object = Normalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tfn", args);
            return NULL;
          }

          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectTrackingAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectTrackingAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectTrackingAllocator::live$ = false;

        jclass ByteBlockPool$DirectTrackingAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(const ::org::apache::lucene::util::Counter & a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        JArray< jbyte > ByteBlockPool$DirectTrackingAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$DirectTrackingAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$DirectTrackingAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$DirectTrackingAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$DirectTrackingAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator_init_, 0, 0, t_ByteBlockPool$DirectTrackingAllocator__fields_, 0, 0);

        void t_ByteBlockPool$DirectTrackingAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), module, "ByteBlockPool$DirectTrackingAllocator", 0);
        }

        void t_ByteBlockPool$DirectTrackingAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectTrackingAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectTrackingAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectTrackingAllocator::wrap_Object(ByteBlockPool$DirectTrackingAllocator(((t_ByteBlockPool$DirectTrackingAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager::class$ = NULL;
        jmethodID *ReferenceManager::mids$ = NULL;
        bool ReferenceManager::live$ = false;

        jclass ReferenceManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_846352c3] = env->getMethodID(cls, "acquire", "()Ljava/lang/Object;");
            mids$[mid_addListener_c1691f71] = env->getMethodID(cls, "addListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_maybeRefresh_54c6a16a] = env->getMethodID(cls, "maybeRefresh", "()Z");
            mids$[mid_maybeRefreshBlocking_54c6a166] = env->getMethodID(cls, "maybeRefreshBlocking", "()V");
            mids$[mid_release_290588ee] = env->getMethodID(cls, "release", "(Ljava/lang/Object;)V");
            mids$[mid_removeListener_c1691f71] = env->getMethodID(cls, "removeListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_decRef_290588ee] = env->getMethodID(cls, "decRef", "(Ljava/lang/Object;)V");
            mids$[mid_getRefCount_290588f1] = env->getMethodID(cls, "getRefCount", "(Ljava/lang/Object;)I");
            mids$[mid_tryIncRef_290588e2] = env->getMethodID(cls, "tryIncRef", "(Ljava/lang/Object;)Z");
            mids$[mid_refreshIfNeeded_a932a95f] = env->getMethodID(cls, "refreshIfNeeded", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_afterClose_54c6a166] = env->getMethodID(cls, "afterClose", "()V");
            mids$[mid_afterMaybeRefresh_54c6a166] = env->getMethodID(cls, "afterMaybeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReferenceManager::ReferenceManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::lang::Object ReferenceManager::acquire() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_acquire_846352c3]));
        }

        void ReferenceManager::addListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addListener_c1691f71], a0.this$);
        }

        void ReferenceManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean ReferenceManager::maybeRefresh() const
        {
          return env->callBooleanMethod(this$, mids$[mid_maybeRefresh_54c6a16a]);
        }

        void ReferenceManager::maybeRefreshBlocking() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeRefreshBlocking_54c6a166]);
        }

        void ReferenceManager::release(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_290588ee], a0.this$);
        }

        void ReferenceManager::removeListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeListener_c1691f71], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args);
        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data);
        static PyGetSetDef t_ReferenceManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager, acquire, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, addListener, METH_O),
          DECLARE_METHOD(t_ReferenceManager, close, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefreshBlocking, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, release, METH_O),
          DECLARE_METHOD(t_ReferenceManager, removeListener, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager, t_ReferenceManager, ::java::lang::Object, ReferenceManager, t_ReferenceManager_init_, 0, 0, t_ReferenceManager__fields_, 0, 0);
        PyObject *t_ReferenceManager::wrap_Object(const ReferenceManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager), module, "ReferenceManager", 0);
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "RefreshListener", make_descriptor(&PY_TYPE(ReferenceManager$RefreshListener)));
        }

        void t_ReferenceManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "class_", make_descriptor(ReferenceManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager::wrap_Object(ReferenceManager(((t_ReferenceManager *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds)
        {
          ReferenceManager object((jobject) NULL);

          INT_CALL(object = ReferenceManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.acquire());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.addListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addListener", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.maybeRefresh());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.maybeRefreshBlocking());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.removeListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeListener", arg);
          return NULL;
        }
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities$RegexMatcher::class$ = NULL;
            jmethodID *RegexCapabilities$RegexMatcher::mids$ = NULL;
            bool RegexCapabilities$RegexMatcher::live$ = false;

            jclass RegexCapabilities$RegexMatcher::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher");

                mids$ = new jmethodID[max_mid];
                mids$[mid_match_7bc03dc8] = env->getMethodID(cls, "match", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_prefix_14c7b5c5] = env->getMethodID(cls, "prefix", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean RegexCapabilities$RegexMatcher::match(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_match_7bc03dc8], a0.this$);
            }

            ::java::lang::String RegexCapabilities$RegexMatcher::prefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_prefix_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self);

            static PyMethodDef t_RegexCapabilities$RegexMatcher__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, match, METH_O),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, prefix, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities$RegexMatcher, t_RegexCapabilities$RegexMatcher, ::java::lang::Object, RegexCapabilities$RegexMatcher, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities$RegexMatcher::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities$RegexMatcher), module, "RegexCapabilities$RegexMatcher", 0);
            }

            void t_RegexCapabilities$RegexMatcher::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "class_", make_descriptor(RegexCapabilities$RegexMatcher::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities$RegexMatcher::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities$RegexMatcher::wrap_Object(RegexCapabilities$RegexMatcher(((t_RegexCapabilities$RegexMatcher *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.match(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "match", arg);
              return NULL;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.prefix());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/RSLPStemmerBase.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *RSLPStemmerBase::class$ = NULL;
          jmethodID *RSLPStemmerBase::mids$ = NULL;
          bool RSLPStemmerBase::live$ = false;

          jclass RSLPStemmerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/RSLPStemmerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_7d2165b9] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/Map;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RSLPStemmerBase::RSLPStemmerBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RSLPStemmerBase__methods_[] = {
            DECLARE_METHOD(t_RSLPStemmerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RSLPStemmerBase, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RSLPStemmerBase, t_RSLPStemmerBase, ::java::lang::Object, RSLPStemmerBase, t_RSLPStemmerBase_init_, 0, 0, 0, 0, 0);

          void t_RSLPStemmerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(RSLPStemmerBase), module, "RSLPStemmerBase", 0);
          }

          void t_RSLPStemmerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "class_", make_descriptor(RSLPStemmerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "wrapfn_", make_descriptor(t_RSLPStemmerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RSLPStemmerBase::initializeClass, 1)))
              return NULL;
            return t_RSLPStemmerBase::wrap_Object(RSLPStemmerBase(((t_RSLPStemmerBase *) arg)->object.this$));
          }
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RSLPStemmerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds)
          {
            RSLPStemmerBase object((jobject) NULL);

            INT_CALL(object = RSLPStemmerBase());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/NGramDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *NGramDistance::class$ = NULL;
          jmethodID *NGramDistance::mids$ = NULL;
          bool NGramDistance::live$ = false;

          jclass NGramDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/NGramDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramDistance::NGramDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NGramDistance::NGramDistance(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean NGramDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat NGramDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint NGramDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String NGramDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args);

          static PyMethodDef t_NGramDistance__methods_[] = {
            DECLARE_METHOD(t_NGramDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramDistance, t_NGramDistance, ::java::lang::Object, NGramDistance, t_NGramDistance_init_, 0, 0, 0, 0, 0);

          void t_NGramDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramDistance), module, "NGramDistance", 0);
          }

          void t_NGramDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "class_", make_descriptor(NGramDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "wrapfn_", make_descriptor(t_NGramDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramDistance::initializeClass, 1)))
              return NULL;
            return t_NGramDistance::wrap_Object(NGramDistance(((t_NGramDistance *) arg)->object.this$));
          }
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NGramDistance object((jobject) NULL);

                INT_CALL(object = NGramDistance());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                NGramDistance object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = NGramDistance(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelP.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelP::class$ = NULL;
          jmethodID *BasicModelP::mids$ = NULL;
          bool BasicModelP::live$ = false;

          jclass BasicModelP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelP::BasicModelP() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelP::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args);
          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args);

          static PyMethodDef t_BasicModelP__methods_[] = {
            DECLARE_METHOD(t_BasicModelP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelP, t_BasicModelP, ::org::apache::lucene::search::similarities::BasicModel, BasicModelP, t_BasicModelP_init_, 0, 0, 0, 0, 0);

          void t_BasicModelP::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelP), module, "BasicModelP", 0);
          }

          void t_BasicModelP::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "class_", make_descriptor(BasicModelP::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "wrapfn_", make_descriptor(t_BasicModelP::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelP::initializeClass, 1)))
              return NULL;
            return t_BasicModelP::wrap_Object(BasicModelP(((t_BasicModelP *) arg)->object.this$));
          }
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds)
          {
            BasicModelP object((jobject) NULL);

            INT_CALL(object = BasicModelP());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader::class$ = NULL;
        jmethodID *FilterAtomicReader::mids$ = NULL;
        bool FilterAtomicReader::live$ = false;

        jclass FilterAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9e29579] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unwrap_3b1ad795] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader::FilterAtomicReader(const ::org::apache::lucene::index::AtomicReader & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_c9e29579, a0.this$)) {}

        void FilterAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void FilterAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FilterAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues FilterAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos FilterAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FilterAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues FilterAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues FilterAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint FilterAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint FilterAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void FilterAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String FilterAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader FilterAtomicReader::unwrap(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data);
        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data);
        static PyGetSetDef t_FilterAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_FilterAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader, t_FilterAtomicReader, ::org::apache::lucene::index::AtomicReader, FilterAtomicReader, t_FilterAtomicReader_init_, 0, 0, t_FilterAtomicReader__fields_, 0, 0);

        void t_FilterAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader), module, "FilterAtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsAndPositionsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTermsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTermsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTerms", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTerms)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterFields", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterFields)));
        }

        void t_FilterAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "class_", make_descriptor(FilterAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader::wrap_Object(FilterAtomicReader(((t_FilterAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          FilterAtomicReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterAtomicReader::unwrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet::class$ = NULL;
        jmethodID *PForDeltaDocIdSet::mids$ = NULL;
        bool PForDeltaDocIdSet::live$ = false;

        jclass PForDeltaDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint PForDeltaDocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jboolean PForDeltaDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator PForDeltaDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong PForDeltaDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self);
        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_PForDeltaDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet, t_PForDeltaDocIdSet, ::org::apache::lucene::search::DocIdSet, PForDeltaDocIdSet, abstract_init, 0, 0, t_PForDeltaDocIdSet__fields_, 0, 0);

        void t_PForDeltaDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet), module, "PForDeltaDocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(PForDeltaDocIdSet$Builder)));
        }

        void t_PForDeltaDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet::wrap_Object(PForDeltaDocIdSet(((t_PForDeltaDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator$InputIteratorWrapper::class$ = NULL;
          jmethodID *InputIterator$InputIteratorWrapper::mids$ = NULL;
          bool InputIterator$InputIteratorWrapper::live$ = false;

          jclass InputIterator$InputIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InputIterator$InputIteratorWrapper::InputIterator$InputIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Set InputIterator$InputIteratorWrapper::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator InputIterator$InputIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean InputIterator$InputIteratorWrapper::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator$InputIteratorWrapper::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator$InputIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data);
          static PyGetSetDef t_InputIterator$InputIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_InputIterator$InputIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InputIterator$InputIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper, ::java::lang::Object, InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_InputIterator$InputIteratorWrapper *)) get_next< t_InputIterator$InputIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_InputIterator$InputIteratorWrapper__fields_, 0, 0);

          void t_InputIterator$InputIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator$InputIteratorWrapper), module, "InputIterator$InputIteratorWrapper", 0);
          }

          void t_InputIterator$InputIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "class_", make_descriptor(InputIterator$InputIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_InputIterator$InputIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_InputIterator$InputIteratorWrapper::wrap_Object(InputIterator$InputIteratorWrapper(((t_InputIterator$InputIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            InputIterator$InputIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = InputIterator$InputIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BooleanQueryNode::class$ = NULL;
              jmethodID *BooleanQueryNode::mids$ = NULL;
              bool BooleanQueryNode::live$ = false;

              jclass BooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNode::BooleanQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence BooleanQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BooleanQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args);

              static PyMethodDef t_BooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNode, t_BooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BooleanQueryNode, t_BooleanQueryNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNode), module, "BooleanQueryNode", 0);
              }

              void t_BooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "class_", make_descriptor(BooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNode::wrap_Object(BooleanQueryNode(((t_BooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                BooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = BooleanQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *StandardQueryParser::class$ = NULL;
            jmethodID *StandardQueryParser::mids$ = NULL;
            bool StandardQueryParser::live$ = false;

            jclass StandardQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/StandardQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getDateResolution_e0474751] = env->getMethodID(cls, "getDateResolution", "()Lorg/apache/lucene/document/DateTools$Resolution;");
                mids$[mid_getDateResolutionMap_db60befd] = env->getMethodID(cls, "getDateResolutionMap", "()Ljava/util/Map;");
                mids$[mid_getDefaultOperator_61148a0b] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFieldsBoost_db60befd] = env->getMethodID(cls, "getFieldsBoost", "()Ljava/util/Map;");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiFields_2c0596de] = env->getMethodID(cls, "getMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getNumericConfigMap_db60befd] = env->getMethodID(cls, "getNumericConfigMap", "()Ljava/util/Map;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_parse_38d6e77e] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setDateResolution_4c9e2b1c] = env->getMethodID(cls, "setDateResolution", "(Ljava/util/Map;)V");
                mids$[mid_setDateResolutionMap_4c9e2b1c] = env->getMethodID(cls, "setDateResolutionMap", "(Ljava/util/Map;)V");
                mids$[mid_setDefaultOperator_3de2d36e] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;)V");
                mids$[mid_setDefaultPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setDefaultPhraseSlop", "(I)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFieldsBoost_4c9e2b1c] = env->getMethodID(cls, "setFieldsBoost", "(Ljava/util/Map;)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiFields_2c0596de] = env->getMethodID(cls, "setMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setNumericConfigMap_4c9e2b1c] = env->getMethodID(cls, "setNumericConfigMap", "(Ljava/util/Map;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardQueryParser::StandardQueryParser() : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            StandardQueryParser::StandardQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            jboolean StandardQueryParser::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer StandardQueryParser::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            ::org::apache::lucene::document::DateTools$Resolution StandardQueryParser::getDateResolution() const
            {
              return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_e0474751]));
            }

            ::java::util::Map StandardQueryParser::getDateResolutionMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDateResolutionMap_db60befd]));
            }

            ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator StandardQueryParser::getDefaultOperator() const
            {
              return ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_61148a0b]));
            }

            jboolean StandardQueryParser::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            ::java::util::Map StandardQueryParser::getFieldsBoost() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getFieldsBoost_db60befd]));
            }

            jfloat StandardQueryParser::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint StandardQueryParser::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale StandardQueryParser::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean StandardQueryParser::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            void StandardQueryParser::getMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getMultiFields_2c0596de], a0.this$);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod StandardQueryParser::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            ::java::util::Map StandardQueryParser::getNumericConfigMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getNumericConfigMap_db60befd]));
            }

            jint StandardQueryParser::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone StandardQueryParser::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            ::org::apache::lucene::search::Query StandardQueryParser::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_38d6e77e], a0.this$, a1.this$));
            }

            void StandardQueryParser::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void StandardQueryParser::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDateResolutionMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolutionMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDefaultOperator(const ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultOperator_3de2d36e], a0.this$);
            }

            void StandardQueryParser::setDefaultPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void StandardQueryParser::setFieldsBoost(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFieldsBoost_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void StandardQueryParser::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void StandardQueryParser::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void StandardQueryParser::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void StandardQueryParser::setMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiFields_2c0596de], a0.this$);
            }

            void StandardQueryParser::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void StandardQueryParser::setNumericConfigMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumericConfigMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }

            ::java::lang::String StandardQueryParser::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_StandardQueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_StandardQueryParser, allowLeadingWildcard),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, analyzer),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolution),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolutionMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, defaultOperator),
              DECLARE_SET_FIELD(t_StandardQueryParser, defaultPhraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fieldsBoost),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, locale),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, lowercaseExpandedTerms),
              DECLARE_SET_FIELD(t_StandardQueryParser, multiFields),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, numericConfigMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, phraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardQueryParser__methods_[] = {
              DECLARE_METHOD(t_StandardQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolution, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolutionMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDefaultOperator, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFieldsBoost, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getNumericConfigMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setAnalyzer, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolution, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolutionMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultOperator, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFieldsBoost, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLocale, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setNumericConfigMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setTimeZone, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardQueryParser, t_StandardQueryParser, ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper, StandardQueryParser, t_StandardQueryParser_init_, 0, 0, t_StandardQueryParser__fields_, 0, 0);

            void t_StandardQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardQueryParser), module, "StandardQueryParser", 0);
            }

            void t_StandardQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "class_", make_descriptor(StandardQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardQueryParser::initializeClass, 1)))
                return NULL;
              return t_StandardQueryParser::wrap_Object(StandardQueryParser(((t_StandardQueryParser *) arg)->object.this$));
            }
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  StandardQueryParser object((jobject) NULL);

                  INT_CALL(object = StandardQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  StandardQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = StandardQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(CharSequence), &::org::apache::lucene::document::PY_TYPE(DateTools$Resolution));
            }

            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator result((jobject) NULL);
              OBJ_CALL(result = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Float));
            }

            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.getMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::queryparser::flexible::standard::config::PY_TYPE(NumericConfig));
            }

            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "parse", args, 2);
            }

            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setAnalyzer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::util::Map a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setDateResolutionMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolutionMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::parameters_))
              {
                OBJ_CALL(self->object.setDefaultOperator(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setDefaultPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setFieldsBoost(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFieldsBoost", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setNumericConfigMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumericConfigMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
                {
                  INT_CALL(self->object.setAnalyzer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolutionMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolutionMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
              OBJ_CALL(value = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &value))
                {
                  INT_CALL(self->object.setDefaultOperator(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setDefaultPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultPhraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setFieldsBoost(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fieldsBoost", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                JArray< ::java::lang::CharSequence > value((jobject) NULL);
                if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setMultiFields(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiFields", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setNumericConfigMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numericConfigMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedMutable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedMutable::class$ = NULL;
          jmethodID *PagedMutable::mids$ = NULL;
          bool PagedMutable::live$ = false;

          jclass PagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_79c554c1] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedMutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedMutable::PagedMutable(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args);
          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data);
          static PyGetSetDef t_PagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_PagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedMutable__methods_[] = {
            DECLARE_METHOD(t_PagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedMutable, t_PagedMutable, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedMutable, t_PagedMutable_init_, 0, 0, t_PagedMutable__fields_, 0, 0);
          PyObject *t_PagedMutable::wrap_Object(const PagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedMutable), module, "PagedMutable", 0);
          }

          void t_PagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "class_", make_descriptor(PagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "wrapfn_", make_descriptor(t_PagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedMutable::initializeClass, 1)))
              return NULL;
            return t_PagedMutable::wrap_Object(PagedMutable(((t_PagedMutable *) arg)->object.this$));
          }
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedMutable object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedMutable(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedMutable);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsFormat::class$ = NULL;
        jmethodID *StoredFieldsFormat::mids$ = NULL;
        bool StoredFieldsFormat::live$ = false;

        jclass StoredFieldsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::StoredFieldsReader StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::StoredFieldsWriter StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args);
        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args);

        static PyMethodDef t_StoredFieldsFormat__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsFormat, t_StoredFieldsFormat, ::java::lang::Object, StoredFieldsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsFormat), module, "StoredFieldsFormat", 0);
        }

        void t_StoredFieldsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "class_", make_descriptor(StoredFieldsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsFormat::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsFormat::wrap_Object(StoredFieldsFormat(((t_StoredFieldsFormat *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsReader", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Format.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/StringBuffer.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Format::class$ = NULL;
    jmethodID *Format::mids$ = NULL;
    bool Format::live$ = false;

    jclass Format::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Format");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_format_c9db4eed] = env->getMethodID(cls, "format", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_parseObject_2a1c4d09] = env->getMethodID(cls, "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Format::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::lang::String Format::format(const ::java::lang::Object & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_c9db4eed], a0.this$));
    }

    ::java::lang::Object Format::parseObject(const ::java::lang::String & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parseObject_2a1c4d09], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_clone(t_Format *self);
    static PyObject *t_Format_format(t_Format *self, PyObject *arg);
    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg);

    static PyMethodDef t_Format__methods_[] = {
      DECLARE_METHOD(t_Format, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, clone, METH_NOARGS),
      DECLARE_METHOD(t_Format, format, METH_O),
      DECLARE_METHOD(t_Format, parseObject, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Format, t_Format, ::java::lang::Object, Format, abstract_init, 0, 0, 0, 0, 0);

    void t_Format::install(PyObject *module)
    {
      installType(&PY_TYPE(Format), module, "Format", 0);
    }

    void t_Format::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "class_", make_descriptor(Format::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "wrapfn_", make_descriptor(t_Format::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Format::initializeClass, 1)))
        return NULL;
      return t_Format::wrap_Object(Format(((t_Format *) arg)->object.this$));
    }
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Format::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Format_clone(t_Format *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Format_format(t_Format *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "format", arg);
      return NULL;
    }

    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parseObject(a0));
        return ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parseObject", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FieldQueryNodeBuilder::class$ = NULL;
              jmethodID *FieldQueryNodeBuilder::mids$ = NULL;
              bool FieldQueryNodeBuilder::live$ = false;

              jclass FieldQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNodeBuilder::FieldQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery FieldQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FieldQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNodeBuilder, t_FieldQueryNodeBuilder, ::java::lang::Object, FieldQueryNodeBuilder, t_FieldQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FieldQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNodeBuilder), module, "FieldQueryNodeBuilder", 0);
              }

              void t_FieldQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "class_", make_descriptor(FieldQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNodeBuilder::wrap_Object(FieldQueryNodeBuilder(((t_FieldQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FieldQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FieldQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/UnsortedInputIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *UnsortedInputIterator::class$ = NULL;
          jmethodID *UnsortedInputIterator::mids$ = NULL;
          bool UnsortedInputIterator::live$ = false;

          jclass UnsortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/UnsortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnsortedInputIterator::UnsortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::org::apache::lucene::search::suggest::BufferedInputIterator(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set UnsortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong UnsortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args);

          static PyMethodDef t_UnsortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_UnsortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, contexts, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, payload, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UnsortedInputIterator, t_UnsortedInputIterator, ::org::apache::lucene::search::suggest::BufferedInputIterator, UnsortedInputIterator, t_UnsortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_UnsortedInputIterator *)) get_next< t_UnsortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), 0, 0, 0);

          void t_UnsortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(UnsortedInputIterator), module, "UnsortedInputIterator", 0);
          }

          void t_UnsortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "class_", make_descriptor(UnsortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_UnsortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnsortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_UnsortedInputIterator::wrap_Object(UnsortedInputIterator(((t_UnsortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnsortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            UnsortedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = UnsortedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.contexts());
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "contexts", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.payload());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "payload", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.weight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "weight", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilter::class$ = NULL;
          jmethodID *CommonGramsFilter::mids$ = NULL;
          bool CommonGramsFilter::live$ = false;
          ::java::lang::String *CommonGramsFilter::GRAM_TYPE = NULL;

          jclass CommonGramsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GRAM_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "GRAM_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilter::CommonGramsFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          jboolean CommonGramsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CommonGramsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args);
          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args);

          static PyMethodDef t_CommonGramsFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilter, t_CommonGramsFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsFilter, t_CommonGramsFilter_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilter), module, "CommonGramsFilter", 0);
          }

          void t_CommonGramsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "class_", make_descriptor(CommonGramsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "GRAM_TYPE", make_descriptor(j2p(*CommonGramsFilter::GRAM_TYPE)));
          }

          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilter::wrap_Object(CommonGramsFilter(((t_CommonGramsFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
            PyTypeObject **p2;
            CommonGramsFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = CommonGramsFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueStr.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueStr::class$ = NULL;
          jmethodID *MutableValueStr::mids$ = NULL;
          jfieldID *MutableValueStr::fids$ = NULL;
          bool MutableValueStr::live$ = false;

          jclass MutableValueStr::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueStr");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueStr::MutableValueStr() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueStr::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueStr::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueStr::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueStr::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueStr::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueStr::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::org::apache::lucene::util::BytesRef MutableValueStr::_get_value() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_value]));
          }

          void MutableValueStr::_set_value(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_value], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data);
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueStr__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueStr, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueStr__methods_[] = {
            DECLARE_METHOD(t_MutableValueStr, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueStr, t_MutableValueStr, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueStr, t_MutableValueStr_init_, 0, 0, t_MutableValueStr__fields_, 0, 0);

          void t_MutableValueStr::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueStr), module, "MutableValueStr", 0);
          }

          void t_MutableValueStr::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "class_", make_descriptor(MutableValueStr::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "wrapfn_", make_descriptor(t_MutableValueStr::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueStr::initializeClass, 1)))
              return NULL;
            return t_MutableValueStr::wrap_Object(MutableValueStr(((t_MutableValueStr *) arg)->object.this$));
          }
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueStr::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds)
          {
            MutableValueStr object((jobject) NULL);

            INT_CALL(object = MutableValueStr());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_value());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsWriter::class$ = NULL;
          jmethodID *CompressingTermVectorsWriter::mids$ = NULL;
          bool CompressingTermVectorsWriter::live$ = false;

          jclass CompressingTermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsWriter::CompressingTermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingTermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingTermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void CompressingTermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void CompressingTermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingTermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingTermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void CompressingTermVectorsWriter::finishField() const
          {
            env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
          }

          ::java::util::Comparator CompressingTermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint CompressingTermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingTermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void CompressingTermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void CompressingTermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data);
          static PyGetSetDef t_CompressingTermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingTermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingTermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsWriter, t_CompressingTermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, CompressingTermVectorsWriter, t_CompressingTermVectorsWriter_init_, 0, 0, t_CompressingTermVectorsWriter__fields_, 0, 0);

          void t_CompressingTermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsWriter), module, "CompressingTermVectorsWriter", 0);
          }

          void t_CompressingTermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "class_", make_descriptor(CompressingTermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsWriter::wrap_Object(CompressingTermVectorsWriter(((t_CompressingTermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingTermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishField());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashSet.h"
#include "java/util/Collection.h"
#include "java/lang/Cloneable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashSet::class$ = NULL;
    jmethodID *HashSet::mids$ = NULL;
    bool HashSet::live$ = false;

    jclass HashSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashSet::HashSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashSet::HashSet(jint a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashSet::HashSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    HashSet::HashSet(jint a0, jfloat a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    jboolean HashSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    void HashSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean HashSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator HashSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean HashSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint HashSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args);
    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clone(t_HashSet *self);
    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data);
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data);
    static PyGetSetDef t_HashSet__fields_[] = {
      DECLARE_GET_FIELD(t_HashSet, empty),
      DECLARE_GET_FIELD(t_HashSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashSet__methods_[] = {
      DECLARE_METHOD(t_HashSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, add, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, size, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashSet, t_HashSet, ::java::util::AbstractSet, HashSet, t_HashSet_init_, ((PyObject *(*)(t_HashSet *)) get_generic_iterator< t_HashSet >), 0, t_HashSet__fields_, 0, 0);
    PyObject *t_HashSet::wrap_Object(const HashSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_HashSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_HashSet::install(PyObject *module)
    {
      installType(&PY_TYPE(HashSet), module, "HashSet", 0);
    }

    void t_HashSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "class_", make_descriptor(HashSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "wrapfn_", make_descriptor(t_HashSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashSet::initializeClass, 1)))
        return NULL;
      return t_HashSet::wrap_Object(HashSet(((t_HashSet *) arg)->object.this$));
    }
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashSet object((jobject) NULL);

          INT_CALL(object = HashSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashSet(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashSet_clone(t_HashSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "size", args, 2);
    }
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FastVectorHighlighter::class$ = NULL;
          jmethodID *FastVectorHighlighter::mids$ = NULL;
          bool FastVectorHighlighter::live$ = false;
          jboolean FastVectorHighlighter::DEFAULT_FIELD_MATCH = (jboolean) 0;
          jboolean FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT = (jboolean) 0;

          jclass FastVectorHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FastVectorHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_46f2e2c4] = env->getMethodID(cls, "<init>", "(ZZ)V");
              mids$[mid_init$_35aba53c] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;)V");
              mids$[mid_getBestFragment_dab3f1b2] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getBestFragment_71cd1532] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;ILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getBestFragments_f180a9d4] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;II)[Ljava/lang/String;");
              mids$[mid_getBestFragments_d3e90fd8] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getBestFragments_5366ca3a] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Ljava/util/Set;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getFieldQuery_b2d7cb3a] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getFieldQuery_6934781b] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getPhraseLimit_54c6a179] = env->getMethodID(cls, "getPhraseLimit", "()I");
              mids$[mid_isFieldMatch_54c6a16a] = env->getMethodID(cls, "isFieldMatch", "()Z");
              mids$[mid_isPhraseHighlight_54c6a16a] = env->getMethodID(cls, "isPhraseHighlight", "()Z");
              mids$[mid_setPhraseLimit_39c7bd3c] = env->getMethodID(cls, "setPhraseLimit", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_MATCH = env->getStaticBooleanField(cls, "DEFAULT_FIELD_MATCH");
              DEFAULT_PHRASE_HIGHLIGHT = env->getStaticBooleanField(cls, "DEFAULT_PHRASE_HIGHLIGHT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastVectorHighlighter::FastVectorHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46f2e2c4, a0, a1)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a2, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_35aba53c, a0, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_dab3f1b2], a0.this$, a1.this$, a2, a3.this$, a4));
          }

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a5, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a6, const JArray< ::java::lang::String > & a7, const JArray< ::java::lang::String > & a8, const ::org::apache::lucene::search::highlight::Encoder & a9) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_71cd1532], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_f180a9d4], a0.this$, a1.this$, a2, a3.this$, a4, a5));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a6, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a7, const JArray< ::java::lang::String > & a8, const JArray< ::java::lang::String > & a9, const ::org::apache::lucene::search::highlight::Encoder & a10) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_d3e90fd8], a0.this$, a1.this$, a2, a3.this$, a4, a5, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, const ::java::util::Set & a4, jint a5, jint a6, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a7, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a8, const JArray< ::java::lang::String > & a9, const JArray< ::java::lang::String > & a10, const ::org::apache::lucene::search::highlight::Encoder & a11) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_5366ca3a], a0.this$, a1.this$, a2, a3.this$, a4.this$, a5, a6, a7.this$, a8.this$, a9.this$, a10.this$, a11.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_b2d7cb3a], a0.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_6934781b], a0.this$, a1.this$));
          }

          jint FastVectorHighlighter::getPhraseLimit() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseLimit_54c6a179]);
          }

          jboolean FastVectorHighlighter::isFieldMatch() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFieldMatch_54c6a16a]);
          }

          jboolean FastVectorHighlighter::isPhraseHighlight() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPhraseHighlight_54c6a16a]);
          }

          void FastVectorHighlighter::setPhraseLimit(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseLimit_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data);
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FastVectorHighlighter__fields_[] = {
            DECLARE_GET_FIELD(t_FastVectorHighlighter, fieldMatch),
            DECLARE_GET_FIELD(t_FastVectorHighlighter, phraseHighlight),
            DECLARE_GETSET_FIELD(t_FastVectorHighlighter, phraseLimit),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastVectorHighlighter__methods_[] = {
            DECLARE_METHOD(t_FastVectorHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getPhraseLimit, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isFieldMatch, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isPhraseHighlight, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, setPhraseLimit, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastVectorHighlighter, t_FastVectorHighlighter, ::java::lang::Object, FastVectorHighlighter, t_FastVectorHighlighter_init_, 0, 0, t_FastVectorHighlighter__fields_, 0, 0);

          void t_FastVectorHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(FastVectorHighlighter), module, "FastVectorHighlighter", 0);
          }

          void t_FastVectorHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "class_", make_descriptor(FastVectorHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "wrapfn_", make_descriptor(t_FastVectorHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FastVectorHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_FIELD_MATCH", make_descriptor(FastVectorHighlighter::DEFAULT_FIELD_MATCH));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_PHRASE_HIGHLIGHT", make_descriptor(FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT));
          }

          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastVectorHighlighter::initializeClass, 1)))
              return NULL;
            return t_FastVectorHighlighter::wrap_Object(FastVectorHighlighter(((t_FastVectorHighlighter *) arg)->object.this$));
          }
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastVectorHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FastVectorHighlighter object((jobject) NULL);

                INT_CALL(object = FastVectorHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jboolean a0;
                jboolean a1;
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZ", &a0, &a1))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jboolean a0;
                jboolean a1;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a3((jobject) NULL);
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZkk", ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsI", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
              break;
             case 10:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a5((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a6((jobject) NULL);
                JArray< ::java::lang::String > a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a9((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 6:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsII", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 11:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a6((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a10((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 12:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a7((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                JArray< ::java::lang::String > a10((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a11((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsKIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseLimit());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFieldMatch());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseLimit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseLimit", arg);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFieldMatch());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseLimit());
            return PyInt_FromLong((long) value);
          }
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseLimit", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillDownQuery::class$ = NULL;
        jmethodID *DrillDownQuery::mids$ = NULL;
        bool DrillDownQuery::live$ = false;

        jclass DrillDownQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillDownQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_46ac0e90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;)V");
            mids$[mid_init$_82818c2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_add_ee8b16d8] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_add_ba45d66a] = env->getMethodID(cls, "add", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_add_5b69597d] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_477b643a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/DrillDownQuery;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_term_48584f7a] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_46ac0e90, a0.this$)) {}

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::org::apache::lucene::search::Query & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_82818c2d, a0.this$, a1.this$)) {}

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Filter & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ee8b16d8], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ba45d66a], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_5b69597d], a0.this$, a1.this$);
        }

        DrillDownQuery DrillDownQuery::clone() const
        {
          return DrillDownQuery(env->callObjectMethod(this$, mids$[mid_clone_477b643a]));
        }

        jboolean DrillDownQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DrillDownQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DrillDownQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::org::apache::lucene::index::Term DrillDownQuery::term(const ::java::lang::String & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Term(env->callStaticObjectMethod(cls, mids$[mid_term_48584f7a], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String DrillDownQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args);
        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args);

        static PyMethodDef t_DrillDownQuery__methods_[] = {
          DECLARE_METHOD(t_DrillDownQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, term, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillDownQuery, t_DrillDownQuery, ::org::apache::lucene::search::Query, DrillDownQuery, t_DrillDownQuery_init_, 0, 0, 0, 0, 0);

        void t_DrillDownQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillDownQuery), module, "DrillDownQuery", 0);
        }

        void t_DrillDownQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "class_", make_descriptor(DrillDownQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "wrapfn_", make_descriptor(t_DrillDownQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillDownQuery::initializeClass, 1)))
            return NULL;
          return t_DrillDownQuery::wrap_Object(DrillDownQuery(((t_DrillDownQuery *) arg)->object.this$));
        }
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillDownQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0))
              {
                INT_CALL(object = DrillDownQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DrillDownQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args)
        {
          DrillDownQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DrillDownQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::index::Term result((jobject) NULL);

          if (!parseArgs(args, "ss[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::DrillDownQuery::term(a0, a1, a2));
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "term", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonDefaultSimilarity.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonDefaultSimilarity::class$ = NULL;
          jmethodID *PythonDefaultSimilarity::mids$ = NULL;
          bool PythonDefaultSimilarity::live$ = false;

          jclass PythonDefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonDefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonDefaultSimilarity::PythonDefaultSimilarity() : ::org::apache::lucene::search::similarities::DefaultSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PythonDefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_coord_d8d154b6], a0, a1);
          }

          void PythonDefaultSimilarity::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jfloat PythonDefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation PythonDefaultSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::TFIDFSimilarity::mids$[::org::apache::lucene::search::similarities::TFIDFSimilarity::mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat PythonDefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_lengthNorm_6ff84e02], a0.this$);
          }

          jlong PythonDefaultSimilarity::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonDefaultSimilarity::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }

          jfloat PythonDefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_queryNorm_06298cbb], a0);
          }

          jfloat PythonDefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat PythonDefaultSimilarity::tf(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self);
          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args);
          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1);
          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0);
          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj);
          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0);
          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data);
          static PyGetSetDef t_PythonDefaultSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_PythonDefaultSimilarity, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonDefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_PythonDefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, pythonExtension, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, tf, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonDefaultSimilarity, t_PythonDefaultSimilarity, ::org::apache::lucene::search::similarities::DefaultSimilarity, PythonDefaultSimilarity, t_PythonDefaultSimilarity_init_, 0, 0, t_PythonDefaultSimilarity__fields_, 0, 0);

          void t_PythonDefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonDefaultSimilarity), module, "PythonDefaultSimilarity", 1);
          }

          void t_PythonDefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "class_", make_descriptor(PythonDefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_PythonDefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonDefaultSimilarity::initializeClass);
            JNINativeMethod methods[] = {
              { "coord", "(II)F", (void *) t_PythonDefaultSimilarity_coord0 },
              { "idf", "(JJ)F", (void *) t_PythonDefaultSimilarity_idf1 },
              { "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;", (void *) t_PythonDefaultSimilarity_idfExplain2 },
              { "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F", (void *) t_PythonDefaultSimilarity_lengthNorm3 },
              { "pythonDecRef", "()V", (void *) t_PythonDefaultSimilarity_pythonDecRef4 },
              { "queryNorm", "(F)F", (void *) t_PythonDefaultSimilarity_queryNorm5 },
              { "sloppyFreq", "(I)F", (void *) t_PythonDefaultSimilarity_sloppyFreq6 },
              { "tf", "(F)F", (void *) t_PythonDefaultSimilarity_tf7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonDefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_PythonDefaultSimilarity::wrap_Object(PythonDefaultSimilarity(((t_PythonDefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonDefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            PythonDefaultSimilarity object((jobject) NULL);

            INT_CALL(object = PythonDefaultSimilarity());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.idfExplain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idfExplain", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "coord", "ii", (int) a0, (int) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("coord", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "idf", "LL", (long long) a0, (long long) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("idf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Explanation value((jobject) NULL);
            PyObject *o0 = ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(::org::apache::lucene::search::CollectionStatistics(a0));
            PyObject *o1 = JArray<jobject>(a1).wrap(::org::apache::lucene::search::t_TermStatistics::wrap_jobject);
            PyObject *result = PyObject_CallMethod(obj, "idfExplain", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Explanation::initializeClass, &value))
            {
              throwTypeError("idfExplain", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *o0 = ::org::apache::lucene::index::t_FieldInvertState::wrap_Object(::org::apache::lucene::index::FieldInvertState(a0));
            PyObject *result = PyObject_CallMethod(obj, "lengthNorm", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("lengthNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "queryNorm", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("queryNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "sloppyFreq", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("sloppyFreq", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "tf", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("tf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilter::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilter::mids$ = NULL;
          bool ScandinavianNormalizationFilter::live$ = false;

          jclass ScandinavianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilter::ScandinavianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilter), module, "ScandinavianNormalizationFilter", 0);
          }

          void t_ScandinavianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilter::wrap_Object(ScandinavianNormalizationFilter(((t_ScandinavianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelD.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelD::class$ = NULL;
          jmethodID *BasicModelD::mids$ = NULL;
          bool BasicModelD::live$ = false;

          jclass BasicModelD::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelD");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelD::BasicModelD() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelD::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelD::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args);
          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args);

          static PyMethodDef t_BasicModelD__methods_[] = {
            DECLARE_METHOD(t_BasicModelD, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelD, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelD, t_BasicModelD, ::org::apache::lucene::search::similarities::BasicModel, BasicModelD, t_BasicModelD_init_, 0, 0, 0, 0, 0);

          void t_BasicModelD::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelD), module, "BasicModelD", 0);
          }

          void t_BasicModelD::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "class_", make_descriptor(BasicModelD::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "wrapfn_", make_descriptor(t_BasicModelD::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelD::initializeClass, 1)))
              return NULL;
            return t_BasicModelD::wrap_Object(BasicModelD(((t_BasicModelD *) arg)->object.this$));
          }
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelD::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds)
          {
            BasicModelD object((jobject) NULL);

            INT_CALL(object = BasicModelD());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49Codec::class$ = NULL;
          jmethodID *Lucene49Codec::mids$ = NULL;
          bool Lucene49Codec::live$ = false;

          jclass Lucene49Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49Codec::Lucene49Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene49Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene49Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene49Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene49Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene49Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene49Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args);

          static PyMethodDef t_Lucene49Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene49Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49Codec, t_Lucene49Codec, ::org::apache::lucene::codecs::Codec, Lucene49Codec, t_Lucene49Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene49Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49Codec), module, "Lucene49Codec", 0);
          }

          void t_Lucene49Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "class_", make_descriptor(Lucene49Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene49Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene49Codec::wrap_Object(Lucene49Codec(((t_Lucene49Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene49Codec object((jobject) NULL);

            INT_CALL(object = Lucene49Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DerefBytesDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DerefBytesDocValuesField::class$ = NULL;
        jmethodID *DerefBytesDocValuesField::mids$ = NULL;
        bool DerefBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass DerefBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DerefBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DerefBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DerefBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DerefBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DerefBytesDocValuesField, t_DerefBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, DerefBytesDocValuesField, t_DerefBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_DerefBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DerefBytesDocValuesField), module, "DerefBytesDocValuesField", 0);
        }

        void t_DerefBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "class_", make_descriptor(DerefBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DerefBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DerefBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DerefBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DerefBytesDocValuesField::wrap_Object(DerefBytesDocValuesField(((t_DerefBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DerefBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountAnalyzer::class$ = NULL;
          jmethodID *LimitTokenCountAnalyzer::mids$ = NULL;
          bool LimitTokenCountAnalyzer::live$ = false;

          jclass LimitTokenCountAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_79b44903] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IZ)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_79b44903, a0.this$, a1, a2)) {}

          ::java::lang::String LimitTokenCountAnalyzer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountAnalyzer), module, "LimitTokenCountAnalyzer", 0);
          }

          void t_LimitTokenCountAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "class_", make_descriptor(LimitTokenCountAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountAnalyzer::wrap_Object(LimitTokenCountAnalyzer(((t_LimitTokenCountAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountAnalyzer), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilterFactory::class$ = NULL;
          jmethodID *SpanishLightStemFilterFactory::mids$ = NULL;
          bool SpanishLightStemFilterFactory::live$ = false;

          jclass SpanishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilterFactory::SpanishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SpanishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilterFactory), module, "SpanishLightStemFilterFactory", 0);
          }

          void t_SpanishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SpanishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilterFactory::wrap_Object(SpanishLightStemFilterFactory(((t_SpanishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SpanishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SpanishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FacetLabel::class$ = NULL;
          jmethodID *FacetLabel::mids$ = NULL;
          jfieldID *FacetLabel::fids$ = NULL;
          bool FacetLabel::live$ = false;
          jint FacetLabel::MAX_CATEGORY_PATH_LENGTH = (jint) 0;

          jclass FacetLabel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FacetLabel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_compareTo_283f83f5] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_38cf071d] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_CATEGORY_PATH_LENGTH = env->getStaticIntField(cls, "MAX_CATEGORY_PATH_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FacetLabel::FacetLabel(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          FacetLabel::FacetLabel(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

          jint FacetLabel::compareTo(const FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_283f83f5], a0.this$);
          }

          jboolean FacetLabel::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FacetLabel::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong FacetLabel::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          FacetLabel FacetLabel::subpath(jint a0) const
          {
            return FacetLabel(env->callObjectMethod(this$, mids$[mid_subpath_38cf071d], a0));
          }

          ::java::lang::String FacetLabel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< ::java::lang::String > FacetLabel::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint FacetLabel::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self);
          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data);
          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data);

          static PyGetSetDef t_FacetLabel__fields_[] = {
            DECLARE_GET_FIELD(t_FacetLabel, components),
            DECLARE_GET_FIELD(t_FacetLabel, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FacetLabel__methods_[] = {
            DECLARE_METHOD(t_FacetLabel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, compareTo, METH_O),
            DECLARE_METHOD(t_FacetLabel, equals, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_FacetLabel, subpath, METH_O),
            DECLARE_METHOD(t_FacetLabel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FacetLabel, t_FacetLabel, ::java::lang::Object, FacetLabel, t_FacetLabel_init_, 0, 0, t_FacetLabel__fields_, 0, 0);

          void t_FacetLabel::install(PyObject *module)
          {
            installType(&PY_TYPE(FacetLabel), module, "FacetLabel", 0);
          }

          void t_FacetLabel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "class_", make_descriptor(FacetLabel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "wrapfn_", make_descriptor(t_FacetLabel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FacetLabel::initializeClass);
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "MAX_CATEGORY_PATH_LENGTH", make_descriptor(FacetLabel::MAX_CATEGORY_PATH_LENGTH));
          }

          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FacetLabel::initializeClass, 1)))
              return NULL;
            return t_FacetLabel::wrap_Object(FacetLabel(((t_FacetLabel *) arg)->object.this$));
          }
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FacetLabel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = FacetLabel(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  INT_CALL(object = FacetLabel(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg)
          {
            FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg)
          {
            jint a0;
            FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilterFactory::class$ = NULL;
          jmethodID *KStemFilterFactory::mids$ = NULL;
          bool KStemFilterFactory::live$ = false;

          jclass KStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilterFactory::KStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter KStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_KStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilterFactory, t_KStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KStemFilterFactory, t_KStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilterFactory), module, "KStemFilterFactory", 0);
          }

          void t_KStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "class_", make_descriptor(KStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KStemFilterFactory::wrap_Object(KStemFilterFactory(((t_KStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanNearPayloadCheckQuery::mids$ = NULL;
          bool SpanNearPayloadCheckQuery::live$ = false;

          jclass SpanNearPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cc218b3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_efae1086] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearPayloadCheckQuery::SpanNearPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_cc218b3a, a0.this$, a1.this$)) {}

          SpanNearPayloadCheckQuery SpanNearPayloadCheckQuery::clone() const
          {
            return SpanNearPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_efae1086]));
          }

          jboolean SpanNearPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanNearPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanNearPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanNearPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanNearPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearPayloadCheckQuery), module, "SpanNearPayloadCheckQuery", 0);
          }

          void t_SpanNearPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanNearPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearPayloadCheckQuery::wrap_Object(SpanNearPayloadCheckQuery(((t_SpanNearPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanNearPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanNearPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            SpanNearPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanQuery2ModifierNodeProcessor::class$ = NULL;
              jmethodID *BooleanQuery2ModifierNodeProcessor::mids$ = NULL;
              bool BooleanQuery2ModifierNodeProcessor::live$ = false;

              jclass BooleanQuery2ModifierNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_tagModifierButDoNotOverride_6bd34b3d] = env->getMethodID(cls, "tagModifierButDoNotOverride", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_fillChildrenBufferAndApplyModifiery_cc04aeef] = env->getMethodID(cls, "fillChildrenBufferAndApplyModifiery", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_isDefaultBooleanQueryNode_cc04aee3] = env->getMethodID(cls, "isDefaultBooleanQueryNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQuery2ModifierNodeProcessor::BooleanQuery2ModifierNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler BooleanQuery2ModifierNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQuery2ModifierNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void BooleanQuery2ModifierNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data);
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_BooleanQuery2ModifierNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_BooleanQuery2ModifierNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BooleanQuery2ModifierNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor, ::java::lang::Object, BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor_init_, 0, 0, t_BooleanQuery2ModifierNodeProcessor__fields_, 0, 0);

              void t_BooleanQuery2ModifierNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQuery2ModifierNodeProcessor), module, "BooleanQuery2ModifierNodeProcessor", 0);
              }

              void t_BooleanQuery2ModifierNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "class_", make_descriptor(BooleanQuery2ModifierNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery2ModifierNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanQuery2ModifierNodeProcessor::wrap_Object(BooleanQuery2ModifierNodeProcessor(((t_BooleanQuery2ModifierNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanQuery2ModifierNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanQuery2ModifierNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilter::class$ = NULL;
          jmethodID *PositionFilter::mids$ = NULL;
          bool PositionFilter::live$ = false;

          jclass PositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean PositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args);
          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args);

          static PyMethodDef t_PositionFilter__methods_[] = {
            DECLARE_METHOD(t_PositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilter, t_PositionFilter, ::org::apache::lucene::analysis::TokenFilter, PositionFilter, t_PositionFilter_init_, 0, 0, 0, 0, 0);

          void t_PositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilter), module, "PositionFilter", 0);
          }

          void t_PositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "class_", make_descriptor(PositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "wrapfn_", make_descriptor(t_PositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilter::initializeClass, 1)))
              return NULL;
            return t_PositionFilter::wrap_Object(PositionFilter(((t_PositionFilter *) arg)->object.this$));
          }
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = PositionFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/LovinsStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *LovinsStemmer::class$ = NULL;
        jmethodID *LovinsStemmer::mids$ = NULL;
        bool LovinsStemmer::live$ = false;

        jclass LovinsStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/LovinsStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LovinsStemmer::LovinsStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean LovinsStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LovinsStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LovinsStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args);

        static PyMethodDef t_LovinsStemmer__methods_[] = {
          DECLARE_METHOD(t_LovinsStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LovinsStemmer, t_LovinsStemmer, ::org::tartarus::snowball::SnowballProgram, LovinsStemmer, t_LovinsStemmer_init_, 0, 0, 0, 0, 0);

        void t_LovinsStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(LovinsStemmer), module, "LovinsStemmer", 0);
        }

        void t_LovinsStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "class_", make_descriptor(LovinsStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "wrapfn_", make_descriptor(t_LovinsStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LovinsStemmer::initializeClass, 1)))
            return NULL;
          return t_LovinsStemmer::wrap_Object(LovinsStemmer(((t_LovinsStemmer *) arg)->object.this$));
        }
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LovinsStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds)
        {
          LovinsStemmer object((jobject) NULL);

          INT_CALL(object = LovinsStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45Codec::class$ = NULL;
          jmethodID *Lucene45Codec::mids$ = NULL;
          bool Lucene45Codec::live$ = false;

          jclass Lucene45Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45Codec::Lucene45Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene45Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene45Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene45Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene45Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene45Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene45Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args);

          static PyMethodDef t_Lucene45Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene45Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45Codec, t_Lucene45Codec, ::org::apache::lucene::codecs::Codec, Lucene45Codec, t_Lucene45Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene45Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45Codec), module, "Lucene45Codec", 0);
          }

          void t_Lucene45Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "class_", make_descriptor(Lucene45Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene45Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene45Codec::wrap_Object(Lucene45Codec(((t_Lucene45Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene45Codec object((jobject) NULL);

            INT_CALL(object = Lucene45Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ca/CatalanAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {

          ::java::lang::Class *CatalanAnalyzer::class$ = NULL;
          jmethodID *CatalanAnalyzer::mids$ = NULL;
          bool CatalanAnalyzer::live$ = false;
          ::java::lang::String *CatalanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CatalanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ca/CatalanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CatalanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {
          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data);
          static PyGetSetDef t_CatalanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CatalanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CatalanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CatalanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CatalanAnalyzer, t_CatalanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CatalanAnalyzer, t_CatalanAnalyzer_init_, 0, 0, t_CatalanAnalyzer__fields_, 0, 0);

          void t_CatalanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CatalanAnalyzer), module, "CatalanAnalyzer", 0);
          }

          void t_CatalanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "class_", make_descriptor(CatalanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CatalanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CatalanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CatalanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CatalanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CatalanAnalyzer::wrap_Object(CatalanAnalyzer(((t_CatalanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CatalanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ca::CatalanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *BooleanModifiersQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanModifiersQueryNodeProcessor::mids$ = NULL;
              bool BooleanModifiersQueryNodeProcessor::live$ = false;

              jclass BooleanModifiersQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifiersQueryNodeProcessor::BooleanModifiersQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanModifiersQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_BooleanModifiersQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifiersQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifiersQueryNodeProcessor), module, "BooleanModifiersQueryNodeProcessor", 0);
              }

              void t_BooleanModifiersQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanModifiersQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifiersQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifiersQueryNodeProcessor::wrap_Object(BooleanModifiersQueryNodeProcessor(((t_BooleanModifiersQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanModifiersQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanModifiersQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanModifiersQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/index/PythonIndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {

        ::java::lang::Class *PythonIndexDeletionPolicy::class$ = NULL;
        jmethodID *PythonIndexDeletionPolicy::mids$ = NULL;
        bool PythonIndexDeletionPolicy::live$ = false;

        jclass PythonIndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/index/PythonIndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexDeletionPolicy::PythonIndexDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexDeletionPolicy::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexDeletionPolicy::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexDeletionPolicy::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {
        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self);
        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args);
        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data);
        static PyGetSetDef t_PythonIndexDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexDeletionPolicy, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy_init_, 0, 0, t_PythonIndexDeletionPolicy__fields_, 0, 0);

        void t_PythonIndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexDeletionPolicy), module, "PythonIndexDeletionPolicy", 1);
        }

        void t_PythonIndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "class_", make_descriptor(PythonIndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexDeletionPolicy::initializeClass);
          JNINativeMethod methods[] = {
            { "onCommit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onCommit0 },
            { "onInit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onInit1 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexDeletionPolicy_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PythonIndexDeletionPolicy::wrap_Object(PythonIndexDeletionPolicy(((t_PythonIndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexDeletionPolicy object((jobject) NULL);

          INT_CALL(object = PythonIndexDeletionPolicy());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onCommit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onInit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizer::class$ = NULL;
          jmethodID *WikipediaTokenizer::mids$ = NULL;
          bool WikipediaTokenizer::live$ = false;
          jint WikipediaTokenizer::ACRONYM_ID = (jint) 0;
          jint WikipediaTokenizer::ALPHANUM_ID = (jint) 0;
          jint WikipediaTokenizer::APOSTROPHE_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD = NULL;
          jint WikipediaTokenizer::BOLD_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD_ITALICS = NULL;
          jint WikipediaTokenizer::BOLD_ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::BOTH = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CATEGORY = NULL;
          jint WikipediaTokenizer::CATEGORY_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CITATION = NULL;
          jint WikipediaTokenizer::CITATION_ID = (jint) 0;
          jint WikipediaTokenizer::CJ_ID = (jint) 0;
          jint WikipediaTokenizer::COMPANY_ID = (jint) 0;
          jint WikipediaTokenizer::EMAIL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK_URL = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_URL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::HEADING = NULL;
          jint WikipediaTokenizer::HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::HOST_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::INTERNAL_LINK = NULL;
          jint WikipediaTokenizer::INTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::ITALICS = NULL;
          jint WikipediaTokenizer::ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::NUM_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::SUB_HEADING = NULL;
          jint WikipediaTokenizer::SUB_HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::TOKENS_ONLY = (jint) 0;
          JArray< ::java::lang::String > *WikipediaTokenizer::TOKEN_TYPES = NULL;
          jint WikipediaTokenizer::UNTOKENIZED_ONLY = (jint) 0;
          jint WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG = (jint) 0;

          jclass WikipediaTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_ef926df6] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_init$_60b8ae4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM_ID = env->getStaticIntField(cls, "ACRONYM_ID");
              ALPHANUM_ID = env->getStaticIntField(cls, "ALPHANUM_ID");
              APOSTROPHE_ID = env->getStaticIntField(cls, "APOSTROPHE_ID");
              BOLD = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD", "Ljava/lang/String;"));
              BOLD_ID = env->getStaticIntField(cls, "BOLD_ID");
              BOLD_ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD_ITALICS", "Ljava/lang/String;"));
              BOLD_ITALICS_ID = env->getStaticIntField(cls, "BOLD_ITALICS_ID");
              BOTH = env->getStaticIntField(cls, "BOTH");
              CATEGORY = new ::java::lang::String(env->getStaticObjectField(cls, "CATEGORY", "Ljava/lang/String;"));
              CATEGORY_ID = env->getStaticIntField(cls, "CATEGORY_ID");
              CITATION = new ::java::lang::String(env->getStaticObjectField(cls, "CITATION", "Ljava/lang/String;"));
              CITATION_ID = env->getStaticIntField(cls, "CITATION_ID");
              CJ_ID = env->getStaticIntField(cls, "CJ_ID");
              COMPANY_ID = env->getStaticIntField(cls, "COMPANY_ID");
              EMAIL_ID = env->getStaticIntField(cls, "EMAIL_ID");
              EXTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK", "Ljava/lang/String;"));
              EXTERNAL_LINK_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_ID");
              EXTERNAL_LINK_URL = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK_URL", "Ljava/lang/String;"));
              EXTERNAL_LINK_URL_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_URL_ID");
              HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "HEADING", "Ljava/lang/String;"));
              HEADING_ID = env->getStaticIntField(cls, "HEADING_ID");
              HOST_ID = env->getStaticIntField(cls, "HOST_ID");
              INTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "INTERNAL_LINK", "Ljava/lang/String;"));
              INTERNAL_LINK_ID = env->getStaticIntField(cls, "INTERNAL_LINK_ID");
              ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "ITALICS", "Ljava/lang/String;"));
              ITALICS_ID = env->getStaticIntField(cls, "ITALICS_ID");
              NUM_ID = env->getStaticIntField(cls, "NUM_ID");
              SUB_HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "SUB_HEADING", "Ljava/lang/String;"));
              SUB_HEADING_ID = env->getStaticIntField(cls, "SUB_HEADING_ID");
              TOKENS_ONLY = env->getStaticIntField(cls, "TOKENS_ONLY");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              UNTOKENIZED_ONLY = env->getStaticIntField(cls, "UNTOKENIZED_ONLY");
              UNTOKENIZED_TOKEN_FLAG = env->getStaticIntField(cls, "UNTOKENIZED_TOKEN_FLAG");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0, jint a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_ef926df6, a0.this$, a1, a2.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_60b8ae4e, a0.this$, a1.this$, a2, a3.this$)) {}

          void WikipediaTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void WikipediaTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean WikipediaTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WikipediaTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizer__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizer, t_WikipediaTokenizer, ::org::apache::lucene::analysis::Tokenizer, WikipediaTokenizer, t_WikipediaTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizer), module, "WikipediaTokenizer", 0);
          }

          void t_WikipediaTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "class_", make_descriptor(WikipediaTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WikipediaTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ACRONYM_ID", make_descriptor(WikipediaTokenizer::ACRONYM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ALPHANUM_ID", make_descriptor(WikipediaTokenizer::ALPHANUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "APOSTROPHE_ID", make_descriptor(WikipediaTokenizer::APOSTROPHE_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD", make_descriptor(j2p(*WikipediaTokenizer::BOLD)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ID", make_descriptor(WikipediaTokenizer::BOLD_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS", make_descriptor(j2p(*WikipediaTokenizer::BOLD_ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS_ID", make_descriptor(WikipediaTokenizer::BOLD_ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOTH", make_descriptor(WikipediaTokenizer::BOTH));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY", make_descriptor(j2p(*WikipediaTokenizer::CATEGORY)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY_ID", make_descriptor(WikipediaTokenizer::CATEGORY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION", make_descriptor(j2p(*WikipediaTokenizer::CITATION)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION_ID", make_descriptor(WikipediaTokenizer::CITATION_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CJ_ID", make_descriptor(WikipediaTokenizer::CJ_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "COMPANY_ID", make_descriptor(WikipediaTokenizer::COMPANY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EMAIL_ID", make_descriptor(WikipediaTokenizer::EMAIL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK_URL)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_URL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING", make_descriptor(j2p(*WikipediaTokenizer::HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING_ID", make_descriptor(WikipediaTokenizer::HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HOST_ID", make_descriptor(WikipediaTokenizer::HOST_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::INTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::INTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS", make_descriptor(j2p(*WikipediaTokenizer::ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS_ID", make_descriptor(WikipediaTokenizer::ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "NUM_ID", make_descriptor(WikipediaTokenizer::NUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING", make_descriptor(j2p(*WikipediaTokenizer::SUB_HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING_ID", make_descriptor(WikipediaTokenizer::SUB_HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKENS_ONLY", make_descriptor(WikipediaTokenizer::TOKENS_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(WikipediaTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_ONLY", make_descriptor(WikipediaTokenizer::UNTOKENIZED_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_TOKEN_FLAG", make_descriptor(WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG));
          }

          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizer::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizer::wrap_Object(WikipediaTokenizer(((t_WikipediaTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = WikipediaTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkIK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/Long.h"
#include "java/util/EnumSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator::class$ = NULL;
        jmethodID *RamUsageEstimator::mids$ = NULL;
        bool RamUsageEstimator::live$ = false;
        ::java::lang::String *RamUsageEstimator::JVM_INFO_STRING = NULL;
        jint RamUsageEstimator::NUM_BYTES_ARRAY_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BOOLEAN = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BYTE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_CHAR = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_DOUBLE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_FLOAT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_INT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_LONG = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_REF = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_SHORT = (jint) 0;
        jlong RamUsageEstimator::ONE_GB = (jlong) 0;
        jlong RamUsageEstimator::ONE_KB = (jlong) 0;
        jlong RamUsageEstimator::ONE_MB = (jlong) 0;

        jclass RamUsageEstimator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_alignObjectSize_0ee6df33] = env->getStaticMethodID(cls, "alignObjectSize", "(J)J");
            mids$[mid_getSupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getSupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_getUnsupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getUnsupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_humanReadableUnits_3e02f30e] = env->getStaticMethodID(cls, "humanReadableUnits", "(J)Ljava/lang/String;");
            mids$[mid_humanReadableUnits_d1b61567] = env->getStaticMethodID(cls, "humanReadableUnits", "(JLjava/text/DecimalFormat;)Ljava/lang/String;");
            mids$[mid_isSupportedJVM_54c6a16a] = env->getStaticMethodID(cls, "isSupportedJVM", "()Z");
            mids$[mid_shallowSizeOf_c0f5dac6] = env->getStaticMethodID(cls, "shallowSizeOf", "([Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOf_290588f2] = env->getStaticMethodID(cls, "shallowSizeOf", "(Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOfInstance_a5deafe8] = env->getStaticMethodID(cls, "shallowSizeOfInstance", "(Ljava/lang/Class;)J");
            mids$[mid_sizeOf_f0c5b9df] = env->getStaticMethodID(cls, "sizeOf", "([Z)J");
            mids$[mid_sizeOf_da55802d] = env->getStaticMethodID(cls, "sizeOf", "(Ljava/lang/Long;)J");
            mids$[mid_sizeOf_c017fc5a] = env->getStaticMethodID(cls, "sizeOf", "([S)J");
            mids$[mid_sizeOf_9cc34323] = env->getStaticMethodID(cls, "sizeOf", "([F)J");
            mids$[mid_sizeOf_9ceb500f] = env->getStaticMethodID(cls, "sizeOf", "([J)J");
            mids$[mid_sizeOf_1efc2014] = env->getStaticMethodID(cls, "sizeOf", "([I)J");
            mids$[mid_sizeOf_f3b62cc5] = env->getStaticMethodID(cls, "sizeOf", "([D)J");
            mids$[mid_sizeOf_49b4f137] = env->getStaticMethodID(cls, "sizeOf", "([B)J");
            mids$[mid_sizeOf_700e23ca] = env->getStaticMethodID(cls, "sizeOf", "([C)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            JVM_INFO_STRING = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_INFO_STRING", "Ljava/lang/String;"));
            NUM_BYTES_ARRAY_HEADER = env->getStaticIntField(cls, "NUM_BYTES_ARRAY_HEADER");
            NUM_BYTES_BOOLEAN = env->getStaticIntField(cls, "NUM_BYTES_BOOLEAN");
            NUM_BYTES_BYTE = env->getStaticIntField(cls, "NUM_BYTES_BYTE");
            NUM_BYTES_CHAR = env->getStaticIntField(cls, "NUM_BYTES_CHAR");
            NUM_BYTES_DOUBLE = env->getStaticIntField(cls, "NUM_BYTES_DOUBLE");
            NUM_BYTES_FLOAT = env->getStaticIntField(cls, "NUM_BYTES_FLOAT");
            NUM_BYTES_INT = env->getStaticIntField(cls, "NUM_BYTES_INT");
            NUM_BYTES_LONG = env->getStaticIntField(cls, "NUM_BYTES_LONG");
            NUM_BYTES_OBJECT_ALIGNMENT = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_ALIGNMENT");
            NUM_BYTES_OBJECT_HEADER = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_HEADER");
            NUM_BYTES_OBJECT_REF = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_REF");
            NUM_BYTES_SHORT = env->getStaticIntField(cls, "NUM_BYTES_SHORT");
            ONE_GB = env->getStaticLongField(cls, "ONE_GB");
            ONE_KB = env->getStaticLongField(cls, "ONE_KB");
            ONE_MB = env->getStaticLongField(cls, "ONE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong RamUsageEstimator::alignObjectSize(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_alignObjectSize_0ee6df33], a0);
        }

        ::java::util::EnumSet RamUsageEstimator::getSupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getSupportedFeatures_eebf2c68]));
        }

        ::java::util::EnumSet RamUsageEstimator::getUnsupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getUnsupportedFeatures_eebf2c68]));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_3e02f30e], a0));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0, const ::java::text::DecimalFormat & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_d1b61567], a0, a1.this$));
        }

        jboolean RamUsageEstimator::isSupportedJVM()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSupportedJVM_54c6a16a]);
        }

        jlong RamUsageEstimator::shallowSizeOf(const JArray< ::java::lang::Object > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_c0f5dac6], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOf(const ::java::lang::Object & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_290588f2], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOfInstance(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOfInstance_a5deafe8], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f0c5b9df], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::java::lang::Long & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_da55802d], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_c017fc5a], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9cc34323], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9ceb500f], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_1efc2014], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f3b62cc5], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_49b4f137], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_700e23ca], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyGetSetDef t_RamUsageEstimator__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedFeatures),
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedJVM),
          DECLARE_GET_FIELD(t_RamUsageEstimator, unsupportedFeatures),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, alignObjectSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getSupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getUnsupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, humanReadableUnits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, isSupportedJVM, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOfInstance, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOf, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator, t_RamUsageEstimator, ::java::lang::Object, RamUsageEstimator, abstract_init, 0, 0, t_RamUsageEstimator__fields_, 0, 0);

        void t_RamUsageEstimator::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator), module, "RamUsageEstimator", 0);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JvmFeature", make_descriptor(&PY_TYPE(RamUsageEstimator$JvmFeature)));
        }

        void t_RamUsageEstimator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "class_", make_descriptor(RamUsageEstimator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JVM_INFO_STRING", make_descriptor(j2p(*RamUsageEstimator::JVM_INFO_STRING)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_ARRAY_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_ARRAY_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BOOLEAN", make_descriptor(RamUsageEstimator::NUM_BYTES_BOOLEAN));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BYTE", make_descriptor(RamUsageEstimator::NUM_BYTES_BYTE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_CHAR", make_descriptor(RamUsageEstimator::NUM_BYTES_CHAR));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_DOUBLE", make_descriptor(RamUsageEstimator::NUM_BYTES_DOUBLE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_FLOAT", make_descriptor(RamUsageEstimator::NUM_BYTES_FLOAT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_INT", make_descriptor(RamUsageEstimator::NUM_BYTES_INT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_LONG", make_descriptor(RamUsageEstimator::NUM_BYTES_LONG));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_ALIGNMENT", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_REF", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_REF));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_SHORT", make_descriptor(RamUsageEstimator::NUM_BYTES_SHORT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_GB", make_descriptor(RamUsageEstimator::ONE_GB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_KB", make_descriptor(RamUsageEstimator::ONE_KB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_MB", make_descriptor(RamUsageEstimator::ONE_MB));
        }

        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator::wrap_Object(RamUsageEstimator(((t_RamUsageEstimator *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::alignObjectSize(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "alignObjectSize", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              jlong a0;
              ::java::text::DecimalFormat a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Jk", ::java::text::DecimalFormat::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "humanReadableUnits", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type)
        {
          jboolean result;
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::isSupportedJVM());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "shallowSizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOfInstance(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "shallowSizeOfInstance", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jboolean > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Long a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }

        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSupportedJVM());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermSecondPassGroupingCollector::class$ = NULL;
            jmethodID *TermSecondPassGroupingCollector::mids$ = NULL;
            bool TermSecondPassGroupingCollector::live$ = false;

            jclass TermSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11c7601a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermSecondPassGroupingCollector::TermSecondPassGroupingCollector(const ::java::lang::String & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::Sort & a2, const ::org::apache::lucene::search::Sort & a3, jint a4, jboolean a5, jboolean a6, jboolean a7) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_11c7601a, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

            void TermSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector_init_, 0, 0, t_TermSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermSecondPassGroupingCollector::wrap_Object(const TermSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermSecondPassGroupingCollector), module, "TermSecondPassGroupingCollector", 0);
            }

            void t_TermSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(TermSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermSecondPassGroupingCollector::wrap_Object(TermSecondPassGroupingCollector(((t_TermSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jint a4;
              jboolean a5;
              jboolean a6;
              jboolean a7;
              TermSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "sKkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                INT_CALL(object = TermSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilter::class$ = NULL;
          jmethodID *SoraniStemFilter::mids$ = NULL;
          bool SoraniStemFilter::live$ = false;

          jclass SoraniStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilter::SoraniStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilter, t_SoraniStemFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniStemFilter, t_SoraniStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilter), module, "SoraniStemFilter", 0);
          }

          void t_SoraniStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "class_", make_descriptor(SoraniStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilter::wrap_Object(SoraniStemFilter(((t_SoraniStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfig::class$ = NULL;
              jmethodID *FieldConfig::mids$ = NULL;
              bool FieldConfig::live$ = false;

              jclass FieldConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                  mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldConfig::FieldConfig(const ::java::lang::String & a0) : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

              ::java::lang::String FieldConfig::getField() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
              }

              ::java::lang::String FieldConfig::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldConfig_getField(t_FieldConfig *self);
              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args);
              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data);
              static PyGetSetDef t_FieldConfig__fields_[] = {
                DECLARE_GET_FIELD(t_FieldConfig, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldConfig__methods_[] = {
                DECLARE_METHOD(t_FieldConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldConfig, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfig, t_FieldConfig, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, FieldConfig, t_FieldConfig_init_, 0, 0, t_FieldConfig__fields_, 0, 0);

              void t_FieldConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfig), module, "FieldConfig", 0);
              }

              void t_FieldConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "class_", make_descriptor(FieldConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "wrapfn_", make_descriptor(t_FieldConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfig::initializeClass, 1)))
                  return NULL;
                return t_FieldConfig::wrap_Object(FieldConfig(((t_FieldConfig *) arg)->object.this$));
              }
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::String a0((jobject) NULL);
                FieldConfig object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = FieldConfig(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldConfig_getField(t_FieldConfig *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return j2p(result);
              }

              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldConfig), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizer::class$ = NULL;
          jmethodID *PathHierarchyTokenizer::mids$ = NULL;
          bool PathHierarchyTokenizer::live$ = false;
          jchar PathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint PathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass PathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void PathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizer, t_PathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, PathHierarchyTokenizer, t_PathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizer), module, "PathHierarchyTokenizer", 0);
          }

          void t_PathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "class_", make_descriptor(PathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(PathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(PathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizer::wrap_Object(PathHierarchyTokenizer(((t_PathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilter::class$ = NULL;
          jmethodID *UpperCaseFilter::mids$ = NULL;
          bool UpperCaseFilter::live$ = false;

          jclass UpperCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilter::UpperCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean UpperCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args);

          static PyMethodDef t_UpperCaseFilter__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilter, t_UpperCaseFilter, ::org::apache::lucene::analysis::TokenFilter, UpperCaseFilter, t_UpperCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_UpperCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilter), module, "UpperCaseFilter", 0);
          }

          void t_UpperCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "class_", make_descriptor(UpperCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilter::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilter::wrap_Object(UpperCaseFilter(((t_UpperCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            UpperCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = UpperCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleAnalyzerWrapper::class$ = NULL;
          jmethodID *ShingleAnalyzerWrapper::mids$ = NULL;
          bool ShingleAnalyzerWrapper::live$ = false;

          jclass ShingleAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_e55e5adf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;II)V");
              mids$[mid_init$_ad527988] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;II)V");
              mids$[mid_init$_05cde3fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IILjava/lang/String;ZZLjava/lang/String;)V");
              mids$[mid_getFillerToken_14c7b5c5] = env->getMethodID(cls, "getFillerToken", "()Ljava/lang/String;");
              mids$[mid_getMaxShingleSize_54c6a179] = env->getMethodID(cls, "getMaxShingleSize", "()I");
              mids$[mid_getMinShingleSize_54c6a179] = env->getMethodID(cls, "getMinShingleSize", "()I");
              mids$[mid_getTokenSeparator_14c7b5c5] = env->getMethodID(cls, "getTokenSeparator", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_isOutputUnigrams_54c6a16a] = env->getMethodID(cls, "isOutputUnigrams", "()Z");
              mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a] = env->getMethodID(cls, "isOutputUnigramsIfNoShingles", "()Z");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::util::Version & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e55e5adf, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_ad527988, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2, const ::java::lang::String & a3, jboolean a4, jboolean a5, const ::java::lang::String & a6) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_05cde3fa, a0.this$, a1, a2, a3.this$, a4, a5, a6.this$)) {}

          ::java::lang::String ShingleAnalyzerWrapper::getFillerToken() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFillerToken_14c7b5c5]));
          }

          jint ShingleAnalyzerWrapper::getMaxShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxShingleSize_54c6a179]);
          }

          jint ShingleAnalyzerWrapper::getMinShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinShingleSize_54c6a179]);
          }

          ::java::lang::String ShingleAnalyzerWrapper::getTokenSeparator() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTokenSeparator_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer ShingleAnalyzerWrapper::getWrappedAnalyzer(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getWrappedAnalyzer_29a2299f], a0.this$));
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigrams() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigrams_54c6a16a]);
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigramsIfNoShingles() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data);
          static PyGetSetDef t_ShingleAnalyzerWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, fillerToken),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, maxShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, minShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigrams),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigramsIfNoShingles),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, tokenSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getFillerToken, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMaxShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMinShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getTokenSeparator, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getWrappedAnalyzer, METH_O),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigrams, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigramsIfNoShingles, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper_init_, 0, 0, t_ShingleAnalyzerWrapper__fields_, 0, 0);

          void t_ShingleAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleAnalyzerWrapper), module, "ShingleAnalyzerWrapper", 0);
          }

          void t_ShingleAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "class_", make_descriptor(ShingleAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_ShingleAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_ShingleAnalyzerWrapper::wrap_Object(ShingleAnalyzerWrapper(((t_ShingleAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "KII", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                jboolean a5;
                ::java::lang::String a6((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kIIsZZs", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFillerToken());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenSeparator());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWrappedAnalyzer(a0));
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWrappedAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFillerToken());
            return j2p(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenSeparator());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *QueryNodeOperation::class$ = NULL;
              jmethodID *QueryNodeOperation::mids$ = NULL;
              bool QueryNodeOperation::live$ = false;

              jclass QueryNodeOperation::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_logicalAnd_f8fdf1b4] = env->getStaticMethodID(cls, "logicalAnd", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeOperation::logicalAnd(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callStaticObjectMethod(cls, mids$[mid_logicalAnd_f8fdf1b4], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_QueryNodeOperation__methods_[] = {
                DECLARE_METHOD(t_QueryNodeOperation, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, logicalAnd, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeOperation, t_QueryNodeOperation, ::java::lang::Object, QueryNodeOperation, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryNodeOperation::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeOperation), module, "QueryNodeOperation", 0);
              }

              void t_QueryNodeOperation::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "class_", make_descriptor(QueryNodeOperation::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeOperation::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeOperation::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeOperation::wrap_Object(QueryNodeOperation(((t_QueryNodeOperation *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeOperation::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::QueryNodeOperation::logicalAnd(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "logicalAnd", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonMultiFieldQueryParser::class$ = NULL;
          jmethodID *PythonMultiFieldQueryParser::mids$ = NULL;
          bool PythonMultiFieldQueryParser::live$ = false;

          jclass PythonMultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonMultiFieldQueryParser::PythonMultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          void PythonMultiFieldQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonMultiFieldQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonMultiFieldQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self);
          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data);
          static PyGetSetDef t_PythonMultiFieldQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonMultiFieldQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonMultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser, PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser_init_, 0, 0, t_PythonMultiFieldQueryParser__fields_, 0, 0);

          void t_PythonMultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonMultiFieldQueryParser), module, "PythonMultiFieldQueryParser", 1);
          }

          void t_PythonMultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "class_", make_descriptor(PythonMultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonMultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonMultiFieldQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonMultiFieldQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonMultiFieldQueryParser::wrap_Object(PythonMultiFieldQueryParser(((t_PythonMultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            PythonMultiFieldQueryParser object((jobject) NULL);

            if (!parseArgs(args, "K[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = PythonMultiFieldQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil$Path::class$ = NULL;
            jmethodID *FSTUtil$Path::mids$ = NULL;
            jfieldID *FSTUtil$Path::fids$ = NULL;
            bool FSTUtil$Path::live$ = false;

            jclass FSTUtil$Path::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil$Path");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f5d3d1ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Lorg/apache/lucene/util/IntsRef;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_fstNode] = env->getFieldID(cls, "fstNode", "Lorg/apache/lucene/util/fst/FST$Arc;");
                fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
                fids$[fid_state] = env->getFieldID(cls, "state", "Lorg/apache/lucene/util/automaton/State;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTUtil$Path::FSTUtil$Path(const ::org::apache::lucene::util::automaton::State & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::org::apache::lucene::util::IntsRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d3d1ef, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::util::fst::FST$Arc FSTUtil$Path::_get_fstNode() const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_fstNode]));
            }

            ::org::apache::lucene::util::IntsRef FSTUtil$Path::_get_input() const
            {
              return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
            }

            ::org::apache::lucene::util::automaton::State FSTUtil$Path::_get_state() const
            {
              return ::org::apache::lucene::util::automaton::State(env->getObjectField(this$, fids$[fid_state]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args);
            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data);

            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data);
            static PyGetSetDef t_FSTUtil$Path__fields_[] = {
              DECLARE_GET_FIELD(t_FSTUtil$Path, fstNode),
              DECLARE_GET_FIELD(t_FSTUtil$Path, input),
              DECLARE_GET_FIELD(t_FSTUtil$Path, state),
              DECLARE_GET_FIELD(t_FSTUtil$Path, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTUtil$Path__methods_[] = {
              DECLARE_METHOD(t_FSTUtil$Path, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil$Path, t_FSTUtil$Path, ::java::lang::Object, FSTUtil$Path, t_FSTUtil$Path_init_, 0, 0, t_FSTUtil$Path__fields_, 0, 0);
            PyObject *t_FSTUtil$Path::wrap_Object(const FSTUtil$Path& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FSTUtil$Path::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FSTUtil$Path::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil$Path), module, "FSTUtil$Path", 0);
            }

            void t_FSTUtil$Path::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "class_", make_descriptor(FSTUtil$Path::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil$Path::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil$Path::initializeClass, 1)))
                return NULL;
              return t_FSTUtil$Path::wrap_Object(FSTUtil$Path(((t_FSTUtil$Path *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil$Path::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::Object a2((jobject) NULL);
              ::org::apache::lucene::util::IntsRef a3((jobject) NULL);
              FSTUtil$Path object((jobject) NULL);

              if (!parseArgs(args, "kKok", ::org::apache::lucene::util::automaton::State::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3))
              {
                INT_CALL(object = FSTUtil$Path(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
              OBJ_CALL(value = self->object._get_fstNode());
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::IntsRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_input());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::automaton::State value((jobject) NULL);
              OBJ_CALL(value = self->object._get_state());
              return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FrenchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FrenchStemmer::class$ = NULL;
        jmethodID *FrenchStemmer::mids$ = NULL;
        bool FrenchStemmer::live$ = false;

        jclass FrenchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FrenchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FrenchStemmer::FrenchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FrenchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FrenchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FrenchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args);

        static PyMethodDef t_FrenchStemmer__methods_[] = {
          DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::org::tartarus::snowball::SnowballProgram, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

        void t_FrenchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
        }

        void t_FrenchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
            return NULL;
          return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
        }
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
        {
          FrenchStemmer object((jobject) NULL);

          INT_CALL(object = FrenchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexNotFoundException::class$ = NULL;
        jmethodID *IndexNotFoundException::mids$ = NULL;
        bool IndexNotFoundException::live$ = false;

        jclass IndexNotFoundException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexNotFoundException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexNotFoundException::IndexNotFoundException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexNotFoundException__methods_[] = {
          DECLARE_METHOD(t_IndexNotFoundException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexNotFoundException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexNotFoundException, t_IndexNotFoundException, ::java::io::FileNotFoundException, IndexNotFoundException, t_IndexNotFoundException_init_, 0, 0, 0, 0, 0);

        void t_IndexNotFoundException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexNotFoundException), module, "IndexNotFoundException", 0);
        }

        void t_IndexNotFoundException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "class_", make_descriptor(IndexNotFoundException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_IndexNotFoundException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexNotFoundException::initializeClass, 1)))
            return NULL;
          return t_IndexNotFoundException::wrap_Object(IndexNotFoundException(((t_IndexNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexNotFoundException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexNotFoundException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermScorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermScorer::class$ = NULL;
          jmethodID *QueryTermScorer::mids$ = NULL;
          bool QueryTermScorer::live$ = false;

          jclass QueryTermScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0bdf9712] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_allFragmentsProcessed_54c6a166] = env->getMethodID(cls, "allFragmentsProcessed", "()V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermScorer::QueryTermScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0bdf9712, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          void QueryTermScorer::allFragmentsProcessed() const
          {
            env->callVoidMethod(this$, mids$[mid_allFragmentsProcessed_54c6a166]);
          }

          jfloat QueryTermScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryTermScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryTermScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream QueryTermScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void QueryTermScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data);
          static PyGetSetDef t_QueryTermScorer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryTermScorer, fragmentScore),
            DECLARE_GET_FIELD(t_QueryTermScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryTermScorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryTermScorer__methods_[] = {
            DECLARE_METHOD(t_QueryTermScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, allFragmentsProcessed, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, init, METH_O),
            DECLARE_METHOD(t_QueryTermScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermScorer, t_QueryTermScorer, ::java::lang::Object, QueryTermScorer, t_QueryTermScorer_init_, 0, 0, t_QueryTermScorer__fields_, 0, 0);

          void t_QueryTermScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermScorer), module, "QueryTermScorer", 0);
          }

          void t_QueryTermScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "class_", make_descriptor(QueryTermScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryTermScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermScorer::initializeClass, 1)))
              return NULL;
            return t_QueryTermScorer::wrap_Object(QueryTermScorer(((t_QueryTermScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self)
          {
            OBJ_CALL(self->object.allFragmentsProcessed());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemmer::class$ = NULL;
          jmethodID *BulgarianStemmer::mids$ = NULL;
          bool BulgarianStemmer::live$ = false;

          jclass BulgarianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemmer::BulgarianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint BulgarianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args);

          static PyMethodDef t_BulgarianStemmer__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemmer, t_BulgarianStemmer, ::java::lang::Object, BulgarianStemmer, t_BulgarianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemmer), module, "BulgarianStemmer", 0);
          }

          void t_BulgarianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "class_", make_descriptor(BulgarianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemmer::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemmer::wrap_Object(BulgarianStemmer(((t_BulgarianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BulgarianStemmer object((jobject) NULL);

            INT_CALL(object = BulgarianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSetIterator::class$ = NULL;
        jmethodID *FilteredDocIdSetIterator::mids$ = NULL;
        bool FilteredDocIdSetIterator::live$ = false;

        jclass FilteredDocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2b5607d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSetIterator::FilteredDocIdSetIterator(const ::org::apache::lucene::search::DocIdSetIterator & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2b5607d, a0.this$)) {}

        jint FilteredDocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FilteredDocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilteredDocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilteredDocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args);

        static PyMethodDef t_FilteredDocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSetIterator, t_FilteredDocIdSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FilteredDocIdSetIterator, t_FilteredDocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FilteredDocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSetIterator), module, "FilteredDocIdSetIterator", 0);
        }

        void t_FilteredDocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "class_", make_descriptor(FilteredDocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSetIterator::wrap_Object(FilteredDocIdSetIterator(((t_FilteredDocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          FilteredDocIdSetIterator object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSetIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *CharStream::class$ = NULL;
              jmethodID *CharStream::mids$ = NULL;
              bool CharStream::live$ = false;

              jclass CharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/CharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              jchar CharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void CharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String CharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > CharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void CharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint CharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint CharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint CharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint CharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint CharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint CharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar CharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_BeginToken(t_CharStream *self);
              static PyObject *t_CharStream_Done(t_CharStream *self);
              static PyObject *t_CharStream_GetImage(t_CharStream *self);
              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
              static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
              static PyObject *t_CharStream_getColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndLine(t_CharStream *self);
              static PyObject *t_CharStream_getLine(t_CharStream *self);
              static PyObject *t_CharStream_readChar(t_CharStream *self);
              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
              static PyGetSetDef t_CharStream__fields_[] = {
                DECLARE_GET_FIELD(t_CharStream, beginColumn),
                DECLARE_GET_FIELD(t_CharStream, beginLine),
                DECLARE_GET_FIELD(t_CharStream, column),
                DECLARE_GET_FIELD(t_CharStream, endColumn),
                DECLARE_GET_FIELD(t_CharStream, endLine),
                DECLARE_GET_FIELD(t_CharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_CharStream__methods_[] = {
                DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_CharStream, backup, METH_O),
                DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

              void t_CharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(CharStream), module, "CharStream", 0);
              }

              void t_CharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                  return NULL;
                return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
              }
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, CharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_CharStream_BeginToken(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_Done(t_CharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_CharStream_GetImage(t_CharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_readChar(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragListBuilder::class$ = NULL;
          jmethodID *FragListBuilder::mids$ = NULL;
          bool FragListBuilder::live$ = false;

          jclass FragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldFragList FragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args);

          static PyMethodDef t_FragListBuilder__methods_[] = {
            DECLARE_METHOD(t_FragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragListBuilder, t_FragListBuilder, ::java::lang::Object, FragListBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragListBuilder), module, "FragListBuilder", 0);
          }

          void t_FragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "class_", make_descriptor(FragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragListBuilder::initializeClass, 1)))
              return NULL;
            return t_FragListBuilder::wrap_Object(FragListBuilder(((t_FragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TextableQueryNode::class$ = NULL;
              jmethodID *TextableQueryNode::mids$ = NULL;
              bool TextableQueryNode::live$ = false;

              jclass TextableQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence TextableQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void TextableQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self);
              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg);
              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data);
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TextableQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TextableQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TextableQueryNode__methods_[] = {
                DECLARE_METHOD(t_TextableQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_TextableQueryNode, setText, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TextableQueryNode, t_TextableQueryNode, ::java::lang::Object, TextableQueryNode, abstract_init, 0, 0, t_TextableQueryNode__fields_, 0, 0);

              void t_TextableQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TextableQueryNode), module, "TextableQueryNode", 0);
              }

              void t_TextableQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "class_", make_descriptor(TextableQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TextableQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TextableQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TextableQueryNode::wrap_Object(TextableQueryNode(((t_TextableQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TextableQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *StatePair::class$ = NULL;
          jmethodID *StatePair::mids$ = NULL;
          bool StatePair::live$ = false;

          jclass StatePair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/StatePair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e6e20846] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFirstState_0b46b0b2] = env->getMethodID(cls, "getFirstState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getSecondState_0b46b0b2] = env->getMethodID(cls, "getSecondState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StatePair::StatePair(const ::org::apache::lucene::util::automaton::State & a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e6e20846, a0.this$, a1.this$)) {}

          jboolean StatePair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::automaton::State StatePair::getFirstState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getFirstState_0b46b0b2]));
          }

          ::org::apache::lucene::util::automaton::State StatePair::getSecondState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getSecondState_0b46b0b2]));
          }

          jint StatePair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_getFirstState(t_StatePair *self);
          static PyObject *t_StatePair_getSecondState(t_StatePair *self);
          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_get__firstState(t_StatePair *self, void *data);
          static PyObject *t_StatePair_get__secondState(t_StatePair *self, void *data);
          static PyGetSetDef t_StatePair__fields_[] = {
            DECLARE_GET_FIELD(t_StatePair, firstState),
            DECLARE_GET_FIELD(t_StatePair, secondState),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StatePair__methods_[] = {
            DECLARE_METHOD(t_StatePair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, equals, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, getFirstState, METH_NOARGS),
            DECLARE_METHOD(t_StatePair, getSecondState, METH_NOARGS),
            DECLARE_METHOD(t_StatePair, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StatePair, t_StatePair, ::java::lang::Object, StatePair, t_StatePair_init_, 0, 0, t_StatePair__fields_, 0, 0);

          void t_StatePair::install(PyObject *module)
          {
            installType(&PY_TYPE(StatePair), module, "StatePair", 0);
          }

          void t_StatePair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "class_", make_descriptor(StatePair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "wrapfn_", make_descriptor(t_StatePair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StatePair::initializeClass, 1)))
              return NULL;
            return t_StatePair::wrap_Object(StatePair(((t_StatePair *) arg)->object.this$));
          }
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StatePair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
            StatePair object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::State::initializeClass, ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StatePair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_StatePair_getFirstState(t_StatePair *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getFirstState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_StatePair_getSecondState(t_StatePair *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getSecondState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_StatePair_get__firstState(t_StatePair *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getFirstState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static PyObject *t_StatePair_get__secondState(t_StatePair *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getSecondState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemmer::class$ = NULL;
          jmethodID *CzechStemmer::mids$ = NULL;
          bool CzechStemmer::live$ = false;

          jclass CzechStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemmer::CzechStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CzechStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args);

          static PyMethodDef t_CzechStemmer__methods_[] = {
            DECLARE_METHOD(t_CzechStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemmer, t_CzechStemmer, ::java::lang::Object, CzechStemmer, t_CzechStemmer_init_, 0, 0, 0, 0, 0);

          void t_CzechStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemmer), module, "CzechStemmer", 0);
          }

          void t_CzechStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "class_", make_descriptor(CzechStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "wrapfn_", make_descriptor(t_CzechStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemmer::initializeClass, 1)))
              return NULL;
            return t_CzechStemmer::wrap_Object(CzechStemmer(((t_CzechStemmer *) arg)->object.this$));
          }
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds)
          {
            CzechStemmer object((jobject) NULL);

            INT_CALL(object = CzechStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoringRewrite::class$ = NULL;
        jmethodID *ScoringRewrite::mids$ = NULL;
        bool ScoringRewrite::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ScoringRewrite *ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass ScoringRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoringRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_checkMaxClauseCount_39c7bd3c] = env->getMethodID(cls, "checkMaxClauseCount", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ScoringRewrite(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/ScoringRewrite;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoringRewrite::ScoringRewrite() : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query ScoringRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args);
        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args);
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data);
        static PyGetSetDef t_ScoringRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_ScoringRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoringRewrite__methods_[] = {
          DECLARE_METHOD(t_ScoringRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ScoringRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoringRewrite, t_ScoringRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ScoringRewrite, t_ScoringRewrite_init_, 0, 0, t_ScoringRewrite__fields_, 0, 0);
        PyObject *t_ScoringRewrite::wrap_Object(const ScoringRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ScoringRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ScoringRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoringRewrite), module, "ScoringRewrite", 0);
        }

        void t_ScoringRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "class_", make_descriptor(ScoringRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "wrapfn_", make_descriptor(t_ScoringRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ScoringRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(t_ScoringRewrite::wrap_Object(*ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoringRewrite::initializeClass, 1)))
            return NULL;
          return t_ScoringRewrite::wrap_Object(ScoringRewrite(((t_ScoringRewrite *) arg)->object.this$));
        }
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoringRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds)
        {
          ScoringRewrite object((jobject) NULL);

          INT_CALL(object = ScoringRewrite());
          self->object = object;

          return 0;
        }

        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ScoringRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax$Type::class$ = NULL;
              jmethodID *EscapeQuerySyntax$Type::mids$ = NULL;
              bool EscapeQuerySyntax$Type::live$ = false;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::NORMAL = NULL;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::STRING = NULL;

              jclass EscapeQuerySyntax$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_870295fe] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");
                  mids$[mid_values_4eb00ec4] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NORMAL = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  STRING = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntax$Type EscapeQuerySyntax$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return EscapeQuerySyntax$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_870295fe], a0.this$));
              }

              JArray< EscapeQuerySyntax$Type > EscapeQuerySyntax$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< EscapeQuerySyntax$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_4eb00ec4]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type);
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data);
              static PyGetSetDef t_EscapeQuerySyntax$Type__fields_[] = {
                DECLARE_GET_FIELD(t_EscapeQuerySyntax$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_EscapeQuerySyntax$Type__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax$Type, t_EscapeQuerySyntax$Type, ::java::lang::Enum, EscapeQuerySyntax$Type, abstract_init, 0, 0, t_EscapeQuerySyntax$Type__fields_, 0, 0);
              PyObject *t_EscapeQuerySyntax$Type::wrap_Object(const EscapeQuerySyntax$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_EscapeQuerySyntax$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_EscapeQuerySyntax$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax$Type), module, "EscapeQuerySyntax$Type", 0);
              }

              void t_EscapeQuerySyntax$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "class_", make_descriptor(EscapeQuerySyntax$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(EscapeQuerySyntax$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "NORMAL", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::NORMAL)));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "STRING", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::STRING)));
              }

              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax$Type::wrap_Object(EscapeQuerySyntax$Type(((t_EscapeQuerySyntax$Type *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                EscapeQuerySyntax$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::valueOf(a0));
                  return t_EscapeQuerySyntax$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type)
              {
                JArray< EscapeQuerySyntax$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::values());
                return JArray<jobject>(result.this$).wrap(t_EscapeQuerySyntax$Type::wrap_jobject);
              }
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode::class$ = NULL;
              jmethodID *PathQueryNode::mids$ = NULL;
              bool PathQueryNode::live$ = false;

              jclass PathQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getFirstPathElement_e0adba2f] = env->getMethodID(cls, "getFirstPathElement", "()Ljava/lang/CharSequence;");
                  mids$[mid_getPathElement_989d102c] = env->getMethodID(cls, "getPathElement", "(I)Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getPathElements_87851566] = env->getMethodID(cls, "getPathElements", "()Ljava/util/List;");
                  mids$[mid_getPathElements_cdc2a528] = env->getMethodID(cls, "getPathElements", "(I)Ljava/util/List;");
                  mids$[mid_setPathElements_1fde8fc3] = env->getMethodID(cls, "setPathElements", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode::PathQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PathQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence PathQueryNode::getFirstPathElement() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFirstPathElement_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText PathQueryNode::getPathElement(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_getPathElement_989d102c], a0));
              }

              ::java::util::List PathQueryNode::getPathElements() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_87851566]));
              }

              ::java::util::List PathQueryNode::getPathElements(jint a0) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_cdc2a528], a0));
              }

              void PathQueryNode::setPathElements(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPathElements_1fde8fc3], a0.this$);
              }

              ::java::lang::CharSequence PathQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PathQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self);
              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data);
              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data);
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_PathQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode, firstPathElement),
                DECLARE_GETSET_FIELD(t_PathQueryNode, pathElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, getFirstPathElement, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode, getPathElement, METH_O),
                DECLARE_METHOD(t_PathQueryNode, getPathElements, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, setPathElements, METH_O),
                DECLARE_METHOD(t_PathQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode, t_PathQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PathQueryNode, t_PathQueryNode_init_, 0, 0, t_PathQueryNode__fields_, 0, 0);

              void t_PathQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode), module, "PathQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "QueryText", make_descriptor(&PY_TYPE(PathQueryNode$QueryText)));
              }

              void t_PathQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "class_", make_descriptor(PathQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode::wrap_Object(PathQueryNode(((t_PathQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                PathQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = PathQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getPathElement(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_PathQueryNode$QueryText::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElement", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::List result((jobject) NULL);
                    OBJ_CALL(result = self->object.getPathElements());
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::List result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.getPathElements(a0));
                      return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElements", args);
                return NULL;
              }

              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.setPathElements(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPathElements", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getPathElements());
                return ::java::util::t_List::wrap_Object(value);
              }
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::util::List value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
                  {
                    INT_CALL(self->object.setPathElements(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "pathElements", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonLongParser.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonLongParser::class$ = NULL;
        jmethodID *PythonLongParser::mids$ = NULL;
        bool PythonLongParser::live$ = false;

        jclass PythonLongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonLongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLongParser::PythonLongParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLongParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLongParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLongParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self);
        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args);
        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data);
        static PyGetSetDef t_PythonLongParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLongParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLongParser__methods_[] = {
          DECLARE_METHOD(t_PythonLongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLongParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLongParser, t_PythonLongParser, ::java::lang::Object, PythonLongParser, t_PythonLongParser_init_, 0, 0, t_PythonLongParser__fields_, 0, 0);

        void t_PythonLongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLongParser), module, "PythonLongParser", 1);
        }

        void t_PythonLongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "class_", make_descriptor(PythonLongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "wrapfn_", make_descriptor(t_PythonLongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLongParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J", (void *) t_PythonLongParser_parseLong0 },
            { "pythonDecRef", "()V", (void *) t_PythonLongParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonLongParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLongParser::initializeClass, 1)))
            return NULL;
          return t_PythonLongParser::wrap_Object(PythonLongParser(((t_PythonLongParser *) arg)->object.this$));
        }
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds)
        {
          PythonLongParser object((jobject) NULL);

          INT_CALL(object = PythonLongParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseLong", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("parseLong", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenFilter::class$ = NULL;
          jmethodID *NGramTokenFilter::mids$ = NULL;
          bool NGramTokenFilter::live$ = false;
          jint NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean NGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args);
          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_NGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenFilter, t_NGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NGramTokenFilter, t_NGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenFilter), module, "NGramTokenFilter", 0);
          }

          void t_NGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "class_", make_descriptor(NGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NGramTokenFilter::wrap_Object(NGramTokenFilter(((t_NGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentCommitInfo::class$ = NULL;
        jmethodID *SegmentCommitInfo::mids$ = NULL;
        jfieldID *SegmentCommitInfo::fids$ = NULL;
        bool SegmentCommitInfo::live$ = false;

        jclass SegmentCommitInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentCommitInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f66c7cbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentInfo;IJJJ)V");
            mids$[mid_clone_5df298a9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_files_2d2d7de4] = env->getMethodID(cls, "files", "()Ljava/util/Collection;");
            mids$[mid_getDelCount_54c6a179] = env->getMethodID(cls, "getDelCount", "()I");
            mids$[mid_getDelGen_54c6a17a] = env->getMethodID(cls, "getDelGen", "()J");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesUpdatesFiles_db60befd] = env->getMethodID(cls, "getDocValuesUpdatesFiles", "()Ljava/util/Map;");
            mids$[mid_getFieldInfosFiles_03e99967] = env->getMethodID(cls, "getFieldInfosFiles", "()Ljava/util/Set;");
            mids$[mid_getFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getFieldInfosGen", "()J");
            mids$[mid_getNextDelGen_54c6a17a] = env->getMethodID(cls, "getNextDelGen", "()J");
            mids$[mid_getNextDocValuesGen_54c6a17a] = env->getMethodID(cls, "getNextDocValuesGen", "()J");
            mids$[mid_getNextFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getNextFieldInfosGen", "()J");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasFieldUpdates_54c6a16a] = env->getMethodID(cls, "hasFieldUpdates", "()Z");
            mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setDocValuesUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_setFieldInfosFiles_fb4f2b26] = env->getMethodID(cls, "setFieldInfosFiles", "(Ljava/util/Set;)V");
            mids$[mid_setGenUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setGenUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_sizeInBytes_54c6a17a] = env->getMethodID(cls, "sizeInBytes", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_info] = env->getFieldID(cls, "info", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentCommitInfo::SegmentCommitInfo(const ::org::apache::lucene::index::SegmentInfo & a0, jint a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f66c7cbe, a0.this$, a1, a2, a3, a4)) {}

        SegmentCommitInfo SegmentCommitInfo::clone() const
        {
          return SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_clone_5df298a9]));
        }

        ::java::util::Collection SegmentCommitInfo::files() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_2d2d7de4]));
        }

        jint SegmentCommitInfo::getDelCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDelCount_54c6a179]);
        }

        jlong SegmentCommitInfo::getDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::java::util::Map SegmentCommitInfo::getDocValuesUpdatesFiles() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDocValuesUpdatesFiles_db60befd]));
        }

        ::java::util::Set SegmentCommitInfo::getFieldInfosFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getFieldInfosFiles_03e99967]));
        }

        jlong SegmentCommitInfo::getFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getFieldInfosGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDocValuesGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextFieldInfosGen_54c6a17a]);
        }

        jboolean SegmentCommitInfo::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean SegmentCommitInfo::hasFieldUpdates() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFieldUpdates_54c6a16a]);
        }

        void SegmentCommitInfo::setDocValuesUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c], a0.this$);
        }

        void SegmentCommitInfo::setFieldInfosFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFieldInfosFiles_fb4f2b26], a0.this$);
        }

        void SegmentCommitInfo::setGenUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGenUpdatesFiles_4c9e2b1c], a0.this$);
        }

        jlong SegmentCommitInfo::sizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_sizeInBytes_54c6a17a]);
        }

        ::java::lang::String SegmentCommitInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentCommitInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentCommitInfo::_get_info() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_info]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args);
        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data);

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static PyGetSetDef t_SegmentCommitInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentCommitInfo, info),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delCount),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, docValuesGen),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, docValuesUpdatesFiles),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, fieldInfosFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, fieldInfosGen),
          DECLARE_SET_FIELD(t_SegmentCommitInfo, genUpdatesFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDelGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDocValuesGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextFieldInfosGen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentCommitInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentCommitInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesUpdatesFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasFieldUpdates, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, setDocValuesUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setFieldInfosFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setGenUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, sizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentCommitInfo, t_SegmentCommitInfo, ::java::lang::Object, SegmentCommitInfo, t_SegmentCommitInfo_init_, 0, 0, t_SegmentCommitInfo__fields_, 0, 0);

        void t_SegmentCommitInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentCommitInfo), module, "SegmentCommitInfo", 0);
        }

        void t_SegmentCommitInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "class_", make_descriptor(SegmentCommitInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentCommitInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentCommitInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentCommitInfo::wrap_Object(SegmentCommitInfo(((t_SegmentCommitInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentCommitInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;
          jlong a4;
          SegmentCommitInfo object((jobject) NULL);

          if (!parseArgs(args, "kIJJJ", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = SegmentCommitInfo(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self)
        {
          SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDelCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFieldUpdates());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFieldInfosFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFieldInfosFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setGenUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGenUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentCommitInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_info());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDelCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setDocValuesUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Set value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
            {
              INT_CALL(self->object.setFieldInfosFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfosFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setGenUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "genUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40NormsFormat::class$ = NULL;
          jmethodID *Lucene40NormsFormat::mids$ = NULL;
          bool Lucene40NormsFormat::live$ = false;

          jclass Lucene40NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40NormsFormat::Lucene40NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40NormsFormat, t_Lucene40NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene40NormsFormat, t_Lucene40NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40NormsFormat), module, "Lucene40NormsFormat", 0);
          }

          void t_Lucene40NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "class_", make_descriptor(Lucene40NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40NormsFormat::wrap_Object(Lucene40NormsFormat(((t_Lucene40NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchAnalyzer::class$ = NULL;
          jmethodID *DutchAnalyzer::mids$ = NULL;
          bool DutchAnalyzer::live$ = false;
          ::java::lang::String *DutchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DutchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0a2f8356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArrayMap;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, const ::org::apache::lucene::analysis::util::CharArrayMap & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0a2f8356, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DutchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data);
          static PyGetSetDef t_DutchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DutchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DutchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchAnalyzer, t_DutchAnalyzer, ::org::apache::lucene::analysis::Analyzer, DutchAnalyzer, t_DutchAnalyzer_init_, 0, 0, t_DutchAnalyzer__fields_, 0, 0);

          void t_DutchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchAnalyzer), module, "DutchAnalyzer", 0);
          }

          void t_DutchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "class_", make_descriptor(DutchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DutchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DutchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DutchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DutchAnalyzer::wrap_Object(DutchAnalyzer(((t_DutchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArrayMap a3((jobject) NULL);
                PyTypeObject **p3;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::nl::DutchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtendableQueryParser.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtendableQueryParser::class$ = NULL;
          jmethodID *ExtendableQueryParser::mids$ = NULL;
          bool ExtendableQueryParser::live$ = false;

          jclass ExtendableQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtendableQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_5a825d0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/ext/Extensions;)V");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::queryparser::ext::Extensions & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_5a825d0f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jchar ExtendableQueryParser::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self);
          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data);
          static PyGetSetDef t_ExtendableQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_ExtendableQueryParser, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtendableQueryParser__methods_[] = {
            DECLARE_METHOD(t_ExtendableQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, getExtensionFieldDelimiter, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtendableQueryParser, t_ExtendableQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ExtendableQueryParser, t_ExtendableQueryParser_init_, 0, 0, t_ExtendableQueryParser__fields_, 0, 0);

          void t_ExtendableQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtendableQueryParser), module, "ExtendableQueryParser", 0);
          }

          void t_ExtendableQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "class_", make_descriptor(ExtendableQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ExtendableQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtendableQueryParser::initializeClass, 1)))
              return NULL;
            return t_ExtendableQueryParser::wrap_Object(ExtendableQueryParser(((t_ExtendableQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtendableQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::queryparser::ext::Extensions a3((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Kskk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::ext::Extensions::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizerFactory::class$ = NULL;
          jmethodID *ArabicLetterTokenizerFactory::mids$ = NULL;
          bool ArabicLetterTokenizerFactory::live$ = false;

          jclass ArabicLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee4a774c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ar/ArabicLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizerFactory::ArabicLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer ArabicLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee4a774c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ArabicLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizerFactory), module, "ArabicLetterTokenizerFactory", 0);
          }

          void t_ArabicLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "class_", make_descriptor(ArabicLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizerFactory::wrap_Object(ArabicLetterTokenizerFactory(((t_ArabicLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ar::t_ArabicLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexOutput::class$ = NULL;
        jmethodID *IndexOutput::mids$ = NULL;
        bool IndexOutput::live$ = false;

        jclass IndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexOutput::IndexOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong IndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong IndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexOutput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexOutput_close(t_IndexOutput *self);
        static PyObject *t_IndexOutput_flush(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self);
        static PyObject *t_IndexOutput_length(t_IndexOutput *self);
        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data);
        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data);
        static PyGetSetDef t_IndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOutput, checksum),
          DECLARE_GET_FIELD(t_IndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOutput__methods_[] = {
          DECLARE_METHOD(t_IndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, flush, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexOutput, t_IndexOutput, ::org::apache::lucene::store::DataOutput, IndexOutput, t_IndexOutput_init_, 0, 0, t_IndexOutput__fields_, 0, 0);

        void t_IndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOutput), module, "IndexOutput", 0);
        }

        void t_IndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "class_", make_descriptor(IndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "wrapfn_", make_descriptor(t_IndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOutput::initializeClass, 1)))
            return NULL;
          return t_IndexOutput::wrap_Object(IndexOutput(((t_IndexOutput *) arg)->object.this$));
        }
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds)
        {
          IndexOutput object((jobject) NULL);

          INT_CALL(object = IndexOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_IndexOutput_close(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_flush(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.flush());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_length(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *StandardTokenizerImpl34::class$ = NULL;
            jmethodID *StandardTokenizerImpl34::mids$ = NULL;
            bool StandardTokenizerImpl34::live$ = false;
            jint StandardTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::YYEOF = (jint) 0;
            jint StandardTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl34::StandardTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl34__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl34, t_StandardTokenizerImpl34, ::java::lang::Object, StandardTokenizerImpl34, t_StandardTokenizerImpl34_init_, 0, 0, t_StandardTokenizerImpl34__fields_, 0, 0);

            void t_StandardTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl34), module, "StandardTokenizerImpl34", 0);
            }

            void t_StandardTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "class_", make_descriptor(StandardTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl34::wrap_Object(StandardTokenizerImpl34(((t_StandardTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemmer::class$ = NULL;
          jmethodID *PortugueseStemmer::mids$ = NULL;
          bool PortugueseStemmer::live$ = false;

          jclass PortugueseStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemmer::PortugueseStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
          }

          void t_PortugueseStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *GroupQueryNodeBuilder::class$ = NULL;
              jmethodID *GroupQueryNodeBuilder::mids$ = NULL;
              bool GroupQueryNodeBuilder::live$ = false;

              jclass GroupQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeBuilder::GroupQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query GroupQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_GroupQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeBuilder, t_GroupQueryNodeBuilder, ::java::lang::Object, GroupQueryNodeBuilder, t_GroupQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_GroupQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeBuilder), module, "GroupQueryNodeBuilder", 0);
              }

              void t_GroupQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "class_", make_descriptor(GroupQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeBuilder::wrap_Object(GroupQueryNodeBuilder(((t_GroupQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizer::class$ = NULL;
          jmethodID *ClassicTokenizer::mids$ = NULL;
          bool ClassicTokenizer::live$ = false;
          jint ClassicTokenizer::ACRONYM = (jint) 0;
          jint ClassicTokenizer::ACRONYM_DEP = (jint) 0;
          jint ClassicTokenizer::ALPHANUM = (jint) 0;
          jint ClassicTokenizer::APOSTROPHE = (jint) 0;
          jint ClassicTokenizer::CJ = (jint) 0;
          jint ClassicTokenizer::COMPANY = (jint) 0;
          jint ClassicTokenizer::EMAIL = (jint) 0;
          jint ClassicTokenizer::HOST = (jint) 0;
          jint ClassicTokenizer::NUM = (jint) 0;
          JArray< ::java::lang::String > *ClassicTokenizer::TOKEN_TYPES = NULL;

          jclass ClassicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HOST = env->getStaticIntField(cls, "HOST");
              NUM = env->getStaticIntField(cls, "NUM");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void ClassicTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void ClassicTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint ClassicTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean ClassicTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ClassicTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ClassicTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self);
          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg);
          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data);
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicTokenizer__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizer, t_ClassicTokenizer, ::org::apache::lucene::analysis::Tokenizer, ClassicTokenizer, t_ClassicTokenizer_init_, 0, 0, t_ClassicTokenizer__fields_, 0, 0);

          void t_ClassicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizer), module, "ClassicTokenizer", 0);
          }

          void t_ClassicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "class_", make_descriptor(ClassicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM", make_descriptor(ClassicTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(ClassicTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ALPHANUM", make_descriptor(ClassicTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "APOSTROPHE", make_descriptor(ClassicTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "CJ", make_descriptor(ClassicTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "COMPANY", make_descriptor(ClassicTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "EMAIL", make_descriptor(ClassicTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "HOST", make_descriptor(ClassicTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "NUM", make_descriptor(ClassicTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(ClassicTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizer::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizer::wrap_Object(ClassicTokenizer(((t_ClassicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsFilterBuilder::class$ = NULL;
            jmethodID *TermsFilterBuilder::mids$ = NULL;
            bool TermsFilterBuilder::live$ = false;

            jclass TermsFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsFilterBuilder::TermsFilterBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsFilterBuilder, t_TermsFilterBuilder, ::java::lang::Object, TermsFilterBuilder, t_TermsFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsFilterBuilder), module, "TermsFilterBuilder", 0);
            }

            void t_TermsFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "class_", make_descriptor(TermsFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsFilterBuilder::wrap_Object(TermsFilterBuilder(((t_TermsFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Transition::class$ = NULL;
          jmethodID *Transition::mids$ = NULL;
          bool Transition::live$ = false;
          ::java::util::Comparator *Transition::CompareByDestThenMinMax = NULL;
          ::java::util::Comparator *Transition::CompareByMinMaxThenDest = NULL;

          jclass Transition::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Transition");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8b58b7f9] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_init$_630ffcbb] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_clone_09f0be81] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDest_0b46b0b2] = env->getMethodID(cls, "getDest", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getMax_54c6a179] = env->getMethodID(cls, "getMax", "()I");
              mids$[mid_getMin_54c6a179] = env->getMethodID(cls, "getMin", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CompareByDestThenMinMax = new ::java::util::Comparator(env->getStaticObjectField(cls, "CompareByDestThenMinMax", "Ljava/util/Comparator;"));
              CompareByMinMaxThenDest = new ::java::util::Comparator(env->getStaticObjectField(cls, "CompareByMinMaxThenDest", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Transition::Transition(jint a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b58b7f9, a0, a1.this$)) {}

          Transition::Transition(jint a0, jint a1, const ::org::apache::lucene::util::automaton::State & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_630ffcbb, a0, a1, a2.this$)) {}

          Transition Transition::clone() const
          {
            return Transition(env->callObjectMethod(this$, mids$[mid_clone_09f0be81]));
          }

          jboolean Transition::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::automaton::State Transition::getDest() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getDest_0b46b0b2]));
          }

          jint Transition::getMax() const
          {
            return env->callIntMethod(this$, mids$[mid_getMax_54c6a179]);
          }

          jint Transition::getMin() const
          {
            return env->callIntMethod(this$, mids$[mid_getMin_54c6a179]);
          }

          jint Transition::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String Transition::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Transition_clone(t_Transition *self);
          static PyObject *t_Transition_equals(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_getDest(t_Transition *self);
          static PyObject *t_Transition_getMax(t_Transition *self);
          static PyObject *t_Transition_getMin(t_Transition *self);
          static PyObject *t_Transition_hashCode(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_get__dest(t_Transition *self, void *data);
          static PyObject *t_Transition_get__max(t_Transition *self, void *data);
          static PyObject *t_Transition_get__min(t_Transition *self, void *data);
          static PyGetSetDef t_Transition__fields_[] = {
            DECLARE_GET_FIELD(t_Transition, dest),
            DECLARE_GET_FIELD(t_Transition, max),
            DECLARE_GET_FIELD(t_Transition, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Transition__methods_[] = {
            DECLARE_METHOD(t_Transition, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, clone, METH_NOARGS),
            DECLARE_METHOD(t_Transition, equals, METH_VARARGS),
            DECLARE_METHOD(t_Transition, getDest, METH_NOARGS),
            DECLARE_METHOD(t_Transition, getMax, METH_NOARGS),
            DECLARE_METHOD(t_Transition, getMin, METH_NOARGS),
            DECLARE_METHOD(t_Transition, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Transition, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Transition, t_Transition, ::java::lang::Object, Transition, t_Transition_init_, 0, 0, t_Transition__fields_, 0, 0);

          void t_Transition::install(PyObject *module)
          {
            installType(&PY_TYPE(Transition), module, "Transition", 0);
          }

          void t_Transition::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "class_", make_descriptor(Transition::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "wrapfn_", make_descriptor(t_Transition::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Transition::initializeClass);
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "CompareByDestThenMinMax", make_descriptor(::java::util::t_Comparator::wrap_Object(*Transition::CompareByDestThenMinMax)));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "CompareByMinMaxThenDest", make_descriptor(::java::util::t_Comparator::wrap_Object(*Transition::CompareByMinMaxThenDest)));
          }

          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Transition::initializeClass, 1)))
              return NULL;
            return t_Transition::wrap_Object(Transition(((t_Transition *) arg)->object.this$));
          }
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Transition::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
                Transition object((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Transition(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::automaton::State a2((jobject) NULL);
                Transition object((jobject) NULL);

                if (!parseArgs(args, "IIk", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Transition(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Transition_clone(t_Transition *self)
          {
            Transition result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Transition::wrap_Object(result);
          }

          static PyObject *t_Transition_equals(t_Transition *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Transition_getDest(t_Transition *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getDest());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_Transition_getMax(t_Transition *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMax());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Transition_getMin(t_Transition *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMin());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Transition_hashCode(t_Transition *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Transition_get__dest(t_Transition *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getDest());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static PyObject *t_Transition_get__max(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMax());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Transition_get__min(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMin());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizer::class$ = NULL;
          jmethodID *PersianNormalizer::mids$ = NULL;
          bool PersianNormalizer::live$ = false;
          jchar PersianNormalizer::FARSI_YEH = (jchar) 0;
          jchar PersianNormalizer::HAMZA_ABOVE = (jchar) 0;
          jchar PersianNormalizer::HEH = (jchar) 0;
          jchar PersianNormalizer::HEH_GOAL = (jchar) 0;
          jchar PersianNormalizer::HEH_YEH = (jchar) 0;
          jchar PersianNormalizer::KAF = (jchar) 0;
          jchar PersianNormalizer::KEHEH = (jchar) 0;
          jchar PersianNormalizer::YEH = (jchar) 0;
          jchar PersianNormalizer::YEH_BARREE = (jchar) 0;

          jclass PersianNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FARSI_YEH = env->getStaticCharField(cls, "FARSI_YEH");
              HAMZA_ABOVE = env->getStaticCharField(cls, "HAMZA_ABOVE");
              HEH = env->getStaticCharField(cls, "HEH");
              HEH_GOAL = env->getStaticCharField(cls, "HEH_GOAL");
              HEH_YEH = env->getStaticCharField(cls, "HEH_YEH");
              KAF = env->getStaticCharField(cls, "KAF");
              KEHEH = env->getStaticCharField(cls, "KEHEH");
              YEH = env->getStaticCharField(cls, "YEH");
              YEH_BARREE = env->getStaticCharField(cls, "YEH_BARREE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizer::PersianNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PersianNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args);

          static PyMethodDef t_PersianNormalizer__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizer, t_PersianNormalizer, ::java::lang::Object, PersianNormalizer, t_PersianNormalizer_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizer), module, "PersianNormalizer", 0);
          }

          void t_PersianNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "class_", make_descriptor(PersianNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "FARSI_YEH", make_descriptor(PersianNormalizer::FARSI_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HAMZA_ABOVE", make_descriptor(PersianNormalizer::HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH", make_descriptor(PersianNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_GOAL", make_descriptor(PersianNormalizer::HEH_GOAL));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_YEH", make_descriptor(PersianNormalizer::HEH_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KAF", make_descriptor(PersianNormalizer::KAF));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KEHEH", make_descriptor(PersianNormalizer::KEHEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH", make_descriptor(PersianNormalizer::YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH_BARREE", make_descriptor(PersianNormalizer::YEH_BARREE));
          }

          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizer::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizer::wrap_Object(PersianNormalizer(((t_PersianNormalizer *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds)
          {
            PersianNormalizer object((jobject) NULL);

            INT_CALL(object = PersianNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilter::class$ = NULL;
          jmethodID *LowerCaseFilter::mids$ = NULL;
          bool LowerCaseFilter::live$ = false;

          jclass LowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean LowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_LowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilter, t_LowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, LowerCaseFilter, t_LowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilter), module, "LowerCaseFilter", 0);
          }

          void t_LowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "class_", make_descriptor(LowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilter::wrap_Object(LowerCaseFilter(((t_LowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            LowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = LowerCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonAnalyzer::class$ = NULL;
        jmethodID *PythonAnalyzer::mids$ = NULL;
        bool PythonAnalyzer::live$ = false;

        jclass PythonAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAnalyzer::PythonAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonAnalyzer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonAnalyzer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAnalyzer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self);
        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args);
        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data);
        static PyGetSetDef t_PythonAnalyzer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAnalyzer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAnalyzer__methods_[] = {
          DECLARE_METHOD(t_PythonAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAnalyzer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAnalyzer, t_PythonAnalyzer, ::org::apache::lucene::analysis::Analyzer, PythonAnalyzer, t_PythonAnalyzer_init_, 0, 0, t_PythonAnalyzer__fields_, 0, 0);

        void t_PythonAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAnalyzer), module, "PythonAnalyzer", 1);
        }

        void t_PythonAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "class_", make_descriptor(PythonAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PythonAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAnalyzer::initializeClass);
          JNINativeMethod methods[] = {
            { "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;", (void *) t_PythonAnalyzer_createComponents0 },
            { "pythonDecRef", "()V", (void *) t_PythonAnalyzer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAnalyzer::initializeClass, 1)))
            return NULL;
          return t_PythonAnalyzer::wrap_Object(PythonAnalyzer(((t_PythonAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          PythonAnalyzer object((jobject) NULL);

          INT_CALL(object = PythonAnalyzer());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::java::io::t_Reader::wrap_Object(::java::io::Reader(a1));
          PyObject *result = PyObject_CallMethod(obj, "createComponents", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &value))
          {
            throwTypeError("createComponents", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Format::class$ = NULL;
          jmethodID *PackedInts$Format::mids$ = NULL;
          jfieldID *PackedInts$Format::fids$ = NULL;
          bool PackedInts$Format::live$ = false;
          PackedInts$Format *PackedInts$Format::PACKED = NULL;
          PackedInts$Format *PackedInts$Format::PACKED_SINGLE_BLOCK = NULL;

          jclass PackedInts$Format::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Format");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byId_926ce3b1] = env->getStaticMethodID(cls, "byId", "(I)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_byteCount_d3236ab8] = env->getMethodID(cls, "byteCount", "(III)J");
              mids$[mid_getId_54c6a179] = env->getMethodID(cls, "getId", "()I");
              mids$[mid_isSupported_39c7bd30] = env->getMethodID(cls, "isSupported", "(I)Z");
              mids$[mid_longCount_d3236abb] = env->getMethodID(cls, "longCount", "(III)I");
              mids$[mid_overheadPerValue_39c7bd2c] = env->getMethodID(cls, "overheadPerValue", "(I)F");
              mids$[mid_overheadRatio_39c7bd2c] = env->getMethodID(cls, "overheadRatio", "(I)F");
              mids$[mid_valueOf_ad915ab1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_values_d84982f7] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/packed/PackedInts$Format;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_id] = env->getFieldID(cls, "id", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PACKED = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              PACKED_SINGLE_BLOCK = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED_SINGLE_BLOCK", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Format PackedInts$Format::byId(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_byId_926ce3b1], a0));
          }

          jlong PackedInts$Format::byteCount(jint a0, jint a1, jint a2) const
          {
            return env->callLongMethod(this$, mids$[mid_byteCount_d3236ab8], a0, a1, a2);
          }

          jint PackedInts$Format::getId() const
          {
            return env->callIntMethod(this$, mids$[mid_getId_54c6a179]);
          }

          jboolean PackedInts$Format::isSupported(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSupported_39c7bd30], a0);
          }

          jint PackedInts$Format::longCount(jint a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_longCount_d3236abb], a0, a1, a2);
          }

          jfloat PackedInts$Format::overheadPerValue(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadPerValue_39c7bd2c], a0);
          }

          jfloat PackedInts$Format::overheadRatio(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadRatio_39c7bd2c], a0);
          }

          PackedInts$Format PackedInts$Format::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad915ab1], a0.this$));
          }

          JArray< PackedInts$Format > PackedInts$Format::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< PackedInts$Format >(env->callStaticObjectMethod(cls, mids$[mid_values_d84982f7]));
          }

          jint PackedInts$Format::_get_id() const
          {
            return env->getIntField(this$, fids$[fid_id]);
          }

          void PackedInts$Format::_set_id(jint a0) const
          {
            env->setIntField(this$, fids$[fid_id], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self);
          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts$Format_values(PyTypeObject *type);

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data);
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data);
          static PyGetSetDef t_PackedInts$Format__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Format, id),
            DECLARE_GET_FIELD(t_PackedInts$Format, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Format__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Format, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, of_, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, byId, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, byteCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, getId, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Format, isSupported, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, longCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, overheadPerValue, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, overheadRatio, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Format, t_PackedInts$Format, ::java::lang::Enum, PackedInts$Format, abstract_init, 0, 0, t_PackedInts$Format__fields_, 0, 0);
          PyObject *t_PackedInts$Format::wrap_Object(const PackedInts$Format& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PackedInts$Format::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PackedInts$Format::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Format), module, "PackedInts$Format", 0);
          }

          void t_PackedInts$Format::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "class_", make_descriptor(PackedInts$Format::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Format::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts$Format::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED)));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED_SINGLE_BLOCK", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED_SINGLE_BLOCK)));
          }

          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Format::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Format::wrap_Object(PackedInts$Format(((t_PackedInts$Format *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Format::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            PackedInts$Format result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::byId(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "byId", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jlong result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.byteCount(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "byteCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getId());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isSupported(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSupported", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.longCount(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "longCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadPerValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadPerValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadRatio(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadRatio", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            PackedInts$Format result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::valueOf(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_PackedInts$Format_values(PyTypeObject *type)
          {
            JArray< PackedInts$Format > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::values());
            return JArray<jobject>(result.this$).wrap(t_PackedInts$Format::wrap_jobject);
          }
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getId());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *Stats::class$ = NULL;
          jmethodID *Stats::mids$ = NULL;
          jfieldID *Stats::fids$ = NULL;
          bool Stats::live$ = false;

          jclass Stats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/Stats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_blockCountByPrefixLen] = env->getFieldID(cls, "blockCountByPrefixLen", "[I");
              fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");
              fids$[fid_floorBlockCount] = env->getFieldID(cls, "floorBlockCount", "I");
              fids$[fid_floorSubBlockCount] = env->getFieldID(cls, "floorSubBlockCount", "I");
              fids$[fid_indexArcCount] = env->getFieldID(cls, "indexArcCount", "J");
              fids$[fid_indexNodeCount] = env->getFieldID(cls, "indexNodeCount", "J");
              fids$[fid_indexNumBytes] = env->getFieldID(cls, "indexNumBytes", "J");
              fids$[fid_mixedBlockCount] = env->getFieldID(cls, "mixedBlockCount", "I");
              fids$[fid_nonFloorBlockCount] = env->getFieldID(cls, "nonFloorBlockCount", "I");
              fids$[fid_segment] = env->getFieldID(cls, "segment", "Ljava/lang/String;");
              fids$[fid_subBlocksOnlyBlockCount] = env->getFieldID(cls, "subBlocksOnlyBlockCount", "I");
              fids$[fid_termsOnlyBlockCount] = env->getFieldID(cls, "termsOnlyBlockCount", "I");
              fids$[fid_totalBlockCount] = env->getFieldID(cls, "totalBlockCount", "I");
              fids$[fid_totalBlockOtherBytes] = env->getFieldID(cls, "totalBlockOtherBytes", "J");
              fids$[fid_totalBlockStatsBytes] = env->getFieldID(cls, "totalBlockStatsBytes", "J");
              fids$[fid_totalBlockSuffixBytes] = env->getFieldID(cls, "totalBlockSuffixBytes", "J");
              fids$[fid_totalTermBytes] = env->getFieldID(cls, "totalTermBytes", "J");
              fids$[fid_totalTermCount] = env->getFieldID(cls, "totalTermCount", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Stats::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< jint > Stats::_get_blockCountByPrefixLen() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_blockCountByPrefixLen]));
          }

          void Stats::_set_blockCountByPrefixLen(const JArray< jint > & a0) const
          {
            env->setObjectField(this$, fids$[fid_blockCountByPrefixLen], a0.this$);
          }

          ::java::lang::String Stats::_get_field() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
          }

          jint Stats::_get_floorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorBlockCount]);
          }

          void Stats::_set_floorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorBlockCount], a0);
          }

          jint Stats::_get_floorSubBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorSubBlockCount]);
          }

          void Stats::_set_floorSubBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorSubBlockCount], a0);
          }

          jlong Stats::_get_indexArcCount() const
          {
            return env->getLongField(this$, fids$[fid_indexArcCount]);
          }

          void Stats::_set_indexArcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexArcCount], a0);
          }

          jlong Stats::_get_indexNodeCount() const
          {
            return env->getLongField(this$, fids$[fid_indexNodeCount]);
          }

          void Stats::_set_indexNodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNodeCount], a0);
          }

          jlong Stats::_get_indexNumBytes() const
          {
            return env->getLongField(this$, fids$[fid_indexNumBytes]);
          }

          void Stats::_set_indexNumBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNumBytes], a0);
          }

          jint Stats::_get_mixedBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_mixedBlockCount]);
          }

          void Stats::_set_mixedBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_mixedBlockCount], a0);
          }

          jint Stats::_get_nonFloorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_nonFloorBlockCount]);
          }

          void Stats::_set_nonFloorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_nonFloorBlockCount], a0);
          }

          ::java::lang::String Stats::_get_segment() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_segment]));
          }

          jint Stats::_get_subBlocksOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_subBlocksOnlyBlockCount]);
          }

          void Stats::_set_subBlocksOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_subBlocksOnlyBlockCount], a0);
          }

          jint Stats::_get_termsOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_termsOnlyBlockCount]);
          }

          void Stats::_set_termsOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_termsOnlyBlockCount], a0);
          }

          jint Stats::_get_totalBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_totalBlockCount]);
          }

          void Stats::_set_totalBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_totalBlockCount], a0);
          }

          jlong Stats::_get_totalBlockOtherBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockOtherBytes]);
          }

          void Stats::_set_totalBlockOtherBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockOtherBytes], a0);
          }

          jlong Stats::_get_totalBlockStatsBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockStatsBytes]);
          }

          void Stats::_set_totalBlockStatsBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockStatsBytes], a0);
          }

          jlong Stats::_get_totalBlockSuffixBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockSuffixBytes]);
          }

          void Stats::_set_totalBlockSuffixBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockSuffixBytes], a0);
          }

          jlong Stats::_get_totalTermBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalTermBytes]);
          }

          void Stats::_set_totalTermBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermBytes], a0);
          }

          jlong Stats::_get_totalTermCount() const
          {
            return env->getLongField(this$, fids$[fid_totalTermCount]);
          }

          void Stats::_set_totalTermCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermCount], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args);
          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data);
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__field(t_Stats *self, void *data);
          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data);
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data);
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data);
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__segment(t_Stats *self, void *data);
          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data);
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data);

          static PyGetSetDef t_Stats__fields_[] = {
            DECLARE_GETSET_FIELD(t_Stats, blockCountByPrefixLen),
            DECLARE_GET_FIELD(t_Stats, field),
            DECLARE_GETSET_FIELD(t_Stats, floorBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, floorSubBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, indexArcCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNodeCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNumBytes),
            DECLARE_GETSET_FIELD(t_Stats, mixedBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, nonFloorBlockCount),
            DECLARE_GET_FIELD(t_Stats, segment),
            DECLARE_GETSET_FIELD(t_Stats, subBlocksOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, termsOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockOtherBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockStatsBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockSuffixBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Stats__methods_[] = {
            DECLARE_METHOD(t_Stats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Stats, t_Stats, ::java::lang::Object, Stats, abstract_init, 0, 0, t_Stats__fields_, 0, 0);

          void t_Stats::install(PyObject *module)
          {
            installType(&PY_TYPE(Stats), module, "Stats", 0);
          }

          void t_Stats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "class_", make_descriptor(Stats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "wrapfn_", make_descriptor(t_Stats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Stats::initializeClass, 1)))
              return NULL;
            return t_Stats::wrap_Object(Stats(((t_Stats *) arg)->object.this$));
          }
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Stats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Stats), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_blockCountByPrefixLen());
            return value.wrap();
          }
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data)
          {
            JArray< jint > value((jobject) NULL);
            if (!parseArg(arg, "[I", &value))
            {
              INT_CALL(self->object._set_blockCountByPrefixLen(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "blockCountByPrefixLen", arg);
            return -1;
          }

          static PyObject *t_Stats_get__field(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_field());
            return j2p(value);
          }

          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorSubBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorSubBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorSubBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexArcCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexArcCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNodeCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNodeCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNumBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNumBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNumBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_mixedBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_mixedBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "mixedBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_nonFloorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_nonFloorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nonFloorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__segment(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_segment());
            return j2p(value);
          }

          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_subBlocksOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_subBlocksOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "subBlocksOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_termsOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_termsOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "termsOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_totalBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockOtherBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockOtherBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockOtherBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockStatsBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockStatsBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockStatsBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockSuffixBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockSuffixBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockSuffixBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermCount", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueBool.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueBool::class$ = NULL;
          jmethodID *MutableValueBool::mids$ = NULL;
          jfieldID *MutableValueBool::fids$ = NULL;
          bool MutableValueBool::live$ = false;

          jclass MutableValueBool::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueBool");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueBool::MutableValueBool() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueBool::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueBool::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueBool::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueBool::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueBool::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueBool::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jboolean MutableValueBool::_get_value() const
          {
            return env->getBooleanField(this$, fids$[fid_value]);
          }

          void MutableValueBool::_set_value(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data);
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueBool__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueBool, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueBool__methods_[] = {
            DECLARE_METHOD(t_MutableValueBool, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueBool, t_MutableValueBool, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueBool, t_MutableValueBool_init_, 0, 0, t_MutableValueBool__fields_, 0, 0);

          void t_MutableValueBool::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueBool), module, "MutableValueBool", 0);
          }

          void t_MutableValueBool::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "class_", make_descriptor(MutableValueBool::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "wrapfn_", make_descriptor(t_MutableValueBool::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueBool::initializeClass, 1)))
              return NULL;
            return t_MutableValueBool::wrap_Object(MutableValueBool(((t_MutableValueBool *) arg)->object.this$));
          }
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueBool::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds)
          {
            MutableValueBool object((jobject) NULL);

            INT_CALL(object = MutableValueBool());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_value());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSet::class$ = NULL;
        jmethodID *DocIdSet::mids$ = NULL;
        bool DocIdSet::live$ = false;
        DocIdSet *DocIdSet::EMPTY = NULL;

        jclass DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new DocIdSet(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/DocIdSet;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSet::DocIdSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Bits DocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSet_bits(t_DocIdSet *self);
        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self);
        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self);
        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self);
        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data);
        static PyGetSetDef t_DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdSet__methods_[] = {
          DECLARE_METHOD(t_DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, bits, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, isCacheable, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSet, t_DocIdSet, ::java::lang::Object, DocIdSet, t_DocIdSet_init_, 0, 0, t_DocIdSet__fields_, 0, 0);

        void t_DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSet), module, "DocIdSet", 0);
        }

        void t_DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "class_", make_descriptor(DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "EMPTY", make_descriptor(t_DocIdSet::wrap_Object(*DocIdSet::EMPTY)));
        }

        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSet::initializeClass, 1)))
            return NULL;
          return t_DocIdSet::wrap_Object(DocIdSet(((t_DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds)
        {
          DocIdSet object((jobject) NULL);

          INT_CALL(object = DocIdSet());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSet_bits(t_DocIdSet *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.bits());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCacheable());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterIterator::class$ = NULL;
          jmethodID *WordDelimiterIterator::mids$ = NULL;
          bool WordDelimiterIterator::live$ = false;
          JArray< jbyte > *WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE = NULL;
          jint WordDelimiterIterator::DONE = (jint) 0;

          jclass WordDelimiterIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getType_39c7bd28] = env->getStaticMethodID(cls, "getType", "(I)B");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_WORD_DELIM_TABLE = new JArray< jbyte >(env->getStaticObjectField(cls, "DEFAULT_WORD_DELIM_TABLE", "[B"));
              DONE = env->getStaticIntField(cls, "DONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jbyte WordDelimiterIterator::getType(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticByteMethod(cls, mids$[mid_getType_39c7bd28], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_WordDelimiterIterator__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, getType, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterIterator, t_WordDelimiterIterator, ::java::lang::Object, WordDelimiterIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_WordDelimiterIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterIterator), module, "WordDelimiterIterator", 0);
          }

          void t_WordDelimiterIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "class_", make_descriptor(WordDelimiterIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DEFAULT_WORD_DELIM_TABLE", make_descriptor(WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE->wrap()));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DONE", make_descriptor(WordDelimiterIterator::DONE));
          }

          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterIterator::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterIterator::wrap_Object(WordDelimiterIterator(((t_WordDelimiterIterator *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jbyte result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::WordDelimiterIterator::getType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getType", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LevensteinDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LevensteinDistance::class$ = NULL;
          jmethodID *LevensteinDistance::mids$ = NULL;
          bool LevensteinDistance::live$ = false;

          jclass LevensteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LevensteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevensteinDistance::LevensteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean LevensteinDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat LevensteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint LevensteinDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String LevensteinDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args);

          static PyMethodDef t_LevensteinDistance__methods_[] = {
            DECLARE_METHOD(t_LevensteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevensteinDistance, t_LevensteinDistance, ::java::lang::Object, LevensteinDistance, t_LevensteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LevensteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LevensteinDistance), module, "LevensteinDistance", 0);
          }

          void t_LevensteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "class_", make_descriptor(LevensteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LevensteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevensteinDistance::initializeClass, 1)))
              return NULL;
            return t_LevensteinDistance::wrap_Object(LevensteinDistance(((t_LevensteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevensteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LevensteinDistance object((jobject) NULL);

            INT_CALL(object = LevensteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonDirectory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonDirectory::class$ = NULL;
        jmethodID *PythonDirectory::mids$ = NULL;
        bool PythonDirectory::live$ = false;

        jclass PythonDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_fileModified_5fdc3f54] = env->getMethodID(cls, "fileModified", "(Ljava/lang/String;)J");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_5fdc3f48] = env->getMethodID(cls, "sync", "(Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_touchFile_5fdc3f48] = env->getMethodID(cls, "touchFile", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDirectory::PythonDirectory() : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDirectory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDirectory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDirectory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self);
        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args);
        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args);
        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data);
        static PyGetSetDef t_PythonDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDirectory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDirectory__methods_[] = {
          DECLARE_METHOD(t_PythonDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDirectory, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDirectory, t_PythonDirectory, ::org::apache::lucene::store::Directory, PythonDirectory, t_PythonDirectory_init_, 0, 0, t_PythonDirectory__fields_, 0, 0);

        void t_PythonDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDirectory), module, "PythonDirectory", 1);
        }

        void t_PythonDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "class_", make_descriptor(PythonDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "wrapfn_", make_descriptor(t_PythonDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDirectory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_clearLock0 },
            { "close", "()V", (void *) t_PythonDirectory_close1 },
            { "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;", (void *) t_PythonDirectory_createOutput2 },
            { "deleteFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_deleteFile3 },
            { "fileExists", "(Ljava/lang/String;)Z", (void *) t_PythonDirectory_fileExists4 },
            { "fileLength", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileLength5 },
            { "fileModified", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileModified6 },
            { "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;", (void *) t_PythonDirectory_getLockFactory7 },
            { "listAll", "()[Ljava/lang/String;", (void *) t_PythonDirectory_listAll8 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonDirectory_makeLock9 },
            { "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;", (void *) t_PythonDirectory_openInput10 },
            { "pythonDecRef", "()V", (void *) t_PythonDirectory_pythonDecRef11 },
            { "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V", (void *) t_PythonDirectory_setLockFactory12 },
            { "sync", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_sync13 },
            { "touchFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_touchFile14 },
          };
          env->registerNatives(cls, methods, 15);
        }

        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDirectory::initializeClass, 1)))
            return NULL;
          return t_PythonDirectory::wrap_Object(PythonDirectory(((t_PythonDirectory *) arg)->object.this$));
        }
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds)
        {
          PythonDirectory object((jobject) NULL);

          INT_CALL(object = PythonDirectory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonDirectory), (PyObject *) self, "sync", args, 2);
        }

        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "createOutput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &value))
          {
            throwTypeError("createOutput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "deleteFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileExists", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("fileExists", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileLength", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileLength", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileModified", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileModified", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "getLockFactory", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
          {
            throwTypeError("getLockFactory", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::String > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listAll", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[s", &value))
          {
            throwTypeError("listAll", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexInput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "openInput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &value))
          {
            throwTypeError("openInput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::store::t_LockFactory::wrap_Object(::org::apache::lucene::store::LockFactory(a0));
          PyObject *result = PyObject_CallMethod(obj, "setLockFactory", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "sync", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "touchFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsEnum] = env->getFieldID(cls, "docsEnum", "Lorg/apache/lucene/index/DocsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsEnum MultiDocsEnum$EnumWithSlice::_get_docsEnum() const
        {
          return ::org::apache::lucene::index::DocsEnum(env->getObjectField(this$, fids$[fid_docsEnum]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_docsEnum(const ::org::apache::lucene::index::DocsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, docsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum$EnumWithSlice, t_MultiDocsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum$EnumWithSlice), module, "MultiDocsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum$EnumWithSlice::wrap_Object(MultiDocsEnum$EnumWithSlice(((t_MultiDocsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsEnum());
          return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
