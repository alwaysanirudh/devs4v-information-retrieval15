#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseAnalyzer::class$ = NULL;
          jmethodID *ChineseAnalyzer::mids$ = NULL;
          bool ChineseAnalyzer::live$ = false;

          jclass ChineseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseAnalyzer::ChineseAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ChineseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ChineseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseAnalyzer, t_ChineseAnalyzer, ::org::apache::lucene::analysis::Analyzer, ChineseAnalyzer, t_ChineseAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_ChineseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseAnalyzer), module, "ChineseAnalyzer", 0);
          }

          void t_ChineseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "class_", make_descriptor(ChineseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ChineseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ChineseAnalyzer::wrap_Object(ChineseAnalyzer(((t_ChineseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ChineseAnalyzer object((jobject) NULL);

            INT_CALL(object = ChineseAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *NoOutputs::class$ = NULL;
          jmethodID *NoOutputs::mids$ = NULL;
          bool NoOutputs::live$ = false;

          jclass NoOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/NoOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_getSingleton_99c00e31] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/NoOutputs;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object NoOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          NoOutputs NoOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return NoOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_99c00e31]));
          }

          ::java::lang::Object NoOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String NoOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          ::java::lang::Object NoOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object NoOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void NoOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data);
          static PyGetSetDef t_NoOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_NoOutputs, noOutput),
            DECLARE_GET_FIELD(t_NoOutputs, singleton),
            DECLARE_GET_FIELD(t_NoOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NoOutputs__methods_[] = {
            DECLARE_METHOD(t_NoOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NoOutputs, t_NoOutputs, ::org::apache::lucene::util::fst::Outputs, NoOutputs, abstract_init, 0, 0, t_NoOutputs__fields_, 0, 0);
          PyObject *t_NoOutputs::wrap_Object(const NoOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NoOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NoOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(NoOutputs), module, "NoOutputs", 0);
          }

          void t_NoOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "class_", make_descriptor(NoOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "wrapfn_", make_descriptor(t_NoOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NoOutputs::initializeClass, 1)))
              return NULL;
            return t_NoOutputs::wrap_Object(NoOutputs(((t_NoOutputs *) arg)->object.this$));
          }
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NoOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type)
          {
            NoOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::NoOutputs::getSingleton());
            return t_NoOutputs::wrap_Object(result);
          }

          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data)
          {
            NoOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_NoOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilter::class$ = NULL;
          jmethodID *HTMLStripCharFilter::mids$ = NULL;
          bool HTMLStripCharFilter::live$ = false;

          jclass HTMLStripCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_2df021b4] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_2df021b4, a0.this$, a1.this$)) {}

          void HTMLStripCharFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jint HTMLStripCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint HTMLStripCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args);
          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilter__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_HTMLStripCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilter, t_HTMLStripCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, HTMLStripCharFilter, t_HTMLStripCharFilter_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilter), module, "HTMLStripCharFilter", 0);
          }

          void t_HTMLStripCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "class_", make_descriptor(HTMLStripCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilter::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilter::wrap_Object(HTMLStripCharFilter(((t_HTMLStripCharFilter *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ByteDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ByteDocValuesField::class$ = NULL;
        jmethodID *ByteDocValuesField::mids$ = NULL;
        bool ByteDocValuesField::live$ = false;

        jclass ByteDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ByteDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a032b77d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;B)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteDocValuesField::ByteDocValuesField(const ::java::lang::String & a0, jbyte a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_a032b77d, a0.this$, a1)) {}

        void ByteDocValuesField::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args);
        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ByteDocValuesField, byteValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ByteDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, setByteValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteDocValuesField, t_ByteDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ByteDocValuesField, t_ByteDocValuesField_init_, 0, 0, t_ByteDocValuesField__fields_, 0, 0);

        void t_ByteDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteDocValuesField), module, "ByteDocValuesField", 0);
        }

        void t_ByteDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "class_", make_descriptor(ByteDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ByteDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ByteDocValuesField::wrap_Object(ByteDocValuesField(((t_ByteDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte a1;
          ByteDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sB", &a0, &a1))
          {
            INT_CALL(object = ByteDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteDocValuesField), (PyObject *) self, "setByteValue", args, 2);
        }

        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$NullReader::class$ = NULL;
          jmethodID *PackedInts$NullReader::mids$ = NULL;
          bool PackedInts$NullReader::live$ = false;

          jclass PackedInts$NullReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$NullReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$NullReader::PackedInts$NullReader(jint a0) : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jlong PackedInts$NullReader::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint PackedInts$NullReader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jlong PackedInts$NullReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint PackedInts$NullReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args);

          static PyMethodDef t_PackedInts$NullReader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$NullReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$NullReader, t_PackedInts$NullReader, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$NullReader, t_PackedInts$NullReader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$NullReader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$NullReader), module, "PackedInts$NullReader", 0);
          }

          void t_PackedInts$NullReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "class_", make_descriptor(PackedInts$NullReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$NullReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$NullReader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$NullReader::wrap_Object(PackedInts$NullReader(((t_PackedInts$NullReader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$NullReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            PackedInts$NullReader object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = PackedInts$NullReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "size", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilter::class$ = NULL;
          jmethodID *SynonymFilter::mids$ = NULL;
          bool SynonymFilter::live$ = false;
          ::java::lang::String *SynonymFilter::TYPE_SYNONYM = NULL;

          jclass SynonymFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6759cd52] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/synonym/SynonymMap;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE_SYNONYM = new ::java::lang::String(env->getStaticObjectField(cls, "TYPE_SYNONYM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilter::SynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::synonym::SynonymMap & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6759cd52, a0.this$, a1.this$, a2)) {}

          jboolean SynonymFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SynonymFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args);
          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args);

          static PyMethodDef t_SynonymFilter__methods_[] = {
            DECLARE_METHOD(t_SynonymFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilter, t_SynonymFilter, ::org::apache::lucene::analysis::TokenFilter, SynonymFilter, t_SynonymFilter_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilter), module, "SynonymFilter", 0);
          }

          void t_SynonymFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "class_", make_descriptor(SynonymFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "TYPE_SYNONYM", make_descriptor(j2p(*SynonymFilter::TYPE_SYNONYM)));
          }

          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilter::initializeClass, 1)))
              return NULL;
            return t_SynonymFilter::wrap_Object(SynonymFilter(((t_SynonymFilter *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::synonym::SynonymMap a1((jobject) NULL);
            jboolean a2;
            SynonymFilter object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::synonym::SynonymMap::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SynonymFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *GrowableWriter::class$ = NULL;
          jmethodID *GrowableWriter::mids$ = NULL;
          bool GrowableWriter::live$ = false;

          jclass GrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/GrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_getMutable_ebbbff61] = env->getMethodID(cls, "getMutable", "()Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_585da437] = env->getMethodID(cls, "resize", "(I)Lorg/apache/lucene/util/packed/GrowableWriter;");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GrowableWriter::GrowableWriter(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::PackedInts$Mutable(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          void GrowableWriter::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void GrowableWriter::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jlong GrowableWriter::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint GrowableWriter::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable GrowableWriter::getMutable() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callObjectMethod(this$, mids$[mid_getMutable_ebbbff61]));
          }

          jlong GrowableWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          GrowableWriter GrowableWriter::resize(jint a0) const
          {
            return GrowableWriter(env->callObjectMethod(this$, mids$[mid_resize_585da437], a0));
          }

          void GrowableWriter::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void GrowableWriter::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint GrowableWriter::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self);
          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg);
          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data);
          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data);
          static PyGetSetDef t_GrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_GrowableWriter, bitsPerValue),
            DECLARE_GET_FIELD(t_GrowableWriter, mutable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GrowableWriter__methods_[] = {
            DECLARE_METHOD(t_GrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, clear, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, fill, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, get, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getBitsPerValue, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getMutable, METH_NOARGS),
            DECLARE_METHOD(t_GrowableWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, resize, METH_O),
            DECLARE_METHOD(t_GrowableWriter, save, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, set, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GrowableWriter, t_GrowableWriter, ::org::apache::lucene::util::packed::PackedInts$Mutable, GrowableWriter, t_GrowableWriter_init_, 0, 0, t_GrowableWriter__fields_, 0, 0);

          void t_GrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(GrowableWriter), module, "GrowableWriter", 0);
          }

          void t_GrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "class_", make_descriptor(GrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_GrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GrowableWriter::initializeClass, 1)))
              return NULL;
            return t_GrowableWriter::wrap_Object(GrowableWriter(((t_GrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jfloat a2;
            GrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              INT_CALL(object = GrowableWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "fill", args, 2);
          }

          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBitsPerValue());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "getBitsPerValue", args, 2);
          }

          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);
            OBJ_CALL(result = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
          }

          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg)
          {
            jint a0;
            GrowableWriter result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return t_GrowableWriter::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "save", args, 2);
          }

          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "set", args, 2);
          }

          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable value((jobject) NULL);
            OBJ_CALL(value = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "java/lang/String.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFileNames::class$ = NULL;
        jmethodID *IndexFileNames::mids$ = NULL;
        bool IndexFileNames::live$ = false;
        ::java::util::regex::Pattern *IndexFileNames::CODEC_FILE_PATTERN = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::GEN_EXTENSION = NULL;
        JArray< ::java::lang::String > *IndexFileNames::INDEX_EXTENSIONS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS_GEN = NULL;

        jclass IndexFileNames::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFileNames");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fileNameFromGeneration_7a384922] = env->getStaticMethodID(cls, "fileNameFromGeneration", "(Ljava/lang/String;Ljava/lang/String;J)Ljava/lang/String;");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_matchesExtension_4a26474e] = env->getStaticMethodID(cls, "matchesExtension", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_parseSegmentName_97a5258f] = env->getStaticMethodID(cls, "parseSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_segmentFileName_af6d27e3] = env->getStaticMethodID(cls, "segmentFileName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripExtension_97a5258f] = env->getStaticMethodID(cls, "stripExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripSegmentName_97a5258f] = env->getStaticMethodID(cls, "stripSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_FILE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "CODEC_FILE_PATTERN", "Ljava/util/regex/Pattern;"));
            COMPOUND_FILE_ENTRIES_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_ENTRIES_EXTENSION", "Ljava/lang/String;"));
            COMPOUND_FILE_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_EXTENSION", "Ljava/lang/String;"));
            GEN_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "GEN_EXTENSION", "Ljava/lang/String;"));
            INDEX_EXTENSIONS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "INDEX_EXTENSIONS", "[Ljava/lang/String;"));
            SEGMENTS = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS", "Ljava/lang/String;"));
            SEGMENTS_GEN = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS_GEN", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String IndexFileNames::fileNameFromGeneration(const ::java::lang::String & a0, const ::java::lang::String & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_fileNameFromGeneration_7a384922], a0.this$, a1.this$, a2));
        }

        ::java::lang::String IndexFileNames::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        jboolean IndexFileNames::matchesExtension(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_matchesExtension_4a26474e], a0.this$, a1.this$);
        }

        ::java::lang::String IndexFileNames::parseSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_parseSegmentName_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::segmentFileName(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_segmentFileName_af6d27e3], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String IndexFileNames::stripExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripExtension_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::stripSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripSegmentName_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexFileNames__methods_[] = {
          DECLARE_METHOD(t_IndexFileNames, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, fileNameFromGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, matchesExtension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseSegmentName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, segmentFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripSegmentName, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFileNames, t_IndexFileNames, ::java::lang::Object, IndexFileNames, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexFileNames::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFileNames), module, "IndexFileNames", 0);
        }

        void t_IndexFileNames::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "class_", make_descriptor(IndexFileNames::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "wrapfn_", make_descriptor(t_IndexFileNames::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexFileNames::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "CODEC_FILE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*IndexFileNames::CODEC_FILE_PATTERN)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_ENTRIES_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "GEN_EXTENSION", make_descriptor(j2p(*IndexFileNames::GEN_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "INDEX_EXTENSIONS", make_descriptor(JArray<jstring>(IndexFileNames::INDEX_EXTENSIONS->this$).wrap()));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS", make_descriptor(j2p(*IndexFileNames::SEGMENTS)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS_GEN", make_descriptor(j2p(*IndexFileNames::SEGMENTS_GEN)));
        }

        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFileNames::initializeClass, 1)))
            return NULL;
          return t_IndexFileNames::wrap_Object(IndexFileNames(((t_IndexFileNames *) arg)->object.this$));
        }
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFileNames::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ssJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::fileNameFromGeneration(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "fileNameFromGeneration", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::matchesExtension(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "matchesExtension", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "parseSegmentName", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::segmentFileName(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "segmentFileName", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripSegmentName", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMDirichletSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMDirichletSimilarity::class$ = NULL;
          jmethodID *LMDirichletSimilarity::mids$ = NULL;
          bool LMDirichletSimilarity::live$ = false;

          jclass LMDirichletSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMDirichletSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMDirichletSimilarity::LMDirichletSimilarity() : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMDirichletSimilarity::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          ::java::lang::String LMDirichletSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self);
          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args);
          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data);
          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data);
          static PyGetSetDef t_LMDirichletSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, mu),
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMDirichletSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMDirichletSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getMu, METH_NOARGS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMDirichletSimilarity, t_LMDirichletSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMDirichletSimilarity, t_LMDirichletSimilarity_init_, 0, 0, t_LMDirichletSimilarity__fields_, 0, 0);

          void t_LMDirichletSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMDirichletSimilarity), module, "LMDirichletSimilarity", 0);
          }

          void t_LMDirichletSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "class_", make_descriptor(LMDirichletSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMDirichletSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMDirichletSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMDirichletSimilarity::wrap_Object(LMDirichletSimilarity(((t_LMDirichletSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMDirichletSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMDirichletSimilarity object((jobject) NULL);

                INT_CALL(object = LMDirichletSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jfloat a0;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMDirichletSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CollisionMap.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CollisionMap::class$ = NULL;
            jmethodID *CollisionMap::mids$ = NULL;
            bool CollisionMap::live$ = false;

            jclass CollisionMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CollisionMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addLabel_71708aa9] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;II)I");
                mids$[mid_addLabelOffset_d3236aa4] = env->getMethodID(cls, "addLabelOffset", "(III)V");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_7ba580b7] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)I");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint CollisionMap::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1, jint a2) const
            {
              return env->callIntMethod(this$, mids$[mid_addLabel_71708aa9], a0.this$, a1, a2);
            }

            void CollisionMap::addLabelOffset(jint a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabelOffset_d3236aa4], a0, a1, a2);
            }

            jint CollisionMap::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jint CollisionMap::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_get_7ba580b7], a0.this$, a1);
            }

            jint CollisionMap::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self);
            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_size(t_CollisionMap *self);

            static PyMethodDef t_CollisionMap__methods_[] = {
              DECLARE_METHOD(t_CollisionMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, addLabelOffset, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CollisionMap, get, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CollisionMap, t_CollisionMap, ::java::lang::Object, CollisionMap, abstract_init, 0, 0, 0, 0, 0);

            void t_CollisionMap::install(PyObject *module)
            {
              installType(&PY_TYPE(CollisionMap), module, "CollisionMap", 0);
            }

            void t_CollisionMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "class_", make_descriptor(CollisionMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "wrapfn_", make_descriptor(t_CollisionMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CollisionMap::initializeClass, 1)))
                return NULL;
              return t_CollisionMap::wrap_Object(CollisionMap(((t_CollisionMap *) arg)->object.this$));
            }
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CollisionMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "kII", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.addLabel(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addLabelOffset(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabelOffset", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.get(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_size(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PrefixWildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *PrefixWildcardQueryNodeBuilder::mids$ = NULL;
              bool PrefixWildcardQueryNodeBuilder::live$ = false;

              jclass PrefixWildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_652a8ae7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PrefixQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNodeBuilder::PrefixWildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PrefixQuery PrefixWildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PrefixQuery(env->callObjectMethod(this$, mids$[mid_build_652a8ae7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PrefixWildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder, ::java::lang::Object, PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNodeBuilder), module, "PrefixWildcardQueryNodeBuilder", 0);
              }

              void t_PrefixWildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNodeBuilder::wrap_Object(PrefixWildcardQueryNodeBuilder(((t_PrefixWildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PrefixWildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PrefixWildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PrefixQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PrefixQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer$Resettable::class$ = NULL;
        jmethodID *RollingBuffer$Resettable::mids$ = NULL;
        bool RollingBuffer$Resettable::live$ = false;

        jclass RollingBuffer$Resettable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer$Resettable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void RollingBuffer$Resettable::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args);
        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self);
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data);
        static PyGetSetDef t_RollingBuffer$Resettable__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer$Resettable, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer$Resettable__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer$Resettable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer$Resettable, t_RollingBuffer$Resettable, ::java::lang::Object, RollingBuffer$Resettable, abstract_init, 0, 0, t_RollingBuffer$Resettable__fields_, 0, 0);
        PyObject *t_RollingBuffer$Resettable::wrap_Object(const RollingBuffer$Resettable& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer$Resettable::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer$Resettable::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer$Resettable), module, "RollingBuffer$Resettable", 0);
        }

        void t_RollingBuffer$Resettable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "class_", make_descriptor(RollingBuffer$Resettable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer$Resettable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer$Resettable::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer$Resettable::wrap_Object(RollingBuffer$Resettable(((t_RollingBuffer$Resettable *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer$Resettable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilter::class$ = NULL;
          jmethodID *RussianLightStemFilter::mids$ = NULL;
          bool RussianLightStemFilter::live$ = false;

          jclass RussianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilter::RussianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RussianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilter, t_RussianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, RussianLightStemFilter, t_RussianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilter), module, "RussianLightStemFilter", 0);
          }

          void t_RussianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "class_", make_descriptor(RussianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilter::wrap_Object(RussianLightStemFilter(((t_RussianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RussianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RussianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizer::class$ = NULL;
          jmethodID *PersianNormalizer::mids$ = NULL;
          bool PersianNormalizer::live$ = false;
          jchar PersianNormalizer::FARSI_YEH = (jchar) 0;
          jchar PersianNormalizer::HAMZA_ABOVE = (jchar) 0;
          jchar PersianNormalizer::HEH = (jchar) 0;
          jchar PersianNormalizer::HEH_GOAL = (jchar) 0;
          jchar PersianNormalizer::HEH_YEH = (jchar) 0;
          jchar PersianNormalizer::KAF = (jchar) 0;
          jchar PersianNormalizer::KEHEH = (jchar) 0;
          jchar PersianNormalizer::YEH = (jchar) 0;
          jchar PersianNormalizer::YEH_BARREE = (jchar) 0;

          jclass PersianNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FARSI_YEH = env->getStaticCharField(cls, "FARSI_YEH");
              HAMZA_ABOVE = env->getStaticCharField(cls, "HAMZA_ABOVE");
              HEH = env->getStaticCharField(cls, "HEH");
              HEH_GOAL = env->getStaticCharField(cls, "HEH_GOAL");
              HEH_YEH = env->getStaticCharField(cls, "HEH_YEH");
              KAF = env->getStaticCharField(cls, "KAF");
              KEHEH = env->getStaticCharField(cls, "KEHEH");
              YEH = env->getStaticCharField(cls, "YEH");
              YEH_BARREE = env->getStaticCharField(cls, "YEH_BARREE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizer::PersianNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PersianNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args);

          static PyMethodDef t_PersianNormalizer__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizer, t_PersianNormalizer, ::java::lang::Object, PersianNormalizer, t_PersianNormalizer_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizer), module, "PersianNormalizer", 0);
          }

          void t_PersianNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "class_", make_descriptor(PersianNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "FARSI_YEH", make_descriptor(PersianNormalizer::FARSI_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HAMZA_ABOVE", make_descriptor(PersianNormalizer::HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH", make_descriptor(PersianNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_GOAL", make_descriptor(PersianNormalizer::HEH_GOAL));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_YEH", make_descriptor(PersianNormalizer::HEH_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KAF", make_descriptor(PersianNormalizer::KAF));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KEHEH", make_descriptor(PersianNormalizer::KEHEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH", make_descriptor(PersianNormalizer::YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH_BARREE", make_descriptor(PersianNormalizer::YEH_BARREE));
          }

          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizer::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizer::wrap_Object(PersianNormalizer(((t_PersianNormalizer *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds)
          {
            PersianNormalizer object((jobject) NULL);

            INT_CALL(object = PersianNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRange::class$ = NULL;
          jmethodID *DoubleRange::mids$ = NULL;
          jfieldID *DoubleRange::fids$ = NULL;
          bool DoubleRange::live$ = false;

          jclass DoubleRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ac9f76c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DZDZ)V");
              mids$[mid_accept_5d1c7649] = env->getMethodID(cls, "accept", "(D)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "D");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "D");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRange::DoubleRange(const ::java::lang::String & a0, jdouble a1, jboolean a2, jdouble a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1ac9f76c, a0.this$, a1, a2, a3, a4)) {}

          jboolean DoubleRange::accept(jdouble a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_5d1c7649], a0);
          }

          ::org::apache::lucene::search::Filter DoubleRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String DoubleRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jdouble DoubleRange::_get_max() const
          {
            return env->getDoubleField(this$, fids$[fid_max]);
          }

          jboolean DoubleRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jdouble DoubleRange::_get_min() const
          {
            return env->getDoubleField(this$, fids$[fid_min]);
          }

          jboolean DoubleRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg);
          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data);

          static PyGetSetDef t_DoubleRange__fields_[] = {
            DECLARE_GET_FIELD(t_DoubleRange, max),
            DECLARE_GET_FIELD(t_DoubleRange, maxInclusive),
            DECLARE_GET_FIELD(t_DoubleRange, min),
            DECLARE_GET_FIELD(t_DoubleRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRange__methods_[] = {
            DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, accept, METH_O),
            DECLARE_METHOD(t_DoubleRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRange, t_DoubleRange, ::org::apache::lucene::facet::range::Range, DoubleRange, t_DoubleRange_init_, 0, 0, t_DoubleRange__fields_, 0, 0);

          void t_DoubleRange::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRange), module, "DoubleRange", 0);
          }

          void t_DoubleRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "class_", make_descriptor(DoubleRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
              return NULL;
            return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
          }
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            jboolean a2;
            jdouble a3;
            jboolean a4;
            DoubleRange object((jobject) NULL);

            if (!parseArgs(args, "sDZDZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = DoubleRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg)
          {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_max());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_min());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermGroupFacetCollector.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermGroupFacetCollector::class$ = NULL;
            jmethodID *TermGroupFacetCollector::mids$ = NULL;
            bool TermGroupFacetCollector::live$ = false;

            jclass TermGroupFacetCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermGroupFacetCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_createTermGroupFacetCollector_36bd7ed1] = env->getStaticMethodID(cls, "createTermGroupFacetCollector", "(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/search/grouping/term/TermGroupFacetCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermGroupFacetCollector TermGroupFacetCollector::createTermGroupFacetCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
            {
              jclass cls = env->getClass(initializeClass);
              return TermGroupFacetCollector(env->callStaticObjectMethod(cls, mids$[mid_createTermGroupFacetCollector_36bd7ed1], a0.this$, a1.this$, a2, a3.this$, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_TermGroupFacetCollector__methods_[] = {
              DECLARE_METHOD(t_TermGroupFacetCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, createTermGroupFacetCollector, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermGroupFacetCollector, t_TermGroupFacetCollector, ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector, TermGroupFacetCollector, abstract_init, 0, 0, 0, 0, 0);

            void t_TermGroupFacetCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermGroupFacetCollector), module, "TermGroupFacetCollector", 0);
            }

            void t_TermGroupFacetCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "class_", make_descriptor(TermGroupFacetCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_TermGroupFacetCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermGroupFacetCollector::initializeClass, 1)))
                return NULL;
              return t_TermGroupFacetCollector::wrap_Object(TermGroupFacetCollector(((t_TermGroupFacetCollector *) arg)->object.this$));
            }
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermGroupFacetCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              TermGroupFacetCollector result((jobject) NULL);

              if (!parseArgs(args, "ssZkI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermGroupFacetCollector::createTermGroupFacetCollector(a0, a1, a2, a3, a4));
                return t_TermGroupFacetCollector::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "createTermGroupFacetCollector", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderUtil::class$ = NULL;
        jmethodID *ReaderUtil::mids$ = NULL;
        bool ReaderUtil::live$ = false;

        jclass ReaderUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTopLevelContext_4ecc3919] = env->getStaticMethodID(cls, "getTopLevelContext", "(Lorg/apache/lucene/index/IndexReaderContext;)Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_subIndex_dd2db701] = env->getStaticMethodID(cls, "subIndex", "(I[I)I");
            mids$[mid_subIndex_f2e17962] = env->getStaticMethodID(cls, "subIndex", "(ILjava/util/List;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexReaderContext ReaderUtil::getTopLevelContext(const ::org::apache::lucene::index::IndexReaderContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::IndexReaderContext(env->callStaticObjectMethod(cls, mids$[mid_getTopLevelContext_4ecc3919], a0.this$));
        }

        jint ReaderUtil::subIndex(jint a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_dd2db701], a0, a1.this$);
        }

        jint ReaderUtil::subIndex(jint a0, const ::java::util::List & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_f2e17962], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ReaderUtil__methods_[] = {
          DECLARE_METHOD(t_ReaderUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, getTopLevelContext, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, subIndex, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderUtil, t_ReaderUtil, ::java::lang::Object, ReaderUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ReaderUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderUtil), module, "ReaderUtil", 0);
        }

        void t_ReaderUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "class_", make_descriptor(ReaderUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "wrapfn_", make_descriptor(t_ReaderUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderUtil::initializeClass, 1)))
            return NULL;
          return t_ReaderUtil::wrap_Object(ReaderUtil(((t_ReaderUtil *) arg)->object.this$));
        }
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::getTopLevelContext(a0));
            return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTopLevelContext", arg);
          return NULL;
        }

        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              JArray< jint > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "I[I", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jint a0;
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              jint result;

              if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "subIndex", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsWriter::class$ = NULL;
          jmethodID *Lucene41PostingsWriter::mids$ = NULL;
          bool Lucene41PostingsWriter::live$ = false;

          jclass Lucene41PostingsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3be9bed9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_init$_a7564e76] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;F)V");
              mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
              mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
              mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
              mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
              mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");
              mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_3be9bed9, a0.this$)) {}

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, jfloat a1) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_a7564e76, a0.this$, a1)) {}

          void Lucene41PostingsWriter::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
          }

          void Lucene41PostingsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsWriter::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          void Lucene41PostingsWriter::finishDoc() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
          }

          void Lucene41PostingsWriter::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
          }

          void Lucene41PostingsWriter::init(const ::org::apache::lucene::store::IndexOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
          }

          jint Lucene41PostingsWriter::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
          }

          void Lucene41PostingsWriter::startDoc(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
          }

          void Lucene41PostingsWriter::startTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Lucene41PostingsWriter__fields_[] = {
            DECLARE_SET_FIELD(t_Lucene41PostingsWriter, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene41PostingsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, encodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, setField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsWriter, t_Lucene41PostingsWriter, ::org::apache::lucene::codecs::PostingsWriterBase, Lucene41PostingsWriter, t_Lucene41PostingsWriter_init_, 0, 0, t_Lucene41PostingsWriter__fields_, 0, 0);

          void t_Lucene41PostingsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsWriter), module, "Lucene41PostingsWriter", 0);
          }

          void t_Lucene41PostingsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "class_", make_descriptor(Lucene41PostingsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsWriter::wrap_Object(Lucene41PostingsWriter(((t_Lucene41PostingsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                jfloat a1;
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "encodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDoc());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.finishTerm(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setField(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "setField", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.startDoc(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
              {
                INT_CALL(self->object.setField(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "field", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *ParseException::class$ = NULL;
            jmethodID *ParseException::mids$ = NULL;
            jfieldID *ParseException::fids$ = NULL;
            bool ParseException::live$ = false;

            jclass ParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/ParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_dea8e26f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/Token;[[I[Ljava/lang/String;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ParseException::ParseException(const ::org::apache::lucene::queryparser::surround::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_dea8e26f, a0.this$, a1.this$, a2.this$)) {}

            ::org::apache::lucene::queryparser::surround::parser::Token ParseException::_get_currentToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
            }

            void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
            }

            JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
            {
              return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
            }

            void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
            {
              env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
            }

            JArray< ::java::lang::String > ParseException::_get_tokenImage() const
            {
              return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
            }

            void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
            {
              env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

            static PyGetSetDef t_ParseException__fields_[] = {
              DECLARE_GETSET_FIELD(t_ParseException, currentToken),
              DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
              DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ParseException__methods_[] = {
              DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

            void t_ParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(ParseException), module, "ParseException", 0);
            }

            void t_ParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                return NULL;
              return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
            }
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ParseException object((jobject) NULL);

                  INT_CALL(object = ParseException());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::parser::Token a0((jobject) NULL);
                  JArray< JArray< jint > > a1((jobject) NULL);
                  JArray< ::java::lang::String > a2((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = ParseException(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_currentToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_currentToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_expectedTokenSequences());
              return JArray<jobject>(value.this$).wrap(NULL);
            }
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              if (!parseArg(arg, "[[I", &value))
              {
                INT_CALL(self->object._set_expectedTokenSequences(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_tokenImage());
              return JArray<jstring>(value.this$).wrap();
            }
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object._set_tokenImage(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemmer::class$ = NULL;
          jmethodID *FrenchStemmer::mids$ = NULL;
          bool FrenchStemmer::live$ = false;

          jclass FrenchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemmer::FrenchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FrenchStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::java::lang::Object, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
          }

          void t_FrenchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchStemmer object((jobject) NULL);

            INT_CALL(object = FrenchStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserConstants::class$ = NULL;
          jmethodID *QueryParserConstants::mids$ = NULL;
          bool QueryParserConstants::live$ = false;
          jint QueryParserConstants::AND = (jint) 0;
          jint QueryParserConstants::BAREOPER = (jint) 0;
          jint QueryParserConstants::Boost = (jint) 0;
          jint QueryParserConstants::CARAT = (jint) 0;
          jint QueryParserConstants::COLON = (jint) 0;
          jint QueryParserConstants::DEFAULT = (jint) 0;
          jint QueryParserConstants::EOF = (jint) 0;
          jint QueryParserConstants::FUZZY_SLOP = (jint) 0;
          jint QueryParserConstants::LPAREN = (jint) 0;
          jint QueryParserConstants::MINUS = (jint) 0;
          jint QueryParserConstants::NOT = (jint) 0;
          jint QueryParserConstants::NUMBER = (jint) 0;
          jint QueryParserConstants::OR = (jint) 0;
          jint QueryParserConstants::PLUS = (jint) 0;
          jint QueryParserConstants::PREFIXTERM = (jint) 0;
          jint QueryParserConstants::QUOTED = (jint) 0;
          jint QueryParserConstants::RANGEEX_END = (jint) 0;
          jint QueryParserConstants::RANGEEX_START = (jint) 0;
          jint QueryParserConstants::RANGEIN_END = (jint) 0;
          jint QueryParserConstants::RANGEIN_START = (jint) 0;
          jint QueryParserConstants::RANGE_GOOP = (jint) 0;
          jint QueryParserConstants::RANGE_QUOTED = (jint) 0;
          jint QueryParserConstants::RANGE_TO = (jint) 0;
          jint QueryParserConstants::REGEXPTERM = (jint) 0;
          jint QueryParserConstants::RPAREN = (jint) 0;
          jint QueryParserConstants::Range = (jint) 0;
          jint QueryParserConstants::STAR = (jint) 0;
          jint QueryParserConstants::TERM = (jint) 0;
          jint QueryParserConstants::WILDTERM = (jint) 0;
          jint QueryParserConstants::_ESCAPED_CHAR = (jint) 0;
          jint QueryParserConstants::_NUM_CHAR = (jint) 0;
          jint QueryParserConstants::_QUOTED_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_START_CHAR = (jint) 0;
          jint QueryParserConstants::_WHITESPACE = (jint) 0;
          JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

          jclass QueryParserConstants::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserConstants");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = env->getStaticIntField(cls, "AND");
              BAREOPER = env->getStaticIntField(cls, "BAREOPER");
              Boost = env->getStaticIntField(cls, "Boost");
              CARAT = env->getStaticIntField(cls, "CARAT");
              COLON = env->getStaticIntField(cls, "COLON");
              DEFAULT = env->getStaticIntField(cls, "DEFAULT");
              EOF = env->getStaticIntField(cls, "EOF");
              FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
              LPAREN = env->getStaticIntField(cls, "LPAREN");
              MINUS = env->getStaticIntField(cls, "MINUS");
              NOT = env->getStaticIntField(cls, "NOT");
              NUMBER = env->getStaticIntField(cls, "NUMBER");
              OR = env->getStaticIntField(cls, "OR");
              PLUS = env->getStaticIntField(cls, "PLUS");
              PREFIXTERM = env->getStaticIntField(cls, "PREFIXTERM");
              QUOTED = env->getStaticIntField(cls, "QUOTED");
              RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
              RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
              RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
              RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
              RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
              RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
              RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
              REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
              RPAREN = env->getStaticIntField(cls, "RPAREN");
              Range = env->getStaticIntField(cls, "Range");
              STAR = env->getStaticIntField(cls, "STAR");
              TERM = env->getStaticIntField(cls, "TERM");
              WILDTERM = env->getStaticIntField(cls, "WILDTERM");
              _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
              _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
              _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
              _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
              _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
              _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
              tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryParserConstants__methods_[] = {
            DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryParserConstants::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
          }

          void t_QueryParserConstants::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserConstants::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "BAREOPER", make_descriptor(QueryParserConstants::BAREOPER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(QueryParserConstants::FUZZY_SLOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "MINUS", make_descriptor(QueryParserConstants::MINUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PLUS", make_descriptor(QueryParserConstants::PLUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PREFIXTERM", make_descriptor(QueryParserConstants::PREFIXTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_END", make_descriptor(QueryParserConstants::RANGEEX_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_START", make_descriptor(QueryParserConstants::RANGEEX_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_END", make_descriptor(QueryParserConstants::RANGEIN_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_START", make_descriptor(QueryParserConstants::RANGEIN_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(QueryParserConstants::RANGE_GOOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(QueryParserConstants::RANGE_QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_TO", make_descriptor(QueryParserConstants::RANGE_TO));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "REGEXPTERM", make_descriptor(QueryParserConstants::REGEXPTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Range", make_descriptor(QueryParserConstants::Range));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "STAR", make_descriptor(QueryParserConstants::STAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "WILDTERM", make_descriptor(QueryParserConstants::WILDTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(QueryParserConstants::_ESCAPED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(QueryParserConstants::_QUOTED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(QueryParserConstants::_TERM_START_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
          }

          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
              return NULL;
            return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
          }
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/WholeBreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *WholeBreakIterator::class$ = NULL;
          jmethodID *WholeBreakIterator::mids$ = NULL;
          bool WholeBreakIterator::live$ = false;

          jclass WholeBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/WholeBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WholeBreakIterator::WholeBreakIterator() : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WholeBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
          }

          jint WholeBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
          }

          jint WholeBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
          }

          jint WholeBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
          }

          jint WholeBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }

          jint WholeBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
          }

          jint WholeBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
          }

          jint WholeBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args);

          static PyMethodDef t_WholeBreakIterator__methods_[] = {
            DECLARE_METHOD(t_WholeBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, previous, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WholeBreakIterator, t_WholeBreakIterator, ::java::text::BreakIterator, WholeBreakIterator, t_WholeBreakIterator_init_, 0, 0, 0, 0, 0);

          void t_WholeBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WholeBreakIterator), module, "WholeBreakIterator", 0);
          }

          void t_WholeBreakIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "class_", make_descriptor(WholeBreakIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "wrapfn_", make_descriptor(t_WholeBreakIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WholeBreakIterator::initializeClass, 1)))
              return NULL;
            return t_WholeBreakIterator::wrap_Object(WholeBreakIterator(((t_WholeBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WholeBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            WholeBreakIterator object((jobject) NULL);

            INT_CALL(object = WholeBreakIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyInt_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "previous", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Query::class$ = NULL;
        jmethodID *Query::mids$ = NULL;
        bool Query::live$ = false;

        jclass Query::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Query");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_97e3851a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Query::Query() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Query Query::clone() const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_clone_97e3851a]));
        }

        ::org::apache::lucene::search::Weight Query::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean Query::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void Query::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat Query::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint Query::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        Query Query::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void Query::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        ::java::lang::String Query::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Query::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Query_clone(t_Query *self);
        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg);
        static PyObject *t_Query_equals(t_Query *self, PyObject *args);
        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg);
        static PyObject *t_Query_getBoost(t_Query *self);
        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args);
        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg);
        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg);
        static PyObject *t_Query_toString(t_Query *self, PyObject *args);
        static PyObject *t_Query_get__boost(t_Query *self, void *data);
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data);
        static PyGetSetDef t_Query__fields_[] = {
          DECLARE_GETSET_FIELD(t_Query, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Query__methods_[] = {
          DECLARE_METHOD(t_Query, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, clone, METH_NOARGS),
          DECLARE_METHOD(t_Query, createWeight, METH_O),
          DECLARE_METHOD(t_Query, equals, METH_VARARGS),
          DECLARE_METHOD(t_Query, extractTerms, METH_O),
          DECLARE_METHOD(t_Query, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_Query, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Query, rewrite, METH_O),
          DECLARE_METHOD(t_Query, setBoost, METH_O),
          DECLARE_METHOD(t_Query, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Query, t_Query, ::java::lang::Object, Query, t_Query_init_, 0, 0, t_Query__fields_, 0, 0);

        void t_Query::install(PyObject *module)
        {
          installType(&PY_TYPE(Query), module, "Query", 0);
        }

        void t_Query::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "class_", make_descriptor(Query::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "wrapfn_", make_descriptor(t_Query::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Query::initializeClass, 1)))
            return NULL;
          return t_Query::wrap_Object(Query(((t_Query *) arg)->object.this$));
        }
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Query::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds)
        {
          Query object((jobject) NULL);

          INT_CALL(object = Query());
          self->object = object;

          return 0;
        }

        static PyObject *t_Query_clone(t_Query *self)
        {
          Query result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_Query::wrap_Object(result);
        }

        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createWeight", arg);
          return NULL;
        }

        static PyObject *t_Query_equals(t_Query *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "extractTerms", arg);
          return NULL;
        }

        static PyObject *t_Query_getBoost(t_Query *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Query_toString(t_Query *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Query_get__boost(t_Query *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxDocValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxDocValueSource::class$ = NULL;
            jmethodID *MaxDocValueSource::mids$ = NULL;
            bool MaxDocValueSource::live$ = false;

            jclass MaxDocValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxDocValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxDocValueSource::MaxDocValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void MaxDocValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MaxDocValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MaxDocValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MaxDocValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MaxDocValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MaxDocValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self);

            static PyMethodDef t_MaxDocValueSource__methods_[] = {
              DECLARE_METHOD(t_MaxDocValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxDocValueSource, t_MaxDocValueSource, ::org::apache::lucene::queries::function::ValueSource, MaxDocValueSource, t_MaxDocValueSource_init_, 0, 0, 0, 0, 0);

            void t_MaxDocValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxDocValueSource), module, "MaxDocValueSource", 0);
            }

            void t_MaxDocValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "class_", make_descriptor(MaxDocValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "wrapfn_", make_descriptor(t_MaxDocValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxDocValueSource::initializeClass, 1)))
                return NULL;
              return t_MaxDocValueSource::wrap_Object(MaxDocValueSource(((t_MaxDocValueSource *) arg)->object.this$));
            }
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxDocValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds)
            {
              MaxDocValueSource object((jobject) NULL);

              INT_CALL(object = MaxDocValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixFilter.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixFilter::class$ = NULL;
        jmethodID *PrefixFilter::mids$ = NULL;
        bool PrefixFilter::live$ = false;

        jclass PrefixFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixFilter::PrefixFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term PrefixFilter::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        ::java::lang::String PrefixFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args);
        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self);
        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args);
        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data);
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data);
        static PyGetSetDef t_PrefixFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixFilter, prefix),
          DECLARE_GET_FIELD(t_PrefixFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixFilter__methods_[] = {
          DECLARE_METHOD(t_PrefixFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_PrefixFilter, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixFilter, t_PrefixFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, PrefixFilter, t_PrefixFilter_init_, 0, 0, t_PrefixFilter__fields_, 0, 0);
        PyObject *t_PrefixFilter::wrap_Object(const PrefixFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PrefixFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PrefixFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixFilter), module, "PrefixFilter", 0);
        }

        void t_PrefixFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "class_", make_descriptor(PrefixFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixFilter::initializeClass, 1)))
            return NULL;
          return t_PrefixFilter::wrap_Object(PrefixFilter(((t_PrefixFilter *) arg)->object.this$));
        }
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixFilter(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(PrefixQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Format::class$ = NULL;
          jmethodID *PackedInts$Format::mids$ = NULL;
          jfieldID *PackedInts$Format::fids$ = NULL;
          bool PackedInts$Format::live$ = false;
          PackedInts$Format *PackedInts$Format::PACKED = NULL;
          PackedInts$Format *PackedInts$Format::PACKED_SINGLE_BLOCK = NULL;

          jclass PackedInts$Format::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Format");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byId_926ce3b1] = env->getStaticMethodID(cls, "byId", "(I)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_byteCount_d3236ab8] = env->getMethodID(cls, "byteCount", "(III)J");
              mids$[mid_getId_54c6a179] = env->getMethodID(cls, "getId", "()I");
              mids$[mid_isSupported_39c7bd30] = env->getMethodID(cls, "isSupported", "(I)Z");
              mids$[mid_longCount_d3236abb] = env->getMethodID(cls, "longCount", "(III)I");
              mids$[mid_overheadPerValue_39c7bd2c] = env->getMethodID(cls, "overheadPerValue", "(I)F");
              mids$[mid_overheadRatio_39c7bd2c] = env->getMethodID(cls, "overheadRatio", "(I)F");
              mids$[mid_valueOf_ad915ab1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_values_d84982f7] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/packed/PackedInts$Format;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_id] = env->getFieldID(cls, "id", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PACKED = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              PACKED_SINGLE_BLOCK = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED_SINGLE_BLOCK", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Format PackedInts$Format::byId(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_byId_926ce3b1], a0));
          }

          jlong PackedInts$Format::byteCount(jint a0, jint a1, jint a2) const
          {
            return env->callLongMethod(this$, mids$[mid_byteCount_d3236ab8], a0, a1, a2);
          }

          jint PackedInts$Format::getId() const
          {
            return env->callIntMethod(this$, mids$[mid_getId_54c6a179]);
          }

          jboolean PackedInts$Format::isSupported(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSupported_39c7bd30], a0);
          }

          jint PackedInts$Format::longCount(jint a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_longCount_d3236abb], a0, a1, a2);
          }

          jfloat PackedInts$Format::overheadPerValue(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadPerValue_39c7bd2c], a0);
          }

          jfloat PackedInts$Format::overheadRatio(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadRatio_39c7bd2c], a0);
          }

          PackedInts$Format PackedInts$Format::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad915ab1], a0.this$));
          }

          JArray< PackedInts$Format > PackedInts$Format::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< PackedInts$Format >(env->callStaticObjectMethod(cls, mids$[mid_values_d84982f7]));
          }

          jint PackedInts$Format::_get_id() const
          {
            return env->getIntField(this$, fids$[fid_id]);
          }

          void PackedInts$Format::_set_id(jint a0) const
          {
            env->setIntField(this$, fids$[fid_id], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self);
          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts$Format_values(PyTypeObject *type);

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data);
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data);
          static PyGetSetDef t_PackedInts$Format__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Format, id),
            DECLARE_GET_FIELD(t_PackedInts$Format, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Format__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Format, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, of_, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, byId, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, byteCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, getId, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Format, isSupported, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, longCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, overheadPerValue, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, overheadRatio, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Format, t_PackedInts$Format, ::java::lang::Enum, PackedInts$Format, abstract_init, 0, 0, t_PackedInts$Format__fields_, 0, 0);
          PyObject *t_PackedInts$Format::wrap_Object(const PackedInts$Format& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PackedInts$Format::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PackedInts$Format::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Format), module, "PackedInts$Format", 0);
          }

          void t_PackedInts$Format::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "class_", make_descriptor(PackedInts$Format::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Format::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts$Format::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED)));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED_SINGLE_BLOCK", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED_SINGLE_BLOCK)));
          }

          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Format::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Format::wrap_Object(PackedInts$Format(((t_PackedInts$Format *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Format::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            PackedInts$Format result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::byId(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "byId", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jlong result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.byteCount(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "byteCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getId());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isSupported(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSupported", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.longCount(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "longCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadPerValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadPerValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadRatio(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadRatio", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            PackedInts$Format result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::valueOf(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_PackedInts$Format_values(PyTypeObject *type)
          {
            JArray< PackedInts$Format > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::values());
            return JArray<jobject>(result.this$).wrap(t_PackedInts$Format::wrap_jobject);
          }
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getId());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/AbstractEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *AbstractEncoder::class$ = NULL;
          jmethodID *AbstractEncoder::mids$ = NULL;
          bool AbstractEncoder::live$ = false;

          jclass AbstractEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/AbstractEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractEncoder::AbstractEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef AbstractEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg);

          static PyMethodDef t_AbstractEncoder__methods_[] = {
            DECLARE_METHOD(t_AbstractEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, encode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractEncoder, t_AbstractEncoder, ::java::lang::Object, AbstractEncoder, t_AbstractEncoder_init_, 0, 0, 0, 0, 0);

          void t_AbstractEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractEncoder), module, "AbstractEncoder", 0);
          }

          void t_AbstractEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "class_", make_descriptor(AbstractEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "wrapfn_", make_descriptor(t_AbstractEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractEncoder::initializeClass, 1)))
              return NULL;
            return t_AbstractEncoder::wrap_Object(AbstractEncoder(((t_AbstractEncoder *) arg)->object.this$));
          }
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds)
          {
            AbstractEncoder object((jobject) NULL);

            INT_CALL(object = AbstractEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg)
          {
            JArray< jchar > a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "[C", &a0))
            {
              OBJ_CALL(result = self->object.encode(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntroSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntroSorter::class$ = NULL;
        jmethodID *IntroSorter::mids$ = NULL;
        bool IntroSorter::live$ = false;

        jclass IntroSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntroSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_setPivot_39c7bd3c] = env->getMethodID(cls, "setPivot", "(I)V");
            mids$[mid_comparePivot_39c7bd23] = env->getMethodID(cls, "comparePivot", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntroSorter::IntroSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntroSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args);

        static PyMethodDef t_IntroSorter__methods_[] = {
          DECLARE_METHOD(t_IntroSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntroSorter, t_IntroSorter, ::org::apache::lucene::util::Sorter, IntroSorter, t_IntroSorter_init_, 0, 0, 0, 0, 0);

        void t_IntroSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntroSorter), module, "IntroSorter", 0);
        }

        void t_IntroSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "class_", make_descriptor(IntroSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "wrapfn_", make_descriptor(t_IntroSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntroSorter::initializeClass, 1)))
            return NULL;
          return t_IntroSorter::wrap_Object(IntroSorter(((t_IntroSorter *) arg)->object.this$));
        }
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntroSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds)
        {
          IntroSorter object((jobject) NULL);

          INT_CALL(object = IntroSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntroSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilterFactory::class$ = NULL;
          jmethodID *HungarianLightStemFilterFactory::mids$ = NULL;
          bool HungarianLightStemFilterFactory::live$ = false;

          jclass HungarianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilterFactory::HungarianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HungarianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilterFactory), module, "HungarianLightStemFilterFactory", 0);
          }

          void t_HungarianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "class_", make_descriptor(HungarianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilterFactory::wrap_Object(HungarianLightStemFilterFactory(((t_HungarianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HungarianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HungarianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparatorSource.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparatorSource::class$ = NULL;
        jmethodID *PythonFieldComparatorSource::mids$ = NULL;
        bool PythonFieldComparatorSource::live$ = false;

        jclass PythonFieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparatorSource::PythonFieldComparatorSource() : ::org::apache::lucene::search::FieldComparatorSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparatorSource::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparatorSource::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparatorSource::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self);
        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args);
        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3);
        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data);
        static PyGetSetDef t_PythonFieldComparatorSource__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparatorSource, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparatorSource, t_PythonFieldComparatorSource, ::org::apache::lucene::search::FieldComparatorSource, PythonFieldComparatorSource, t_PythonFieldComparatorSource_init_, 0, 0, t_PythonFieldComparatorSource__fields_, 0, 0);

        void t_PythonFieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparatorSource), module, "PythonFieldComparatorSource", 1);
        }

        void t_PythonFieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "class_", make_descriptor(PythonFieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparatorSource::initializeClass);
          JNINativeMethod methods[] = {
            { "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparatorSource_newComparator0 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparatorSource_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparatorSource::wrap_Object(PythonFieldComparatorSource(((t_PythonFieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparatorSource object((jobject) NULL);

          INT_CALL(object = PythonFieldComparatorSource());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o3 = (a3 ? Py_True : Py_False);
          PyObject *result = PyObject_CallMethod(obj, "newComparator", "OiiO", o0, (int) a1, (int) a2, o3);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("newComparator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Attribute::class$ = NULL;
        jmethodID *Attribute::mids$ = NULL;
        bool Attribute::live$ = false;

        jclass Attribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Attribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Attribute__methods_[] = {
          DECLARE_METHOD(t_Attribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Attribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Attribute, t_Attribute, ::java::lang::Object, Attribute, abstract_init, 0, 0, 0, 0, 0);

        void t_Attribute::install(PyObject *module)
        {
          installType(&PY_TYPE(Attribute), module, "Attribute", 0);
        }

        void t_Attribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "class_", make_descriptor(Attribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "wrapfn_", make_descriptor(t_Attribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Attribute::initializeClass, 1)))
            return NULL;
          return t_Attribute::wrap_Object(Attribute(((t_Attribute *) arg)->object.this$));
        }
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Attribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig::class$ = NULL;
        jmethodID *FacetsConfig::mids$ = NULL;
        bool FacetsConfig::live$ = false;
        ::org::apache::lucene::facet::FacetsConfig$DimConfig *FacetsConfig::DEFAULT_DIM_CONFIG = NULL;
        ::java::lang::String *FacetsConfig::DEFAULT_INDEX_FIELD_NAME = NULL;

        jclass FacetsConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_build_4faaf947] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_build_ae4aef7e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyWriter;Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_getDimConfig_7d95dc61] = env->getMethodID(cls, "getDimConfig", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_getDimConfigs_db60befd] = env->getMethodID(cls, "getDimConfigs", "()Ljava/util/Map;");
            mids$[mid_pathToString_1034289b] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_pathToString_64aeb14d] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;I)Ljava/lang/String;");
            mids$[mid_pathToString_05f95d9d] = env->getStaticMethodID(cls, "pathToString", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setHierarchical_f3691645] = env->getMethodID(cls, "setHierarchical", "(Ljava/lang/String;Z)V");
            mids$[mid_setIndexFieldName_4a264742] = env->getMethodID(cls, "setIndexFieldName", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setMultiValued_f3691645] = env->getMethodID(cls, "setMultiValued", "(Ljava/lang/String;Z)V");
            mids$[mid_setRequireDimCount_f3691645] = env->getMethodID(cls, "setRequireDimCount", "(Ljava/lang/String;Z)V");
            mids$[mid_stringToPath_1f6a174f] = env->getStaticMethodID(cls, "stringToPath", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_getDefaultDimConfig_d06bca2f] = env->getMethodID(cls, "getDefaultDimConfig", "()Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_dedupAndEncode_14756a33] = env->getMethodID(cls, "dedupAndEncode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DIM_CONFIG = new ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->getStaticObjectField(cls, "DEFAULT_DIM_CONFIG", "Lorg/apache/lucene/facet/FacetsConfig$DimConfig;"));
            DEFAULT_INDEX_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_INDEX_FIELD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig::FacetsConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::document::Document & a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_4faaf947], a0.this$));
        }

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::facet::taxonomy::TaxonomyWriter & a0, const ::org::apache::lucene::document::Document & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_ae4aef7e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetsConfig$DimConfig FacetsConfig::getDimConfig(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->callObjectMethod(this$, mids$[mid_getDimConfig_7d95dc61], a0.this$));
        }

        ::java::util::Map FacetsConfig::getDimConfigs() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDimConfigs_db60befd]));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_1034289b], a0.this$));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_64aeb14d], a0.this$, a1));
        }

        ::java::lang::String FacetsConfig::pathToString(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_05f95d9d], a0.this$, a1.this$));
        }

        void FacetsConfig::setHierarchical(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setHierarchical_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setIndexFieldName(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexFieldName_4a264742], a0.this$, a1.this$);
        }

        void FacetsConfig::setMultiValued(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMultiValued_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setRequireDimCount(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRequireDimCount_f3691645], a0.this$, a1);
        }

        JArray< ::java::lang::String > FacetsConfig::stringToPath(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_stringToPath_1f6a174f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg);
        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self);
        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data);
        static PyGetSetDef t_FacetsConfig__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsConfig, dimConfigs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, build, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, getDimConfig, METH_O),
          DECLARE_METHOD(t_FacetsConfig, getDimConfigs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsConfig, pathToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, setHierarchical, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setIndexFieldName, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setMultiValued, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setRequireDimCount, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, stringToPath, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig, t_FacetsConfig, ::java::lang::Object, FacetsConfig, t_FacetsConfig_init_, 0, 0, t_FacetsConfig__fields_, 0, 0);

        void t_FacetsConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig), module, "FacetsConfig", 0);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DimConfig", make_descriptor(&PY_TYPE(FacetsConfig$DimConfig)));
        }

        void t_FacetsConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "class_", make_descriptor(FacetsConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetsConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_DIM_CONFIG", make_descriptor(::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(*FacetsConfig::DEFAULT_DIM_CONFIG)));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_INDEX_FIELD_NAME", make_descriptor(j2p(*FacetsConfig::DEFAULT_INDEX_FIELD_NAME)));
        }

        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig::wrap_Object(FacetsConfig(((t_FacetsConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::document::Document a0((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.build(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::facet::taxonomy::TaxonomyWriter a0((jobject) NULL);
              ::org::apache::lucene::document::Document a1((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::taxonomy::TaxonomyWriter::initializeClass, ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.build(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "build", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig$DimConfig result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDimConfig(a0));
            return ::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDimConfig", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::PY_TYPE(FacetsConfig$DimConfig));
        }

        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "pathToString", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setHierarchical(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHierarchical", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.setIndexFieldName(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexFieldName", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setMultiValued(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMultiValued", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setRequireDimCount(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRequireDimCount", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::stringToPath(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "stringToPath", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilter::class$ = NULL;
          jmethodID *CommonGramsFilter::mids$ = NULL;
          bool CommonGramsFilter::live$ = false;
          ::java::lang::String *CommonGramsFilter::GRAM_TYPE = NULL;

          jclass CommonGramsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GRAM_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "GRAM_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilter::CommonGramsFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          jboolean CommonGramsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CommonGramsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args);
          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args);

          static PyMethodDef t_CommonGramsFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilter, t_CommonGramsFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsFilter, t_CommonGramsFilter_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilter), module, "CommonGramsFilter", 0);
          }

          void t_CommonGramsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "class_", make_descriptor(CommonGramsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "GRAM_TYPE", make_descriptor(j2p(*CommonGramsFilter::GRAM_TYPE)));
          }

          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilter::wrap_Object(CommonGramsFilter(((t_CommonGramsFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
            PyTypeObject **p2;
            CommonGramsFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = CommonGramsFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/NoSuchElementException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *NoSuchElementException::class$ = NULL;
    jmethodID *NoSuchElementException::mids$ = NULL;
    bool NoSuchElementException::live$ = false;

    jclass NoSuchElementException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/NoSuchElementException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    NoSuchElementException::NoSuchElementException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    NoSuchElementException::NoSuchElementException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_NoSuchElementException__methods_[] = {
      DECLARE_METHOD(t_NoSuchElementException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NoSuchElementException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NoSuchElementException, t_NoSuchElementException, ::java::lang::RuntimeException, NoSuchElementException, t_NoSuchElementException_init_, 0, 0, 0, 0, 0);

    void t_NoSuchElementException::install(PyObject *module)
    {
      installType(&PY_TYPE(NoSuchElementException), module, "NoSuchElementException", 0);
    }

    void t_NoSuchElementException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "class_", make_descriptor(NoSuchElementException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchElementException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NoSuchElementException::initializeClass, 1)))
        return NULL;
      return t_NoSuchElementException::wrap_Object(NoSuchElementException(((t_NoSuchElementException *) arg)->object.this$));
    }
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NoSuchElementException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NoSuchElementException object((jobject) NULL);

          INT_CALL(object = NoSuchElementException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchElementException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchElementException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongDocValuesField::class$ = NULL;
        jmethodID *LongDocValuesField::mids$ = NULL;
        bool LongDocValuesField::live$ = false;

        jclass LongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongDocValuesField::LongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_LongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongDocValuesField, t_LongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, LongDocValuesField, t_LongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_LongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongDocValuesField), module, "LongDocValuesField", 0);
        }

        void t_LongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "class_", make_descriptor(LongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_LongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_LongDocValuesField::wrap_Object(LongDocValuesField(((t_LongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          LongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = LongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingInfixSuggester::class$ = NULL;
            jmethodID *AnalyzingInfixSuggester::mids$ = NULL;
            bool AnalyzingInfixSuggester::live$ = false;
            jint AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS = (jint) 0;

            jclass AnalyzingInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_3b9404b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_add_2d27343d] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_3273017a] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;IZZ)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_refresh_54c6a166] = env->getMethodID(cls, "refresh", "()V");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_update_2d27343d] = env->getMethodID(cls, "update", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getDirectory_c34cda9e] = env->getMethodID(cls, "getDirectory", "(Ljava/io/File;)Lorg/apache/lucene/store/Directory;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_highlight_6b3f1693] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_getIndexWriterConfig_04dea876] = env->getMethodID(cls, "getIndexWriterConfig", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_getLastTokenQuery_fbed2634] = env->getMethodID(cls, "getLastTokenQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_finishQuery_4a287f5d] = env->getMethodID(cls, "finishQuery", "(Lorg/apache/lucene/search/BooleanQuery;Z)Lorg/apache/lucene/search/Query;");
                mids$[mid_addNonMatch_2e1c61a6] = env->getMethodID(cls, "addNonMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V");
                mids$[mid_addWholeMatch_55a79f28] = env->getMethodID(cls, "addWholeMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_addPrefixMatch_539c241a] = env->getMethodID(cls, "addPrefixMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MIN_PREFIX_CHARS = env->getStaticIntField(cls, "DEFAULT_MIN_PREFIX_CHARS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_3b9404b5, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

            void AnalyzingInfixSuggester::add(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_add_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }

            void AnalyzingInfixSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void AnalyzingInfixSuggester::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jlong AnalyzingInfixSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingInfixSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1, jboolean a2, jboolean a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_3273017a], a0.this$, a1, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }

            jlong AnalyzingInfixSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void AnalyzingInfixSuggester::refresh() const
            {
              env->callVoidMethod(this$, mids$[mid_refresh_54c6a166]);
            }

            jboolean AnalyzingInfixSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }

            void AnalyzingInfixSuggester::update(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_update_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingInfixSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingInfixSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, add, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, close, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, refresh, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, store, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, update, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingInfixSuggester, t_AnalyzingInfixSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingInfixSuggester, t_AnalyzingInfixSuggester_init_, 0, 0, t_AnalyzingInfixSuggester__fields_, 0, 0);

            void t_AnalyzingInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingInfixSuggester), module, "AnalyzingInfixSuggester", 0);
            }

            void t_AnalyzingInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "class_", make_descriptor(AnalyzingInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "DEFAULT_MIN_PREFIX_CHARS", make_descriptor(AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS));
            }

            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingInfixSuggester::wrap_Object(AnalyzingInfixSuggester(((t_AnalyzingInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 5:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "KkkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.add(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  jboolean a2;
                  jboolean a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OIZZ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.refresh());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.update(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "update", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SerialMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SerialMergeScheduler::class$ = NULL;
        jmethodID *SerialMergeScheduler::mids$ = NULL;
        bool SerialMergeScheduler::live$ = false;

        jclass SerialMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SerialMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SerialMergeScheduler::SerialMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SerialMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SerialMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args);
        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args);

        static PyMethodDef t_SerialMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_SerialMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_SerialMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SerialMergeScheduler, t_SerialMergeScheduler, ::org::apache::lucene::index::MergeScheduler, SerialMergeScheduler, t_SerialMergeScheduler_init_, 0, 0, 0, 0, 0);

        void t_SerialMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(SerialMergeScheduler), module, "SerialMergeScheduler", 0);
        }

        void t_SerialMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "class_", make_descriptor(SerialMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_SerialMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SerialMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_SerialMergeScheduler::wrap_Object(SerialMergeScheduler(((t_SerialMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SerialMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          SerialMergeScheduler object((jobject) NULL);

          INT_CALL(object = SerialMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilterFactory::class$ = NULL;
          jmethodID *MappingCharFilterFactory::mids$ = NULL;
          bool MappingCharFilterFactory::live$ = false;

          jclass MappingCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_parseRules_c71ecf97] = env->getMethodID(cls, "parseRules", "(Ljava/util/List;Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder;)V");
              mids$[mid_parseString_97a5258f] = env->getMethodID(cls, "parseString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilterFactory::MappingCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::java::io::Reader MappingCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MappingCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void MappingCharFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args);
          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self);
          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data);
          static PyGetSetDef t_MappingCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_MappingCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MappingCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilterFactory, t_MappingCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, MappingCharFilterFactory, t_MappingCharFilterFactory_init_, 0, 0, t_MappingCharFilterFactory__fields_, 0, 0);

          void t_MappingCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilterFactory), module, "MappingCharFilterFactory", 0);
          }

          void t_MappingCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "class_", make_descriptor(MappingCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilterFactory::wrap_Object(MappingCharFilterFactory(((t_MappingCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            MappingCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = MappingCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MappingCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InfoStream::class$ = NULL;
        jmethodID *InfoStream::mids$ = NULL;
        bool InfoStream::live$ = false;
        InfoStream *InfoStream::NO_OUTPUT = NULL;

        jclass InfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDefault_1923150b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setDefault_a5e6dfa2] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/util/InfoStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_OUTPUT = new InfoStream(env->getStaticObjectField(cls, "NO_OUTPUT", "Lorg/apache/lucene/util/InfoStream;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InfoStream::InfoStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        InfoStream InfoStream::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return InfoStream(env->callStaticObjectMethod(cls, mids$[mid_getDefault_1923150b]));
        }

        jboolean InfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        void InfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }

        void InfoStream::setDefault(const InfoStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_a5e6dfa2], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InfoStream_getDefault(PyTypeObject *type);
        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg);
        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args);
        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data);
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data);
        static PyGetSetDef t_InfoStream__fields_[] = {
          DECLARE_GETSET_FIELD(t_InfoStream, default),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_InfoStream__methods_[] = {
          DECLARE_METHOD(t_InfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, isEnabled, METH_O),
          DECLARE_METHOD(t_InfoStream, message, METH_VARARGS),
          DECLARE_METHOD(t_InfoStream, setDefault, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InfoStream, t_InfoStream, ::java::lang::Object, InfoStream, t_InfoStream_init_, 0, 0, t_InfoStream__fields_, 0, 0);

        void t_InfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(InfoStream), module, "InfoStream", 0);
        }

        void t_InfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "class_", make_descriptor(InfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "wrapfn_", make_descriptor(t_InfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(InfoStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "NO_OUTPUT", make_descriptor(t_InfoStream::wrap_Object(*InfoStream::NO_OUTPUT)));
        }

        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InfoStream::initializeClass, 1)))
            return NULL;
          return t_InfoStream::wrap_Object(InfoStream(((t_InfoStream *) arg)->object.this$));
        }
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds)
        {
          InfoStream object((jobject) NULL);

          INT_CALL(object = InfoStream());
          self->object = object;

          return 0;
        }

        static PyObject *t_InfoStream_getDefault(PyTypeObject *type)
        {
          InfoStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::InfoStream::getDefault());
          return t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isEnabled", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "message", args);
          return NULL;
        }

        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg)
        {
          InfoStream a0((jobject) NULL);

          if (!parseArg(arg, "k", InfoStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::InfoStream::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data)
        {
          InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_InfoStream::wrap_Object(value);
        }
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data)
        {
          {
            InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortRescorer.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Explanation.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortRescorer::class$ = NULL;
        jmethodID *SortRescorer::mids$ = NULL;
        bool SortRescorer::live$ = false;

        jclass SortRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6044f56] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortRescorer::SortRescorer(const ::org::apache::lucene::search::Sort & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_a6044f56, a0.this$)) {}

        ::org::apache::lucene::search::Explanation SortRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs SortRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args);
        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args);

        static PyMethodDef t_SortRescorer__methods_[] = {
          DECLARE_METHOD(t_SortRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_SortRescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortRescorer, t_SortRescorer, ::org::apache::lucene::search::Rescorer, SortRescorer, t_SortRescorer_init_, 0, 0, 0, 0, 0);

        void t_SortRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(SortRescorer), module, "SortRescorer", 0);
        }

        void t_SortRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "class_", make_descriptor(SortRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "wrapfn_", make_descriptor(t_SortRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortRescorer::initializeClass, 1)))
            return NULL;
          return t_SortRescorer::wrap_Object(SortRescorer(((t_SortRescorer *) arg)->object.this$));
        }
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          SortRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
          {
            INT_CALL(object = SortRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "rescore", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "java/lang/Object.h"
#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeQuery::class$ = NULL;
        jmethodID *NumericRangeQuery::mids$ = NULL;
        bool NumericRangeQuery::live$ = false;

        jclass NumericRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_132cc8c2] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newDoubleRange_b1350bd0] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_ff7ed1ca] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_3f37d14c] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_dfaf9ce2] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_25dc6448] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_8e5c5fbe] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_d325b43c] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean NumericRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Number NumericRangeQuery::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeQuery::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeQuery::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jint NumericRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NumericRangeQuery::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeQuery::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_132cc8c2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_b1350bd0], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ff7ed1ca], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_3f37d14c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dfaf9ce2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_25dc6448], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_8e5c5fbe], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_d325b43c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        ::java::lang::String NumericRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data);
        static PyGetSetDef t_NumericRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeQuery, max),
          DECLARE_GET_FIELD(t_NumericRangeQuery, min),
          DECLARE_GET_FIELD(t_NumericRangeQuery, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeQuery, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeQuery__methods_[] = {
          DECLARE_METHOD(t_NumericRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeQuery, t_NumericRangeQuery, ::org::apache::lucene::search::MultiTermQuery, NumericRangeQuery, abstract_init, 0, 0, t_NumericRangeQuery__fields_, 0, 0);
        PyObject *t_NumericRangeQuery::wrap_Object(const NumericRangeQuery& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeQuery::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeQuery), module, "NumericRangeQuery", 0);
        }

        void t_NumericRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "class_", make_descriptor(NumericRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeQuery::initializeClass, 1)))
            return NULL;
          return t_NumericRangeQuery::wrap_Object(NumericRangeQuery(((t_NumericRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Weight::class$ = NULL;
        jmethodID *Weight::mids$ = NULL;
        bool Weight::live$ = false;

        jclass Weight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Weight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bulkScorer_33d2aa29] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;ZLorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
            mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
            mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_scoresDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "scoresDocsOutOfOrder", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Weight::Weight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer Weight::bulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, jboolean a1, const ::org::apache::lucene::util::Bits & a2) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_33d2aa29], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::Explanation Weight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query Weight::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jfloat Weight::getValueForNormalization() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
        }

        void Weight::normalize(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
        }

        ::org::apache::lucene::search::Scorer Weight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
        }

        jboolean Weight::scoresDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_scoresDocsOutOfOrder_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_getQuery(t_Weight *self);
        static PyObject *t_Weight_getValueForNormalization(t_Weight *self);
        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self);
        static PyObject *t_Weight_get__query(t_Weight *self, void *data);
        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data);
        static PyGetSetDef t_Weight__fields_[] = {
          DECLARE_GET_FIELD(t_Weight, query),
          DECLARE_GET_FIELD(t_Weight, valueForNormalization),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Weight__methods_[] = {
          DECLARE_METHOD(t_Weight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, bulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, explain, METH_VARARGS),
          DECLARE_METHOD(t_Weight, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_Weight, getValueForNormalization, METH_NOARGS),
          DECLARE_METHOD(t_Weight, normalize, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scoresDocsOutOfOrder, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Weight, t_Weight, ::java::lang::Object, Weight, t_Weight_init_, 0, 0, t_Weight__fields_, 0, 0);

        void t_Weight::install(PyObject *module)
        {
          installType(&PY_TYPE(Weight), module, "Weight", 0);
        }

        void t_Weight::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "class_", make_descriptor(Weight::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "wrapfn_", make_descriptor(t_Weight::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Weight::initializeClass, 1)))
            return NULL;
          return t_Weight::wrap_Object(Weight(((t_Weight *) arg)->object.this$));
        }
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Weight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds)
        {
          Weight object((jobject) NULL);

          INT_CALL(object = Weight());
          self->object = object;

          return 0;
        }

        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.bulkScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bulkScorer", args);
          return NULL;
        }

        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Weight_getQuery(t_Weight *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_Weight_getValueForNormalization(t_Weight *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.normalize(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", args);
          return NULL;
        }

        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.scorer(a0, a1));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "scorer", args);
          return NULL;
        }

        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.scoresDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Weight_get__query(t_Weight *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupsCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupsCollector::mids$ = NULL;
          bool AbstractAllGroupsCollector::live$ = false;

          jclass AbstractAllGroupsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroupCount_54c6a179] = env->getMethodID(cls, "getGroupCount", "()I");
              mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractAllGroupsCollector::AbstractAllGroupsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractAllGroupsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          jint AbstractAllGroupsCollector::getGroupCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getGroupCount_54c6a179]);
          }

          ::java::util::Collection AbstractAllGroupsCollector::getGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
          }

          void AbstractAllGroupsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args);
          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data);
          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groupCount),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groups),
            DECLARE_SET_FIELD(t_AbstractAllGroupsCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroupCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupsCollector, t_AbstractAllGroupsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupsCollector, t_AbstractAllGroupsCollector_init_, 0, 0, t_AbstractAllGroupsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupsCollector::wrap_Object(const AbstractAllGroupsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupsCollector), module, "AbstractAllGroupsCollector", 0);
          }

          void t_AbstractAllGroupsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupsCollector::wrap_Object(AbstractAllGroupsCollector(((t_AbstractAllGroupsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractAllGroupsCollector object((jobject) NULL);

            INT_CALL(object = AbstractAllGroupsCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getGroupCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getGroupCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Fragmenter::class$ = NULL;
          jmethodID *Fragmenter::mids$ = NULL;
          bool Fragmenter::live$ = false;

          jclass Fragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Fragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Fragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void Fragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self);
          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args);
          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data);
          static PyGetSetDef t_Fragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_Fragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Fragmenter__methods_[] = {
            DECLARE_METHOD(t_Fragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_Fragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Fragmenter, t_Fragmenter, ::java::lang::Object, Fragmenter, abstract_init, 0, 0, t_Fragmenter__fields_, 0, 0);

          void t_Fragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(Fragmenter), module, "Fragmenter", 0);
          }

          void t_Fragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "class_", make_descriptor(Fragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "wrapfn_", make_descriptor(t_Fragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Fragmenter::initializeClass, 1)))
              return NULL;
            return t_Fragmenter::wrap_Object(Fragmenter(((t_Fragmenter *) arg)->object.this$));
          }
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Fragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector$MatchingDocs::class$ = NULL;
        jmethodID *FacetsCollector$MatchingDocs::mids$ = NULL;
        jfieldID *FacetsCollector$MatchingDocs::fids$ = NULL;
        bool FacetsCollector$MatchingDocs::live$ = false;

        jclass FacetsCollector$MatchingDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector$MatchingDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9edc9b13] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/DocIdSet;I[F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bits] = env->getFieldID(cls, "bits", "Lorg/apache/lucene/search/DocIdSet;");
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/index/AtomicReaderContext;");
            fids$[fid_scores] = env->getFieldID(cls, "scores", "[F");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector$MatchingDocs::FacetsCollector$MatchingDocs(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::DocIdSet & a1, jint a2, const JArray< jfloat > & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9edc9b13, a0.this$, a1.this$, a2, a3.this$)) {}

        ::org::apache::lucene::search::DocIdSet FacetsCollector$MatchingDocs::_get_bits() const
        {
          return ::org::apache::lucene::search::DocIdSet(env->getObjectField(this$, fids$[fid_bits]));
        }

        ::org::apache::lucene::index::AtomicReaderContext FacetsCollector$MatchingDocs::_get_context() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->getObjectField(this$, fids$[fid_context]));
        }

        JArray< jfloat > FacetsCollector$MatchingDocs::_get_scores() const
        {
          return JArray< jfloat >(env->getObjectField(this$, fids$[fid_scores]));
        }

        jint FacetsCollector$MatchingDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data);

        static PyGetSetDef t_FacetsCollector$MatchingDocs__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, bits),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, context),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, scores),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector$MatchingDocs__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs, ::java::lang::Object, FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs_init_, 0, 0, t_FacetsCollector$MatchingDocs__fields_, 0, 0);

        void t_FacetsCollector$MatchingDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector$MatchingDocs), module, "FacetsCollector$MatchingDocs", 0);
        }

        void t_FacetsCollector$MatchingDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "class_", make_descriptor(FacetsCollector$MatchingDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector$MatchingDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector$MatchingDocs::wrap_Object(FacetsCollector$MatchingDocs(((t_FacetsCollector$MatchingDocs *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a1((jobject) NULL);
          jint a2;
          JArray< jfloat > a3((jobject) NULL);
          FacetsCollector$MatchingDocs object((jobject) NULL);

          if (!parseArgs(args, "kkI[F", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FacetsCollector$MatchingDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bits());
          return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scores());
          return value.wrap();
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserTokenManager::class$ = NULL;
              jmethodID *StandardSyntaxParserTokenManager::mids$ = NULL;
              jfieldID *StandardSyntaxParserTokenManager::fids$ = NULL;
              bool StandardSyntaxParserTokenManager::live$ = false;
              JArray< jint > *StandardSyntaxParserTokenManager::jjnewLexState = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::jjstrLiteralImages = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::lexStateNames = NULL;

              jclass StandardSyntaxParserTokenManager::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_954657e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_ReInit_954657e1] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                  mids$[mid_jjFillToken_5eb4cff8] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                  jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                  lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_954657e1, a0.this$, a1)) {}

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_954657e1], a0.this$, a1);
              }

              void StandardSyntaxParserTokenManager::SwitchTo(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParserTokenManager::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              void StandardSyntaxParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
              }

              ::java::io::PrintStream StandardSyntaxParserTokenManager::_get_debugStream() const
              {
                return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
              }

              void StandardSyntaxParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
              {
                env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args);
              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self);
              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg);

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data);
              static PyGetSetDef t_StandardSyntaxParserTokenManager__fields_[] = {
                DECLARE_SET_FIELD(t_StandardSyntaxParserTokenManager, debugStream),
                DECLARE_GET_FIELD(t_StandardSyntaxParserTokenManager, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParserTokenManager__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, SwitchTo, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, setDebugStream, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager, ::java::lang::Object, StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager_init_, 0, 0, t_StandardSyntaxParserTokenManager__fields_, 0, 0);

              void t_StandardSyntaxParserTokenManager::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserTokenManager), module, "StandardSyntaxParserTokenManager", 0);
              }

              void t_StandardSyntaxParserTokenManager::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "class_", make_descriptor(StandardSyntaxParserTokenManager::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserTokenManager::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserTokenManager::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(StandardSyntaxParserTokenManager::jjnewLexState->wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::jjstrLiteralImages->this$).wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::lexStateNames->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserTokenManager::wrap_Object(StandardSyntaxParserTokenManager(((t_StandardSyntaxParserTokenManager *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  break;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.ReInit(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.SwitchTo(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                ::java::io::PrintStream a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setDebugStream(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
                return NULL;
              }

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data)
              {
                {
                  ::java::io::PrintStream value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                  {
                    INT_CALL(self->object.setDebugStream(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordFrequencyComparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordFrequencyComparator::class$ = NULL;
          jmethodID *SuggestWordFrequencyComparator::mids$ = NULL;
          bool SuggestWordFrequencyComparator::live$ = false;

          jclass SuggestWordFrequencyComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordFrequencyComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordFrequencyComparator::SuggestWordFrequencyComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordFrequencyComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordFrequencyComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator, ::java::lang::Object, SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordFrequencyComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordFrequencyComparator), module, "SuggestWordFrequencyComparator", 0);
          }

          void t_SuggestWordFrequencyComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "class_", make_descriptor(SuggestWordFrequencyComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordFrequencyComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordFrequencyComparator::wrap_Object(SuggestWordFrequencyComparator(((t_SuggestWordFrequencyComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordFrequencyComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordFrequencyComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueFilter::class$ = NULL;
        jmethodID *FieldValueFilter::mids$ = NULL;
        bool FieldValueFilter::live$ = false;

        jclass FieldValueFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_negate_54c6a16a] = env->getMethodID(cls, "negate", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

        jboolean FieldValueFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String FieldValueFilter::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        ::org::apache::lucene::search::DocIdSet FieldValueFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint FieldValueFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldValueFilter::negate() const
        {
          return env->callBooleanMethod(this$, mids$[mid_negate_54c6a16a]);
        }

        ::java::lang::String FieldValueFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args);

        static PyMethodDef t_FieldValueFilter__methods_[] = {
          DECLARE_METHOD(t_FieldValueFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, field, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, negate, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueFilter, t_FieldValueFilter, ::org::apache::lucene::search::Filter, FieldValueFilter, t_FieldValueFilter_init_, 0, 0, 0, 0, 0);

        void t_FieldValueFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueFilter), module, "FieldValueFilter", 0);
        }

        void t_FieldValueFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "class_", make_descriptor(FieldValueFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldValueFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueFilter::initializeClass, 1)))
            return NULL;
          return t_FieldValueFilter::wrap_Object(FieldValueFilter(((t_FieldValueFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldValueFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = FieldValueFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.negate());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeTrigger::class$ = NULL;
        jmethodID *MergeTrigger::mids$ = NULL;
        bool MergeTrigger::live$ = false;
        MergeTrigger *MergeTrigger::CLOSING = NULL;
        MergeTrigger *MergeTrigger::EXPLICIT = NULL;
        MergeTrigger *MergeTrigger::FULL_FLUSH = NULL;
        MergeTrigger *MergeTrigger::MERGE_FINISHED = NULL;
        MergeTrigger *MergeTrigger::SEGMENT_FLUSH = NULL;

        jclass MergeTrigger::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeTrigger");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_c198d758] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/MergeTrigger;");
            mids$[mid_values_5144e632] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/MergeTrigger;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CLOSING = new MergeTrigger(env->getStaticObjectField(cls, "CLOSING", "Lorg/apache/lucene/index/MergeTrigger;"));
            EXPLICIT = new MergeTrigger(env->getStaticObjectField(cls, "EXPLICIT", "Lorg/apache/lucene/index/MergeTrigger;"));
            FULL_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "FULL_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            MERGE_FINISHED = new MergeTrigger(env->getStaticObjectField(cls, "MERGE_FINISHED", "Lorg/apache/lucene/index/MergeTrigger;"));
            SEGMENT_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "SEGMENT_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeTrigger MergeTrigger::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeTrigger(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c198d758], a0.this$));
        }

        JArray< MergeTrigger > MergeTrigger::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< MergeTrigger >(env->callStaticObjectMethod(cls, mids$[mid_values_5144e632]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args);
        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_MergeTrigger_values(PyTypeObject *type);
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data);
        static PyGetSetDef t_MergeTrigger__fields_[] = {
          DECLARE_GET_FIELD(t_MergeTrigger, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeTrigger__methods_[] = {
          DECLARE_METHOD(t_MergeTrigger, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergeTrigger, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeTrigger, t_MergeTrigger, ::java::lang::Enum, MergeTrigger, abstract_init, 0, 0, t_MergeTrigger__fields_, 0, 0);
        PyObject *t_MergeTrigger::wrap_Object(const MergeTrigger& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergeTrigger::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergeTrigger::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeTrigger), module, "MergeTrigger", 0);
        }

        void t_MergeTrigger::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "class_", make_descriptor(MergeTrigger::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "wrapfn_", make_descriptor(t_MergeTrigger::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MergeTrigger::initializeClass);
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "CLOSING", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::CLOSING)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "EXPLICIT", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::EXPLICIT)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "FULL_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::FULL_FLUSH)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "MERGE_FINISHED", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::MERGE_FINISHED)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "SEGMENT_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::SEGMENT_FLUSH)));
        }

        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeTrigger::initializeClass, 1)))
            return NULL;
          return t_MergeTrigger::wrap_Object(MergeTrigger(((t_MergeTrigger *) arg)->object.this$));
        }
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeTrigger::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          MergeTrigger result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::valueOf(a0));
            return t_MergeTrigger::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_MergeTrigger_values(PyTypeObject *type)
        {
          JArray< MergeTrigger > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::values());
          return JArray<jobject>(result.this$).wrap(t_MergeTrigger::wrap_jobject);
        }
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/DiffIt.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *DiffIt::class$ = NULL;
      jmethodID *DiffIt::mids$ = NULL;
      bool DiffIt::live$ = false;

      jclass DiffIt::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/DiffIt");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void DiffIt::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_DiffIt__methods_[] = {
        DECLARE_METHOD(t_DiffIt, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DiffIt, t_DiffIt, ::java::lang::Object, DiffIt, abstract_init, 0, 0, 0, 0, 0);

      void t_DiffIt::install(PyObject *module)
      {
        installType(&PY_TYPE(DiffIt), module, "DiffIt", 0);
      }

      void t_DiffIt::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "class_", make_descriptor(DiffIt::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "wrapfn_", make_descriptor(t_DiffIt::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DiffIt::initializeClass, 1)))
          return NULL;
        return t_DiffIt::wrap_Object(DiffIt(((t_DiffIt *) arg)->object.this$));
      }
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DiffIt::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::DiffIt::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BinaryDocValues::class$ = NULL;
        jmethodID *BinaryDocValues::mids$ = NULL;
        bool BinaryDocValues::live$ = false;

        jclass BinaryDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BinaryDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef BinaryDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg);

        static PyMethodDef t_BinaryDocValues__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValues, t_BinaryDocValues, ::java::lang::Object, BinaryDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_BinaryDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValues), module, "BinaryDocValues", 0);
        }

        void t_BinaryDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "class_", make_descriptor(BinaryDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValues::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValues::wrap_Object(BinaryDocValues(((t_BinaryDocValues *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *QueryNodeOperation::class$ = NULL;
              jmethodID *QueryNodeOperation::mids$ = NULL;
              bool QueryNodeOperation::live$ = false;

              jclass QueryNodeOperation::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_logicalAnd_f8fdf1b4] = env->getStaticMethodID(cls, "logicalAnd", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeOperation::logicalAnd(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callStaticObjectMethod(cls, mids$[mid_logicalAnd_f8fdf1b4], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_QueryNodeOperation__methods_[] = {
                DECLARE_METHOD(t_QueryNodeOperation, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, logicalAnd, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeOperation, t_QueryNodeOperation, ::java::lang::Object, QueryNodeOperation, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryNodeOperation::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeOperation), module, "QueryNodeOperation", 0);
              }

              void t_QueryNodeOperation::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "class_", make_descriptor(QueryNodeOperation::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeOperation::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeOperation::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeOperation::wrap_Object(QueryNodeOperation(((t_QueryNodeOperation *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeOperation::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::QueryNodeOperation::logicalAnd(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "logicalAnd", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *BoolDocValues::class$ = NULL;
            jmethodID *BoolDocValues::mids$ = NULL;
            bool BoolDocValues::live$ = false;

            jclass BoolDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/BoolDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolDocValues::BoolDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean BoolDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte BoolDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble BoolDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat BoolDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller BoolDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint BoolDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong BoolDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object BoolDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort BoolDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String BoolDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String BoolDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data);
            static PyGetSetDef t_BoolDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_BoolDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BoolDocValues__methods_[] = {
              DECLARE_METHOD(t_BoolDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolDocValues, t_BoolDocValues, ::org::apache::lucene::queries::function::FunctionValues, BoolDocValues, t_BoolDocValues_init_, 0, 0, t_BoolDocValues__fields_, 0, 0);

            void t_BoolDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolDocValues), module, "BoolDocValues", 0);
            }

            void t_BoolDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "class_", make_descriptor(BoolDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "wrapfn_", make_descriptor(t_BoolDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolDocValues::initializeClass, 1)))
                return NULL;
              return t_BoolDocValues::wrap_Object(BoolDocValues(((t_BoolDocValues *) arg)->object.this$));
            }
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              BoolDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = BoolDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$ReaderIterator::class$ = NULL;
          jmethodID *PackedInts$ReaderIterator::mids$ = NULL;
          bool PackedInts$ReaderIterator::live$ = false;

          jclass PackedInts$ReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$ReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$ReaderIterator::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          jlong PackedInts$ReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef PackedInts$ReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jint PackedInts$ReaderIterator::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }

          jint PackedInts$ReaderIterator::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args);
          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data);
          static PyGetSetDef t_PackedInts$ReaderIterator__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$ReaderIterator, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$ReaderIterator__methods_[] = {
            DECLARE_METHOD(t_PackedInts$ReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$ReaderIterator, t_PackedInts$ReaderIterator, ::java::lang::Object, PackedInts$ReaderIterator, abstract_init, 0, 0, t_PackedInts$ReaderIterator__fields_, 0, 0);

          void t_PackedInts$ReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$ReaderIterator), module, "PackedInts$ReaderIterator", 0);
          }

          void t_PackedInts$ReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "class_", make_descriptor(PackedInts$ReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$ReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$ReaderIterator::initializeClass, 1)))
              return NULL;
            return t_PackedInts$ReaderIterator::wrap_Object(PackedInts$ReaderIterator(((t_PackedInts$ReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$ReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttribute::class$ = NULL;
        jmethodID *PythonAttribute::mids$ = NULL;
        bool PythonAttribute::live$ = false;

        jclass PythonAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_PythonAttribute__methods_[] = {
          DECLARE_METHOD(t_PythonAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttribute, t_PythonAttribute, ::org::apache::lucene::util::Attribute, PythonAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_PythonAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttribute), module, "PythonAttribute", 0);
        }

        void t_PythonAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "class_", make_descriptor(PythonAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "wrapfn_", make_descriptor(t_PythonAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttribute::initializeClass, 1)))
            return NULL;
          return t_PythonAttribute::wrap_Object(PythonAttribute(((t_PythonAttribute *) arg)->object.this$));
        }
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedTerm::class$ = NULL;
          jmethodID *WeightedTerm::mids$ = NULL;
          bool WeightedTerm::live$ = false;

          jclass WeightedTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_getTerm_14c7b5c5] = env->getMethodID(cls, "getTerm", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_setTerm_5fdc3f48] = env->getMethodID(cls, "setTerm", "(Ljava/lang/String;)V");
              mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedTerm::WeightedTerm(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          ::java::lang::String WeightedTerm::getTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTerm_14c7b5c5]));
          }

          jfloat WeightedTerm::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          void WeightedTerm::setTerm(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTerm_5fdc3f48], a0.this$);
          }

          void WeightedTerm::setWeight(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedTerm, term),
            DECLARE_GETSET_FIELD(t_WeightedTerm, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, setTerm, METH_O),
            DECLARE_METHOD(t_WeightedTerm, setWeight, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedTerm, t_WeightedTerm, ::java::lang::Object, WeightedTerm, t_WeightedTerm_init_, 0, 0, t_WeightedTerm__fields_, 0, 0);

          void t_WeightedTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedTerm), module, "WeightedTerm", 0);
          }

          void t_WeightedTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "class_", make_descriptor(WeightedTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedTerm::wrap_Object(WeightedTerm(((t_WeightedTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            WeightedTerm object((jobject) NULL);

            if (!parseArgs(args, "Fs", &a0, &a1))
            {
              INT_CALL(object = WeightedTerm(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return j2p(result);
          }

          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTerm(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTerm", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setWeight(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return j2p(value);
          }
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTerm(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "term", arg);
            return -1;
          }

          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setWeight(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "weight", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemmer::class$ = NULL;
          jmethodID *PortugueseStemmer::mids$ = NULL;
          bool PortugueseStemmer::live$ = false;

          jclass PortugueseStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemmer::PortugueseStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
          }

          void t_PortugueseStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanTermBuilder::class$ = NULL;
            jmethodID *SpanTermBuilder::mids$ = NULL;
            bool SpanTermBuilder::live$ = false;

            jclass SpanTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanTermBuilder::SpanTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanTermBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanTermBuilder, t_SpanTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanTermBuilder, t_SpanTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanTermBuilder), module, "SpanTermBuilder", 0);
            }

            void t_SpanTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "class_", make_descriptor(SpanTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanTermBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanTermBuilder::wrap_Object(SpanTermBuilder(((t_SpanTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              SpanTermBuilder object((jobject) NULL);

              INT_CALL(object = SpanTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedNumericDocValues::class$ = NULL;
        jmethodID *SortedNumericDocValues::mids$ = NULL;
        bool SortedNumericDocValues::live$ = false;

        jclass SortedNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_count_54c6a179] = env->getMethodID(cls, "count", "()I");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_valueAt_39c7bd20] = env->getMethodID(cls, "valueAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint SortedNumericDocValues::count() const
        {
          return env->callIntMethod(this$, mids$[mid_count_54c6a179]);
        }

        void SortedNumericDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        jlong SortedNumericDocValues::valueAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_valueAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self);
        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg);
        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data);
        static PyGetSetDef t_SortedNumericDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericDocValues, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, count, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedNumericDocValues, valueAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValues, t_SortedNumericDocValues, ::java::lang::Object, SortedNumericDocValues, abstract_init, 0, 0, t_SortedNumericDocValues__fields_, 0, 0);

        void t_SortedNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValues), module, "SortedNumericDocValues", 0);
        }

        void t_SortedNumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "class_", make_descriptor(SortedNumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValues::wrap_Object(SortedNumericDocValues(((t_SortedNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.count());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.valueAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "valueAt", arg);
          return NULL;
        }

        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BM25Similarity.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BM25Similarity::class$ = NULL;
          jmethodID *BM25Similarity::mids$ = NULL;
          bool BM25Similarity::live$ = false;

          jclass BM25Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BM25Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_f1b0c004] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getB_54c6a176] = env->getMethodID(cls, "getB", "()F");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_getK1_54c6a176] = env->getMethodID(cls, "getK1", "()F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_avgFieldLength_48af4d71] = env->getMethodID(cls, "avgFieldLength", "(Lorg/apache/lucene/search/CollectionStatistics;)F");
              mids$[mid_encodeNormValue_77691ed7] = env->getMethodID(cls, "encodeNormValue", "(FI)B");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BM25Similarity::BM25Similarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BM25Similarity::BM25Similarity(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f1b0c004, a0, a1)) {}

          jlong BM25Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight BM25Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat BM25Similarity::getB() const
          {
            return env->callFloatMethod(this$, mids$[mid_getB_54c6a176]);
          }

          jboolean BM25Similarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat BM25Similarity::getK1() const
          {
            return env->callFloatMethod(this$, mids$[mid_getK1_54c6a176]);
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          void BM25Similarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer BM25Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String BM25Similarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg);
          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data);
          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data);
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data);
          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data);
          static PyGetSetDef t_BM25Similarity__fields_[] = {
            DECLARE_GET_FIELD(t_BM25Similarity, b),
            DECLARE_GETSET_FIELD(t_BM25Similarity, discountOverlaps),
            DECLARE_GET_FIELD(t_BM25Similarity, k1),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BM25Similarity__methods_[] = {
            DECLARE_METHOD(t_BM25Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, getB, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getK1, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_BM25Similarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BM25Similarity, t_BM25Similarity, ::org::apache::lucene::search::similarities::Similarity, BM25Similarity, t_BM25Similarity_init_, 0, 0, t_BM25Similarity__fields_, 0, 0);

          void t_BM25Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(BM25Similarity), module, "BM25Similarity", 0);
          }

          void t_BM25Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "class_", make_descriptor(BM25Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "wrapfn_", make_descriptor(t_BM25Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BM25Similarity::initializeClass, 1)))
              return NULL;
            return t_BM25Similarity::wrap_Object(BM25Similarity(((t_BM25Similarity *) arg)->object.this$));
          }
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BM25Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BM25Similarity object((jobject) NULL);

                INT_CALL(object = BM25Similarity());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jfloat a1;
                BM25Similarity object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = BM25Similarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getB());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getK1());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getB());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }

          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getK1());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttributeImpl::class$ = NULL;
          jmethodID *PositionLengthAttributeImpl::mids$ = NULL;
          bool PositionLengthAttributeImpl::live$ = false;

          jclass PositionLengthAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionLengthAttributeImpl::PositionLengthAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionLengthAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionLengthAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionLengthAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionLengthAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PositionLengthAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionLengthAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self);
          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data);
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttributeImpl, t_PositionLengthAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionLengthAttributeImpl, t_PositionLengthAttributeImpl_init_, 0, 0, t_PositionLengthAttributeImpl__fields_, 0, 0);

          void t_PositionLengthAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttributeImpl), module, "PositionLengthAttributeImpl", 0);
          }

          void t_PositionLengthAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "class_", make_descriptor(PositionLengthAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttributeImpl::wrap_Object(PositionLengthAttributeImpl(((t_PositionLengthAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionLengthAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionLengthAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *ComposedQuery::class$ = NULL;
            jmethodID *ComposedQuery::mids$ = NULL;
            bool ComposedQuery::live$ = false;

            jclass ComposedQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/ComposedQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_getNrSubQueries_54c6a179] = env->getMethodID(cls, "getNrSubQueries", "()I");
                mids$[mid_getOperatorName_14c7b5c5] = env->getMethodID(cls, "getOperatorName", "()Ljava/lang/String;");
                mids$[mid_getSubQueriesIterator_40858c90] = env->getMethodID(cls, "getSubQueriesIterator", "()Ljava/util/Iterator;");
                mids$[mid_getSubQuery_4fe040f0] = env->getMethodID(cls, "getSubQuery", "(I)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isOperatorInfix_54c6a16a] = env->getMethodID(cls, "isOperatorInfix", "()Z");
                mids$[mid_makeLuceneSubQueriesField_82c52c4c] = env->getMethodID(cls, "makeLuceneSubQueriesField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Ljava/util/List;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_recompose_1fde8fc3] = env->getMethodID(cls, "recompose", "(Ljava/util/List;)V");
                mids$[mid_getPrefixSeparator_14c7b5c5] = env->getMethodID(cls, "getPrefixSeparator", "()Ljava/lang/String;");
                mids$[mid_getBracketOpen_14c7b5c5] = env->getMethodID(cls, "getBracketOpen", "()Ljava/lang/String;");
                mids$[mid_getBracketClose_14c7b5c5] = env->getMethodID(cls, "getBracketClose", "()Ljava/lang/String;");
                mids$[mid_infixToString_9f94ae34] = env->getMethodID(cls, "infixToString", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_prefixToString_9f94ae34] = env->getMethodID(cls, "prefixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ComposedQuery::ComposedQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            jint ComposedQuery::getNrSubQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrSubQueries_54c6a179]);
            }

            ::java::lang::String ComposedQuery::getOperatorName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOperatorName_14c7b5c5]));
            }

            ::java::util::Iterator ComposedQuery::getSubQueriesIterator() const
            {
              return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getSubQueriesIterator_40858c90]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery ComposedQuery::getSubQuery(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_getSubQuery_4fe040f0], a0));
            }

            jboolean ComposedQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean ComposedQuery::isOperatorInfix() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isOperatorInfix_54c6a16a]);
            }

            ::java::util::List ComposedQuery::makeLuceneSubQueriesField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_makeLuceneSubQueriesField_82c52c4c], a0.this$, a1.this$));
            }

            ::java::lang::String ComposedQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg);
            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data);
            static PyGetSetDef t_ComposedQuery__fields_[] = {
              DECLARE_GET_FIELD(t_ComposedQuery, fieldsSubQueryAcceptable),
              DECLARE_GET_FIELD(t_ComposedQuery, nrSubQueries),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorInfix),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorName),
              DECLARE_GET_FIELD(t_ComposedQuery, subQueriesIterator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ComposedQuery__methods_[] = {
              DECLARE_METHOD(t_ComposedQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, getNrSubQueries, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getOperatorName, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQueriesIterator, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQuery, METH_O),
              DECLARE_METHOD(t_ComposedQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, isOperatorInfix, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, makeLuceneSubQueriesField, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ComposedQuery, t_ComposedQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, ComposedQuery, t_ComposedQuery_init_, 0, 0, t_ComposedQuery__fields_, 0, 0);

            void t_ComposedQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(ComposedQuery), module, "ComposedQuery", 0);
            }

            void t_ComposedQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "class_", make_descriptor(ComposedQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "wrapfn_", make_descriptor(t_ComposedQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ComposedQuery::initializeClass, 1)))
                return NULL;
              return t_ComposedQuery::wrap_Object(ComposedQuery(((t_ComposedQuery *) arg)->object.this$));
            }
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ComposedQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              ComposedQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = ComposedQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrSubQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getOperatorName());
              return j2p(result);
            }

            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self)
            {
              ::java::util::Iterator result((jobject) NULL);
              OBJ_CALL(result = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getSubQuery(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSubQuery", arg);
              return NULL;
            }

            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isOperatorInfix());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneSubQueriesField(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneSubQueriesField", args);
              return NULL;
            }

            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrSubQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isOperatorInfix());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getOperatorName());
              return j2p(value);
            }

            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data)
            {
              ::java::util::Iterator value((jobject) NULL);
              OBJ_CALL(value = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/BasicAutomata.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *BasicAutomata::class$ = NULL;
          jmethodID *BasicAutomata::mids$ = NULL;
          bool BasicAutomata::live$ = false;

          jclass BasicAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/BasicAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeAnyChar_9b0d5999] = env->getStaticMethodID(cls, "makeAnyChar", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeAnyString_9b0d5999] = env->getStaticMethodID(cls, "makeAnyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeChar_d5b8a843] = env->getStaticMethodID(cls, "makeChar", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeCharRange_42dcb2dd] = env->getStaticMethodID(cls, "makeCharRange", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmpty_9b0d5999] = env->getStaticMethodID(cls, "makeEmpty", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmptyString_9b0d5999] = env->getStaticMethodID(cls, "makeEmptyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeInterval_86ba9f2f] = env->getStaticMethodID(cls, "makeInterval", "(III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_af13056f] = env->getStaticMethodID(cls, "makeString", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_1c95d487] = env->getStaticMethodID(cls, "makeString", "([III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeStringUnion_40d33194] = env->getStaticMethodID(cls, "makeStringUnion", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeAnyChar()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyChar_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeAnyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeChar(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeChar_d5b8a843], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeCharRange(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeCharRange_42dcb2dd], a0, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeEmpty()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmpty_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeEmptyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmptyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeInterval(jint a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeInterval_86ba9f2f], a0, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeString(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_af13056f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeString(const JArray< jint > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_1c95d487], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeStringUnion(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeStringUnion_40d33194], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_BasicAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_makeAnyChar(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeAnyString(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeChar(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_makeCharRange(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeEmpty(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeEmptyString(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeInterval(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeString(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeStringUnion(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_BasicAutomata__methods_[] = {
            DECLARE_METHOD(t_BasicAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeAnyChar, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeAnyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeChar, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeCharRange, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeEmpty, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeEmptyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeInterval, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeString, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeStringUnion, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicAutomata, t_BasicAutomata, ::java::lang::Object, BasicAutomata, abstract_init, 0, 0, 0, 0, 0);

          void t_BasicAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicAutomata), module, "BasicAutomata", 0);
          }

          void t_BasicAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "class_", make_descriptor(BasicAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "wrapfn_", make_descriptor(t_BasicAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicAutomata::initializeClass, 1)))
              return NULL;
            return t_BasicAutomata::wrap_Object(BasicAutomata(((t_BasicAutomata *) arg)->object.this$));
          }
          static PyObject *t_BasicAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BasicAutomata_makeAnyChar(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeAnyChar());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeAnyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeAnyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeChar(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeChar(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeChar", arg);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeCharRange(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeCharRange(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeCharRange", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeEmpty(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeEmpty());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeEmptyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeEmptyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeInterval(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeInterval(a0, a1, a2));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeInterval", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeString(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeString(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeString(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeString", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeStringUnion(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeStringUnion(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeStringUnion", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$Allocator::class$ = NULL;
        jmethodID *ByteBlockPool$Allocator::mids$ = NULL;
        bool ByteBlockPool$Allocator::live$ = false;

        jclass ByteBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_1fde8fc3] = env->getMethodID(cls, "recycleByteBlocks", "(Ljava/util/List;)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$Allocator::ByteBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jbyte > ByteBlockPool$Allocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_1fde8fc3], a0.this$);
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self);
        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$Allocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, getByteBlock, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$Allocator, t_ByteBlockPool$Allocator, ::java::lang::Object, ByteBlockPool$Allocator, t_ByteBlockPool$Allocator_init_, 0, 0, t_ByteBlockPool$Allocator__fields_, 0, 0);

        void t_ByteBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$Allocator), module, "ByteBlockPool$Allocator", 0);
        }

        void t_ByteBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "class_", make_descriptor(ByteBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$Allocator::wrap_Object(ByteBlockPool$Allocator(((t_ByteBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ByteBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = ByteBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getByteBlock());
          return result.wrap();
        }

        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< JArray< jbyte > > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "recycleByteBlocks", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *GroupQueryNodeBuilder::class$ = NULL;
              jmethodID *GroupQueryNodeBuilder::mids$ = NULL;
              bool GroupQueryNodeBuilder::live$ = false;

              jclass GroupQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeBuilder::GroupQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query GroupQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_GroupQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeBuilder, t_GroupQueryNodeBuilder, ::java::lang::Object, GroupQueryNodeBuilder, t_GroupQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_GroupQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeBuilder), module, "GroupQueryNodeBuilder", 0);
              }

              void t_GroupQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "class_", make_descriptor(GroupQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeBuilder::wrap_Object(GroupQueryNodeBuilder(((t_GroupQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilter::class$ = NULL;
          jmethodID *KeywordMarkerFilter::mids$ = NULL;
          bool KeywordMarkerFilter::live$ = false;

          jclass KeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordMarkerFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args);

          static PyMethodDef t_KeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilter, t_KeywordMarkerFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordMarkerFilter, abstract_init, 0, 0, 0, 0, 0);

          void t_KeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilter), module, "KeywordMarkerFilter", 0);
          }

          void t_KeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "class_", make_descriptor(KeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilter::wrap_Object(KeywordMarkerFilter(((t_KeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FilteredQueryBuilder::class$ = NULL;
            jmethodID *FilteredQueryBuilder::mids$ = NULL;
            bool FilteredQueryBuilder::live$ = false;

            jclass FilteredQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_60b0c0b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FilteredQueryBuilder::FilteredQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_60b0c0b9, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FilteredQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FilteredQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FilteredQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FilteredQueryBuilder, t_FilteredQueryBuilder, ::java::lang::Object, FilteredQueryBuilder, t_FilteredQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FilteredQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FilteredQueryBuilder), module, "FilteredQueryBuilder", 0);
            }

            void t_FilteredQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "class_", make_descriptor(FilteredQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilteredQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FilteredQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FilteredQueryBuilder::wrap_Object(FilteredQueryBuilder(((t_FilteredQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FilteredQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);
              FilteredQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizerFactory::class$ = NULL;
          jmethodID *ClassicTokenizerFactory::mids$ = NULL;
          bool ClassicTokenizerFactory::live$ = false;

          jclass ClassicTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee8ef5f7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/ClassicTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizerFactory::ClassicTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::ClassicTokenizer ClassicTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::ClassicTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee8ef5f7], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ClassicTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizerFactory, t_ClassicTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ClassicTokenizerFactory, t_ClassicTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizerFactory), module, "ClassicTokenizerFactory", 0);
          }

          void t_ClassicTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "class_", make_descriptor(ClassicTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizerFactory::wrap_Object(ClassicTokenizerFactory(((t_ClassicTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::ClassicTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_ClassicTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *FuzzyQueryNodeProcessor::class$ = NULL;
              jmethodID *FuzzyQueryNodeProcessor::mids$ = NULL;
              bool FuzzyQueryNodeProcessor::live$ = false;

              jclass FuzzyQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeProcessor::FuzzyQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_FuzzyQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeProcessor), module, "FuzzyQueryNodeProcessor", 0);
              }

              void t_FuzzyQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "class_", make_descriptor(FuzzyQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeProcessor::wrap_Object(FuzzyQueryNodeProcessor(((t_FuzzyQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Encoder::class$ = NULL;
          jmethodID *Encoder::mids$ = NULL;
          bool Encoder::live$ = false;

          jclass Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Encoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg);

          static PyMethodDef t_Encoder__methods_[] = {
            DECLARE_METHOD(t_Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Encoder, t_Encoder, ::java::lang::Object, Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(Encoder), module, "Encoder", 0);
          }

          void t_Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "class_", make_descriptor(Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "wrapfn_", make_descriptor(t_Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Encoder::initializeClass, 1)))
              return NULL;
            return t_Encoder::wrap_Object(Encoder(((t_Encoder *) arg)->object.this$));
          }
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/Facets.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *Facets::class$ = NULL;
        jmethodID *Facets::mids$ = NULL;
        bool Facets::live$ = false;

        jclass Facets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/Facets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Facets::Facets() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List Facets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number Facets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult Facets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg);
        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args);
        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args);

        static PyMethodDef t_Facets__methods_[] = {
          DECLARE_METHOD(t_Facets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, getAllDims, METH_O),
          DECLARE_METHOD(t_Facets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_Facets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Facets, t_Facets, ::java::lang::Object, Facets, t_Facets_init_, 0, 0, 0, 0, 0);

        void t_Facets::install(PyObject *module)
        {
          installType(&PY_TYPE(Facets), module, "Facets", 0);
        }

        void t_Facets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "class_", make_descriptor(Facets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "wrapfn_", make_descriptor(t_Facets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Facets::initializeClass, 1)))
            return NULL;
          return t_Facets::wrap_Object(Facets(((t_Facets *) arg)->object.this$));
        }
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Facets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds)
        {
          Facets object((jobject) NULL);

          INT_CALL(object = Facets());
          self->object = object;

          return 0;
        }

        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          PyErr_SetArgsError((PyObject *) self, "getAllDims", arg);
          return NULL;
        }

        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSpecificValue", args);
          return NULL;
        }

        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTopChildren", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThis::class$ = NULL;
          jmethodID *MoreLikeThis::mids$ = NULL;
          bool MoreLikeThis::live$ = false;
          jboolean MoreLikeThis::DEFAULT_BOOST = (jboolean) 0;
          JArray< ::java::lang::String > *MoreLikeThis::DEFAULT_FIELD_NAMES = NULL;
          jint MoreLikeThis::DEFAULT_MAX_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_QUERY_TERMS = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_WORD_LENGTH = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_TERM_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_WORD_LENGTH = (jint) 0;
          ::java::util::Set *MoreLikeThis::DEFAULT_STOP_WORDS = NULL;

          jclass MoreLikeThis::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThis");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_ac25be47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_describeParams_14c7b5c5] = env->getMethodID(cls, "describeParams", "()Ljava/lang/String;");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getBoostFactor_54c6a176] = env->getMethodID(cls, "getBoostFactor", "()F");
              mids$[mid_getFieldNames_2e6d5245] = env->getMethodID(cls, "getFieldNames", "()[Ljava/lang/String;");
              mids$[mid_getMaxDocFreq_54c6a179] = env->getMethodID(cls, "getMaxDocFreq", "()I");
              mids$[mid_getMaxNumTokensParsed_54c6a179] = env->getMethodID(cls, "getMaxNumTokensParsed", "()I");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMaxWordLen_54c6a179] = env->getMethodID(cls, "getMaxWordLen", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFreq_54c6a179] = env->getMethodID(cls, "getMinTermFreq", "()I");
              mids$[mid_getMinWordLen_54c6a179] = env->getMethodID(cls, "getMinWordLen", "()I");
              mids$[mid_getSimilarity_41a9d5af] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/TFIDFSimilarity;");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_isBoost_54c6a16a] = env->getMethodID(cls, "isBoost", "()Z");
              mids$[mid_like_2ad233cc] = env->getMethodID(cls, "like", "(I)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_8dd03cea] = env->getMethodID(cls, "like", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_e557659a] = env->getMethodID(cls, "like", "(Ljava/lang/String;[Ljava/io/Reader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_retrieveInterestingTerms_d74df9a3] = env->getMethodID(cls, "retrieveInterestingTerms", "(I)[Ljava/lang/String;");
              mids$[mid_retrieveInterestingTerms_bf65abe1] = env->getMethodID(cls, "retrieveInterestingTerms", "(Ljava/io/Reader;Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_retrieveTerms_df466ac9] = env->getMethodID(cls, "retrieveTerms", "(I)Lorg/apache/lucene/util/PriorityQueue;");
              mids$[mid_retrieveTerms_ed0c2893] = env->getMethodID(cls, "retrieveTerms", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/util/PriorityQueue;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setBoost_bb0c767f] = env->getMethodID(cls, "setBoost", "(Z)V");
              mids$[mid_setBoostFactor_06298cab] = env->getMethodID(cls, "setBoostFactor", "(F)V");
              mids$[mid_setFieldNames_4dd4540c] = env->getMethodID(cls, "setFieldNames", "([Ljava/lang/String;)V");
              mids$[mid_setMaxDocFreq_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreq", "(I)V");
              mids$[mid_setMaxDocFreqPct_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreqPct", "(I)V");
              mids$[mid_setMaxNumTokensParsed_39c7bd3c] = env->getMethodID(cls, "setMaxNumTokensParsed", "(I)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMaxWordLen_39c7bd3c] = env->getMethodID(cls, "setMaxWordLen", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFreq_39c7bd3c] = env->getMethodID(cls, "setMinTermFreq", "(I)V");
              mids$[mid_setMinWordLen_39c7bd3c] = env->getMethodID(cls, "setMinWordLen", "(I)V");
              mids$[mid_setSimilarity_8af31e2e] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOOST = env->getStaticBooleanField(cls, "DEFAULT_BOOST");
              DEFAULT_FIELD_NAMES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "DEFAULT_FIELD_NAMES", "[Ljava/lang/String;"));
              DEFAULT_MAX_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MAX_DOC_FREQ");
              DEFAULT_MAX_NUM_TOKENS_PARSED = env->getStaticIntField(cls, "DEFAULT_MAX_NUM_TOKENS_PARSED");
              DEFAULT_MAX_QUERY_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_QUERY_TERMS");
              DEFAULT_MAX_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_LENGTH");
              DEFAULT_MIN_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_DOC_FREQ");
              DEFAULT_MIN_TERM_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_TERM_FREQ");
              DEFAULT_MIN_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_LENGTH");
              DEFAULT_STOP_WORDS = new ::java::util::Set(env->getStaticObjectField(cls, "DEFAULT_STOP_WORDS", "Ljava/util/Set;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac25be47, a0.this$, a1.this$)) {}

          ::java::lang::String MoreLikeThis::describeParams() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_describeParams_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThis::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          jfloat MoreLikeThis::getBoostFactor() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoostFactor_54c6a176]);
          }

          JArray< ::java::lang::String > MoreLikeThis::getFieldNames() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getFieldNames_2e6d5245]));
          }

          jint MoreLikeThis::getMaxDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMaxNumTokensParsed() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxNumTokensParsed_54c6a179]);
          }

          jint MoreLikeThis::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThis::getMaxWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxWordLen_54c6a179]);
          }

          jint MoreLikeThis::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinTermFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinWordLen_54c6a179]);
          }

          ::org::apache::lucene::search::similarities::TFIDFSimilarity MoreLikeThis::getSimilarity() const
          {
            return ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_41a9d5af]));
          }

          ::java::util::Set MoreLikeThis::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jboolean MoreLikeThis::isBoost() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isBoost_54c6a16a]);
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(jint a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_2ad233cc], a0));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_8dd03cea], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::lang::String & a0, const JArray< ::java::io::Reader > & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_e557659a], a0.this$, a1.this$));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(jint a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_d74df9a3], a0));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_bf65abe1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::PriorityQueue MoreLikeThis::retrieveTerms(jint a0) const
          {
            return ::org::apache::lucene::util::PriorityQueue(env->callObjectMethod(this$, mids$[mid_retrieveTerms_df466ac9], a0));
          }

          ::org::apache::lucene::util::PriorityQueue MoreLikeThis::retrieveTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::util::PriorityQueue(env->callObjectMethod(this$, mids$[mid_retrieveTerms_ed0c2893], a0.this$, a1.this$));
          }

          void MoreLikeThis::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThis::setBoost(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoost_bb0c767f], a0);
          }

          void MoreLikeThis::setBoostFactor(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoostFactor_06298cab], a0);
          }

          void MoreLikeThis::setFieldNames(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldNames_4dd4540c], a0.this$);
          }

          void MoreLikeThis::setMaxDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxDocFreqPct(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreqPct_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxNumTokensParsed(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxNumTokensParsed_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinTermFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setSimilarity(const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSimilarity_8af31e2e], a0.this$);
          }

          void MoreLikeThis::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThis__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThis, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boost),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boostFactor),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, fieldNames),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxDocFreq),
            DECLARE_SET_FIELD(t_MoreLikeThis, maxDocFreqPct),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxNumTokensParsed),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minTermFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, similarity),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThis__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThis, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, describeParams, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getBoostFactor, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getFieldNames, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxNumTokensParsed, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, isBoost, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, like, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveInterestingTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoost, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoostFactor, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setFieldNames, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreqPct, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxNumTokensParsed, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinTermFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setSimilarity, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setStopWords, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThis, t_MoreLikeThis, ::java::lang::Object, MoreLikeThis, t_MoreLikeThis_init_, 0, 0, t_MoreLikeThis__fields_, 0, 0);

          void t_MoreLikeThis::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThis), module, "MoreLikeThis", 0);
          }

          void t_MoreLikeThis::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "class_", make_descriptor(MoreLikeThis::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThis::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(MoreLikeThis::initializeClass);
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_BOOST", make_descriptor(MoreLikeThis::DEFAULT_BOOST));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_FIELD_NAMES", make_descriptor(JArray<jstring>(MoreLikeThis::DEFAULT_FIELD_NAMES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MAX_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_NUM_TOKENS_PARSED", make_descriptor(MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_QUERY_TERMS", make_descriptor(MoreLikeThis::DEFAULT_MAX_QUERY_TERMS));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MAX_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_TERM_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_TERM_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MIN_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_STOP_WORDS", make_descriptor(::java::util::t_Set::wrap_Object(*MoreLikeThis::DEFAULT_STOP_WORDS)));
          }

          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThis::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThis::wrap_Object(MoreLikeThis(((t_MoreLikeThis *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThis::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = MoreLikeThis(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::org::apache::lucene::search::similarities::TFIDFSimilarity a1((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MoreLikeThis(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.describeParams());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldNames());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity result((jobject) NULL);
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isBoost());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.like(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::io::Reader > a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[k", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "like", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveInterestingTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::PriorityQueue result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveTerms(a0));
                  return ::org::apache::lucene::util::t_PriorityQueue::wrap_Object(result, &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::PriorityQueue result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveTerms(a0, a1));
                  return ::org::apache::lucene::util::t_PriorityQueue::wrap_Object(result, &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setBoost(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setBoostFactor(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoostFactor", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setFieldNames(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldNames", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreqPct(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreqPct", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxNumTokensParsed(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxNumTokensParsed", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSimilarity(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isBoost());
            Py_RETURN_BOOL(value);
          }
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setBoost(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boost", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setBoostFactor(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boostFactor", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldNames());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setFieldNames(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldNames", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreq", arg);
            return -1;
          }

          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreqPct(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreqPct", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxNumTokensParsed(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxNumTokensParsed", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
            OBJ_CALL(value = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &value))
              {
                INT_CALL(self->object.setSimilarity(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "similarity", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/regex/Pattern.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilter::class$ = NULL;
          jmethodID *PatternReplaceCharFilter::mids$ = NULL;
          bool PatternReplaceCharFilter::live$ = false;
          jint PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS = (jint) 0;

          jclass PatternReplaceCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0e77162] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_init$_ee751df6] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;ILjava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_CHARS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_CHARS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_e0e77162, a0.this$, a1.this$, a2.this$)) {}

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3, const ::java::io::Reader & a4) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_ee751df6, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint PatternReplaceCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PatternReplaceCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilter, t_PatternReplaceCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, PatternReplaceCharFilter, t_PatternReplaceCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilter), module, "PatternReplaceCharFilter", 0);
          }

          void t_PatternReplaceCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "class_", make_descriptor(PatternReplaceCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternReplaceCharFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "DEFAULT_MAX_BLOCK_CHARS", make_descriptor(PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS));
          }

          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilter::wrap_Object(PatternReplaceCharFilter(((t_PatternReplaceCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::io::Reader a4((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksIsk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/SuggestStopFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *SuggestStopFilter::class$ = NULL;
            jmethodID *SuggestStopFilter::mids$ = NULL;
            bool SuggestStopFilter::live$ = false;

            jclass SuggestStopFilter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/SuggestStopFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
                mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
                mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestStopFilter::SuggestStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

            void SuggestStopFilter::end() const
            {
              env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
            }

            jboolean SuggestStopFilter::incrementToken() const
            {
              return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
            }

            void SuggestStopFilter::reset() const
            {
              env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args);

            static PyMethodDef t_SuggestStopFilter__methods_[] = {
              DECLARE_METHOD(t_SuggestStopFilter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, end, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, incrementToken, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, reset, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SuggestStopFilter, t_SuggestStopFilter, ::org::apache::lucene::analysis::TokenFilter, SuggestStopFilter, t_SuggestStopFilter_init_, 0, 0, 0, 0, 0);

            void t_SuggestStopFilter::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestStopFilter), module, "SuggestStopFilter", 0);
            }

            void t_SuggestStopFilter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "class_", make_descriptor(SuggestStopFilter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "wrapfn_", make_descriptor(t_SuggestStopFilter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestStopFilter::initializeClass, 1)))
                return NULL;
              return t_SuggestStopFilter::wrap_Object(SuggestStopFilter(((t_SuggestStopFilter *) arg)->object.this$));
            }
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestStopFilter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
              ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              SuggestStopFilter object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
              {
                INT_CALL(object = SuggestStopFilter(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.end());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "end", args, 2);
            }

            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.incrementToken());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "incrementToken", args, 2);
            }

            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.reset());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "reset", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfo::class$ = NULL;
        jmethodID *SegmentInfo::mids$ = NULL;
        jfieldID *SegmentInfo::fids$ = NULL;
        bool SegmentInfo::live$ = false;
        jint SegmentInfo::NO = (jint) 0;
        jint SegmentInfo::YES = (jint) 0;

        jclass SegmentInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f7b2b9ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;)V");
            mids$[mid_init$_23209bc5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;Ljava/util/Map;)V");
            mids$[mid_addFile_5fdc3f48] = env->getMethodID(cls, "addFile", "(Ljava/lang/String;)V");
            mids$[mid_addFiles_9bfb370d] = env->getMethodID(cls, "addFiles", "(Ljava/util/Collection;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_files_03e99967] = env->getMethodID(cls, "files", "()Ljava/util/Set;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDiagnostics_db60befd] = env->getMethodID(cls, "getDiagnostics", "()Ljava/util/Map;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getVersion_14c7b5c5] = env->getMethodID(cls, "getVersion", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setCodec_848f310e] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_setFiles_fb4f2b26] = env->getMethodID(cls, "setFiles", "(Ljava/util/Set;)V");
            mids$[mid_setVersion_5fdc3f48] = env->getMethodID(cls, "setVersion", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = env->getStaticIntField(cls, "NO");
            YES = env->getStaticIntField(cls, "YES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f7b2b9ed, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$)) {}

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6, const ::java::util::Map & a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23209bc5, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$, a7.this$)) {}

        void SegmentInfo::addFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFile_5fdc3f48], a0.this$);
        }

        void SegmentInfo::addFiles(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFiles_9bfb370d], a0.this$);
        }

        ::java::util::Map SegmentInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        jboolean SegmentInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Set SegmentInfo::files() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_files_03e99967]));
        }

        ::java::lang::String SegmentInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        ::org::apache::lucene::codecs::Codec SegmentInfo::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::java::util::Map SegmentInfo::getDiagnostics() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDiagnostics_db60befd]));
        }

        jint SegmentInfo::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jboolean SegmentInfo::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        ::java::lang::String SegmentInfo::getVersion() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getVersion_14c7b5c5]));
        }

        jint SegmentInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String SegmentInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        void SegmentInfo::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCodec_848f310e], a0.this$);
        }

        void SegmentInfo::setFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFiles_fb4f2b26], a0.this$);
        }

        void SegmentInfo::setVersion(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setVersion_5fdc3f48], a0.this$);
        }

        ::java::lang::String SegmentInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::store::Directory SegmentInfo::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        ::java::lang::String SegmentInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data);

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyGetSetDef t_SegmentInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfo, dir),
          DECLARE_GET_FIELD(t_SegmentInfo, name),
          DECLARE_GETSET_FIELD(t_SegmentInfo, codec),
          DECLARE_GET_FIELD(t_SegmentInfo, diagnostics),
          DECLARE_GET_FIELD(t_SegmentInfo, docCount),
          DECLARE_GET_FIELD(t_SegmentInfo, useCompoundFile),
          DECLARE_GETSET_FIELD(t_SegmentInfo, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, addFile, METH_O),
          DECLARE_METHOD(t_SegmentInfo, addFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_SegmentInfo, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDiagnostics, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, setCodec, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setVersion, METH_O),
          DECLARE_METHOD(t_SegmentInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfo, t_SegmentInfo, ::java::lang::Object, SegmentInfo, t_SegmentInfo_init_, 0, 0, t_SegmentInfo__fields_, 0, 0);

        void t_SegmentInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfo), module, "SegmentInfo", 0);
        }

        void t_SegmentInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "class_", make_descriptor(SegmentInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfo::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "NO", make_descriptor(SegmentInfo::NO));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "YES", make_descriptor(SegmentInfo::YES));
        }

        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentInfo::wrap_Object(SegmentInfo(((t_SegmentInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 7:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kssIZkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6));
                self->object = object;
                break;
              }
            }
            goto err;
           case 8:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              ::java::util::Map a7((jobject) NULL);
              PyTypeObject **p7;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kssIZkKK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_, &a7, &p7, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.addFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFile", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.addFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return j2p(result);
        }

        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCodec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setVersion", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return j2p(value);
        }
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setVersion(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "version", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BroadWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BroadWord::class$ = NULL;
        jmethodID *BroadWord::mids$ = NULL;
        bool BroadWord::live$ = false;
        jlong BroadWord::H16_L = (jlong) 0;
        jlong BroadWord::H8_L = (jlong) 0;
        jlong BroadWord::L16_L = (jlong) 0;
        jlong BroadWord::L8_L = (jlong) 0;
        jlong BroadWord::L9_L = (jlong) 0;

        jclass BroadWord::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BroadWord");

            mids$ = new jmethodID[max_mid];
            mids$[mid_notEquals0_8_0ee6df33] = env->getStaticMethodID(cls, "notEquals0_8", "(J)J");
            mids$[mid_select_25d05c90] = env->getStaticMethodID(cls, "select", "(JI)I");
            mids$[mid_selectNaive_25d05c90] = env->getStaticMethodID(cls, "selectNaive", "(JI)I");
            mids$[mid_smallerUpTo7_8_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpTo7_8", "(JJ)J");
            mids$[mid_smallerUpto15_16_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpto15_16", "(JJ)J");
            mids$[mid_smalleru_8_a7e12cb8] = env->getStaticMethodID(cls, "smalleru_8", "(JJ)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            H16_L = env->getStaticLongField(cls, "H16_L");
            H8_L = env->getStaticLongField(cls, "H8_L");
            L16_L = env->getStaticLongField(cls, "L16_L");
            L8_L = env->getStaticLongField(cls, "L8_L");
            L9_L = env->getStaticLongField(cls, "L9_L");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BroadWord::notEquals0_8(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_notEquals0_8_0ee6df33], a0);
        }

        jint BroadWord::select(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_select_25d05c90], a0, a1);
        }

        jint BroadWord::selectNaive(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_selectNaive_25d05c90], a0, a1);
        }

        jlong BroadWord::smallerUpTo7_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpTo7_8_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smallerUpto15_16(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpto15_16_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smalleru_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smalleru_8_a7e12cb8], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BroadWord__methods_[] = {
          DECLARE_METHOD(t_BroadWord, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, notEquals0_8, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, select, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, selectNaive, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpTo7_8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpto15_16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smalleru_8, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BroadWord, t_BroadWord, ::java::lang::Object, BroadWord, abstract_init, 0, 0, 0, 0, 0);

        void t_BroadWord::install(PyObject *module)
        {
          installType(&PY_TYPE(BroadWord), module, "BroadWord", 0);
        }

        void t_BroadWord::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "class_", make_descriptor(BroadWord::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "wrapfn_", make_descriptor(t_BroadWord::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BroadWord::initializeClass);
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H16_L", make_descriptor(BroadWord::H16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H8_L", make_descriptor(BroadWord::H8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L16_L", make_descriptor(BroadWord::L16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L8_L", make_descriptor(BroadWord::L8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L9_L", make_descriptor(BroadWord::L9_L));
        }

        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BroadWord::initializeClass, 1)))
            return NULL;
          return t_BroadWord::wrap_Object(BroadWord(((t_BroadWord *) arg)->object.this$));
        }
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BroadWord::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::notEquals0_8(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "notEquals0_8", arg);
          return NULL;
        }

        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::select(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "select", args);
          return NULL;
        }

        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::selectNaive(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "selectNaive", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpTo7_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpTo7_8", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpto15_16(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpto15_16", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smalleru_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smalleru_8", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *UnescapedCharSequence::class$ = NULL;
              jmethodID *UnescapedCharSequence::mids$ = NULL;
              bool UnescapedCharSequence::live$ = false;

              jclass UnescapedCharSequence::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_init$_225aaf87] = env->getMethodID(cls, "<init>", "([C[ZII)V");
                  mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                  mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                  mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                  mids$[mid_toLowerCase_0df08ccc] = env->getStaticMethodID(cls, "toLowerCase", "(Ljava/lang/CharSequence;Ljava/util/Locale;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_14c7b5c5] = env->getMethodID(cls, "toStringEscaped", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_c783d655] = env->getMethodID(cls, "toStringEscaped", "([C)Ljava/lang/String;");
                  mids$[mid_wasEscaped_39c7bd30] = env->getMethodID(cls, "wasEscaped", "(I)Z");
                  mids$[mid_wasEscaped_2fbf15ac] = env->getStaticMethodID(cls, "wasEscaped", "(Ljava/lang/CharSequence;I)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              UnescapedCharSequence::UnescapedCharSequence(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

              UnescapedCharSequence::UnescapedCharSequence(const JArray< jchar > & a0, const JArray< jboolean > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_225aaf87, a0.this$, a1.this$, a2, a3)) {}

              jchar UnescapedCharSequence::charAt(jint a0) const
              {
                return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
              }

              jint UnescapedCharSequence::length() const
              {
                return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
              }

              ::java::lang::CharSequence UnescapedCharSequence::subSequence(jint a0, jint a1) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
              }

              ::java::lang::CharSequence UnescapedCharSequence::toLowerCase(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::CharSequence(env->callStaticObjectMethod(cls, mids$[mid_toLowerCase_0df08ccc], a0.this$, a1.this$));
              }

              ::java::lang::String UnescapedCharSequence::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped(const JArray< jchar > & a0) const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_c783d655], a0.this$));
              }

              jboolean UnescapedCharSequence::wasEscaped(jint a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_wasEscaped_39c7bd30], a0);
              }

              jboolean UnescapedCharSequence::wasEscaped(const ::java::lang::CharSequence & a0, jint a1)
              {
                jclass cls = env->getClass(initializeClass);
                return env->callStaticBooleanMethod(cls, mids$[mid_wasEscaped_2fbf15ac], a0.this$, a1);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg);
              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds);
              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self);
              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_UnescapedCharSequence__methods_[] = {
                DECLARE_METHOD(t_UnescapedCharSequence, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, charAt, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, length, METH_NOARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, subSequence, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toLowerCase, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, toString, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toStringEscaped, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped_, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(UnescapedCharSequence, t_UnescapedCharSequence, ::java::lang::Object, UnescapedCharSequence, t_UnescapedCharSequence_init_, 0, 0, 0, 0, 0);

              void t_UnescapedCharSequence::install(PyObject *module)
              {
                installType(&PY_TYPE(UnescapedCharSequence), module, "UnescapedCharSequence", 0);
              }

              void t_UnescapedCharSequence::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "class_", make_descriptor(UnescapedCharSequence::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "wrapfn_", make_descriptor(t_UnescapedCharSequence::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, UnescapedCharSequence::initializeClass, 1)))
                  return NULL;
                return t_UnescapedCharSequence::wrap_Object(UnescapedCharSequence(((t_UnescapedCharSequence *) arg)->object.this$));
              }
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, UnescapedCharSequence::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    JArray< jboolean > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "[C[ZII", &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jchar result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.charAt(a0));
                  return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                }

                PyErr_SetArgsError((PyObject *) self, "charAt", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self)
              {
                jint result;
                OBJ_CALL(result = self->object.length());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subSequence(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "subSequence", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::toLowerCase(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "toLowerCase", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(UnescapedCharSequence), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toStringEscaped());
                    return j2p(result);
                  }
                  break;
                 case 1:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                      OBJ_CALL(result = self->object.toStringEscaped(a0));
                      return j2p(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toStringEscaped", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jboolean result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.wasEscaped(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "wasEscaped", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jboolean result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::wasEscaped(a0, a1));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError(type, "wasEscaped_", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "java/lang/String.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ToStringUtils::class$ = NULL;
        jmethodID *ToStringUtils::mids$ = NULL;
        bool ToStringUtils::live$ = false;

        jclass ToStringUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ToStringUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_boost_5ded254a] = env->getStaticMethodID(cls, "boost", "(F)Ljava/lang/String;");
            mids$[mid_byteArray_982a0ced] = env->getStaticMethodID(cls, "byteArray", "(Ljava/lang/StringBuilder;[B)V");
            mids$[mid_longHex_3e02f30e] = env->getStaticMethodID(cls, "longHex", "(J)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String ToStringUtils::boost(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_boost_5ded254a], a0));
        }

        void ToStringUtils::byteArray(const ::java::lang::StringBuilder & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_byteArray_982a0ced], a0.this$, a1.this$);
        }

        ::java::lang::String ToStringUtils::longHex(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_longHex_3e02f30e], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args);
        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ToStringUtils__methods_[] = {
          DECLARE_METHOD(t_ToStringUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, boost, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, byteArray, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, longHex, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ToStringUtils, t_ToStringUtils, ::java::lang::Object, ToStringUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_ToStringUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(ToStringUtils), module, "ToStringUtils", 0);
        }

        void t_ToStringUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "class_", make_descriptor(ToStringUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "wrapfn_", make_descriptor(t_ToStringUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ToStringUtils::initializeClass, 1)))
            return NULL;
          return t_ToStringUtils::wrap_Object(ToStringUtils(((t_ToStringUtils *) arg)->object.this$));
        }
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ToStringUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::boost(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "boost", arg);
          return NULL;
        }

        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::ToStringUtils::byteArray(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "byteArray", args);
          return NULL;
        }

        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::longHex(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "longHex", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsWriter::class$ = NULL;
        jmethodID *StoredFieldsWriter::mids$ = NULL;
        bool StoredFieldsWriter::live$ = false;

        jclass StoredFieldsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_addDocument_2c3bf2c7] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/index/FieldInfos;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void StoredFieldsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void StoredFieldsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        jint StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void StoredFieldsWriter::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args);
        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args);

        static PyMethodDef t_StoredFieldsWriter__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, merge, METH_O),
          DECLARE_METHOD(t_StoredFieldsWriter, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, writeField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsWriter, t_StoredFieldsWriter, ::java::lang::Object, StoredFieldsWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsWriter), module, "StoredFieldsWriter", 0);
        }

        void t_StoredFieldsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "class_", make_descriptor(StoredFieldsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsWriter::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsWriter::wrap_Object(StoredFieldsWriter(((t_StoredFieldsWriter *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Double::class$ = NULL;
    jmethodID *Double::mids$ = NULL;
    bool Double::live$ = false;
    jint Double::MAX_EXPONENT = (jint) 0;
    jdouble Double::MAX_VALUE = (jdouble) 0;
    jint Double::MIN_EXPONENT = (jint) 0;
    jdouble Double::MIN_NORMAL = (jdouble) 0;
    jdouble Double::MIN_VALUE = (jdouble) 0;
    jdouble Double::NEGATIVE_INFINITY = (jdouble) 0;
    jdouble Double::NaN = (jdouble) 0;
    jdouble Double::POSITIVE_INFINITY = (jdouble) 0;
    jint Double::SIZE = (jint) 0;
    ::java::lang::Class *Double::TYPE = NULL;

    jclass Double::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Double");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_b1e28667] = env->getStaticMethodID(cls, "compare", "(DD)I");
        mids$[mid_compareTo_8baed073] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Double;)I");
        mids$[mid_doubleToLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToLongBits", "(D)J");
        mids$[mid_doubleToRawLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToRawLongBits", "(D)J");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_5d1c7649] = env->getStaticMethodID(cls, "isInfinite", "(D)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_5d1c7649] = env->getStaticMethodID(cls, "isNaN", "(D)Z");
        mids$[mid_longBitsToDouble_0ee6df3d] = env->getStaticMethodID(cls, "longBitsToDouble", "(J)D");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseDouble_5fdc3f5a] = env->getStaticMethodID(cls, "parseDouble", "(Ljava/lang/String;)D");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toHexString_1b4624f8] = env->getStaticMethodID(cls, "toHexString", "(D)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_1b4624f8] = env->getStaticMethodID(cls, "toString", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_ad1fcbf0] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/Double;");
        mids$[mid_valueOf_16296787] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Double;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticDoubleField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticDoubleField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticDoubleField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticDoubleField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticDoubleField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticDoubleField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Double::Double(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Double::Double(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Double::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Double::compare(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_b1e28667], a0, a1);
    }

    jint Double::compareTo(const Double & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_8baed073], a0.this$);
    }

    jlong Double::doubleToLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToLongBits_5d1c7659], a0);
    }

    jlong Double::doubleToRawLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToRawLongBits_5d1c7659], a0);
    }

    jdouble Double::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Double::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Double::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Double::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Double::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Double::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Double::isInfinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_5d1c7649], a0);
    }

    jboolean Double::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Double::isNaN(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_5d1c7649], a0);
    }

    jdouble Double::longBitsToDouble(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_longBitsToDouble_0ee6df3d], a0);
    }

    jlong Double::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jdouble Double::parseDouble(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_parseDouble_5fdc3f5a], a0.this$);
    }

    jshort Double::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Double::toHexString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_1b4624f8], a0));
    }

    ::java::lang::String Double::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Double::toString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_1b4624f8], a0));
    }

    Double Double::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad1fcbf0], a0));
    }

    Double Double::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_16296787], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg);
    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_equals(t_Double *self, PyObject *args);
    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args);
    static PyObject *t_Double_intValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_isInfinite(t_Double *self);
    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isNaN(t_Double *self);
    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_toString(t_Double *self, PyObject *args);
    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_get__infinite(t_Double *self, void *data);
    static PyObject *t_Double_get__naN(t_Double *self, void *data);
    static PyGetSetDef t_Double__fields_[] = {
      DECLARE_GET_FIELD(t_Double, infinite),
      DECLARE_GET_FIELD(t_Double, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Double__methods_[] = {
      DECLARE_METHOD(t_Double, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, compareTo, METH_O),
      DECLARE_METHOD(t_Double, doubleToLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleToRawLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, equals, METH_VARARGS),
      DECLARE_METHOD(t_Double, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Double, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Double, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Double, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longBitsToDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, parseDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, toString, METH_VARARGS),
      DECLARE_METHOD(t_Double, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Double, t_Double, ::java::lang::Number, Double, t_Double_init_, 0, 0, t_Double__fields_, 0, 0);

    void t_Double::install(PyObject *module)
    {
      installType(&PY_TYPE(Double), module, "Double", 0);
    }

    void t_Double::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "class_", make_descriptor(Double::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "wrapfn_", make_descriptor(unboxDouble));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "boxfn_", make_descriptor(boxDouble));
      env->getClass(Double::initializeClass);
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_EXPONENT", make_descriptor(Double::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_VALUE", make_descriptor(Double::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_EXPONENT", make_descriptor(Double::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_NORMAL", make_descriptor(Double::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_VALUE", make_descriptor(Double::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Double::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NaN", make_descriptor(Double::NaN));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "POSITIVE_INFINITY", make_descriptor(Double::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "SIZE", make_descriptor(Double::SIZE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Double::TYPE)));
    }

    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Double::initializeClass, 1)))
        return NULL;
      return t_Double::wrap_Object(Double(((t_Double *) arg)->object.this$));
    }
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Double::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jint result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg)
    {
      Double a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToRawLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToRawLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Double_equals(t_Double *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Double_intValue(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Double_isInfinite(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Double_isNaN(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jdouble result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::longBitsToDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "longBitsToDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_longValue(t_Double *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jdouble result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::parseDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Double_toString(t_Double *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Double_get__infinite(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Double_get__naN(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilterFactory::class$ = NULL;
          jmethodID *TrimFilterFactory::mids$ = NULL;
          bool TrimFilterFactory::live$ = false;

          jclass TrimFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_59450f3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/TrimFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilterFactory::TrimFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::TrimFilter TrimFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::TrimFilter(env->callObjectMethod(this$, mids$[mid_create_59450f3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args);

          static PyMethodDef t_TrimFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TrimFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilterFactory, t_TrimFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TrimFilterFactory, t_TrimFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TrimFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilterFactory), module, "TrimFilterFactory", 0);
          }

          void t_TrimFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "class_", make_descriptor(TrimFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TrimFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TrimFilterFactory::wrap_Object(TrimFilterFactory(((t_TrimFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TrimFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TrimFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::TrimFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_TrimFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TrimFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianAnalyzer::class$ = NULL;
          jmethodID *ItalianAnalyzer::mids$ = NULL;
          bool ItalianAnalyzer::live$ = false;
          ::java::lang::String *ItalianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ItalianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ItalianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data);
          static PyGetSetDef t_ItalianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ItalianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ItalianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ItalianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianAnalyzer, t_ItalianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ItalianAnalyzer, t_ItalianAnalyzer_init_, 0, 0, t_ItalianAnalyzer__fields_, 0, 0);

          void t_ItalianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianAnalyzer), module, "ItalianAnalyzer", 0);
          }

          void t_ItalianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "class_", make_descriptor(ItalianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ItalianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ItalianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ItalianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ItalianAnalyzer::wrap_Object(ItalianAnalyzer(((t_ItalianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::it::ItalianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilterFactory::class$ = NULL;
          jmethodID *GermanNormalizationFilterFactory::mids$ = NULL;
          bool GermanNormalizationFilterFactory::live$ = false;

          jclass GermanNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilterFactory::GermanNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GermanNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self);
          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_GermanNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GermanNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory_init_, 0, 0, t_GermanNormalizationFilterFactory__fields_, 0, 0);

          void t_GermanNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilterFactory), module, "GermanNormalizationFilterFactory", 0);
          }

          void t_GermanNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "class_", make_descriptor(GermanNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilterFactory::wrap_Object(GermanNormalizationFilterFactory(((t_GermanNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter$Side::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter$Side::mids$ = NULL;
          bool EdgeNGramTokenFilter$Side::live$ = false;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::BACK = NULL;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::FRONT = NULL;

          jclass EdgeNGramTokenFilter$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_e04ee6cc] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_valueOf_e04ee6cc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_values_16957b8a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              FRONT = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String EdgeNGramTokenFilter$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_e04ee6cc], a0.this$));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e04ee6cc], a0.this$));
          }

          JArray< EdgeNGramTokenFilter$Side > EdgeNGramTokenFilter$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< EdgeNGramTokenFilter$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_16957b8a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self);
          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyGetSetDef t_EdgeNGramTokenFilter$Side__fields_[] = {
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, label),
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EdgeNGramTokenFilter$Side__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter$Side, t_EdgeNGramTokenFilter$Side, ::java::lang::Enum, EdgeNGramTokenFilter$Side, abstract_init, 0, 0, t_EdgeNGramTokenFilter$Side__fields_, 0, 0);
          PyObject *t_EdgeNGramTokenFilter$Side::wrap_Object(const EdgeNGramTokenFilter$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_EdgeNGramTokenFilter$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_EdgeNGramTokenFilter$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter$Side), module, "EdgeNGramTokenFilter$Side", 0);
          }

          void t_EdgeNGramTokenFilter$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "BACK", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "FRONT", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::FRONT)));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter$Side::wrap_Object(EdgeNGramTokenFilter$Side(((t_EdgeNGramTokenFilter$Side *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::getSide(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::valueOf(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type)
          {
            JArray< EdgeNGramTokenFilter$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::values());
            return JArray<jobject>(result.this$).wrap(t_EdgeNGramTokenFilter$Side::wrap_jobject);
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilter::class$ = NULL;
          jmethodID *StopFilter::mids$ = NULL;
          bool StopFilter::live$ = false;

          jclass StopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_makeStopSet_9f4ce96f] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_bbdc7fc0] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_08a7acff] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_81b79166] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilter::StopFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_9f4ce96f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_bbdc7fc0], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_08a7acff], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_81b79166], a0.this$, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StopFilter__methods_[] = {
            DECLARE_METHOD(t_StopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, makeStopSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilter, t_StopFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, StopFilter, t_StopFilter_init_, 0, 0, 0, 0, 0);

          void t_StopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilter), module, "StopFilter", 0);
          }

          void t_StopFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "class_", make_descriptor(StopFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "wrapfn_", make_descriptor(t_StopFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilter::initializeClass, 1)))
              return NULL;
            return t_StopFilter::wrap_Object(StopFilter(((t_StopFilter *) arg)->object.this$));
          }
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
            PyTypeObject **p2;
            StopFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = StopFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K[sZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeStopSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler::class$ = NULL;
              jmethodID *StandardQueryConfigHandler::mids$ = NULL;
              bool StandardQueryConfigHandler::live$ = false;

              jclass StandardQueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler::StandardQueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler, t_StandardQueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler, StandardQueryConfigHandler, t_StandardQueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler), module, "StandardQueryConfigHandler", 0);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "Operator", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$Operator)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "ConfigurationKeys", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys)));
              }

              void t_StandardQueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler::wrap_Object(StandardQueryConfigHandler(((t_StandardQueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumFloatAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumFloatAssociations::mids$ = NULL;
          bool TaxonomyFacetSumFloatAssociations::live$ = false;

          jclass TaxonomyFacetSumFloatAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumFloatAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumFloatAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumFloatAssociations), module, "TaxonomyFacetSumFloatAssociations", 0);
          }

          void t_TaxonomyFacetSumFloatAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumFloatAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumFloatAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumFloatAssociations::wrap_Object(TaxonomyFacetSumFloatAssociations(((t_TaxonomyFacetSumFloatAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemmer::class$ = NULL;
          jmethodID *KStemmer::mids$ = NULL;
          bool KStemmer::live$ = false;

          jclass KStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemmer");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_KStemmer__methods_[] = {
            DECLARE_METHOD(t_KStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemmer, t_KStemmer, ::java::lang::Object, KStemmer, abstract_init, 0, 0, 0, 0, 0);

          void t_KStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemmer), module, "KStemmer", 0);
          }

          void t_KStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "class_", make_descriptor(KStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "wrapfn_", make_descriptor(t_KStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemmer::initializeClass, 1)))
              return NULL;
            return t_KStemmer::wrap_Object(KStemmer(((t_KStemmer *) arg)->object.this$));
          }
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Doubles::class$ = NULL;
        jmethodID *FieldCache$Doubles::mids$ = NULL;
        bool FieldCache$Doubles::live$ = false;
        FieldCache$Doubles *FieldCache$Doubles::EMPTY = NULL;

        jclass FieldCache$Doubles::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Doubles");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2e] = env->getMethodID(cls, "get", "(I)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Doubles(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Doubles;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Doubles::FieldCache$Doubles() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble FieldCache$Doubles::get(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_get_39c7bd2e], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Doubles__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Doubles, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Doubles, t_FieldCache$Doubles, ::java::lang::Object, FieldCache$Doubles, t_FieldCache$Doubles_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Doubles::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Doubles), module, "FieldCache$Doubles", 0);
        }

        void t_FieldCache$Doubles::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "class_", make_descriptor(FieldCache$Doubles::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Doubles::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Doubles::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Doubles::wrap_Object(*FieldCache$Doubles::EMPTY)));
        }

        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Doubles::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Doubles::wrap_Object(FieldCache$Doubles(((t_FieldCache$Doubles *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Doubles::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Doubles object((jobject) NULL);

          INT_CALL(object = FieldCache$Doubles());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *NoTokenFoundQueryNode::class$ = NULL;
              jmethodID *NoTokenFoundQueryNode::mids$ = NULL;
              bool NoTokenFoundQueryNode::live$ = false;

              jclass NoTokenFoundQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoTokenFoundQueryNode::NoTokenFoundQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode NoTokenFoundQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence NoTokenFoundQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NoTokenFoundQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args);

              static PyMethodDef t_NoTokenFoundQueryNode__methods_[] = {
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoTokenFoundQueryNode, t_NoTokenFoundQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, NoTokenFoundQueryNode, t_NoTokenFoundQueryNode_init_, 0, 0, 0, 0, 0);

              void t_NoTokenFoundQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NoTokenFoundQueryNode), module, "NoTokenFoundQueryNode", 0);
              }

              void t_NoTokenFoundQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "class_", make_descriptor(NoTokenFoundQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NoTokenFoundQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoTokenFoundQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NoTokenFoundQueryNode::wrap_Object(NoTokenFoundQueryNode(((t_NoTokenFoundQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoTokenFoundQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds)
              {
                NoTokenFoundQueryNode object((jobject) NULL);

                INT_CALL(object = NoTokenFoundQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldDocValuesFormat::class$ = NULL;
          jmethodID *PerFieldDocValuesFormat::mids$ = NULL;
          bool PerFieldDocValuesFormat::live$ = false;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldDocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldDocValuesFormat::PerFieldDocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer PerFieldDocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer PerFieldDocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesFormat PerFieldDocValuesFormat::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldDocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldDocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, getDocValuesFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldDocValuesFormat, t_PerFieldDocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, PerFieldDocValuesFormat, t_PerFieldDocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldDocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldDocValuesFormat), module, "PerFieldDocValuesFormat", 0);
          }

          void t_PerFieldDocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "class_", make_descriptor(PerFieldDocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldDocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldDocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldDocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldDocValuesFormat::wrap_Object(PerFieldDocValuesFormat(((t_PerFieldDocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldDocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldDocValuesFormat object((jobject) NULL);

            INT_CALL(object = PerFieldDocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Collector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Collector::class$ = NULL;
        jmethodID *Collector::mids$ = NULL;
        bool Collector::live$ = false;

        jclass Collector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Collector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Collector::Collector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean Collector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void Collector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void Collector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void Collector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self);
        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg);
        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data);
        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data);
        static PyGetSetDef t_Collector__fields_[] = {
          DECLARE_SET_FIELD(t_Collector, nextReader),
          DECLARE_SET_FIELD(t_Collector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Collector__methods_[] = {
          DECLARE_METHOD(t_Collector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, acceptsDocsOutOfOrder, METH_NOARGS),
          DECLARE_METHOD(t_Collector, collect, METH_O),
          DECLARE_METHOD(t_Collector, setNextReader, METH_O),
          DECLARE_METHOD(t_Collector, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Collector, t_Collector, ::java::lang::Object, Collector, t_Collector_init_, 0, 0, t_Collector__fields_, 0, 0);

        void t_Collector::install(PyObject *module)
        {
          installType(&PY_TYPE(Collector), module, "Collector", 0);
        }

        void t_Collector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "class_", make_descriptor(Collector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "wrapfn_", make_descriptor(t_Collector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Collector::initializeClass, 1)))
            return NULL;
          return t_Collector::wrap_Object(Collector(((t_Collector *) arg)->object.this$));
        }
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Collector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds)
        {
          Collector object((jobject) NULL);

          INT_CALL(object = Collector());
          self->object = object;

          return 0;
        }

        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilterFactory::class$ = NULL;
          jmethodID *BulgarianStemFilterFactory::mids$ = NULL;
          bool BulgarianStemFilterFactory::live$ = false;

          jclass BulgarianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilterFactory::BulgarianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BulgarianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilterFactory, t_BulgarianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BulgarianStemFilterFactory, t_BulgarianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilterFactory), module, "BulgarianStemFilterFactory", 0);
          }

          void t_BulgarianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "class_", make_descriptor(BulgarianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilterFactory::wrap_Object(BulgarianStemFilterFactory(((t_BulgarianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BulgarianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BulgarianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NGramPhraseQuery::class$ = NULL;
        jmethodID *NGramPhraseQuery::mids$ = NULL;
        bool NGramPhraseQuery::live$ = false;

        jclass NGramPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NGramPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NGramPhraseQuery::NGramPhraseQuery(jint a0) : ::org::apache::lucene::search::PhraseQuery(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean NGramPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NGramPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query NGramPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args);

        static PyMethodDef t_NGramPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_NGramPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NGramPhraseQuery, t_NGramPhraseQuery, ::org::apache::lucene::search::PhraseQuery, NGramPhraseQuery, t_NGramPhraseQuery_init_, 0, 0, 0, 0, 0);

        void t_NGramPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NGramPhraseQuery), module, "NGramPhraseQuery", 0);
        }

        void t_NGramPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "class_", make_descriptor(NGramPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_NGramPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NGramPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_NGramPhraseQuery::wrap_Object(NGramPhraseQuery(((t_NGramPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NGramPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          NGramPhraseQuery object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = NGramPhraseQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/Reader.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableField::class$ = NULL;
        jmethodID *IndexableField::mids$ = NULL;
        bool IndexableField::live$ = false;

        jclass IndexableField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_58dcbc9c] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef IndexableField::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat IndexableField::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::index::IndexableFieldType IndexableField::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_58dcbc9c]));
        }

        ::java::lang::String IndexableField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number IndexableField::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader IndexableField::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        ::java::lang::String IndexableField::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream IndexableField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self);
        static PyObject *t_IndexableField_boost(t_IndexableField *self);
        static PyObject *t_IndexableField_fieldType(t_IndexableField *self);
        static PyObject *t_IndexableField_name(t_IndexableField *self);
        static PyObject *t_IndexableField_numericValue(t_IndexableField *self);
        static PyObject *t_IndexableField_readerValue(t_IndexableField *self);
        static PyObject *t_IndexableField_stringValue(t_IndexableField *self);
        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args);

        static PyMethodDef t_IndexableField__methods_[] = {
          DECLARE_METHOD(t_IndexableField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, boost, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, name, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableField, t_IndexableField, ::java::lang::Object, IndexableField, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableField::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableField), module, "IndexableField", 0);
        }

        void t_IndexableField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "class_", make_descriptor(IndexableField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "wrapfn_", make_descriptor(t_IndexableField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableField::initializeClass, 1)))
            return NULL;
          return t_IndexableField::wrap_Object(IndexableField(((t_IndexableField *) arg)->object.this$));
        }
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_IndexableField_boost(t_IndexableField *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_IndexableField_fieldType(t_IndexableField *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_IndexableField_name(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_IndexableField_numericValue(t_IndexableField *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_IndexableField_readerValue(t_IndexableField *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_IndexableField_stringValue(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizer::class$ = NULL;
          jmethodID *StandardTokenizer::mids$ = NULL;
          bool StandardTokenizer::live$ = false;
          jint StandardTokenizer::ACRONYM = (jint) 0;
          jint StandardTokenizer::ACRONYM_DEP = (jint) 0;
          jint StandardTokenizer::ALPHANUM = (jint) 0;
          jint StandardTokenizer::APOSTROPHE = (jint) 0;
          jint StandardTokenizer::CJ = (jint) 0;
          jint StandardTokenizer::COMPANY = (jint) 0;
          jint StandardTokenizer::EMAIL = (jint) 0;
          jint StandardTokenizer::HANGUL = (jint) 0;
          jint StandardTokenizer::HIRAGANA = (jint) 0;
          jint StandardTokenizer::HOST = (jint) 0;
          jint StandardTokenizer::IDEOGRAPHIC = (jint) 0;
          jint StandardTokenizer::KATAKANA = (jint) 0;
          jint StandardTokenizer::NUM = (jint) 0;
          jint StandardTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *StandardTokenizer::TOKEN_TYPES = NULL;

          jclass StandardTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              HOST = env->getStaticIntField(cls, "HOST");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void StandardTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void StandardTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint StandardTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean StandardTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void StandardTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void StandardTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self);
          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg);
          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data);
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizer__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizer, t_StandardTokenizer, ::org::apache::lucene::analysis::Tokenizer, StandardTokenizer, t_StandardTokenizer_init_, 0, 0, t_StandardTokenizer__fields_, 0, 0);

          void t_StandardTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizer), module, "StandardTokenizer", 0);
          }

          void t_StandardTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "class_", make_descriptor(StandardTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM", make_descriptor(StandardTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(StandardTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ALPHANUM", make_descriptor(StandardTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "APOSTROPHE", make_descriptor(StandardTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "CJ", make_descriptor(StandardTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "COMPANY", make_descriptor(StandardTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "EMAIL", make_descriptor(StandardTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HANGUL", make_descriptor(StandardTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HIRAGANA", make_descriptor(StandardTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HOST", make_descriptor(StandardTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(StandardTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "KATAKANA", make_descriptor(StandardTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "NUM", make_descriptor(StandardTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(StandardTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(StandardTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizer::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizer::wrap_Object(StandardTokenizer(((t_StandardTokenizer *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Explanation.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanWeight::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanWeight::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanWeight::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7d11f1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/payloads/PayloadNearQuery;Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery$PayloadNearSpanWeight::PayloadNearQuery$PayloadNearSpanWeight(const ::org::apache::lucene::search::payloads::PayloadNearQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, const ::org::apache::lucene::search::IndexSearcher & a2) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_a7d11f1c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Explanation PayloadNearQuery$PayloadNearSpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Scorer PayloadNearQuery$PayloadNearSpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanWeight__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight, ::org::apache::lucene::search::spans::SpanWeight, PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), module, "PayloadNearQuery$PayloadNearSpanWeight", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanWeight::wrap_Object(PayloadNearQuery$PayloadNearSpanWeight(((t_PayloadNearQuery$PayloadNearSpanWeight *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::payloads::PayloadNearQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            PayloadNearQuery$PayloadNearSpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::payloads::PayloadNearQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PayloadNearQuery$PayloadNearSpanWeight(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization::class$ = NULL;
          jmethodID *Normalization::mids$ = NULL;
          bool Normalization::live$ = false;

          jclass Normalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization::Normalization() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args);

          static PyMethodDef t_Normalization__methods_[] = {
            DECLARE_METHOD(t_Normalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization, t_Normalization, ::java::lang::Object, Normalization, t_Normalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization), module, "Normalization", 0);
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "NoNormalization", make_descriptor(&PY_TYPE(Normalization$NoNormalization)));
          }

          void t_Normalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "class_", make_descriptor(Normalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization::initializeClass, 1)))
              return NULL;
            return t_Normalization::wrap_Object(Normalization(((t_Normalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization object((jobject) NULL);

            INT_CALL(object = Normalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tfn", args);
            return NULL;
          }

          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *GroupQueryNode::class$ = NULL;
              jmethodID *GroupQueryNode::mids$ = NULL;
              bool GroupQueryNode::live$ = false;

              jclass GroupQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cc04aeef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNode::GroupQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_cc04aeef, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              void GroupQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence GroupQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String GroupQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self);
              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg);
              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data);
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNode, child),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNode__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_GroupQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNode, t_GroupQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, GroupQueryNode, t_GroupQueryNode_init_, 0, 0, t_GroupQueryNode__fields_, 0, 0);

              void t_GroupQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNode), module, "GroupQueryNode", 0);
              }

              void t_GroupQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "class_", make_descriptor(GroupQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNode::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNode::wrap_Object(GroupQueryNode(((t_GroupQueryNode *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                GroupQueryNode object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  INT_CALL(object = GroupQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilterFactory::class$ = NULL;
          jmethodID *LimitTokenPositionFilterFactory::mids$ = NULL;
          bool LimitTokenPositionFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY = NULL;

          jclass LimitTokenPositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_POSITION_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_POSITION_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilterFactory::LimitTokenPositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenPositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilterFactory), module, "LimitTokenPositionFilterFactory", 0);
          }

          void t_LimitTokenPositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenPositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenPositionFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "MAX_TOKEN_POSITION_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY)));
          }

          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilterFactory::wrap_Object(LimitTokenPositionFilterFactory(((t_LimitTokenPositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenPositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenPositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetField::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetField::mids$ = NULL;
          jfieldID *SortedSetDocValuesFacetField::fids$ = NULL;
          bool SortedSetDocValuesFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *SortedSetDocValuesFacetField::TYPE = NULL;

          jclass SortedSetDocValuesFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetField::SortedSetDocValuesFacetField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SortedSetDocValuesFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data);
          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, dim),
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesFacetField__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField, ::org::apache::lucene::document::Field, SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField_init_, 0, 0, t_SortedSetDocValuesFacetField__fields_, 0, 0);

          void t_SortedSetDocValuesFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetField), module, "SortedSetDocValuesFacetField", 0);
          }

          void t_SortedSetDocValuesFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetDocValuesFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesFacetField::TYPE)));
          }

          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetField::wrap_Object(SortedSetDocValuesFacetField(((t_SortedSetDocValuesFacetField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            SortedSetDocValuesFacetField object((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetField(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonListIterator.h"
#include "java/lang/Object.h"
#include "java/util/ListIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonListIterator::class$ = NULL;
        jmethodID *PythonListIterator::mids$ = NULL;
        bool PythonListIterator::live$ = false;

        jclass PythonListIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonListIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588ee] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)V");
            mids$[mid_hasPrevious_54c6a16a] = env->getMethodID(cls, "hasPrevious", "()Z");
            mids$[mid_nextIndex_54c6a179] = env->getMethodID(cls, "nextIndex", "()I");
            mids$[mid_previous_846352c3] = env->getMethodID(cls, "previous", "()Ljava/lang/Object;");
            mids$[mid_previousIndex_54c6a179] = env->getMethodID(cls, "previousIndex", "()I");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonListIterator::PythonListIterator() : ::org::apache::pylucene::util::PythonIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonListIterator::add(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_290588ee], a0.this$);
        }

        jboolean PythonListIterator::hasPrevious() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPrevious_54c6a16a]);
        }

        jint PythonListIterator::nextIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_nextIndex_54c6a179]);
        }

        ::java::lang::Object PythonListIterator::previous() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_previous_846352c3]));
        }

        jint PythonListIterator::previousIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_previousIndex_54c6a179]);
        }

        void PythonListIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }

        void PythonListIterator::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg);
        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args);
        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg);

        static PyMethodDef t_PythonListIterator__methods_[] = {
          DECLARE_METHOD(t_PythonListIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, add, METH_O),
          DECLARE_METHOD(t_PythonListIterator, hasPrevious, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, nextIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previous, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previousIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonListIterator, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonListIterator, t_PythonListIterator, ::org::apache::pylucene::util::PythonIterator, PythonListIterator, t_PythonListIterator_init_, 0, 0, 0, 0, 0);

        void t_PythonListIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonListIterator), module, "PythonListIterator", 0);
        }

        void t_PythonListIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "class_", make_descriptor(PythonListIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonListIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonListIterator::initializeClass, 1)))
            return NULL;
          return t_PythonListIterator::wrap_Object(PythonListIterator(((t_PythonListIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonListIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonListIterator object((jobject) NULL);

          INT_CALL(object = PythonListIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPrevious());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.previous());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.previousIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonListIterator), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FilterInputStream::class$ = NULL;
    jmethodID *FilterInputStream::mids$ = NULL;
    bool FilterInputStream::live$ = false;

    jclass FilterInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FilterInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint FilterInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FilterInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void FilterInputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean FilterInputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint FilterInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void FilterInputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong FilterInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args);

    static PyMethodDef t_FilterInputStream__methods_[] = {
      DECLARE_METHOD(t_FilterInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, mark, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, reset, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FilterInputStream, t_FilterInputStream, ::java::io::InputStream, FilterInputStream, abstract_init, 0, 0, 0, 0, 0);

    void t_FilterInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FilterInputStream), module, "FilterInputStream", 0);
    }

    void t_FilterInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "class_", make_descriptor(FilterInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "wrapfn_", make_descriptor(t_FilterInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FilterInputStream::initializeClass, 1)))
        return NULL;
      return t_FilterInputStream::wrap_Object(FilterInputStream(((t_FilterInputStream *) arg)->object.this$));
    }
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FilterInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanScorer::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanScorer::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanScorer::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayloads_a306eb3e] = env->getMethodID(cls, "getPayloads", "([Lorg/apache/lucene/search/spans/Spans;)V");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");
              mids$[mid_processPayloads_c09a1e75] = env->getMethodID(cls, "processPayloads", "(Ljava/util/Collection;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PayloadNearQuery$PayloadNearSpanScorer::getPayloads(const JArray< ::org::apache::lucene::search::spans::Spans > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getPayloads_a306eb3e], a0.this$);
          }

          jfloat PayloadNearQuery$PayloadNearSpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanScorer__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, getPayloads, METH_O),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanScorer, t_PayloadNearQuery$PayloadNearSpanScorer, ::org::apache::lucene::search::spans::SpanScorer, PayloadNearQuery$PayloadNearSpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), module, "PayloadNearQuery$PayloadNearSpanScorer", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanScorer::wrap_Object(PayloadNearQuery$PayloadNearSpanScorer(((t_PayloadNearQuery$PayloadNearSpanScorer *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::search::spans::Spans::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getPayloads(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloads", arg);
            return NULL;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), (PyObject *) self, "score", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemmer::class$ = NULL;
          jmethodID *GalicianMinimalStemmer::mids$ = NULL;
          bool GalicianMinimalStemmer::live$ = false;

          jclass GalicianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemmer::GalicianMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemmer, t_GalicianMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianMinimalStemmer, t_GalicianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemmer), module, "GalicianMinimalStemmer", 0);
          }

          void t_GalicianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "class_", make_descriptor(GalicianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemmer::wrap_Object(GalicianMinimalStemmer(((t_GalicianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GalicianMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadFunction::class$ = NULL;
          jmethodID *PayloadFunction::mids$ = NULL;
          bool PayloadFunction::live$ = false;

          jclass PayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_explain_33812a26] = env->getMethodID(cls, "explain", "(ILjava/lang/String;IF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadFunction::PayloadFunction() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat PayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean PayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::Explanation PayloadFunction::explain(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_33812a26], a0, a1.this$, a2, a3));
          }

          jint PayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args);

          static PyMethodDef t_PayloadFunction__methods_[] = {
            DECLARE_METHOD(t_PayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadFunction, t_PayloadFunction, ::java::lang::Object, PayloadFunction, t_PayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_PayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadFunction), module, "PayloadFunction", 0);
          }

          void t_PayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "class_", make_descriptor(PayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_PayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadFunction::initializeClass, 1)))
              return NULL;
            return t_PayloadFunction::wrap_Object(PayloadFunction(((t_PayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            PayloadFunction object((jobject) NULL);

            INT_CALL(object = PayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "currentScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "docScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2, a3));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelAtomicReader.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelAtomicReader::class$ = NULL;
        jmethodID *ParallelAtomicReader::mids$ = NULL;
        bool ParallelAtomicReader::live$ = false;

        jclass ParallelAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ec148ef1] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_dac8e58a] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_d26c44dd] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelAtomicReader::ParallelAtomicReader(const JArray< ::org::apache::lucene::index::AtomicReader > & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_ec148ef1, a0.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_dac8e58a, a0, a1.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1, const JArray< ::org::apache::lucene::index::AtomicReader > & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_d26c44dd, a0, a1.this$, a2.this$)) {}

        void ParallelAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void ParallelAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void ParallelAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues ParallelAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos ParallelAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues ParallelAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues ParallelAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues ParallelAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint ParallelAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint ParallelAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void ParallelAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String ParallelAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data);
        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data);
        static PyGetSetDef t_ParallelAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_ParallelAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelAtomicReader__methods_[] = {
          DECLARE_METHOD(t_ParallelAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelAtomicReader, t_ParallelAtomicReader, ::org::apache::lucene::index::AtomicReader, ParallelAtomicReader, t_ParallelAtomicReader_init_, 0, 0, t_ParallelAtomicReader__fields_, 0, 0);

        void t_ParallelAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelAtomicReader), module, "ParallelAtomicReader", 0);
        }

        void t_ParallelAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "class_", make_descriptor(ParallelAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelAtomicReader::initializeClass, 1)))
            return NULL;
          return t_ParallelAtomicReader::wrap_Object(ParallelAtomicReader(((t_ParallelAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::AtomicReader > a0((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelAtomicReader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::AtomicReader > a2((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter::mids$ = NULL;
          bool TeeSinkTokenFilter::live$ = false;

          jclass TeeSinkTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addSinkTokenStream_4bcd0017] = env->getMethodID(cls, "addSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;)V");
              mids$[mid_consumeAllTokens_54c6a166] = env->getMethodID(cls, "consumeAllTokens", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_newSinkTokenStream_17f71d86] = env->getMethodID(cls, "newSinkTokenStream", "()Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");
              mids$[mid_newSinkTokenStream_714b7637] = env->getMethodID(cls, "newSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter;)Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter::TeeSinkTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          void TeeSinkTokenFilter::addSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addSinkTokenStream_4bcd0017], a0.this$);
          }

          void TeeSinkTokenFilter::consumeAllTokens() const
          {
            env->callVoidMethod(this$, mids$[mid_consumeAllTokens_54c6a166]);
          }

          void TeeSinkTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream() const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_17f71d86]));
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter & a0) const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_714b7637], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self);
          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, addSinkTokenStream, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter, consumeAllTokens, METH_NOARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, newSinkTokenStream, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter, t_TeeSinkTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TeeSinkTokenFilter, t_TeeSinkTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter), module, "TeeSinkTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkTokenStream", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream)));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkFilter", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkFilter)));
          }

          void t_TeeSinkTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter::wrap_Object(TeeSinkTokenFilter(((t_TeeSinkTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TeeSinkTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TeeSinkTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addSinkTokenStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addSinkTokenStream", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self)
          {
            OBJ_CALL(self->object.consumeAllTokens());
            Py_RETURN_NONE;
          }

          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);
                OBJ_CALL(result = self->object.newSinkTokenStream());
                return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter a0((jobject) NULL);
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newSinkTokenStream(a0));
                  return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "newSinkTokenStream", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetField::class$ = NULL;
        jmethodID *FacetField::mids$ = NULL;
        jfieldID *FacetField::fids$ = NULL;
        bool FacetField::live$ = false;

        jclass FacetField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_verifyLabel_5fdc3f48] = env->getStaticMethodID(cls, "verifyLabel", "(Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetField::FacetField(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::java::lang::String FacetField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void FacetField::verifyLabel(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_verifyLabel_5fdc3f48], a0.this$);
        }

        ::java::lang::String FacetField::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::java::lang::String > FacetField::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args);
        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data);
        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data);

        static PyGetSetDef t_FacetField__fields_[] = {
          DECLARE_GET_FIELD(t_FacetField, dim),
          DECLARE_GET_FIELD(t_FacetField, path),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetField__methods_[] = {
          DECLARE_METHOD(t_FacetField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, toString, METH_VARARGS),
          DECLARE_METHOD(t_FacetField, verifyLabel, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetField, t_FacetField, ::org::apache::lucene::document::Field, FacetField, t_FacetField_init_, 0, 0, t_FacetField__fields_, 0, 0);

        void t_FacetField::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetField), module, "FacetField", 0);
        }

        void t_FacetField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "class_", make_descriptor(FacetField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "wrapfn_", make_descriptor(t_FacetField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetField::initializeClass, 1)))
            return NULL;
          return t_FacetField::wrap_Object(FacetField(((t_FacetField *) arg)->object.this$));
        }
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          FacetField object((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            INT_CALL(object = FacetField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::facet::FacetField::verifyLabel(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "verifyLabel", arg);
          return NULL;
        }

        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilderFactory::class$ = NULL;
          jmethodID *QueryBuilderFactory::mids$ = NULL;
          bool QueryBuilderFactory::live$ = false;

          jclass QueryBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_155f2547] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_getQueryBuilder_c1a99e2e] = env->getMethodID(cls, "getQueryBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/QueryBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryBuilderFactory::QueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void QueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::QueryBuilder QueryBuilderFactory::getQueryBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_c1a99e2e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args);
          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_QueryBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_QueryBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_QueryBuilderFactory, getQueryBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilderFactory, t_QueryBuilderFactory, ::java::lang::Object, QueryBuilderFactory, t_QueryBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_QueryBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilderFactory), module, "QueryBuilderFactory", 0);
          }

          void t_QueryBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "class_", make_descriptor(QueryBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_QueryBuilderFactory::wrap_Object(QueryBuilderFactory(((t_QueryBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            QueryBuilderFactory object((jobject) NULL);

            INT_CALL(object = QueryBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getQueryBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_QueryBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsFormat::class$ = NULL;
          jmethodID *Lucene40PostingsFormat::mids$ = NULL;
          bool Lucene40PostingsFormat::live$ = false;

          jclass Lucene40PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsFormat::Lucene40PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene40PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene40PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene40PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsFormat, t_Lucene40PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene40PostingsFormat, t_Lucene40PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsFormat), module, "Lucene40PostingsFormat", 0);
          }

          void t_Lucene40PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsFormat::wrap_Object(Lucene40PostingsFormat(((t_Lucene40PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/AndQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *AndQuery::class$ = NULL;
            jmethodID *AndQuery::mids$ = NULL;
            bool AndQuery::live$ = false;

            jclass AndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/AndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AndQuery::AndQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            ::org::apache::lucene::search::Query AndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args);

            static PyMethodDef t_AndQuery__methods_[] = {
              DECLARE_METHOD(t_AndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AndQuery, t_AndQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, AndQuery, t_AndQuery_init_, 0, 0, 0, 0, 0);

            void t_AndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(AndQuery), module, "AndQuery", 0);
            }

            void t_AndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "class_", make_descriptor(AndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "wrapfn_", make_descriptor(t_AndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AndQuery::initializeClass, 1)))
                return NULL;
              return t_AndQuery::wrap_Object(AndQuery(((t_AndQuery *) arg)->object.this$));
            }
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              AndQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = AndQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(AndQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFormatter.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFormatter::class$ = NULL;
          jmethodID *PythonFormatter::mids$ = NULL;
          bool PythonFormatter::live$ = false;

          jclass PythonFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFormatter::PythonFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFormatter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFormatter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFormatter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self);
          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args);
          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data);
          static PyGetSetDef t_PythonFormatter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFormatter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFormatter__methods_[] = {
            DECLARE_METHOD(t_PythonFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFormatter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFormatter, t_PythonFormatter, ::java::lang::Object, PythonFormatter, t_PythonFormatter_init_, 0, 0, t_PythonFormatter__fields_, 0, 0);

          void t_PythonFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFormatter), module, "PythonFormatter", 1);
          }

          void t_PythonFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "class_", make_descriptor(PythonFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "wrapfn_", make_descriptor(t_PythonFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFormatter::initializeClass);
            JNINativeMethod methods[] = {
              { "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;", (void *) t_PythonFormatter_highlightTerm0 },
              { "pythonDecRef", "()V", (void *) t_PythonFormatter_pythonDecRef1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFormatter::initializeClass, 1)))
              return NULL;
            return t_PythonFormatter::wrap_Object(PythonFormatter(((t_PythonFormatter *) arg)->object.this$));
          }
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds)
          {
            PythonFormatter object((jobject) NULL);

            INT_CALL(object = PythonFormatter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::lang::String value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::search::highlight::t_TokenGroup::wrap_Object(::org::apache::lucene::search::highlight::TokenGroup(a1));
            PyObject *result = PyObject_CallMethod(obj, "highlightTerm", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "s", &value))
            {
              throwTypeError("highlightTerm", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Format.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/io/Serializable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Format::class$ = NULL;
    jmethodID *Format::mids$ = NULL;
    bool Format::live$ = false;

    jclass Format::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Format");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_format_c9db4eed] = env->getMethodID(cls, "format", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_parseObject_2a1c4d09] = env->getMethodID(cls, "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Format::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::lang::String Format::format(const ::java::lang::Object & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_c9db4eed], a0.this$));
    }

    ::java::lang::Object Format::parseObject(const ::java::lang::String & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parseObject_2a1c4d09], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_clone(t_Format *self);
    static PyObject *t_Format_format(t_Format *self, PyObject *arg);
    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg);

    static PyMethodDef t_Format__methods_[] = {
      DECLARE_METHOD(t_Format, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, clone, METH_NOARGS),
      DECLARE_METHOD(t_Format, format, METH_O),
      DECLARE_METHOD(t_Format, parseObject, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Format, t_Format, ::java::lang::Object, Format, abstract_init, 0, 0, 0, 0, 0);

    void t_Format::install(PyObject *module)
    {
      installType(&PY_TYPE(Format), module, "Format", 0);
    }

    void t_Format::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "class_", make_descriptor(Format::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "wrapfn_", make_descriptor(t_Format::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Format::initializeClass, 1)))
        return NULL;
      return t_Format::wrap_Object(Format(((t_Format *) arg)->object.this$));
    }
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Format::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Format_clone(t_Format *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Format_format(t_Format *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "format", arg);
      return NULL;
    }

    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parseObject(a0));
        return ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parseObject", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupTokenFilter::class$ = NULL;
          jmethodID *PatternCaptureGroupTokenFilter::mids$ = NULL;
          bool PatternCaptureGroupTokenFilter::live$ = false;

          jclass PatternCaptureGroupTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d6bd0c49] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z[Ljava/util/regex/Pattern;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupTokenFilter::PatternCaptureGroupTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const JArray< ::java::util::regex::Pattern > & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d6bd0c49, a0.this$, a1, a2.this$)) {}

          jboolean PatternCaptureGroupTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternCaptureGroupTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args);
          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupTokenFilter), module, "PatternCaptureGroupTokenFilter", 0);
          }

          void t_PatternCaptureGroupTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "class_", make_descriptor(PatternCaptureGroupTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupTokenFilter::wrap_Object(PatternCaptureGroupTokenFilter(((t_PatternCaptureGroupTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jboolean a1;
            JArray< ::java::util::regex::Pattern > a2((jobject) NULL);
            PatternCaptureGroupTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kZ[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternCaptureGroupTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$IntParser::class$ = NULL;
        jmethodID *FieldCache$IntParser::mids$ = NULL;
        bool FieldCache$IntParser::live$ = false;

        jclass FieldCache$IntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$IntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldCache$IntParser::parseInt(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_parseInt_7bc03ddb], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$IntParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$IntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, parseInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$IntParser, t_FieldCache$IntParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$IntParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$IntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$IntParser), module, "FieldCache$IntParser", 0);
        }

        void t_FieldCache$IntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "class_", make_descriptor(FieldCache$IntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$IntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$IntParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$IntParser::wrap_Object(FieldCache$IntParser(((t_FieldCache$IntParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$IntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseInt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttribute::class$ = NULL;
          jmethodID *PayloadAttribute::mids$ = NULL;
          bool PayloadAttribute::live$ = false;

          jclass PayloadAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadAttribute::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          void PayloadAttribute::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self);
          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg);
          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data);
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttribute, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttribute__methods_[] = {
            DECLARE_METHOD(t_PayloadAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttribute, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttribute, t_PayloadAttribute, ::org::apache::lucene::util::Attribute, PayloadAttribute, abstract_init, 0, 0, t_PayloadAttribute__fields_, 0, 0);

          void t_PayloadAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttribute), module, "PayloadAttribute", 0);
          }

          void t_PayloadAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "class_", make_descriptor(PayloadAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttribute::initializeClass, 1)))
              return NULL;
            return t_PayloadAttribute::wrap_Object(PayloadAttribute(((t_PayloadAttribute *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status::class$ = NULL;
        jmethodID *CheckIndex$Status::mids$ = NULL;
        jfieldID *CheckIndex$Status::fids$ = NULL;
        bool CheckIndex$Status::live$ = false;

        jclass CheckIndex$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status");

            fids$ = new jfieldID[max_fid];
            fids$[fid_cantOpenSegments] = env->getFieldID(cls, "cantOpenSegments", "Z");
            fids$[fid_clean] = env->getFieldID(cls, "clean", "Z");
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_maxSegmentName] = env->getFieldID(cls, "maxSegmentName", "I");
            fids$[fid_missingSegmentVersion] = env->getFieldID(cls, "missingSegmentVersion", "Z");
            fids$[fid_missingSegments] = env->getFieldID(cls, "missingSegments", "Z");
            fids$[fid_numBadSegments] = env->getFieldID(cls, "numBadSegments", "I");
            fids$[fid_numSegments] = env->getFieldID(cls, "numSegments", "I");
            fids$[fid_partial] = env->getFieldID(cls, "partial", "Z");
            fids$[fid_segmentInfos] = env->getFieldID(cls, "segmentInfos", "Ljava/util/List;");
            fids$[fid_segmentsChecked] = env->getFieldID(cls, "segmentsChecked", "Ljava/util/List;");
            fids$[fid_segmentsFileName] = env->getFieldID(cls, "segmentsFileName", "Ljava/lang/String;");
            fids$[fid_toolOutOfDate] = env->getFieldID(cls, "toolOutOfDate", "Z");
            fids$[fid_totLoseDocCount] = env->getFieldID(cls, "totLoseDocCount", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_validCounter] = env->getFieldID(cls, "validCounter", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CheckIndex$Status::_get_cantOpenSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_cantOpenSegments]);
        }

        void CheckIndex$Status::_set_cantOpenSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_cantOpenSegments], a0);
        }

        jboolean CheckIndex$Status::_get_clean() const
        {
          return env->getBooleanField(this$, fids$[fid_clean]);
        }

        void CheckIndex$Status::_set_clean(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_clean], a0);
        }

        ::org::apache::lucene::store::Directory CheckIndex$Status::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        void CheckIndex$Status::_set_dir(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->setObjectField(this$, fids$[fid_dir], a0.this$);
        }

        jint CheckIndex$Status::_get_maxSegmentName() const
        {
          return env->getIntField(this$, fids$[fid_maxSegmentName]);
        }

        void CheckIndex$Status::_set_maxSegmentName(jint a0) const
        {
          env->setIntField(this$, fids$[fid_maxSegmentName], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegmentVersion() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegmentVersion]);
        }

        void CheckIndex$Status::_set_missingSegmentVersion(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegmentVersion], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegments]);
        }

        void CheckIndex$Status::_set_missingSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegments], a0);
        }

        jint CheckIndex$Status::_get_numBadSegments() const
        {
          return env->getIntField(this$, fids$[fid_numBadSegments]);
        }

        void CheckIndex$Status::_set_numBadSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numBadSegments], a0);
        }

        jint CheckIndex$Status::_get_numSegments() const
        {
          return env->getIntField(this$, fids$[fid_numSegments]);
        }

        void CheckIndex$Status::_set_numSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numSegments], a0);
        }

        jboolean CheckIndex$Status::_get_partial() const
        {
          return env->getBooleanField(this$, fids$[fid_partial]);
        }

        void CheckIndex$Status::_set_partial(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_partial], a0);
        }

        ::java::util::List CheckIndex$Status::_get_segmentInfos() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentInfos]));
        }

        void CheckIndex$Status::_set_segmentInfos(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentInfos], a0.this$);
        }

        ::java::util::List CheckIndex$Status::_get_segmentsChecked() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentsChecked]));
        }

        void CheckIndex$Status::_set_segmentsChecked(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsChecked], a0.this$);
        }

        ::java::lang::String CheckIndex$Status::_get_segmentsFileName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentsFileName]));
        }

        void CheckIndex$Status::_set_segmentsFileName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsFileName], a0.this$);
        }

        jboolean CheckIndex$Status::_get_toolOutOfDate() const
        {
          return env->getBooleanField(this$, fids$[fid_toolOutOfDate]);
        }

        void CheckIndex$Status::_set_toolOutOfDate(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_toolOutOfDate], a0);
        }

        jint CheckIndex$Status::_get_totLoseDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totLoseDocCount]);
        }

        void CheckIndex$Status::_set_totLoseDocCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totLoseDocCount], a0);
        }

        ::java::util::Map CheckIndex$Status::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void CheckIndex$Status::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jboolean CheckIndex$Status::_get_validCounter() const
        {
          return env->getBooleanField(this$, fids$[fid_validCounter]);
        }

        void CheckIndex$Status::_set_validCounter(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_validCounter], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, cantOpenSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, clean),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, dir),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, maxSegmentName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegmentVersion),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numBadSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, partial),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentInfos),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsChecked),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsFileName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, toolOutOfDate),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, totLoseDocCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, userData),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, validCounter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status, t_CheckIndex$Status, ::java::lang::Object, CheckIndex$Status, abstract_init, 0, 0, t_CheckIndex$Status__fields_, 0, 0);

        void t_CheckIndex$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status), module, "CheckIndex$Status", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "DocValuesStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$DocValuesStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermVectorStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermVectorStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "StoredFieldStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$StoredFieldStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermIndexStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermIndexStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "FieldNormStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$FieldNormStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "SegmentInfoStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus)));
        }

        void t_CheckIndex$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "class_", make_descriptor(CheckIndex$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status::wrap_Object(CheckIndex$Status(((t_CheckIndex$Status *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_cantOpenSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_cantOpenSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "cantOpenSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_clean());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_clean(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "clean", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
          {
            INT_CALL(self->object._set_dir(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "dir", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_maxSegmentName());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_maxSegmentName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "maxSegmentName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegmentVersion());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegmentVersion(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegmentVersion", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numBadSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numBadSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numBadSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_partial());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_partial(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "partial", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfos());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentInfos", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsChecked());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentsChecked(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsChecked", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsFileName());
          return j2p(value);
        }
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_segmentsFileName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsFileName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_toolOutOfDate());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_toolOutOfDate(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "toolOutOfDate", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totLoseDocCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totLoseDocCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totLoseDocCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_userData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_userData(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "userData", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_validCounter());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_validCounter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "validCounter", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.h"
#include "java/util/ListIterator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *QueryNodeProcessorPipeline::mids$ = NULL;
              bool QueryNodeProcessorPipeline::live$ = false;

              jclass QueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_add_507a7d19] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Z");
                  mids$[mid_add_f6ca4173] = env->getMethodID(cls, "add", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                  mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                  mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                  mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                  mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_get_b9090432] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                  mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                  mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                  mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_remove_b9090432] = env->getMethodID(cls, "remove", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                  mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_set_adfc5df1] = env->getMethodID(cls, "set", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                  mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                  mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                  mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              jboolean QueryNodeProcessorPipeline::add(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_add_507a7d19], a0.this$);
              }

              void QueryNodeProcessorPipeline::add(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_add_f6ca4173], a0, a1.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(jint a0, const ::java::util::Collection & a1) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
              }

              void QueryNodeProcessorPipeline::clear() const
              {
                env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
              }

              jboolean QueryNodeProcessorPipeline::contains(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::containsAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::get(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_get_b9090432], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorPipeline::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              jint QueryNodeProcessorPipeline::indexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::isEmpty() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
              }

              ::java::util::Iterator QueryNodeProcessorPipeline::iterator() const
              {
                return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
              }

              jint QueryNodeProcessorPipeline::lastIndexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator() const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator(jint a0) const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_4145ee6a], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorPipeline::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::remove(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_remove_b9090432], a0));
              }

              jboolean QueryNodeProcessorPipeline::remove(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::removeAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::retainAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::set(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_set_adfc5df1], a0, a1.this$));
              }

              void QueryNodeProcessorPipeline::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }

              jint QueryNodeProcessorPipeline::size() const
              {
                return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
              }

              ::java::util::List QueryNodeProcessorPipeline::subList(jint a0, jint a1) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray() const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray(const JArray< ::java::lang::Object > & a0) const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data);
              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data);
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorPipeline__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeProcessorPipeline, empty),
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorPipeline, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, addAll, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, clear, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, contains, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, containsAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, get, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, indexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, isEmpty, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, iterator, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, lastIndexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, listIterator, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, remove, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, removeAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, retainAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, set, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, setQueryConfigHandler, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, size, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, subList, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, toArray, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline, ::java::lang::Object, QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline_init_, ((PyObject *(*)(t_QueryNodeProcessorPipeline *)) get_iterator< t_QueryNodeProcessorPipeline >), 0, t_QueryNodeProcessorPipeline__fields_, 0, 0);

              void t_QueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorPipeline), module, "QueryNodeProcessorPipeline", 0);
              }

              void t_QueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(QueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorPipeline::wrap_Object(QueryNodeProcessorPipeline(((t_QueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorPipeline());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorPipeline(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
                    {
                      OBJ_CALL(result = self->object.add(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);

                    if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.add(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0, a1));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "addAll", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self)
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "contains", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.containsAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.indexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self)
              {
                ::java::util::Iterator result((jobject) NULL);
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
              }

              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.lastIndexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.listIterator(a0));
                      return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "listIterator", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                    }
                  }
                  {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "remove", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.removeAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.retainAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.set(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self)
              {
                jint result;
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subList(a0, a1));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                }

                PyErr_SetArgsError((PyObject *) self, "subList", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                  }
                  break;
                 case 1:
                  {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                      OBJ_CALL(result = self->object.toArray(a0));
                      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toArray", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isEmpty());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DefaultSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DefaultSimilarity::class$ = NULL;
          jmethodID *DefaultSimilarity::mids$ = NULL;
          bool DefaultSimilarity::live$ = false;

          jclass DefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSimilarity::DefaultSimilarity() : ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat DefaultSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong DefaultSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jboolean DefaultSimilarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat DefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          jfloat DefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat DefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat DefaultSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          void DefaultSimilarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          jfloat DefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat DefaultSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }

          ::java::lang::String DefaultSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self);
          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg);
          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data);
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data);
          static PyGetSetDef t_DefaultSimilarity__fields_[] = {
            DECLARE_GETSET_FIELD(t_DefaultSimilarity, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_DefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, decodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, encodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_DefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_DefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, tf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSimilarity, t_DefaultSimilarity, ::org::apache::lucene::search::similarities::TFIDFSimilarity, DefaultSimilarity, t_DefaultSimilarity_init_, 0, 0, t_DefaultSimilarity__fields_, 0, 0);

          void t_DefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSimilarity), module, "DefaultSimilarity", 0);
          }

          void t_DefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "class_", make_descriptor(DefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_DefaultSimilarity::wrap_Object(DefaultSimilarity(((t_DefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            DefaultSimilarity object((jobject) NULL);

            INT_CALL(object = DefaultSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jfloat result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "decodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jlong result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "encodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "scorePayload", args, 2);
          }

          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordAnalyzer::class$ = NULL;
          jmethodID *KeywordAnalyzer::mids$ = NULL;
          bool KeywordAnalyzer::live$ = false;

          jclass KeywordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAnalyzer::KeywordAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KeywordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_KeywordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAnalyzer, t_KeywordAnalyzer, ::org::apache::lucene::analysis::Analyzer, KeywordAnalyzer, t_KeywordAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_KeywordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAnalyzer), module, "KeywordAnalyzer", 0);
          }

          void t_KeywordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "class_", make_descriptor(KeywordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_KeywordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_KeywordAnalyzer::wrap_Object(KeywordAnalyzer(((t_KeywordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            KeywordAnalyzer object((jobject) NULL);

            INT_CALL(object = KeywordAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryBuilder::class$ = NULL;
              jmethodID *StandardQueryBuilder::mids$ = NULL;
              bool StandardQueryBuilder::live$ = false;

              jclass StandardQueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::search::Query StandardQueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryBuilder, t_StandardQueryBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder, StandardQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardQueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryBuilder), module, "StandardQueryBuilder", 0);
              }

              void t_StandardQueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "class_", make_descriptor(StandardQueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryBuilder::wrap_Object(StandardQueryBuilder(((t_StandardQueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Number.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericQueryNode::class$ = NULL;
              jmethodID *NumericQueryNode::mids$ = NULL;
              bool NumericQueryNode::live$ = false;

              jclass NumericQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_42c517e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Number;Ljava/text/NumberFormat;)V");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getValue_ee47e3e1] = env->getMethodID(cls, "getValue", "()Ljava/lang/Number;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setValue_948ebebc] = env->getMethodID(cls, "setValue", "(Ljava/lang/Number;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNode::NumericQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::Number & a1, const ::java::text::NumberFormat & a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_42c517e2, a0.this$, a1.this$, a2.this$)) {}

              ::java::lang::CharSequence NumericQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::text::NumberFormat NumericQueryNode::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              ::java::lang::Number NumericQueryNode::getValue() const
              {
                return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getValue_ee47e3e1]));
              }

              void NumericQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void NumericQueryNode::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericQueryNode::setValue(const ::java::lang::Number & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_948ebebc], a0.this$);
              }

              ::java::lang::CharSequence NumericQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NumericQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericQueryNode, field),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, setField, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NumericQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNode, t_NumericQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, NumericQueryNode, t_NumericQueryNode_init_, 0, 0, t_NumericQueryNode__fields_, 0, 0);

              void t_NumericQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNode), module, "NumericQueryNode", 0);
              }

              void t_NumericQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "class_", make_descriptor(NumericQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNode::wrap_Object(NumericQueryNode(((t_NumericQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Number a1((jobject) NULL);
                ::java::text::NumberFormat a2((jobject) NULL);
                NumericQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOk", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(Number), ::java::text::NumberFormat::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NumericQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self)
              {
                ::java::lang::Number result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::Number a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::Number value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Number value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/LinkedHashMap.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *LinkedHashMap::class$ = NULL;
    jmethodID *LinkedHashMap::mids$ = NULL;
    bool LinkedHashMap::live$ = false;

    jclass LinkedHashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/LinkedHashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_init$_514f44c2] = env->getMethodID(cls, "<init>", "(IFZ)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    LinkedHashMap::LinkedHashMap() : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    LinkedHashMap::LinkedHashMap(const ::java::util::Map & a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    LinkedHashMap::LinkedHashMap(jint a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1, jboolean a2) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_514f44c2, a0, a1, a2)) {}

    void LinkedHashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean LinkedHashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::lang::Object LinkedHashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args);
    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data);
    static PyGetSetDef t_LinkedHashMap__fields_[] = {
      DECLARE_GET_FIELD(t_LinkedHashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_LinkedHashMap__methods_[] = {
      DECLARE_METHOD(t_LinkedHashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, get, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(LinkedHashMap, t_LinkedHashMap, ::java::util::HashMap, LinkedHashMap, t_LinkedHashMap_init_, 0, 0, t_LinkedHashMap__fields_, 0, 0);
    PyObject *t_LinkedHashMap::wrap_Object(const LinkedHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_LinkedHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_LinkedHashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(LinkedHashMap), module, "LinkedHashMap", 0);
    }

    void t_LinkedHashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "class_", make_descriptor(LinkedHashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "wrapfn_", make_descriptor(t_LinkedHashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, LinkedHashMap::initializeClass, 1)))
        return NULL;
      return t_LinkedHashMap::wrap_Object(LinkedHashMap(((t_LinkedHashMap *) arg)->object.this$));
    }
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, LinkedHashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          LinkedHashMap object((jobject) NULL);

          INT_CALL(object = LinkedHashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = LinkedHashMap(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          jint a0;
          jfloat a1;
          jboolean a2;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IFZ", &a0, &a1, &a2))
          {
            INT_CALL(object = LinkedHashMap(a0, a1, a2));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "get", args, 2);
    }
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType$NumericType::class$ = NULL;
        jmethodID *FieldType$NumericType::mids$ = NULL;
        bool FieldType$NumericType::live$ = false;
        FieldType$NumericType *FieldType$NumericType::DOUBLE = NULL;
        FieldType$NumericType *FieldType$NumericType::FLOAT = NULL;
        FieldType$NumericType *FieldType$NumericType::INT = NULL;
        FieldType$NumericType *FieldType$NumericType::LONG = NULL;

        jclass FieldType$NumericType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType$NumericType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_197ea958] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_values_68701482] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/FieldType$NumericType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOUBLE = new FieldType$NumericType(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            FLOAT = new FieldType$NumericType(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            INT = new FieldType$NumericType(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            LONG = new FieldType$NumericType(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType$NumericType FieldType$NumericType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldType$NumericType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_197ea958], a0.this$));
        }

        JArray< FieldType$NumericType > FieldType$NumericType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldType$NumericType >(env->callStaticObjectMethod(cls, mids$[mid_values_68701482]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args);
        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type);
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data);
        static PyGetSetDef t_FieldType$NumericType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldType$NumericType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldType$NumericType__methods_[] = {
          DECLARE_METHOD(t_FieldType$NumericType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldType$NumericType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType$NumericType, t_FieldType$NumericType, ::java::lang::Enum, FieldType$NumericType, abstract_init, 0, 0, t_FieldType$NumericType__fields_, 0, 0);
        PyObject *t_FieldType$NumericType::wrap_Object(const FieldType$NumericType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldType$NumericType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldType$NumericType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType$NumericType), module, "FieldType$NumericType", 0);
        }

        void t_FieldType$NumericType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "class_", make_descriptor(FieldType$NumericType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "wrapfn_", make_descriptor(t_FieldType$NumericType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldType$NumericType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "DOUBLE", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "FLOAT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::FLOAT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "INT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::INT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "LONG", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::LONG)));
        }

        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType$NumericType::initializeClass, 1)))
            return NULL;
          return t_FieldType$NumericType::wrap_Object(FieldType$NumericType(((t_FieldType$NumericType *) arg)->object.this$));
        }
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType$NumericType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldType$NumericType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::valueOf(a0));
            return t_FieldType$NumericType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type)
        {
          JArray< FieldType$NumericType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldType$NumericType::wrap_jobject);
        }
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NIOFSDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NIOFSDirectory::class$ = NULL;
        jmethodID *NIOFSDirectory::mids$ = NULL;
        bool NIOFSDirectory::live$ = false;

        jclass NIOFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NIOFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput NIOFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args);

        static PyMethodDef t_NIOFSDirectory__methods_[] = {
          DECLARE_METHOD(t_NIOFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NIOFSDirectory, t_NIOFSDirectory, ::org::apache::lucene::store::FSDirectory, NIOFSDirectory, t_NIOFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_NIOFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NIOFSDirectory), module, "NIOFSDirectory", 0);
        }

        void t_NIOFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "class_", make_descriptor(NIOFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_NIOFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NIOFSDirectory::initializeClass, 1)))
            return NULL;
          return t_NIOFSDirectory::wrap_Object(NIOFSDirectory(((t_NIOFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NIOFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NIOFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NIOFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NIOFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40Codec::class$ = NULL;
          jmethodID *Lucene40Codec::mids$ = NULL;
          bool Lucene40Codec::live$ = false;

          jclass Lucene40Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40Codec::Lucene40Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene40Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene40Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene40Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene40Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene40Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene40Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene40Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg);
          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args);

          static PyMethodDef t_Lucene40Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene40Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene40Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40Codec, t_Lucene40Codec, ::org::apache::lucene::codecs::Codec, Lucene40Codec, t_Lucene40Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene40Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40Codec), module, "Lucene40Codec", 0);
          }

          void t_Lucene40Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "class_", make_descriptor(Lucene40Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene40Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene40Codec::wrap_Object(Lucene40Codec(((t_Lucene40Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene40Codec object((jobject) NULL);

            INT_CALL(object = Lucene40Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::live$ = false;

          jclass SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, size),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, getSize, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_, 0, 0, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(const SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), module, "SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", 0);
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(((t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map$Entry.h"
#include "java/util/Collection.h"
#include "java/io/Serializable.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashMap::class$ = NULL;
    jmethodID *HashMap::mids$ = NULL;
    bool HashMap::live$ = false;

    jclass HashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashMap::HashMap() : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashMap::HashMap(const ::java::util::Map & a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    HashMap::HashMap(jint a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashMap::HashMap(jint a0, jfloat a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    void HashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashMap::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean HashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set HashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    ::java::lang::Object HashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    jboolean HashMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set HashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object HashMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void HashMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object HashMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jint HashMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Collection HashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args);
    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_clone(t_HashMap *self);
    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data);
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data);
    static PyGetSetDef t_HashMap__fields_[] = {
      DECLARE_GET_FIELD(t_HashMap, empty),
      DECLARE_GET_FIELD(t_HashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashMap__methods_[] = {
      DECLARE_METHOD(t_HashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashMap, containsKey, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, put, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putAll, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, size, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashMap, t_HashMap, ::java::util::AbstractMap, HashMap, t_HashMap_init_, 0, 0, t_HashMap__fields_, 0, 0);
    PyObject *t_HashMap::wrap_Object(const HashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_HashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_HashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(HashMap), module, "HashMap", 0);
    }

    void t_HashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "class_", make_descriptor(HashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "wrapfn_", make_descriptor(t_HashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashMap::initializeClass, 1)))
        return NULL;
      return t_HashMap::wrap_Object(HashMap(((t_HashMap *) arg)->object.this$));
    }
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashMap object((jobject) NULL);

          INT_CALL(object = HashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashMap(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashMap_clone(t_HashMap *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsKey", args, 2);
    }

    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "put", args, 2);
    }

    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "putAll", args, 2);
    }

    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Builder::class$ = NULL;
          jmethodID *SynonymMap$Builder::mids$ = NULL;
          bool SynonymMap$Builder::live$ = false;

          jclass SynonymMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_2c2b250f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;Z)V");
              mids$[mid_build_6def3d42] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/synonym/SynonymMap;");
              mids$[mid_join_215e6a35] = env->getStaticMethodID(cls, "join", "([Ljava/lang/String;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Builder::SynonymMap$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void SynonymMap$Builder::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_2c2b250f], a0.this$, a1.this$, a2);
          }

          ::org::apache::lucene::analysis::synonym::SynonymMap SynonymMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::synonym::SynonymMap(env->callObjectMethod(this$, mids$[mid_build_6def3d42]));
          }

          ::org::apache::lucene::util::CharsRef SynonymMap$Builder::join(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::util::CharsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::CharsRef(env->callStaticObjectMethod(cls, mids$[mid_join_215e6a35], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args);
          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self);
          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_SynonymMap$Builder__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, join, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Builder, t_SynonymMap$Builder, ::java::lang::Object, SynonymMap$Builder, t_SynonymMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Builder), module, "SynonymMap$Builder", 0);
          }

          void t_SynonymMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "class_", make_descriptor(SynonymMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Builder::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Builder::wrap_Object(SynonymMap$Builder(((t_SynonymMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            SynonymMap$Builder object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = SynonymMap$Builder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self)
          {
            ::org::apache::lucene::analysis::synonym::SynonymMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::synonym::t_SynonymMap::wrap_Object(result);
          }

          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "[sk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::synonym::SynonymMap$Builder::join(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "join", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool::class$ = NULL;
        jmethodID *ByteBlockPool::mids$ = NULL;
        jfieldID *ByteBlockPool::fids$ = NULL;
        bool ByteBlockPool::live$ = false;
        jint ByteBlockPool::BYTE_BLOCK_MASK = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SHIFT = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SIZE = (jint) 0;
        jint ByteBlockPool::FIRST_LEVEL_SIZE = (jint) 0;
        JArray< jint > *ByteBlockPool::LEVEL_SIZE_ARRAY = NULL;
        JArray< jint > *ByteBlockPool::NEXT_LEVEL_ARRAY = NULL;

        jclass ByteBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5679a66b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool$Allocator;)V");
            mids$[mid_allocSlice_b8354c5c] = env->getMethodID(cls, "allocSlice", "([BI)I");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlice_39c7bd23] = env->getMethodID(cls, "newSlice", "(I)I");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_readBytes_d6ca92d6] = env->getMethodID(cls, "readBytes", "(J[BII)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");
            mids$[mid_setBytesRef_738fc2ce] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[B");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[B");
            fids$[fid_byteOffset] = env->getFieldID(cls, "byteOffset", "I");
            fids$[fid_byteUpto] = env->getFieldID(cls, "byteUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE_BLOCK_MASK = env->getStaticIntField(cls, "BYTE_BLOCK_MASK");
            BYTE_BLOCK_SHIFT = env->getStaticIntField(cls, "BYTE_BLOCK_SHIFT");
            BYTE_BLOCK_SIZE = env->getStaticIntField(cls, "BYTE_BLOCK_SIZE");
            FIRST_LEVEL_SIZE = env->getStaticIntField(cls, "FIRST_LEVEL_SIZE");
            LEVEL_SIZE_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "LEVEL_SIZE_ARRAY", "[I"));
            NEXT_LEVEL_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "NEXT_LEVEL_ARRAY", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool::ByteBlockPool(const ::org::apache::lucene::util::ByteBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5679a66b, a0.this$)) {}

        jint ByteBlockPool::allocSlice(const JArray< jbyte > & a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_allocSlice_b8354c5c], a0.this$, a1);
        }

        void ByteBlockPool::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jint ByteBlockPool::newSlice(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_newSlice_39c7bd23], a0);
        }

        void ByteBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void ByteBlockPool::readBytes(jlong a0, const JArray< jbyte > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_d6ca92d6], a0, a1.this$, a2, a3);
        }

        void ByteBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void ByteBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        void ByteBlockPool::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesRef_738fc2ce], a0.this$, a1);
        }

        JArray< jbyte > ByteBlockPool::_get_buffer() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void ByteBlockPool::_set_buffer(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jbyte > > ByteBlockPool::_get_buffers() const
        {
          return JArray< JArray< jbyte > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void ByteBlockPool::_set_buffers(const JArray< JArray< jbyte > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint ByteBlockPool::_get_byteOffset() const
        {
          return env->getIntField(this$, fids$[fid_byteOffset]);
        }

        void ByteBlockPool::_set_byteOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteOffset], a0);
        }

        jint ByteBlockPool::_get_byteUpto() const
        {
          return env->getIntField(this$, fids$[fid_byteUpto]);
        }

        void ByteBlockPool::_set_byteUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self);
        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_ByteBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteOffset),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, allocSlice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, append, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, newSlice, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, setBytesRef, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool, t_ByteBlockPool, ::java::lang::Object, ByteBlockPool, t_ByteBlockPool_init_, 0, 0, t_ByteBlockPool__fields_, 0, 0);

        void t_ByteBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool), module, "ByteBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectTrackingAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(ByteBlockPool$Allocator)));
        }

        void t_ByteBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "class_", make_descriptor(ByteBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_MASK", make_descriptor(ByteBlockPool::BYTE_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SHIFT", make_descriptor(ByteBlockPool::BYTE_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SIZE", make_descriptor(ByteBlockPool::BYTE_BLOCK_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "FIRST_LEVEL_SIZE", make_descriptor(ByteBlockPool::FIRST_LEVEL_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "LEVEL_SIZE_ARRAY", make_descriptor(ByteBlockPool::LEVEL_SIZE_ARRAY->wrap()));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "NEXT_LEVEL_ARRAY", make_descriptor(ByteBlockPool::NEXT_LEVEL_ARRAY->wrap()));
        }

        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool::wrap_Object(ByteBlockPool(((t_ByteBlockPool *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::ByteBlockPool$Allocator a0((jobject) NULL);
          ByteBlockPool object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool$Allocator::initializeClass, &a0))
          {
            INT_CALL(object = ByteBlockPool(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.allocSlice(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "allocSlice", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.newSlice(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSlice", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "J[BII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.setBytesRef(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesRef", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          if (!parseArg(arg, "[[B", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteOffset", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/MultiSimilarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *MultiSimilarity::class$ = NULL;
          jmethodID *MultiSimilarity::mids$ = NULL;
          bool MultiSimilarity::live$ = false;

          jclass MultiSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/MultiSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_82c64346] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/similarities/Similarity;)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiSimilarity::MultiSimilarity(const JArray< ::org::apache::lucene::search::similarities::Similarity > & a0) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_82c64346, a0.this$)) {}

          jlong MultiSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight MultiSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer MultiSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args);

          static PyMethodDef t_MultiSimilarity__methods_[] = {
            DECLARE_METHOD(t_MultiSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiSimilarity, t_MultiSimilarity, ::org::apache::lucene::search::similarities::Similarity, MultiSimilarity, t_MultiSimilarity_init_, 0, 0, 0, 0, 0);

          void t_MultiSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiSimilarity), module, "MultiSimilarity", 0);
          }

          void t_MultiSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "class_", make_descriptor(MultiSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "wrapfn_", make_descriptor(t_MultiSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiSimilarity::initializeClass, 1)))
              return NULL;
            return t_MultiSimilarity::wrap_Object(MultiSimilarity(((t_MultiSimilarity *) arg)->object.this$));
          }
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::similarities::Similarity > a0((jobject) NULL);
            MultiSimilarity object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
            {
              INT_CALL(object = MultiSimilarity(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LiteralValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LiteralValueSource::class$ = NULL;
            jmethodID *LiteralValueSource::mids$ = NULL;
            bool LiteralValueSource::live$ = false;
            jint LiteralValueSource::hash = (jint) 0;

            jclass LiteralValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LiteralValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValue_14c7b5c5] = env->getMethodID(cls, "getValue", "()Ljava/lang/String;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                hash = env->getStaticIntField(cls, "hash");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LiteralValueSource::LiteralValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String LiteralValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LiteralValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String LiteralValueSource::getValue() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValue_14c7b5c5]));
            }

            ::org::apache::lucene::queries::function::FunctionValues LiteralValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LiteralValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self);
            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data);
            static PyGetSetDef t_LiteralValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_LiteralValueSource, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LiteralValueSource__methods_[] = {
              DECLARE_METHOD(t_LiteralValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValue, METH_NOARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LiteralValueSource, t_LiteralValueSource, ::org::apache::lucene::queries::function::ValueSource, LiteralValueSource, t_LiteralValueSource_init_, 0, 0, t_LiteralValueSource__fields_, 0, 0);

            void t_LiteralValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LiteralValueSource), module, "LiteralValueSource", 0);
            }

            void t_LiteralValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "class_", make_descriptor(LiteralValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "wrapfn_", make_descriptor(t_LiteralValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LiteralValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "hash", make_descriptor(LiteralValueSource::hash));
            }

            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LiteralValueSource::initializeClass, 1)))
                return NULL;
              return t_LiteralValueSource::wrap_Object(LiteralValueSource(((t_LiteralValueSource *) arg)->object.this$));
            }
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LiteralValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              LiteralValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LiteralValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return j2p(result);
            }

            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42Codec::class$ = NULL;
          jmethodID *Lucene42Codec::mids$ = NULL;
          bool Lucene42Codec::live$ = false;

          jclass Lucene42Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42Codec::Lucene42Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene42Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene42Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene42Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene42Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene42Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene42Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args);

          static PyMethodDef t_Lucene42Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene42Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42Codec, t_Lucene42Codec, ::org::apache::lucene::codecs::Codec, Lucene42Codec, t_Lucene42Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene42Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42Codec), module, "Lucene42Codec", 0);
          }

          void t_Lucene42Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "class_", make_descriptor(Lucene42Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene42Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene42Codec::wrap_Object(Lucene42Codec(((t_Lucene42Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene42Codec object((jobject) NULL);

            INT_CALL(object = Lucene42Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilterFactory::class$ = NULL;
          jmethodID *CapitalizationFilterFactory::mids$ = NULL;
          bool CapitalizationFilterFactory::live$ = false;
          ::java::lang::String *CapitalizationFilterFactory::FORCE_FIRST_LETTER = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP_IGNORE_CASE = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_TOKEN_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_WORD_COUNT = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MIN_WORD_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::OK_PREFIX = NULL;
          ::java::lang::String *CapitalizationFilterFactory::ONLY_FIRST_WORD = NULL;

          jclass CapitalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cf532c8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CapitalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORCE_FIRST_LETTER = new ::java::lang::String(env->getStaticObjectField(cls, "FORCE_FIRST_LETTER", "Ljava/lang/String;"));
              KEEP = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP", "Ljava/lang/String;"));
              KEEP_IGNORE_CASE = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP_IGNORE_CASE", "Ljava/lang/String;"));
              MAX_TOKEN_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_LENGTH", "Ljava/lang/String;"));
              MAX_WORD_COUNT = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_WORD_COUNT", "Ljava/lang/String;"));
              MIN_WORD_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_WORD_LENGTH", "Ljava/lang/String;"));
              OK_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "OK_PREFIX", "Ljava/lang/String;"));
              ONLY_FIRST_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "ONLY_FIRST_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilterFactory::CapitalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter CapitalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter(env->callObjectMethod(this$, mids$[mid_create_9cf532c8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilterFactory, t_CapitalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CapitalizationFilterFactory, t_CapitalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilterFactory), module, "CapitalizationFilterFactory", 0);
          }

          void t_CapitalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "class_", make_descriptor(CapitalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "FORCE_FIRST_LETTER", make_descriptor(j2p(*CapitalizationFilterFactory::FORCE_FIRST_LETTER)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP_IGNORE_CASE", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP_IGNORE_CASE)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_TOKEN_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_TOKEN_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_WORD_COUNT", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_WORD_COUNT)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MIN_WORD_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MIN_WORD_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "OK_PREFIX", make_descriptor(j2p(*CapitalizationFilterFactory::OK_PREFIX)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "ONLY_FIRST_WORD", make_descriptor(j2p(*CapitalizationFilterFactory::ONLY_FIRST_WORD)));
          }

          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilterFactory::wrap_Object(CapitalizationFilterFactory(((t_CapitalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CapitalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CapitalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CapitalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/util/List.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellTernarySearchTrie::class$ = NULL;
            jmethodID *JaspellTernarySearchTrie::mids$ = NULL;
            bool JaspellTernarySearchTrie::live$ = false;

            jclass JaspellTernarySearchTrie::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_init$_56b0e4b3] = env->getMethodID(cls, "<init>", "(Ljava/util/Locale;)V");
                mids$[mid_init$_9e00f624] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Z)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getAndIncrement_b837041d] = env->getMethodID(cls, "getAndIncrement", "(Ljava/lang/String;)Ljava/lang/Float;");
                mids$[mid_matchAlmost_0feb8f08] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchAlmost_560b361c] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_matchPrefix_0feb8f08] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchPrefix_560b361c] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_numDataNodes_54c6a179] = env->getMethodID(cls, "numDataNodes", "()I");
                mids$[mid_numNodes_54c6a179] = env->getMethodID(cls, "numNodes", "()I");
                mids$[mid_put_cb8bea9a] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)V");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_remove_5fdc3f48] = env->getMethodID(cls, "remove", "(Ljava/lang/String;)V");
                mids$[mid_setMatchAlmostDiff_39c7bd3c] = env->getMethodID(cls, "setMatchAlmostDiff", "(I)V");
                mids$[mid_setNumReturnValues_39c7bd3c] = env->getMethodID(cls, "setNumReturnValues", "(I)V");
                mids$[mid_getKey_67caf3f3] = env->getMethodID(cls, "getKey", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Ljava/lang/String;");
                mids$[mid_getNode_627fe0cf] = env->getMethodID(cls, "getNode", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_getOrCreateNode_8f2fe50d] = env->getMethodID(cls, "getOrCreateNode", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_numDataNodes_8b97b83b] = env->getMethodID(cls, "numDataNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_numNodes_8b97b83b] = env->getMethodID(cls, "numNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_sortKeys_4e6ea08e] = env->getMethodID(cls, "sortKeys", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellTernarySearchTrie::JaspellTernarySearchTrie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::util::Locale & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_56b0e4b3, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9e00f624, a0.this$, a1)) {}

            ::java::lang::Object JaspellTernarySearchTrie::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            ::java::lang::Float JaspellTernarySearchTrie::getAndIncrement(const ::java::lang::String & a0) const
            {
              return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_getAndIncrement_b837041d], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_560b361c], a0.this$, a1));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_560b361c], a0.this$, a1));
            }

            jint JaspellTernarySearchTrie::numDataNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numDataNodes_54c6a179]);
            }

            jint JaspellTernarySearchTrie::numNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numNodes_54c6a179]);
            }

            void JaspellTernarySearchTrie::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_cb8bea9a], a0.this$, a1.this$);
            }

            jlong JaspellTernarySearchTrie::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void JaspellTernarySearchTrie::remove(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_remove_5fdc3f48], a0.this$);
            }

            void JaspellTernarySearchTrie::setMatchAlmostDiff(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMatchAlmostDiff_39c7bd3c], a0);
            }

            void JaspellTernarySearchTrie::setNumReturnValues(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumReturnValues_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static PyGetSetDef t_JaspellTernarySearchTrie__fields_[] = {
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, matchAlmostDiff),
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, numReturnValues),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellTernarySearchTrie__methods_[] = {
              DECLARE_METHOD(t_JaspellTernarySearchTrie, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, get, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, getAndIncrement, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchAlmost, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchPrefix, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numDataNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, put, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, remove, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setMatchAlmostDiff, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setNumReturnValues, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellTernarySearchTrie, t_JaspellTernarySearchTrie, ::java::lang::Object, JaspellTernarySearchTrie, t_JaspellTernarySearchTrie_init_, 0, 0, t_JaspellTernarySearchTrie__fields_, 0, 0);

            void t_JaspellTernarySearchTrie::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellTernarySearchTrie), module, "JaspellTernarySearchTrie", 0);
            }

            void t_JaspellTernarySearchTrie::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "class_", make_descriptor(JaspellTernarySearchTrie::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "wrapfn_", make_descriptor(t_JaspellTernarySearchTrie::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellTernarySearchTrie::initializeClass, 1)))
                return NULL;
              return t_JaspellTernarySearchTrie::wrap_Object(JaspellTernarySearchTrie(((t_JaspellTernarySearchTrie *) arg)->object.this$));
            }
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellTernarySearchTrie::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JaspellTernarySearchTrie object((jobject) NULL);

                  INT_CALL(object = JaspellTernarySearchTrie());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::io::File a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::java::util::Locale a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::io::File a0((jobject) NULL);
                  jboolean a1;
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getAndIncrement(a0));
                return ::java::lang::t_Float::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getAndIncrement", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchAlmost", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchPrefix", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numDataNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.remove(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "remove", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setMatchAlmostDiff(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMatchAlmostDiff", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setNumReturnValues(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumReturnValues", arg);
              return NULL;
            }

            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setMatchAlmostDiff(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "matchAlmostDiff", arg);
              return -1;
            }

            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setNumReturnValues(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numReturnValues", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTerms::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTerms::mids$ = NULL;
        bool FilterAtomicReader$FilterTerms::live$ = false;

        jclass FilterAtomicReader$FilterTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTerms::FilterAtomicReader$FilterTerms(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

        ::java::util::Comparator FilterAtomicReader$FilterTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint FilterAtomicReader$FilterTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum FilterAtomicReader$FilterTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong FilterAtomicReader$FilterTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTerms__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, comparator),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, docCount),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTerms__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms, ::org::apache::lucene::index::Terms, FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms_init_, 0, 0, t_FilterAtomicReader$FilterTerms__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTerms), module, "FilterAtomicReader$FilterTerms", 0);
        }

        void t_FilterAtomicReader$FilterTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTerms::wrap_Object(FilterAtomicReader$FilterTerms(((t_FilterAtomicReader$FilterTerms *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          FilterAtomicReader$FilterTerms object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTerms(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizerFactory::class$ = NULL;
          jmethodID *KeywordTokenizerFactory::mids$ = NULL;
          bool KeywordTokenizerFactory::live$ = false;

          jclass KeywordTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e6458a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/KeywordTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizerFactory::KeywordTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::KeywordTokenizer KeywordTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::KeywordTokenizer(env->callObjectMethod(this$, mids$[mid_create_4e6458a0], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizerFactory, t_KeywordTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, KeywordTokenizerFactory, t_KeywordTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizerFactory), module, "KeywordTokenizerFactory", 0);
          }

          void t_KeywordTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "class_", make_descriptor(KeywordTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizerFactory::wrap_Object(KeywordTokenizerFactory(((t_KeywordTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::KeywordTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_KeywordTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchAnalyzer::class$ = NULL;
          jmethodID *DutchAnalyzer::mids$ = NULL;
          bool DutchAnalyzer::live$ = false;
          ::java::lang::String *DutchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DutchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0a2f8356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArrayMap;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, const ::org::apache::lucene::analysis::util::CharArrayMap & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0a2f8356, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DutchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data);
          static PyGetSetDef t_DutchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DutchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DutchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchAnalyzer, t_DutchAnalyzer, ::org::apache::lucene::analysis::Analyzer, DutchAnalyzer, t_DutchAnalyzer_init_, 0, 0, t_DutchAnalyzer__fields_, 0, 0);

          void t_DutchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchAnalyzer), module, "DutchAnalyzer", 0);
          }

          void t_DutchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "class_", make_descriptor(DutchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DutchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DutchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DutchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DutchAnalyzer::wrap_Object(DutchAnalyzer(((t_DutchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArrayMap a3((jobject) NULL);
                PyTypeObject **p3;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::nl::DutchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/String.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *LabelAndValue::class$ = NULL;
        jmethodID *LabelAndValue::mids$ = NULL;
        jfieldID *LabelAndValue::fids$ = NULL;
        bool LabelAndValue::live$ = false;

        jclass LabelAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/LabelAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LabelAndValue::LabelAndValue(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        jboolean LabelAndValue::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LabelAndValue::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String LabelAndValue::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String LabelAndValue::_get_label() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
        }

        ::java::lang::Number LabelAndValue::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data);
        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data);

        static PyGetSetDef t_LabelAndValue__fields_[] = {
          DECLARE_GET_FIELD(t_LabelAndValue, label),
          DECLARE_GET_FIELD(t_LabelAndValue, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LabelAndValue__methods_[] = {
          DECLARE_METHOD(t_LabelAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, equals, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LabelAndValue, t_LabelAndValue, ::java::lang::Object, LabelAndValue, t_LabelAndValue_init_, 0, 0, t_LabelAndValue__fields_, 0, 0);

        void t_LabelAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(LabelAndValue), module, "LabelAndValue", 0);
        }

        void t_LabelAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "class_", make_descriptor(LabelAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "wrapfn_", make_descriptor(t_LabelAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LabelAndValue::initializeClass, 1)))
            return NULL;
          return t_LabelAndValue::wrap_Object(LabelAndValue(((t_LabelAndValue *) arg)->object.this$));
        }
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LabelAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          LabelAndValue object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = LabelAndValue(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_label());
          return j2p(value);
        }

        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ByteFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ByteFieldSource::class$ = NULL;
            jmethodID *ByteFieldSource::mids$ = NULL;
            bool ByteFieldSource::live$ = false;

            jclass ByteFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ByteFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_03909c56] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_03909c56, a0.this$, a1.this$)) {}

            ::java::lang::String ByteFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ByteFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ByteFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ByteFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args);

            static PyMethodDef t_ByteFieldSource__methods_[] = {
              DECLARE_METHOD(t_ByteFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteFieldSource, t_ByteFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ByteFieldSource, t_ByteFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ByteFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteFieldSource), module, "ByteFieldSource", 0);
            }

            void t_ByteFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "class_", make_descriptor(ByteFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ByteFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteFieldSource::initializeClass, 1)))
                return NULL;
              return t_ByteFieldSource::wrap_Object(ByteFieldSource(((t_ByteFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ByteFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ByteFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilter::class$ = NULL;
          jmethodID *SoraniStemFilter::mids$ = NULL;
          bool SoraniStemFilter::live$ = false;

          jclass SoraniStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilter::SoraniStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilter, t_SoraniStemFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniStemFilter, t_SoraniStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilter), module, "SoraniStemFilter", 0);
          }

          void t_SoraniStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "class_", make_descriptor(SoraniStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilter::wrap_Object(SoraniStemFilter(((t_SoraniStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil::class$ = NULL;
            jmethodID *FSTUtil::mids$ = NULL;
            bool FSTUtil::live$ = false;

            jclass FSTUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_intersectPrefixPaths_2ebdda9a] = env->getStaticMethodID(cls, "intersectPrefixPaths", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::List FSTUtil::intersectPrefixPaths(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::fst::FST & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_intersectPrefixPaths_2ebdda9a], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_FSTUtil__methods_[] = {
              DECLARE_METHOD(t_FSTUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, intersectPrefixPaths, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil, t_FSTUtil, ::java::lang::Object, FSTUtil, abstract_init, 0, 0, 0, 0, 0);

            void t_FSTUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil), module, "FSTUtil", 0);
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "Path", make_descriptor(&PY_TYPE(FSTUtil$Path)));
            }

            void t_FSTUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "class_", make_descriptor(FSTUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil::initializeClass, 1)))
                return NULL;
              return t_FSTUtil::wrap_Object(FSTUtil(((t_FSTUtil *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::FSTUtil::intersectPrefixPaths(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "intersectPrefixPaths", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchNoDocsQueryNode::class$ = NULL;
              jmethodID *MatchNoDocsQueryNode::mids$ = NULL;
              bool MatchNoDocsQueryNode::live$ = false;

              jclass MatchNoDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNode::MatchNoDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String MatchNoDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchNoDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNode, t_MatchNoDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, MatchNoDocsQueryNode, t_MatchNoDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNode), module, "MatchNoDocsQueryNode", 0);
              }

              void t_MatchNoDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNode::wrap_Object(MatchNoDocsQueryNode(((t_MatchNoDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchNoDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ScaleFloatFunction::class$ = NULL;
            jmethodID *ScaleFloatFunction::mids$ = NULL;
            bool ScaleFloatFunction::live$ = false;

            jclass ScaleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ScaleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ScaleFloatFunction::ScaleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void ScaleFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ScaleFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ScaleFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ScaleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ScaleFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args);

            static PyMethodDef t_ScaleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ScaleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ScaleFloatFunction, t_ScaleFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ScaleFloatFunction, t_ScaleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ScaleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ScaleFloatFunction), module, "ScaleFloatFunction", 0);
            }

            void t_ScaleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "class_", make_descriptor(ScaleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ScaleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ScaleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ScaleFloatFunction::wrap_Object(ScaleFloatFunction(((t_ScaleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ScaleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ScaleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ScaleFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *RegexpQuery::class$ = NULL;
        jmethodID *RegexpQuery::mids$ = NULL;
        bool RegexpQuery::live$ = false;

        jclass RegexpQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/RegexpQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_66cf96d2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/util/automaton/AutomatonProvider;)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::util::automaton::AutomatonProvider & a2) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_66cf96d2, a0.this$, a1, a2.this$)) {}

        ::java::lang::String RegexpQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args);

        static PyMethodDef t_RegexpQuery__methods_[] = {
          DECLARE_METHOD(t_RegexpQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RegexpQuery, t_RegexpQuery, ::org::apache::lucene::search::AutomatonQuery, RegexpQuery, t_RegexpQuery_init_, 0, 0, 0, 0, 0);

        void t_RegexpQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(RegexpQuery), module, "RegexpQuery", 0);
        }

        void t_RegexpQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "class_", make_descriptor(RegexpQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexpQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RegexpQuery::initializeClass, 1)))
            return NULL;
          return t_RegexpQuery::wrap_Object(RegexpQuery(((t_RegexpQuery *) arg)->object.this$));
        }
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RegexpQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexpQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RegexpQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::automaton::AutomatonProvider a2((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RegexpQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockVerifyServer.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockVerifyServer::class$ = NULL;
        jmethodID *LockVerifyServer::mids$ = NULL;
        bool LockVerifyServer::live$ = false;

        jclass LockVerifyServer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockVerifyServer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockVerifyServer::LockVerifyServer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockVerifyServer::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockVerifyServer__methods_[] = {
          DECLARE_METHOD(t_LockVerifyServer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockVerifyServer, t_LockVerifyServer, ::java::lang::Object, LockVerifyServer, t_LockVerifyServer_init_, 0, 0, 0, 0, 0);

        void t_LockVerifyServer::install(PyObject *module)
        {
          installType(&PY_TYPE(LockVerifyServer), module, "LockVerifyServer", 0);
        }

        void t_LockVerifyServer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "class_", make_descriptor(LockVerifyServer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "wrapfn_", make_descriptor(t_LockVerifyServer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockVerifyServer::initializeClass, 1)))
            return NULL;
          return t_LockVerifyServer::wrap_Object(LockVerifyServer(((t_LockVerifyServer *) arg)->object.this$));
        }
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockVerifyServer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds)
        {
          LockVerifyServer object((jobject) NULL);

          INT_CALL(object = LockVerifyServer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockVerifyServer::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$IntComparator::class$ = NULL;
        jmethodID *FieldComparator$IntComparator::mids$ = NULL;
        bool FieldComparator$IntComparator::live$ = false;

        jclass FieldComparator$IntComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$IntComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_138a2154] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Integer;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");
            mids$[mid_getIntValues_7d7d264d] = env->getMethodID(cls, "getIntValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Ints;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$IntComparator::FieldComparator$IntComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Integer & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_138a2154, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$IntComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$IntComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$IntComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$IntComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$IntComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$IntComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$IntComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$IntComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$IntComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$IntComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$IntComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$IntComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$IntComparator, t_FieldComparator$IntComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$IntComparator, t_FieldComparator$IntComparator_init_, 0, 0, t_FieldComparator$IntComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$IntComparator::wrap_Object(const FieldComparator$IntComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$IntComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$IntComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$IntComparator), module, "FieldComparator$IntComparator", 0);
        }

        void t_FieldComparator$IntComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "class_", make_descriptor(FieldComparator$IntComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$IntComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$IntComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$IntComparator::wrap_Object(FieldComparator$IntComparator(((t_FieldComparator$IntComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$IntComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Integer a3((jobject) NULL);
          FieldComparator$IntComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$IntComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Integer);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40NormsFormat::class$ = NULL;
          jmethodID *Lucene40NormsFormat::mids$ = NULL;
          bool Lucene40NormsFormat::live$ = false;

          jclass Lucene40NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40NormsFormat::Lucene40NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40NormsFormat, t_Lucene40NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene40NormsFormat, t_Lucene40NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40NormsFormat), module, "Lucene40NormsFormat", 0);
          }

          void t_Lucene40NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "class_", make_descriptor(Lucene40NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40NormsFormat::wrap_Object(Lucene40NormsFormat(((t_Lucene40NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragListBuilder::class$ = NULL;
          jmethodID *FragListBuilder::mids$ = NULL;
          bool FragListBuilder::live$ = false;

          jclass FragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldFragList FragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args);

          static PyMethodDef t_FragListBuilder__methods_[] = {
            DECLARE_METHOD(t_FragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragListBuilder, t_FragListBuilder, ::java::lang::Object, FragListBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragListBuilder), module, "FragListBuilder", 0);
          }

          void t_FragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "class_", make_descriptor(FragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragListBuilder::initializeClass, 1)))
              return NULL;
            return t_FragListBuilder::wrap_Object(FragListBuilder(((t_FragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState$OrdRange::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState$OrdRange::mids$ = NULL;
          jfieldID *SortedSetDocValuesReaderState$OrdRange::fids$ = NULL;
          bool SortedSetDocValuesReaderState$OrdRange::live$ = false;

          jclass SortedSetDocValuesReaderState$OrdRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_end] = env->getFieldID(cls, "end", "I");
              fids$[fid_start] = env->getFieldID(cls, "start", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesReaderState$OrdRange::SortedSetDocValuesReaderState$OrdRange(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint SortedSetDocValuesReaderState$OrdRange::_get_end() const
          {
            return env->getIntField(this$, fids$[fid_end]);
          }

          jint SortedSetDocValuesReaderState$OrdRange::_get_start() const
          {
            return env->getIntField(this$, fids$[fid_start]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesReaderState$OrdRange__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, end),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState$OrdRange__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange, ::java::lang::Object, SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange_init_, 0, 0, t_SortedSetDocValuesReaderState$OrdRange__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState$OrdRange::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange), module, "SortedSetDocValuesReaderState$OrdRange", 0);
          }

          void t_SortedSetDocValuesReaderState$OrdRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState$OrdRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState$OrdRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(SortedSetDocValuesReaderState$OrdRange(((t_SortedSetDocValuesReaderState$OrdRange *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            SortedSetDocValuesReaderState$OrdRange object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesReaderState$OrdRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_end());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_start());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LabelToOrdinal::class$ = NULL;
            jmethodID *LabelToOrdinal::mids$ = NULL;
            bool LabelToOrdinal::live$ = false;
            jint LabelToOrdinal::INVALID_ORDINAL = (jint) 0;

            jclass LabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getMaxOrdinal_54c6a179] = env->getMethodID(cls, "getMaxOrdinal", "()I");
                mids$[mid_getNextOrdinal_54c6a179] = env->getMethodID(cls, "getNextOrdinal", "()I");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LabelToOrdinal::LabelToOrdinal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void LabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint LabelToOrdinal::getMaxOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getNextOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args);
            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg);
            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data);
            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data);
            static PyGetSetDef t_LabelToOrdinal__fields_[] = {
              DECLARE_GET_FIELD(t_LabelToOrdinal, maxOrdinal),
              DECLARE_GET_FIELD(t_LabelToOrdinal, nextOrdinal),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_LabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getMaxOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getNextOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getOrdinal, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LabelToOrdinal, t_LabelToOrdinal, ::java::lang::Object, LabelToOrdinal, t_LabelToOrdinal_init_, 0, 0, t_LabelToOrdinal__fields_, 0, 0);

            void t_LabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(LabelToOrdinal), module, "LabelToOrdinal", 0);
            }

            void t_LabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "class_", make_descriptor(LabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_LabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "INVALID_ORDINAL", make_descriptor(LabelToOrdinal::INVALID_ORDINAL));
            }

            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_LabelToOrdinal::wrap_Object(LabelToOrdinal(((t_LabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              LabelToOrdinal object((jobject) NULL);

              INT_CALL(object = LabelToOrdinal());
              self->object = object;

              return 0;
            }

            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getOrdinal", arg);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextOrdinal());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedBytesDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedBytesDocValuesField::class$ = NULL;
        jmethodID *SortedBytesDocValuesField::mids$ = NULL;
        bool SortedBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass SortedBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedBytesDocValuesField, t_SortedBytesDocValuesField, ::org::apache::lucene::document::SortedDocValuesField, SortedBytesDocValuesField, t_SortedBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedBytesDocValuesField), module, "SortedBytesDocValuesField", 0);
        }

        void t_SortedBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "class_", make_descriptor(SortedBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedBytesDocValuesField::wrap_Object(SortedBytesDocValuesField(((t_SortedBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanAnalyzer::class$ = NULL;
          jmethodID *GermanAnalyzer::mids$ = NULL;
          bool GermanAnalyzer::live$ = false;
          ::java::lang::String *GermanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GermanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GermanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data);
          static PyGetSetDef t_GermanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GermanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GermanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanAnalyzer, t_GermanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GermanAnalyzer, t_GermanAnalyzer_init_, 0, 0, t_GermanAnalyzer__fields_, 0, 0);

          void t_GermanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanAnalyzer), module, "GermanAnalyzer", 0);
          }

          void t_GermanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "class_", make_descriptor(GermanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GermanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GermanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GermanAnalyzer::wrap_Object(GermanAnalyzer(((t_GermanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::de::GermanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack$TermInfo::class$ = NULL;
          jmethodID *FieldTermStack$TermInfo::mids$ = NULL;
          bool FieldTermStack$TermInfo::live$ = false;

          jclass FieldTermStack$TermInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_649c5657] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIF)V");
              mids$[mid_compareTo_a7ece374] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNext_9d9e3d4a] = env->getMethodID(cls, "getNext", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack$TermInfo::FieldTermStack$TermInfo(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jfloat a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_649c5657, a0.this$, a1, a2, a3, a4)) {}

          jint FieldTermStack$TermInfo::compareTo(const FieldTermStack$TermInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_a7ece374], a0.this$);
          }

          jboolean FieldTermStack$TermInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldTermStack$TermInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          FieldTermStack$TermInfo FieldTermStack$TermInfo::getNext() const
          {
            return FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_getNext_9d9e3d4a]));
          }

          jint FieldTermStack$TermInfo::getPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
          }

          jint FieldTermStack$TermInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jfloat FieldTermStack$TermInfo::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          jint FieldTermStack$TermInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data);
          static PyGetSetDef t_FieldTermStack$TermInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, next),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, position),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, text),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack$TermInfo__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack$TermInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getNext, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack$TermInfo, t_FieldTermStack$TermInfo, ::java::lang::Object, FieldTermStack$TermInfo, t_FieldTermStack$TermInfo_init_, 0, 0, t_FieldTermStack$TermInfo__fields_, 0, 0);

          void t_FieldTermStack$TermInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack$TermInfo), module, "FieldTermStack$TermInfo", 0);
          }

          void t_FieldTermStack$TermInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "class_", make_descriptor(FieldTermStack$TermInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack$TermInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack$TermInfo::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack$TermInfo::wrap_Object(FieldTermStack$TermInfo(((t_FieldTermStack$TermInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack$TermInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jfloat a4;
            FieldTermStack$TermInfo object((jobject) NULL);

            if (!parseArgs(args, "sIIIF", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = FieldTermStack$TermInfo(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg)
          {
            FieldTermStack$TermInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self)
          {
            FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPosition());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data)
          {
            FieldTermStack$TermInfo value((jobject) NULL);
            OBJ_CALL(value = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPosition());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilterFactory::class$ = NULL;
          jmethodID *LimitTokenCountFilterFactory::mids$ = NULL;
          bool LimitTokenCountFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY = NULL;

          jclass LimitTokenCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_COUNT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_COUNT_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilterFactory::LimitTokenCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilterFactory), module, "LimitTokenCountFilterFactory", 0);
          }

          void t_LimitTokenCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "MAX_TOKEN_COUNT_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY)));
          }

          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilterFactory::wrap_Object(LimitTokenCountFilterFactory(((t_LimitTokenCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion::class$ = NULL;
            jmethodID *FSTCompletion::mids$ = NULL;
            bool FSTCompletion::live$ = false;
            jint FSTCompletion::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
                mids$[mid_init$_a36157b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;ZZ)V");
                mids$[mid_getBucket_a8afc655] = env->getMethodID(cls, "getBucket", "(Ljava/lang/CharSequence;)I");
                mids$[mid_getBucketCount_54c6a179] = env->getMethodID(cls, "getBucketCount", "()I");
                mids$[mid_getFST_917b3659] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/util/fst/FST;");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a36157b6, a0.this$, a1, a2)) {}

            jint FSTCompletion::getBucket(const ::java::lang::CharSequence & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getBucket_a8afc655], a0.this$);
            }

            jint FSTCompletion::getBucketCount() const
            {
              return env->callIntMethod(this$, mids$[mid_getBucketCount_54c6a179]);
            }

            ::org::apache::lucene::util::fst::FST FSTCompletion::getFST() const
            {
              return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_getFST_917b3659]));
            }

            ::java::util::List FSTCompletion::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg);
            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args);
            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data);
            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data);
            static PyGetSetDef t_FSTCompletion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion, bucketCount),
              DECLARE_GET_FIELD(t_FSTCompletion, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, getBucket, METH_O),
              DECLARE_METHOD(t_FSTCompletion, getBucketCount, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, getFST, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion, t_FSTCompletion, ::java::lang::Object, FSTCompletion, t_FSTCompletion_init_, 0, 0, t_FSTCompletion__fields_, 0, 0);

            void t_FSTCompletion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion), module, "FSTCompletion", 0);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "Completion", make_descriptor(&PY_TYPE(FSTCompletion$Completion)));
            }

            void t_FSTCompletion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "class_", make_descriptor(FSTCompletion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletion::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletion::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion::wrap_Object(FSTCompletion(((t_FSTCompletion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
                  {
                    INT_CALL(object = FSTCompletion(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  jboolean a1;
                  jboolean a2;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "KZZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletion(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.getBucket(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBucket", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBucketCount());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self)
            {
              ::org::apache::lucene::util::fst::FST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::fst::PY_TYPE(FSTCompletion$Completion));
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBucketCount());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$Pruner::class$ = NULL;
        jmethodID *SearcherLifetimeManager$Pruner::mids$ = NULL;
        bool SearcherLifetimeManager$Pruner::live$ = false;

        jclass SearcherLifetimeManager$Pruner::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$Pruner");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean SearcherLifetimeManager$Pruner::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$Pruner__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$Pruner, t_SearcherLifetimeManager$Pruner, ::java::lang::Object, SearcherLifetimeManager$Pruner, abstract_init, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$Pruner::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$Pruner), module, "SearcherLifetimeManager$Pruner", 0);
        }

        void t_SearcherLifetimeManager$Pruner::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$Pruner::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$Pruner::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$Pruner::wrap_Object(SearcherLifetimeManager$Pruner(((t_SearcherLifetimeManager$Pruner *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader$OrdinalsSegmentReader::class$ = NULL;
          jmethodID *OrdinalsReader$OrdinalsSegmentReader::mids$ = NULL;
          bool OrdinalsReader$OrdinalsSegmentReader::live$ = false;

          jclass OrdinalsReader$OrdinalsSegmentReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_e6e32052] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader$OrdinalsSegmentReader::OrdinalsReader$OrdinalsSegmentReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OrdinalsReader$OrdinalsSegmentReader::get(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_get_e6e32052], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args);

          static PyMethodDef t_OrdinalsReader$OrdinalsSegmentReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, get, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader, ::java::lang::Object, OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader_init_, 0, 0, 0, 0, 0);

          void t_OrdinalsReader$OrdinalsSegmentReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), module, "OrdinalsReader$OrdinalsSegmentReader", 0);
          }

          void t_OrdinalsReader$OrdinalsSegmentReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "class_", make_descriptor(OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader$OrdinalsSegmentReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(OrdinalsReader$OrdinalsSegmentReader(((t_OrdinalsReader$OrdinalsSegmentReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader$OrdinalsSegmentReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader$OrdinalsSegmentReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.get(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilesystemResourceLoader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilesystemResourceLoader::class$ = NULL;
          jmethodID *FilesystemResourceLoader::mids$ = NULL;
          bool FilesystemResourceLoader::live$ = false;

          jclass FilesystemResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilesystemResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_init$_002bf8fe] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilesystemResourceLoader::FilesystemResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0, const ::org::apache::lucene::analysis::util::ResourceLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_002bf8fe, a0.this$, a1.this$)) {}

          ::java::lang::Class FilesystemResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object FilesystemResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream FilesystemResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg);

          static PyMethodDef t_FilesystemResourceLoader__methods_[] = {
            DECLARE_METHOD(t_FilesystemResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilesystemResourceLoader, t_FilesystemResourceLoader, ::java::lang::Object, FilesystemResourceLoader, t_FilesystemResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_FilesystemResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(FilesystemResourceLoader), module, "FilesystemResourceLoader", 0);
          }

          void t_FilesystemResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "class_", make_descriptor(FilesystemResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_FilesystemResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilesystemResourceLoader::initializeClass, 1)))
              return NULL;
            return t_FilesystemResourceLoader::wrap_Object(FilesystemResourceLoader(((t_FilesystemResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilesystemResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FilesystemResourceLoader object((jobject) NULL);

                INT_CALL(object = FilesystemResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::File a0((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::ResourceLoader a1((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Long.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentCommitInfo::class$ = NULL;
        jmethodID *SegmentCommitInfo::mids$ = NULL;
        jfieldID *SegmentCommitInfo::fids$ = NULL;
        bool SegmentCommitInfo::live$ = false;

        jclass SegmentCommitInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentCommitInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f66c7cbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentInfo;IJJJ)V");
            mids$[mid_clone_5df298a9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_files_2d2d7de4] = env->getMethodID(cls, "files", "()Ljava/util/Collection;");
            mids$[mid_getDelCount_54c6a179] = env->getMethodID(cls, "getDelCount", "()I");
            mids$[mid_getDelGen_54c6a17a] = env->getMethodID(cls, "getDelGen", "()J");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesUpdatesFiles_db60befd] = env->getMethodID(cls, "getDocValuesUpdatesFiles", "()Ljava/util/Map;");
            mids$[mid_getFieldInfosFiles_03e99967] = env->getMethodID(cls, "getFieldInfosFiles", "()Ljava/util/Set;");
            mids$[mid_getFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getFieldInfosGen", "()J");
            mids$[mid_getNextDelGen_54c6a17a] = env->getMethodID(cls, "getNextDelGen", "()J");
            mids$[mid_getNextDocValuesGen_54c6a17a] = env->getMethodID(cls, "getNextDocValuesGen", "()J");
            mids$[mid_getNextFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getNextFieldInfosGen", "()J");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasFieldUpdates_54c6a16a] = env->getMethodID(cls, "hasFieldUpdates", "()Z");
            mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setDocValuesUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_setFieldInfosFiles_fb4f2b26] = env->getMethodID(cls, "setFieldInfosFiles", "(Ljava/util/Set;)V");
            mids$[mid_setGenUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setGenUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_sizeInBytes_54c6a17a] = env->getMethodID(cls, "sizeInBytes", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_info] = env->getFieldID(cls, "info", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentCommitInfo::SegmentCommitInfo(const ::org::apache::lucene::index::SegmentInfo & a0, jint a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f66c7cbe, a0.this$, a1, a2, a3, a4)) {}

        SegmentCommitInfo SegmentCommitInfo::clone() const
        {
          return SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_clone_5df298a9]));
        }

        ::java::util::Collection SegmentCommitInfo::files() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_2d2d7de4]));
        }

        jint SegmentCommitInfo::getDelCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDelCount_54c6a179]);
        }

        jlong SegmentCommitInfo::getDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::java::util::Map SegmentCommitInfo::getDocValuesUpdatesFiles() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDocValuesUpdatesFiles_db60befd]));
        }

        ::java::util::Set SegmentCommitInfo::getFieldInfosFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getFieldInfosFiles_03e99967]));
        }

        jlong SegmentCommitInfo::getFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getFieldInfosGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDocValuesGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextFieldInfosGen_54c6a17a]);
        }

        jboolean SegmentCommitInfo::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean SegmentCommitInfo::hasFieldUpdates() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFieldUpdates_54c6a16a]);
        }

        void SegmentCommitInfo::setDocValuesUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c], a0.this$);
        }

        void SegmentCommitInfo::setFieldInfosFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFieldInfosFiles_fb4f2b26], a0.this$);
        }

        void SegmentCommitInfo::setGenUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGenUpdatesFiles_4c9e2b1c], a0.this$);
        }

        jlong SegmentCommitInfo::sizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_sizeInBytes_54c6a17a]);
        }

        ::java::lang::String SegmentCommitInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentCommitInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentCommitInfo::_get_info() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_info]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args);
        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data);

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static PyGetSetDef t_SegmentCommitInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentCommitInfo, info),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delCount),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, docValuesGen),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, docValuesUpdatesFiles),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, fieldInfosFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, fieldInfosGen),
          DECLARE_SET_FIELD(t_SegmentCommitInfo, genUpdatesFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDelGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDocValuesGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextFieldInfosGen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentCommitInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentCommitInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesUpdatesFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasFieldUpdates, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, setDocValuesUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setFieldInfosFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setGenUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, sizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentCommitInfo, t_SegmentCommitInfo, ::java::lang::Object, SegmentCommitInfo, t_SegmentCommitInfo_init_, 0, 0, t_SegmentCommitInfo__fields_, 0, 0);

        void t_SegmentCommitInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentCommitInfo), module, "SegmentCommitInfo", 0);
        }

        void t_SegmentCommitInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "class_", make_descriptor(SegmentCommitInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentCommitInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentCommitInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentCommitInfo::wrap_Object(SegmentCommitInfo(((t_SegmentCommitInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentCommitInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;
          jlong a4;
          SegmentCommitInfo object((jobject) NULL);

          if (!parseArgs(args, "kIJJJ", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = SegmentCommitInfo(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self)
        {
          SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDelCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFieldUpdates());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFieldInfosFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFieldInfosFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setGenUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGenUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentCommitInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_info());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDelCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setDocValuesUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Set value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
            {
              INT_CALL(self->object.setFieldInfosFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfosFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setGenUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "genUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$QueryAndLimit::class$ = NULL;
        jmethodID *BufferedUpdatesStream$QueryAndLimit::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$QueryAndLimit::fids$ = NULL;
        bool BufferedUpdatesStream$QueryAndLimit::live$ = false;

        jclass BufferedUpdatesStream$QueryAndLimit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e29027ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_limit] = env->getFieldID(cls, "limit", "I");
            fids$[fid_query] = env->getFieldID(cls, "query", "Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedUpdatesStream$QueryAndLimit::BufferedUpdatesStream$QueryAndLimit(const ::org::apache::lucene::search::Query & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e29027ff, a0.this$, a1)) {}

        jint BufferedUpdatesStream$QueryAndLimit::_get_limit() const
        {
          return env->getIntField(this$, fids$[fid_limit]);
        }

        ::org::apache::lucene::search::Query BufferedUpdatesStream$QueryAndLimit::_get_query() const
        {
          return ::org::apache::lucene::search::Query(env->getObjectField(this$, fids$[fid_query]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$QueryAndLimit__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, limit),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$QueryAndLimit__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit, ::java::lang::Object, BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit_init_, 0, 0, t_BufferedUpdatesStream$QueryAndLimit__fields_, 0, 0);

        void t_BufferedUpdatesStream$QueryAndLimit::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$QueryAndLimit), module, "BufferedUpdatesStream$QueryAndLimit", 0);
        }

        void t_BufferedUpdatesStream$QueryAndLimit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$QueryAndLimit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$QueryAndLimit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$QueryAndLimit::wrap_Object(BufferedUpdatesStream$QueryAndLimit(((t_BufferedUpdatesStream$QueryAndLimit *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          BufferedUpdatesStream$QueryAndLimit object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BufferedUpdatesStream$QueryAndLimit(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_limit());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object._get_query());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *KeepOnlyLastCommitDeletionPolicy::class$ = NULL;
        jmethodID *KeepOnlyLastCommitDeletionPolicy::mids$ = NULL;
        bool KeepOnlyLastCommitDeletionPolicy::live$ = false;

        jclass KeepOnlyLastCommitDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KeepOnlyLastCommitDeletionPolicy::KeepOnlyLastCommitDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void KeepOnlyLastCommitDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void KeepOnlyLastCommitDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_KeepOnlyLastCommitDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy_init_, 0, 0, 0, 0, 0);

        void t_KeepOnlyLastCommitDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), module, "KeepOnlyLastCommitDeletionPolicy", 0);
        }

        void t_KeepOnlyLastCommitDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "class_", make_descriptor(KeepOnlyLastCommitDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_KeepOnlyLastCommitDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_KeepOnlyLastCommitDeletionPolicy::wrap_Object(KeepOnlyLastCommitDeletionPolicy(((t_KeepOnlyLastCommitDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          KeepOnlyLastCommitDeletionPolicy object((jobject) NULL);

          INT_CALL(object = KeepOnlyLastCommitDeletionPolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$GroupedFacetResult::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$GroupedFacetResult::mids$ = NULL;
          bool AbstractGroupFacetCollector$GroupedFacetResult::live$ = false;

          jclass AbstractGroupFacetCollector$GroupedFacetResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90d4781f] = env->getMethodID(cls, "<init>", "(IIZII)V");
              mids$[mid_addFacetCount_738fc2ce] = env->getMethodID(cls, "addFacetCount", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_getFacetEntries_6bc635fe] = env->getMethodID(cls, "getFacetEntries", "(II)Ljava/util/List;");
              mids$[mid_getTotalCount_54c6a179] = env->getMethodID(cls, "getTotalCount", "()I");
              mids$[mid_getTotalMissingCount_54c6a179] = env->getMethodID(cls, "getTotalMissingCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$GroupedFacetResult::AbstractGroupFacetCollector$GroupedFacetResult(jint a0, jint a1, jboolean a2, jint a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_90d4781f, a0, a1, a2, a3, a4)) {}

          void AbstractGroupFacetCollector$GroupedFacetResult::addFacetCount(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFacetCount_738fc2ce], a0.this$, a1);
          }

          ::java::util::List AbstractGroupFacetCollector$GroupedFacetResult::getFacetEntries(jint a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFacetEntries_6bc635fe], a0, a1));
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalCount_54c6a179]);
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalMissingCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalMissingCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$GroupedFacetResult__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalCount),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalMissingCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$GroupedFacetResult__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, addFacetCount, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getFacetEntries, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalMissingCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult, ::java::lang::Object, AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult_init_, 0, 0, t_AbstractGroupFacetCollector$GroupedFacetResult__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$GroupedFacetResult::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult), module, "AbstractGroupFacetCollector$GroupedFacetResult", 0);
          }

          void t_AbstractGroupFacetCollector$GroupedFacetResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(AbstractGroupFacetCollector$GroupedFacetResult(((t_AbstractGroupFacetCollector$GroupedFacetResult *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jboolean a2;
            jint a3;
            jint a4;
            AbstractGroupFacetCollector$GroupedFacetResult object((jobject) NULL);

            if (!parseArgs(args, "IIZII", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = AbstractGroupFacetCollector$GroupedFacetResult(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFacetCount(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFacetCount", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFacetEntries(a0, a1));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::PY_TYPE(AbstractGroupFacetCollector$FacetEntry));
            }

            PyErr_SetArgsError((PyObject *) self, "getFacetEntries", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilterFactory::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilterFactory::live$ = false;

          jclass TokenOffsetPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4b14c4a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilterFactory::TokenOffsetPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter TokenOffsetPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_4b14c4a0], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), module, "TokenOffsetPayloadTokenFilterFactory", 0);
          }

          void t_TokenOffsetPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilterFactory::wrap_Object(TokenOffsetPayloadTokenFilterFactory(((t_TokenOffsetPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TokenOffsetPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TokenOffsetPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH1.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH1::class$ = NULL;
          jmethodID *NormalizationH1::mids$ = NULL;
          bool NormalizationH1::live$ = false;

          jclass NormalizationH1::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH1");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH1::NormalizationH1() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH1::NormalizationH1(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH1::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH1::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH1::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self);
          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data);
          static PyGetSetDef t_NormalizationH1__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH1, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH1__methods_[] = {
            DECLARE_METHOD(t_NormalizationH1, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH1, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH1, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH1, t_NormalizationH1, ::org::apache::lucene::search::similarities::Normalization, NormalizationH1, t_NormalizationH1_init_, 0, 0, t_NormalizationH1__fields_, 0, 0);

          void t_NormalizationH1::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH1), module, "NormalizationH1", 0);
          }

          void t_NormalizationH1::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "class_", make_descriptor(NormalizationH1::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH1::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH1::initializeClass, 1)))
              return NULL;
            return t_NormalizationH1::wrap_Object(NormalizationH1(((t_NormalizationH1 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH1::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH1 object((jobject) NULL);

                INT_CALL(object = NormalizationH1());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH1 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH1(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Arrays::class$ = NULL;
    jmethodID *Arrays::mids$ = NULL;
    bool Arrays::live$ = false;

    jclass Arrays::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Arrays");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asList_b1a4e262] = env->getStaticMethodID(cls, "asList", "([Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_binarySearch_c36b04d7] = env->getStaticMethodID(cls, "binarySearch", "([FF)I");
        mids$[mid_binarySearch_1da92101] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_8f13b3af] = env->getStaticMethodID(cls, "binarySearch", "([BB)I");
        mids$[mid_binarySearch_e6fbc3d5] = env->getStaticMethodID(cls, "binarySearch", "([SS)I");
        mids$[mid_binarySearch_4c830bcf] = env->getStaticMethodID(cls, "binarySearch", "([JJ)I");
        mids$[mid_binarySearch_d6ab1c2f] = env->getStaticMethodID(cls, "binarySearch", "([DD)I");
        mids$[mid_binarySearch_df726439] = env->getStaticMethodID(cls, "binarySearch", "([II)I");
        mids$[mid_binarySearch_ea67e195] = env->getStaticMethodID(cls, "binarySearch", "([CC)I");
        mids$[mid_binarySearch_736a8636] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_binarySearch_c8914cef] = env->getStaticMethodID(cls, "binarySearch", "([JIIJ)I");
        mids$[mid_binarySearch_1e4305af] = env->getStaticMethodID(cls, "binarySearch", "([BIIB)I");
        mids$[mid_binarySearch_b3c1f717] = env->getStaticMethodID(cls, "binarySearch", "([FIIF)I");
        mids$[mid_binarySearch_dee75d29] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;)I");
        mids$[mid_binarySearch_695adc4b] = env->getStaticMethodID(cls, "binarySearch", "([DIID)I");
        mids$[mid_binarySearch_b5b4fc35] = env->getStaticMethodID(cls, "binarySearch", "([CIIC)I");
        mids$[mid_binarySearch_4eae659d] = env->getStaticMethodID(cls, "binarySearch", "([IIII)I");
        mids$[mid_binarySearch_4f5bed95] = env->getStaticMethodID(cls, "binarySearch", "([SIIS)I");
        mids$[mid_binarySearch_07be7c2a] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_copyOf_d090ee39] = env->getStaticMethodID(cls, "copyOf", "([SI)[S");
        mids$[mid_copyOf_91cb90f9] = env->getStaticMethodID(cls, "copyOf", "([CI)[C");
        mids$[mid_copyOf_0f9a030d] = env->getStaticMethodID(cls, "copyOf", "([JI)[J");
        mids$[mid_copyOf_e2c1f835] = env->getStaticMethodID(cls, "copyOf", "([DI)[D");
        mids$[mid_copyOf_6bd5869d] = env->getStaticMethodID(cls, "copyOf", "([BI)[B");
        mids$[mid_copyOf_669ee2d1] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
        mids$[mid_copyOf_d766d189] = env->getStaticMethodID(cls, "copyOf", "([II)[I");
        mids$[mid_copyOf_a415095d] = env->getStaticMethodID(cls, "copyOf", "([FI)[F");
        mids$[mid_copyOf_1fbccced] = env->getStaticMethodID(cls, "copyOf", "([ZI)[Z");
        mids$[mid_copyOf_3608f1f7] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_16e37a35] = env->getStaticMethodID(cls, "copyOfRange", "([FII)[F");
        mids$[mid_copyOfRange_b92120ff] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;II)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_bb313e1d] = env->getStaticMethodID(cls, "copyOfRange", "([DII)[D");
        mids$[mid_copyOfRange_96b1a95f] = env->getStaticMethodID(cls, "copyOfRange", "([CII)[C");
        mids$[mid_copyOfRange_3d448975] = env->getStaticMethodID(cls, "copyOfRange", "([BII)[B");
        mids$[mid_copyOfRange_a80c3bb3] = env->getStaticMethodID(cls, "copyOfRange", "([III)[I");
        mids$[mid_copyOfRange_be4afb45] = env->getStaticMethodID(cls, "copyOfRange", "([JII)[J");
        mids$[mid_copyOfRange_9766cdc5] = env->getStaticMethodID(cls, "copyOfRange", "([ZII)[Z");
        mids$[mid_copyOfRange_3a8237ff] = env->getStaticMethodID(cls, "copyOfRange", "([SII)[S");
        mids$[mid_copyOfRange_bca17599] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_deepEquals_a9ca87d2] = env->getStaticMethodID(cls, "deepEquals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_deepHashCode_c0f5dac5] = env->getStaticMethodID(cls, "deepHashCode", "([Ljava/lang/Object;)I");
        mids$[mid_deepToString_02ea1cdd] = env->getStaticMethodID(cls, "deepToString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_equals_a9ca87d2] = env->getStaticMethodID(cls, "equals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_equals_7868d93a] = env->getStaticMethodID(cls, "equals", "([S[S)Z");
        mids$[mid_equals_e3842e2a] = env->getStaticMethodID(cls, "equals", "([J[J)Z");
        mids$[mid_equals_2a42df9a] = env->getStaticMethodID(cls, "equals", "([C[C)Z");
        mids$[mid_equals_7c26725e] = env->getStaticMethodID(cls, "equals", "([I[I)Z");
        mids$[mid_equals_38a3e932] = env->getStaticMethodID(cls, "equals", "([F[F)Z");
        mids$[mid_equals_a2d8877a] = env->getStaticMethodID(cls, "equals", "([B[B)Z");
        mids$[mid_equals_2383bf16] = env->getStaticMethodID(cls, "equals", "([D[D)Z");
        mids$[mid_equals_6f6949ea] = env->getStaticMethodID(cls, "equals", "([Z[Z)Z");
        mids$[mid_fill_8f13b3b0] = env->getStaticMethodID(cls, "fill", "([BB)V");
        mids$[mid_fill_e6fbc3ca] = env->getStaticMethodID(cls, "fill", "([SS)V");
        mids$[mid_fill_c36b04c8] = env->getStaticMethodID(cls, "fill", "([FF)V");
        mids$[mid_fill_1da9211e] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;Ljava/lang/Object;)V");
        mids$[mid_fill_ea67e18a] = env->getStaticMethodID(cls, "fill", "([CC)V");
        mids$[mid_fill_4c830bd0] = env->getStaticMethodID(cls, "fill", "([JJ)V");
        mids$[mid_fill_d6ab1c30] = env->getStaticMethodID(cls, "fill", "([DD)V");
        mids$[mid_fill_df726426] = env->getStaticMethodID(cls, "fill", "([II)V");
        mids$[mid_fill_ad7155b0] = env->getStaticMethodID(cls, "fill", "([ZZ)V");
        mids$[mid_fill_b5b4fc2a] = env->getStaticMethodID(cls, "fill", "([CIIC)V");
        mids$[mid_fill_b3c1f708] = env->getStaticMethodID(cls, "fill", "([FIIF)V");
        mids$[mid_fill_c8914cf0] = env->getStaticMethodID(cls, "fill", "([JIIJ)V");
        mids$[mid_fill_dee75d36] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;IILjava/lang/Object;)V");
        mids$[mid_fill_4f5bed8a] = env->getStaticMethodID(cls, "fill", "([SIIS)V");
        mids$[mid_fill_1e4305b0] = env->getStaticMethodID(cls, "fill", "([BIIB)V");
        mids$[mid_fill_4eae6582] = env->getStaticMethodID(cls, "fill", "([IIII)V");
        mids$[mid_fill_77210c30] = env->getStaticMethodID(cls, "fill", "([ZIIZ)V");
        mids$[mid_fill_695adc54] = env->getStaticMethodID(cls, "fill", "([DIID)V");
        mids$[mid_hashCode_f0c5b9dc] = env->getStaticMethodID(cls, "hashCode", "([Z)I");
        mids$[mid_hashCode_9ceb500c] = env->getStaticMethodID(cls, "hashCode", "([J)I");
        mids$[mid_hashCode_49b4f134] = env->getStaticMethodID(cls, "hashCode", "([B)I");
        mids$[mid_hashCode_700e23c9] = env->getStaticMethodID(cls, "hashCode", "([C)I");
        mids$[mid_hashCode_c017fc59] = env->getStaticMethodID(cls, "hashCode", "([S)I");
        mids$[mid_hashCode_f3b62cc6] = env->getStaticMethodID(cls, "hashCode", "([D)I");
        mids$[mid_hashCode_9cc34320] = env->getStaticMethodID(cls, "hashCode", "([F)I");
        mids$[mid_hashCode_1efc2017] = env->getStaticMethodID(cls, "hashCode", "([I)I");
        mids$[mid_hashCode_c0f5dac5] = env->getStaticMethodID(cls, "hashCode", "([Ljava/lang/Object;)I");
        mids$[mid_sort_9cc3433f] = env->getStaticMethodID(cls, "sort", "([F)V");
        mids$[mid_sort_9ceb5013] = env->getStaticMethodID(cls, "sort", "([J)V");
        mids$[mid_sort_f3b62cd9] = env->getStaticMethodID(cls, "sort", "([D)V");
        mids$[mid_sort_700e23d6] = env->getStaticMethodID(cls, "sort", "([C)V");
        mids$[mid_sort_c0f5dada] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;)V");
        mids$[mid_sort_49b4f12b] = env->getStaticMethodID(cls, "sort", "([B)V");
        mids$[mid_sort_c017fc46] = env->getStaticMethodID(cls, "sort", "([S)V");
        mids$[mid_sort_1efc2008] = env->getStaticMethodID(cls, "sort", "([I)V");
        mids$[mid_sort_8c46d789] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_sort_b389e986] = env->getStaticMethodID(cls, "sort", "([SII)V");
        mids$[mid_sort_3e1ea22c] = env->getStaticMethodID(cls, "sort", "([III)V");
        mids$[mid_sort_c8bd2f63] = env->getStaticMethodID(cls, "sort", "([FII)V");
        mids$[mid_sort_86f4435f] = env->getStaticMethodID(cls, "sort", "([BII)V");
        mids$[mid_sort_6f0bb356] = env->getStaticMethodID(cls, "sort", "([CII)V");
        mids$[mid_sort_3be2c5d1] = env->getStaticMethodID(cls, "sort", "([DII)V");
        mids$[mid_sort_6ae021e7] = env->getStaticMethodID(cls, "sort", "([JII)V");
        mids$[mid_sort_4172dade] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;II)V");
        mids$[mid_sort_7c263389] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_toString_0f6e0f86] = env->getStaticMethodID(cls, "toString", "([B)Ljava/lang/String;");
        mids$[mid_toString_08b6580a] = env->getStaticMethodID(cls, "toString", "([F)Ljava/lang/String;");
        mids$[mid_toString_c783d655] = env->getStaticMethodID(cls, "toString", "([C)Ljava/lang/String;");
        mids$[mid_toString_9352a4bc] = env->getStaticMethodID(cls, "toString", "([D)Ljava/lang/String;");
        mids$[mid_toString_aeceff45] = env->getStaticMethodID(cls, "toString", "([S)Ljava/lang/String;");
        mids$[mid_toString_14e8bbde] = env->getStaticMethodID(cls, "toString", "([Z)Ljava/lang/String;");
        mids$[mid_toString_02ea1cdd] = env->getStaticMethodID(cls, "toString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_toString_053bf1ae] = env->getStaticMethodID(cls, "toString", "([J)Ljava/lang/String;");
        mids$[mid_toString_9570afaf] = env->getStaticMethodID(cls, "toString", "([I)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::List Arrays::asList(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_asList_b1a4e262], a0.this$));
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c36b04d7], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1da92101], a0.this$, a1.this$);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_8f13b3af], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_e6fbc3d5], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4c830bcf], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_d6ab1c2f], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_df726439], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_ea67e195], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_736a8636], a0.this$, a1.this$, a2.this$);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c8914cef], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1e4305af], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b3c1f717], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_dee75d29], a0.this$, a1, a2, a3.this$);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_695adc4b], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b5b4fc35], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4eae659d], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4f5bed95], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3, const ::java::util::Comparator & a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_07be7c2a], a0.this$, a1, a2, a3.this$, a4.this$);
    }

    JArray< jshort > Arrays::copyOf(const JArray< jshort > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d090ee39], a0.this$, a1));
    }

    JArray< jchar > Arrays::copyOf(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_91cb90f9], a0.this$, a1));
    }

    JArray< jlong > Arrays::copyOf(const JArray< jlong > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_0f9a030d], a0.this$, a1));
    }

    JArray< jdouble > Arrays::copyOf(const JArray< jdouble > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_e2c1f835], a0.this$, a1));
    }

    JArray< jbyte > Arrays::copyOf(const JArray< jbyte > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_6bd5869d], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_669ee2d1], a0.this$, a1));
    }

    JArray< jint > Arrays::copyOf(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d766d189], a0.this$, a1));
    }

    JArray< jfloat > Arrays::copyOf(const JArray< jfloat > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_a415095d], a0.this$, a1));
    }

    JArray< jboolean > Arrays::copyOf(const JArray< jboolean > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_1fbccced], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_3608f1f7], a0.this$, a1, a2.this$));
    }

    JArray< jfloat > Arrays::copyOfRange(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_16e37a35], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_b92120ff], a0.this$, a1, a2));
    }

    JArray< jdouble > Arrays::copyOfRange(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bb313e1d], a0.this$, a1, a2));
    }

    JArray< jchar > Arrays::copyOfRange(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_96b1a95f], a0.this$, a1, a2));
    }

    JArray< jbyte > Arrays::copyOfRange(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3d448975], a0.this$, a1, a2));
    }

    JArray< jint > Arrays::copyOfRange(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_a80c3bb3], a0.this$, a1, a2));
    }

    JArray< jlong > Arrays::copyOfRange(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_be4afb45], a0.this$, a1, a2));
    }

    JArray< jboolean > Arrays::copyOfRange(const JArray< jboolean > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_9766cdc5], a0.this$, a1, a2));
    }

    JArray< jshort > Arrays::copyOfRange(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3a8237ff], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Class & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bca17599], a0.this$, a1, a2, a3.this$));
    }

    jboolean Arrays::deepEquals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_deepEquals_a9ca87d2], a0.this$, a1.this$);
    }

    jint Arrays::deepHashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_deepHashCode_c0f5dac5], a0.this$);
    }

    ::java::lang::String Arrays::deepToString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_deepToString_02ea1cdd], a0.this$));
    }

    jboolean Arrays::equals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a9ca87d2], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jshort > & a0, const JArray< jshort > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7868d93a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jlong > & a0, const JArray< jlong > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_e3842e2a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jchar > & a0, const JArray< jchar > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2a42df9a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jint > & a0, const JArray< jint > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7c26725e], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jfloat > & a0, const JArray< jfloat > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_38a3e932], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jbyte > & a0, const JArray< jbyte > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a2d8877a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jdouble > & a0, const JArray< jdouble > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2383bf16], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jboolean > & a0, const JArray< jboolean > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_6f6949ea], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_8f13b3b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_e6fbc3ca], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c36b04c8], a0.this$, a1);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1da9211e], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ea67e18a], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4c830bd0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_d6ab1c30], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_df726426], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ad7155b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b5b4fc2a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b3c1f708], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c8914cf0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_dee75d36], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::fill(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4f5bed8a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1e4305b0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4eae6582], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jint a1, jint a2, jboolean a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_77210c30], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_695adc54], a0.this$, a1, a2, a3);
    }

    jint Arrays::hashCode(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f0c5b9dc], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9ceb500c], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_49b4f134], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_700e23c9], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c017fc59], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f3b62cc6], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9cc34320], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_1efc2017], a0.this$);
    }

    jint Arrays::hashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c0f5dac5], a0.this$);
    }

    void Arrays::sort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9cc3433f], a0.this$);
    }

    void Arrays::sort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9ceb5013], a0.this$);
    }

    void Arrays::sort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_f3b62cd9], a0.this$);
    }

    void Arrays::sort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_700e23d6], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c0f5dada], a0.this$);
    }

    void Arrays::sort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_49b4f12b], a0.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c017fc46], a0.this$);
    }

    void Arrays::sort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1efc2008], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_8c46d789], a0.this$, a1.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b389e986], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3e1ea22c], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c8bd2f63], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_86f4435f], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6f0bb356], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3be2c5d1], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6ae021e7], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_4172dade], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_7c263389], a0.this$, a1, a2, a3.this$);
    }

    ::java::lang::String Arrays::toString(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_0f6e0f86], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_08b6580a], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c783d655], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9352a4bc], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_aeceff45], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_14e8bbde], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_02ea1cdd], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_053bf1ae], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9570afaf], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Arrays__methods_[] = {
      DECLARE_METHOD(t_Arrays, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, asList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOfRange, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepEquals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepToString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, equals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, hashCode, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, toString, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Arrays, t_Arrays, ::java::lang::Object, Arrays, abstract_init, 0, 0, 0, 0, 0);

    void t_Arrays::install(PyObject *module)
    {
      installType(&PY_TYPE(Arrays), module, "Arrays", 0);
    }

    void t_Arrays::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "class_", make_descriptor(Arrays::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "wrapfn_", make_descriptor(t_Arrays::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Arrays::initializeClass, 1)))
        return NULL;
      return t_Arrays::wrap_Object(Arrays(((t_Arrays *) arg)->object.this$));
    }
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Arrays::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::asList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asList", arg);
      return NULL;
    }

    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;
          jint result;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;
          jint result;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;
          jint result;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;
          jint result;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;
          jint result;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;
          jint result;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "[ooK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 4:
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;
          jint result;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;
          jint result;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;
          jint result;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;
          jint result;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;
          jint result;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;
          jint result;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          ::java::util::Comparator a4((jobject) NULL);
          PyTypeObject **p4;
          jint result;

          if (!parseArgs(args, "[oIIoK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOf", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Class a3((jobject) NULL);
          PyTypeObject **p3;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2, a3));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOfRange", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "[o[o", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepEquals(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "deepEquals", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "deepHashCode", arg);
      return NULL;
    }

    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepToString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "deepToString", arg);
      return NULL;
    }

    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[o[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          JArray< jshort > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[S[S", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          JArray< jchar > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[C[C", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          JArray< jboolean > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[Z[Z", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(type, "equals", args, 2);
    }

    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "[ZZ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;

          if (!parseArgs(args, "[ZIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jboolean > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(type, "hashCode", args, 2);
    }

    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(type, "toString", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *Cl2oTaxonomyWriterCache::class$ = NULL;
            jmethodID *Cl2oTaxonomyWriterCache::mids$ = NULL;
            bool Cl2oTaxonomyWriterCache::live$ = false;

            jclass Cl2oTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getMemoryUsage_54c6a179] = env->getMethodID(cls, "getMemoryUsage", "()I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Cl2oTaxonomyWriterCache::Cl2oTaxonomyWriterCache(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void Cl2oTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void Cl2oTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint Cl2oTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jint Cl2oTaxonomyWriterCache::getMemoryUsage() const
            {
              return env->callIntMethod(this$, mids$[mid_getMemoryUsage_54c6a179]);
            }

            jboolean Cl2oTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean Cl2oTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_Cl2oTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, full),
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, memoryUsage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Cl2oTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, getMemoryUsage, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache, ::java::lang::Object, Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache_init_, 0, 0, t_Cl2oTaxonomyWriterCache__fields_, 0, 0);

            void t_Cl2oTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(Cl2oTaxonomyWriterCache), module, "Cl2oTaxonomyWriterCache", 0);
            }

            void t_Cl2oTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "class_", make_descriptor(Cl2oTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_Cl2oTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_Cl2oTaxonomyWriterCache::wrap_Object(Cl2oTaxonomyWriterCache(((t_Cl2oTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              Cl2oTaxonomyWriterCache object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = Cl2oTaxonomyWriterCache(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMemoryUsage());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMemoryUsage());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *RemoveDeletedQueryNodesProcessor::class$ = NULL;
              jmethodID *RemoveDeletedQueryNodesProcessor::mids$ = NULL;
              bool RemoveDeletedQueryNodesProcessor::live$ = false;

              jclass RemoveDeletedQueryNodesProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveDeletedQueryNodesProcessor::RemoveDeletedQueryNodesProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveDeletedQueryNodesProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveDeletedQueryNodesProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveDeletedQueryNodesProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveDeletedQueryNodesProcessor), module, "RemoveDeletedQueryNodesProcessor", 0);
              }

              void t_RemoveDeletedQueryNodesProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "class_", make_descriptor(RemoveDeletedQueryNodesProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveDeletedQueryNodesProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveDeletedQueryNodesProcessor::wrap_Object(RemoveDeletedQueryNodesProcessor(((t_RemoveDeletedQueryNodesProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveDeletedQueryNodesProcessor object((jobject) NULL);

                INT_CALL(object = RemoveDeletedQueryNodesProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveDeletedQueryNodesProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailAnalyzer::class$ = NULL;
          jmethodID *UAX29URLEmailAnalyzer::mids$ = NULL;
          bool UAX29URLEmailAnalyzer::live$ = false;
          jint UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *UAX29URLEmailAnalyzer::STOP_WORDS_SET = NULL;

          jclass UAX29URLEmailAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint UAX29URLEmailAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void UAX29URLEmailAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self);
          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data);
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailAnalyzer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer_init_, 0, 0, t_UAX29URLEmailAnalyzer__fields_, 0, 0);

          void t_UAX29URLEmailAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailAnalyzer), module, "UAX29URLEmailAnalyzer", 0);
          }

          void t_UAX29URLEmailAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "class_", make_descriptor(UAX29URLEmailAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*UAX29URLEmailAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailAnalyzer::wrap_Object(UAX29URLEmailAnalyzer(((t_UAX29URLEmailAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilterFactory::class$ = NULL;
          jmethodID *IndicNormalizationFilterFactory::mids$ = NULL;
          bool IndicNormalizationFilterFactory::live$ = false;

          jclass IndicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilterFactory::IndicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IndicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self);
          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_IndicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IndicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory_init_, 0, 0, t_IndicNormalizationFilterFactory__fields_, 0, 0);

          void t_IndicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilterFactory), module, "IndicNormalizationFilterFactory", 0);
          }

          void t_IndicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(IndicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilterFactory::wrap_Object(IndicNormalizationFilterFactory(((t_IndicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader::class$ = NULL;
          jmethodID *CachedOrdinalsReader::mids$ = NULL;
          bool CachedOrdinalsReader::live$ = false;

          jclass CachedOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90116188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader::CachedOrdinalsReader(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_90116188, a0.this$)) {}

          ::java::lang::String CachedOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader CachedOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }

          jlong CachedOrdinalsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self);
          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data);
          static PyGetSetDef t_CachedOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getReader, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader, t_CachedOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, CachedOrdinalsReader, t_CachedOrdinalsReader_init_, 0, 0, t_CachedOrdinalsReader__fields_, 0, 0);

          void t_CachedOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader), module, "CachedOrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "CachedOrds", make_descriptor(&PY_TYPE(CachedOrdinalsReader$CachedOrds)));
          }

          void t_CachedOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "class_", make_descriptor(CachedOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader::wrap_Object(CachedOrdinalsReader(((t_CachedOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            CachedOrdinalsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, &a0))
            {
              INT_CALL(object = CachedOrdinalsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SolrSynonymParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SolrSynonymParser::class$ = NULL;
          jmethodID *SolrSynonymParser::mids$ = NULL;
          bool SolrSynonymParser::live$ = false;

          jclass SolrSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SolrSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SolrSynonymParser::SolrSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void SolrSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args);

          static PyMethodDef t_SolrSynonymParser__methods_[] = {
            DECLARE_METHOD(t_SolrSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SolrSynonymParser, t_SolrSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, SolrSynonymParser, t_SolrSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_SolrSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SolrSynonymParser), module, "SolrSynonymParser", 0);
          }

          void t_SolrSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "class_", make_descriptor(SolrSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_SolrSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SolrSynonymParser::initializeClass, 1)))
              return NULL;
            return t_SolrSynonymParser::wrap_Object(SolrSynonymParser(((t_SolrSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SolrSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            SolrSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SolrSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SolrSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilderFactory::class$ = NULL;
          jmethodID *FilterBuilderFactory::mids$ = NULL;
          bool FilterBuilderFactory::live$ = false;

          jclass FilterBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_a961e918] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_getFilterBuilder_de450325] = env->getMethodID(cls, "getFilterBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/FilterBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilterBuilderFactory::FilterBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FilterBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_a961e918], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::FilterBuilder FilterBuilderFactory::getFilterBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::FilterBuilder(env->callObjectMethod(this$, mids$[mid_getFilterBuilder_de450325], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args);
          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_FilterBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_FilterBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_FilterBuilderFactory, getFilterBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilderFactory, t_FilterBuilderFactory, ::java::lang::Object, FilterBuilderFactory, t_FilterBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_FilterBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilderFactory), module, "FilterBuilderFactory", 0);
          }

          void t_FilterBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "class_", make_descriptor(FilterBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_FilterBuilderFactory::wrap_Object(FilterBuilderFactory(((t_FilterBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            FilterBuilderFactory object((jobject) NULL);

            INT_CALL(object = FilterBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getFilterBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_FilterBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFilterBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/KpStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *KpStemmer::class$ = NULL;
        jmethodID *KpStemmer::mids$ = NULL;
        bool KpStemmer::live$ = false;

        jclass KpStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/KpStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KpStemmer::KpStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean KpStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint KpStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean KpStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args);

        static PyMethodDef t_KpStemmer__methods_[] = {
          DECLARE_METHOD(t_KpStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KpStemmer, t_KpStemmer, ::org::tartarus::snowball::SnowballProgram, KpStemmer, t_KpStemmer_init_, 0, 0, 0, 0, 0);

        void t_KpStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(KpStemmer), module, "KpStemmer", 0);
        }

        void t_KpStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "class_", make_descriptor(KpStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "wrapfn_", make_descriptor(t_KpStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KpStemmer::initializeClass, 1)))
            return NULL;
          return t_KpStemmer::wrap_Object(KpStemmer(((t_KpStemmer *) arg)->object.this$));
        }
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KpStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds)
        {
          KpStemmer object((jobject) NULL);

          INT_CALL(object = KpStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermQuery::class$ = NULL;
        jmethodID *TermQuery::mids$ = NULL;
        bool TermQuery::live$ = false;

        jclass TermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_ec3f6ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ec3f6ef2, a0.this$, a1.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        ::org::apache::lucene::search::Weight TermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean TermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void TermQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::index::Term TermQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_getTerm(t_TermQuery *self);
        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data);
        static PyGetSetDef t_TermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermQuery__methods_[] = {
          DECLARE_METHOD(t_TermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermQuery, t_TermQuery, ::org::apache::lucene::search::Query, TermQuery, t_TermQuery_init_, 0, 0, t_TermQuery__fields_, 0, 0);

        void t_TermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermQuery), module, "TermQuery", 0);
        }

        void t_TermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "class_", make_descriptor(TermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "wrapfn_", make_descriptor(t_TermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermQuery::initializeClass, 1)))
            return NULL;
          return t_TermQuery::wrap_Object(TermQuery(((t_TermQuery *) arg)->object.this$));
        }
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::TermContext a1((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_TermQuery_getTerm(t_TermQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InPlaceMergeSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InPlaceMergeSorter::class$ = NULL;
        jmethodID *InPlaceMergeSorter::mids$ = NULL;
        bool InPlaceMergeSorter::live$ = false;

        jclass InPlaceMergeSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InPlaceMergeSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InPlaceMergeSorter::InPlaceMergeSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void InPlaceMergeSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args);

        static PyMethodDef t_InPlaceMergeSorter__methods_[] = {
          DECLARE_METHOD(t_InPlaceMergeSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InPlaceMergeSorter, t_InPlaceMergeSorter, ::org::apache::lucene::util::Sorter, InPlaceMergeSorter, t_InPlaceMergeSorter_init_, 0, 0, 0, 0, 0);

        void t_InPlaceMergeSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(InPlaceMergeSorter), module, "InPlaceMergeSorter", 0);
        }

        void t_InPlaceMergeSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "class_", make_descriptor(InPlaceMergeSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "wrapfn_", make_descriptor(t_InPlaceMergeSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InPlaceMergeSorter::initializeClass, 1)))
            return NULL;
          return t_InPlaceMergeSorter::wrap_Object(InPlaceMergeSorter(((t_InPlaceMergeSorter *) arg)->object.this$));
        }
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InPlaceMergeSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds)
        {
          InPlaceMergeSorter object((jobject) NULL);

          INT_CALL(object = InPlaceMergeSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InPlaceMergeSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AnyQueryNode::class$ = NULL;
              jmethodID *AnyQueryNode::mids$ = NULL;
              bool AnyQueryNode::live$ = false;

              jclass AnyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0236cab3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getMinimumMatchingElements_54c6a179] = env->getMethodID(cls, "getMinimumMatchingElements", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNode::AnyQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, jint a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0236cab3, a0.this$, a1.this$, a2)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnyQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence AnyQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String AnyQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint AnyQueryNode::getMinimumMatchingElements() const
              {
                return env->callIntMethod(this$, mids$[mid_getMinimumMatchingElements_54c6a179]);
              }

              void AnyQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AnyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AnyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg);
              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data);
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data);
              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data);
              static PyGetSetDef t_AnyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AnyQueryNode, field),
                DECLARE_GET_FIELD(t_AnyQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_AnyQueryNode, minimumMatchingElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AnyQueryNode__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getMinimumMatchingElements, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AnyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNode, t_AnyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode, AnyQueryNode, t_AnyQueryNode_init_, 0, 0, t_AnyQueryNode__fields_, 0, 0);

              void t_AnyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNode), module, "AnyQueryNode", 0);
              }

              void t_AnyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "class_", make_descriptor(AnyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNode::wrap_Object(AnyQueryNode(((t_AnyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                AnyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KOI", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
                {
                  INT_CALL(object = AnyQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilter::class$ = NULL;
          jmethodID *TurkishLowerCaseFilter::mids$ = NULL;
          bool TurkishLowerCaseFilter::live$ = false;

          jclass TurkishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilter::TurkishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TurkishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_TurkishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilter, t_TurkishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, TurkishLowerCaseFilter, t_TurkishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_TurkishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilter), module, "TurkishLowerCaseFilter", 0);
          }

          void t_TurkishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilter::wrap_Object(TurkishLowerCaseFilter(((t_TurkishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TurkishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TurkishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValueSource::class$ = NULL;
            jmethodID *MultiValueSource::mids$ = NULL;
            bool MultiValueSource::live$ = false;

            jclass MultiValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValueSource::MultiValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jint MultiValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self);

            static PyMethodDef t_MultiValueSource__methods_[] = {
              DECLARE_METHOD(t_MultiValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, dimension, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiValueSource, t_MultiValueSource, ::org::apache::lucene::queries::function::ValueSource, MultiValueSource, t_MultiValueSource_init_, 0, 0, 0, 0, 0);

            void t_MultiValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValueSource), module, "MultiValueSource", 0);
            }

            void t_MultiValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "class_", make_descriptor(MultiValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "wrapfn_", make_descriptor(t_MultiValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValueSource::initializeClass, 1)))
                return NULL;
              return t_MultiValueSource::wrap_Object(MultiValueSource(((t_MultiValueSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds)
            {
              MultiValueSource object((jobject) NULL);

              INT_CALL(object = MultiValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.dimension());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSet::class$ = NULL;
        jmethodID *DocIdSet::mids$ = NULL;
        bool DocIdSet::live$ = false;
        DocIdSet *DocIdSet::EMPTY = NULL;

        jclass DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new DocIdSet(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/DocIdSet;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSet::DocIdSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Bits DocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSet_bits(t_DocIdSet *self);
        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self);
        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self);
        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self);
        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data);
        static PyGetSetDef t_DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdSet__methods_[] = {
          DECLARE_METHOD(t_DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, bits, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, isCacheable, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSet, t_DocIdSet, ::java::lang::Object, DocIdSet, t_DocIdSet_init_, 0, 0, t_DocIdSet__fields_, 0, 0);

        void t_DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSet), module, "DocIdSet", 0);
        }

        void t_DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "class_", make_descriptor(DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "EMPTY", make_descriptor(t_DocIdSet::wrap_Object(*DocIdSet::EMPTY)));
        }

        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSet::initializeClass, 1)))
            return NULL;
          return t_DocIdSet::wrap_Object(DocIdSet(((t_DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds)
        {
          DocIdSet object((jobject) NULL);

          INT_CALL(object = DocIdSet());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSet_bits(t_DocIdSet *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.bits());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCacheable());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ScoreMode::class$ = NULL;
          jmethodID *ScoreMode::mids$ = NULL;
          bool ScoreMode::live$ = false;
          ScoreMode *ScoreMode::Avg = NULL;
          ScoreMode *ScoreMode::Max = NULL;
          ScoreMode *ScoreMode::None = NULL;
          ScoreMode *ScoreMode::Total = NULL;

          jclass ScoreMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ScoreMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_0d6e5195] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/join/ScoreMode;");
              mids$[mid_values_dbd87c7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/join/ScoreMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new ScoreMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Max = new ScoreMode(env->getStaticObjectField(cls, "Max", "Lorg/apache/lucene/search/join/ScoreMode;"));
              None = new ScoreMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Total = new ScoreMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/join/ScoreMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreMode ScoreMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ScoreMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0d6e5195], a0.this$));
          }

          JArray< ScoreMode > ScoreMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ScoreMode >(env->callStaticObjectMethod(cls, mids$[mid_values_dbd87c7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args);
          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_ScoreMode_values(PyTypeObject *type);
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data);
          static PyGetSetDef t_ScoreMode__fields_[] = {
            DECLARE_GET_FIELD(t_ScoreMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ScoreMode__methods_[] = {
            DECLARE_METHOD(t_ScoreMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_ScoreMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreMode, t_ScoreMode, ::java::lang::Enum, ScoreMode, abstract_init, 0, 0, t_ScoreMode__fields_, 0, 0);
          PyObject *t_ScoreMode::wrap_Object(const ScoreMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ScoreMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ScoreMode::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreMode), module, "ScoreMode", 0);
          }

          void t_ScoreMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "class_", make_descriptor(ScoreMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "wrapfn_", make_descriptor(t_ScoreMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ScoreMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Avg", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Avg)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Max", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Max)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "None", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::None)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Total", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Total)));
          }

          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreMode::initializeClass, 1)))
              return NULL;
            return t_ScoreMode::wrap_Object(ScoreMode(((t_ScoreMode *) arg)->object.this$));
          }
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ScoreMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::valueOf(a0));
              return t_ScoreMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_ScoreMode_values(PyTypeObject *type)
          {
            JArray< ScoreMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::values());
            return JArray<jobject>(result.this$).wrap(t_ScoreMode::wrap_jobject);
          }
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {

          ::java::lang::Class *QueryAutoStopWordAnalyzer::class$ = NULL;
          jmethodID *QueryAutoStopWordAnalyzer::mids$ = NULL;
          bool QueryAutoStopWordAnalyzer::live$ = false;
          jfloat QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent = (jfloat) 0;

          jclass QueryAutoStopWordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0ed586e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_1ec7a0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;F)V");
              mids$[mid_init$_4a9ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;I)V");
              mids$[mid_init$_560944dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;I)V");
              mids$[mid_init$_2db3c3ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;F)V");
              mids$[mid_getStopWords_2b86e588] = env->getMethodID(cls, "getStopWords", "()[Lorg/apache/lucene/index/Term;");
              mids$[mid_getStopWords_1f6a174f] = env->getMethodID(cls, "getStopWords", "(Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxDocFreqPercent = env->getStaticFloatField(cls, "defaultMaxDocFreqPercent");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_f0ed586e, a0.this$, a1.this$, a2.this$)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, jfloat a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_1ec7a0cb, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, jint a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_4a9ca32c, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::util::Collection & a3, jint a4) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_560944dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::util::Collection & a3, jfloat a4) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_2db3c3ea, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          JArray< ::org::apache::lucene::index::Term > QueryAutoStopWordAnalyzer::getStopWords() const
          {
            return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getStopWords_2b86e588]));
          }

          JArray< ::java::lang::String > QueryAutoStopWordAnalyzer::getStopWords(const ::java::lang::String & a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getStopWords_1f6a174f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {
          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args);
          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data);
          static PyGetSetDef t_QueryAutoStopWordAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryAutoStopWordAnalyzer, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryAutoStopWordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, getStopWords, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer_init_, 0, 0, t_QueryAutoStopWordAnalyzer__fields_, 0, 0);

          void t_QueryAutoStopWordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryAutoStopWordAnalyzer), module, "QueryAutoStopWordAnalyzer", 0);
          }

          void t_QueryAutoStopWordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "class_", make_descriptor(QueryAutoStopWordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_QueryAutoStopWordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryAutoStopWordAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "defaultMaxDocFreqPercent", make_descriptor(QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent));
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_QueryAutoStopWordAnalyzer::wrap_Object(QueryAutoStopWordAnalyzer(((t_QueryAutoStopWordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                jfloat a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkF", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                jint a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::util::Collection a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_, &a4))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::util::Collection a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkKF", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_, &a4))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
                OBJ_CALL(result = self->object.getStopWords());
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getStopWords(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getStopWords", args);
            return NULL;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data)
          {
            JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet$Builder::class$ = NULL;
        jmethodID *PForDeltaDocIdSet$Builder::mids$ = NULL;
        bool PForDeltaDocIdSet$Builder::live$ = false;

        jclass PForDeltaDocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_5450130c] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_add_c0d9d1e3] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_build_44738ac2] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/PForDeltaDocIdSet;");
            mids$[mid_setIndexInterval_c0d9d1e3] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PForDeltaDocIdSet$Builder::PForDeltaDocIdSet$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_5450130c], a0.this$));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_c0d9d1e3], a0));
        }

        ::org::apache::lucene::util::PForDeltaDocIdSet PForDeltaDocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::PForDeltaDocIdSet(env->callObjectMethod(this$, mids$[mid_build_44738ac2]));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_c0d9d1e3], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self);
        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_PForDeltaDocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder, ::java::lang::Object, PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder_init_, 0, 0, t_PForDeltaDocIdSet$Builder__fields_, 0, 0);

        void t_PForDeltaDocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet$Builder), module, "PForDeltaDocIdSet$Builder", 0);
        }

        void t_PForDeltaDocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet$Builder::wrap_Object(PForDeltaDocIdSet$Builder(((t_PForDeltaDocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          PForDeltaDocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = PForDeltaDocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self)
        {
          ::org::apache::lucene::util::PForDeltaDocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_PForDeltaDocIdSet::wrap_Object(result);
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg)
        {
          jint a0;
          PForDeltaDocIdSet$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballAnalyzer::class$ = NULL;
          jmethodID *SnowballAnalyzer::mids$ = NULL;
          bool SnowballAnalyzer::live$ = false;

          jclass SnowballAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1d68b8f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)V");
              mids$[mid_init$_df6e5eaa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_1d68b8f5, a0.this$, a1.this$)) {}

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_df6e5eaa, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents SnowballAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args);

          static PyMethodDef t_SnowballAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SnowballAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, createComponents, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballAnalyzer, t_SnowballAnalyzer, ::org::apache::lucene::analysis::Analyzer, SnowballAnalyzer, t_SnowballAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SnowballAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballAnalyzer), module, "SnowballAnalyzer", 0);
          }

          void t_SnowballAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "class_", make_descriptor(SnowballAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SnowballAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SnowballAnalyzer::wrap_Object(SnowballAnalyzer(((t_SnowballAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KsK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleFragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleFragmenter::class$ = NULL;
          jmethodID *SimpleFragmenter::mids$ = NULL;
          bool SimpleFragmenter::live$ = false;

          jclass SimpleFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getFragmentSize_54c6a179] = env->getMethodID(cls, "getFragmentSize", "()I");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_setFragmentSize_39c7bd3c] = env->getMethodID(cls, "setFragmentSize", "(I)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmenter::SimpleFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmenter::SimpleFragmenter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint SimpleFragmenter::getFragmentSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragmentSize_54c6a179]);
          }

          jboolean SimpleFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleFragmenter::setFragmentSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentSize_39c7bd3c], a0);
          }

          void SimpleFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg);
          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args);
          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data);
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data);
          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data);
          static PyGetSetDef t_SimpleFragmenter__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleFragmenter, fragmentSize),
            DECLARE_GET_FIELD(t_SimpleFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, getFragmentSize, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, setFragmentSize, METH_O),
            DECLARE_METHOD(t_SimpleFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmenter, t_SimpleFragmenter, ::java::lang::Object, SimpleFragmenter, t_SimpleFragmenter_init_, 0, 0, t_SimpleFragmenter__fields_, 0, 0);

          void t_SimpleFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmenter), module, "SimpleFragmenter", 0);
          }

          void t_SimpleFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "class_", make_descriptor(SimpleFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmenter::wrap_Object(SimpleFragmenter(((t_SimpleFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmenter object((jobject) NULL);

                INT_CALL(object = SimpleFragmenter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragmenter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragmentSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFragmentSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentSize", arg);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragmentSize());
            return PyInt_FromLong((long) value);
          }
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFragmentSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentSize", arg);
            return -1;
          }

          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs::class$ = NULL;
          jmethodID *PairOutputs::mids$ = NULL;
          bool PairOutputs::live$ = false;

          jclass PairOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32f3530a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_add_f30532b1] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_common_f30532b1] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_getNoOutput_02379231] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_newPair_b457b73d] = env->getMethodID(cls, "newPair", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_outputToString_93c1f663] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_53ec2f78] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)J");
              mids$[mid_read_49c65b36] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_f30532b1] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_3e3045f1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PairOutputs::PairOutputs(const ::org::apache::lucene::util::fst::Outputs & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::org::apache::lucene::util::fst::Outputs(env->newObject(initializeClass, &mids$, mid_init$_32f3530a, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::add(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_add_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::common(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_common_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_getNoOutput_02379231]));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::newPair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_newPair_b457b73d], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::outputToString(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_93c1f663], a0.this$));
          }

          jlong PairOutputs::ramBytesUsed(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_53ec2f78], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_read_49c65b36], a0.this$));
          }

          void PairOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::subtract(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_subtract_f30532b1], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PairOutputs::write(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3e3045f1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args);
          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data);
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data);
          static PyGetSetDef t_PairOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs, noOutput),
            DECLARE_GET_FIELD(t_PairOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs__methods_[] = {
            DECLARE_METHOD(t_PairOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, newPair, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs, t_PairOutputs, ::org::apache::lucene::util::fst::Outputs, PairOutputs, t_PairOutputs_init_, 0, 0, t_PairOutputs__fields_, 0, 0);
          PyObject *t_PairOutputs::wrap_Object(const PairOutputs& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs), module, "PairOutputs", 0);
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "Pair", make_descriptor(&PY_TYPE(PairOutputs$Pair)));
          }

          void t_PairOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "class_", make_descriptor(PairOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs::initializeClass, 1)))
              return NULL;
            return t_PairOutputs::wrap_Object(PairOutputs(((t_PairOutputs *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Outputs a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            PairOutputs object((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              INT_CALL(object = PairOutputs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
              OBJ_CALL(result = self->object.newPair(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            PyErr_SetArgsError((PyObject *) self, "newPair", args);
            return NULL;
          }

          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            jlong result;

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$DirectBytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$DirectBytesStartArray::mids$ = NULL;
        bool BytesRefHash$DirectBytesStartArray::live$ = false;

        jclass BytesRefHash$DirectBytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$DirectBytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$DirectBytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);

        static PyMethodDef t_BytesRefHash$DirectBytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, bytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, grow, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, init, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray, ::org::apache::lucene::util::BytesRefHash$BytesStartArray, BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$DirectBytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$DirectBytesStartArray), module, "BytesRefHash$DirectBytesStartArray", 0);
        }

        void t_BytesRefHash$DirectBytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$DirectBytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$DirectBytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$DirectBytesStartArray::wrap_Object(BytesRefHash$DirectBytesStartArray(((t_BytesRefHash$DirectBytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bytesUsed());
            return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "bytesUsed", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clear());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.grow());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "grow", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.init());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "init", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilterFactory::class$ = NULL;
          jmethodID *KeywordMarkerFilterFactory::mids$ = NULL;
          bool KeywordMarkerFilterFactory::live$ = false;
          ::java::lang::String *KeywordMarkerFilterFactory::PATTERN = NULL;
          ::java::lang::String *KeywordMarkerFilterFactory::PROTECTED_TOKENS = NULL;

          jclass KeywordMarkerFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordMarkerFilterFactory::KeywordMarkerFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordMarkerFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void KeywordMarkerFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeywordMarkerFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args);
          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self);
          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data);
          static PyGetSetDef t_KeywordMarkerFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeywordMarkerFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordMarkerFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory_init_, 0, 0, t_KeywordMarkerFilterFactory__fields_, 0, 0);

          void t_KeywordMarkerFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilterFactory), module, "KeywordMarkerFilterFactory", 0);
          }

          void t_KeywordMarkerFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "class_", make_descriptor(KeywordMarkerFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordMarkerFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PATTERN", make_descriptor(j2p(*KeywordMarkerFilterFactory::PATTERN)));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*KeywordMarkerFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilterFactory::wrap_Object(KeywordMarkerFilterFactory(((t_KeywordMarkerFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordMarkerFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordMarkerFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DocumentStoredFieldVisitor::class$ = NULL;
        jmethodID *DocumentStoredFieldVisitor::mids$ = NULL;
        bool DocumentStoredFieldVisitor::live$ = false;

        jclass DocumentStoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DocumentStoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
            mids$[mid_init$_fb4f2b26] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;)V");
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_getDocument_005b06cf] = env->getMethodID(cls, "getDocument", "()Lorg/apache/lucene/document/Document;");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor() : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const JArray< ::java::lang::String > & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const ::java::util::Set & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_fb4f2b26, a0.this$)) {}

        void DocumentStoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void DocumentStoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        ::org::apache::lucene::document::Document DocumentStoredFieldVisitor::getDocument() const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_getDocument_005b06cf]));
        }

        void DocumentStoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status DocumentStoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void DocumentStoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self);
        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data);
        static PyGetSetDef t_DocumentStoredFieldVisitor__fields_[] = {
          DECLARE_GET_FIELD(t_DocumentStoredFieldVisitor, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocumentStoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, getDocument, METH_NOARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, needsField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor, ::org::apache::lucene::index::StoredFieldVisitor, DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor_init_, 0, 0, t_DocumentStoredFieldVisitor__fields_, 0, 0);

        void t_DocumentStoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(DocumentStoredFieldVisitor), module, "DocumentStoredFieldVisitor", 0);
        }

        void t_DocumentStoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "class_", make_descriptor(DocumentStoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_DocumentStoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_DocumentStoredFieldVisitor::wrap_Object(DocumentStoredFieldVisitor(((t_DocumentStoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              DocumentStoredFieldVisitor object((jobject) NULL);

              INT_CALL(object = DocumentStoredFieldVisitor());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::Set a0((jobject) NULL);
              PyTypeObject **p0;
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "binaryField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "doubleField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "floatField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self)
        {
          ::org::apache::lucene::document::Document result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(result);
        }

        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "intField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "longField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "needsField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "stringField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data)
        {
          ::org::apache::lucene::document::Document value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiBits$SubResult.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiBits$SubResult::class$ = NULL;
        jmethodID *MultiBits$SubResult::mids$ = NULL;
        jfieldID *MultiBits$SubResult::fids$ = NULL;
        bool MultiBits$SubResult::live$ = false;

        jclass MultiBits$SubResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiBits$SubResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_matches] = env->getFieldID(cls, "matches", "Z");
            fids$[fid_result] = env->getFieldID(cls, "result", "Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiBits$SubResult::MultiBits$SubResult() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean MultiBits$SubResult::_get_matches() const
        {
          return env->getBooleanField(this$, fids$[fid_matches]);
        }

        void MultiBits$SubResult::_set_matches(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_matches], a0);
        }

        ::org::apache::lucene::util::Bits MultiBits$SubResult::_get_result() const
        {
          return ::org::apache::lucene::util::Bits(env->getObjectField(this$, fids$[fid_result]));
        }

        void MultiBits$SubResult::_set_result(const ::org::apache::lucene::util::Bits & a0) const
        {
          env->setObjectField(this$, fids$[fid_result], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data);
        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiBits$SubResult__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, matches),
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, result),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiBits$SubResult__methods_[] = {
          DECLARE_METHOD(t_MultiBits$SubResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits$SubResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiBits$SubResult, t_MultiBits$SubResult, ::java::lang::Object, MultiBits$SubResult, t_MultiBits$SubResult_init_, 0, 0, t_MultiBits$SubResult__fields_, 0, 0);

        void t_MultiBits$SubResult::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiBits$SubResult), module, "MultiBits$SubResult", 0);
        }

        void t_MultiBits$SubResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "class_", make_descriptor(MultiBits$SubResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "wrapfn_", make_descriptor(t_MultiBits$SubResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiBits$SubResult::initializeClass, 1)))
            return NULL;
          return t_MultiBits$SubResult::wrap_Object(MultiBits$SubResult(((t_MultiBits$SubResult *) arg)->object.this$));
        }
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiBits$SubResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds)
        {
          MultiBits$SubResult object((jobject) NULL);

          INT_CALL(object = MultiBits$SubResult());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_matches());
          Py_RETURN_BOOL(value);
        }
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_matches(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matches", arg);
          return -1;
        }

        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_result());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::Bits::initializeClass, &value))
          {
            INT_CALL(self->object._set_result(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "result", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanQuery2ModifierNodeProcessor::class$ = NULL;
              jmethodID *BooleanQuery2ModifierNodeProcessor::mids$ = NULL;
              bool BooleanQuery2ModifierNodeProcessor::live$ = false;

              jclass BooleanQuery2ModifierNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_fillChildrenBufferAndApplyModifiery_cc04aeef] = env->getMethodID(cls, "fillChildrenBufferAndApplyModifiery", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_isDefaultBooleanQueryNode_cc04aee3] = env->getMethodID(cls, "isDefaultBooleanQueryNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Z");
                  mids$[mid_tagModifierButDoNotOverride_6bd34b3d] = env->getMethodID(cls, "tagModifierButDoNotOverride", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQuery2ModifierNodeProcessor::BooleanQuery2ModifierNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler BooleanQuery2ModifierNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQuery2ModifierNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void BooleanQuery2ModifierNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data);
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_BooleanQuery2ModifierNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_BooleanQuery2ModifierNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BooleanQuery2ModifierNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor, ::java::lang::Object, BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor_init_, 0, 0, t_BooleanQuery2ModifierNodeProcessor__fields_, 0, 0);

              void t_BooleanQuery2ModifierNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQuery2ModifierNodeProcessor), module, "BooleanQuery2ModifierNodeProcessor", 0);
              }

              void t_BooleanQuery2ModifierNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "class_", make_descriptor(BooleanQuery2ModifierNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery2ModifierNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanQuery2ModifierNodeProcessor::wrap_Object(BooleanQuery2ModifierNodeProcessor(((t_BooleanQuery2ModifierNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanQuery2ModifierNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanQuery2ModifierNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BoostQueryNodeBuilder::class$ = NULL;
              jmethodID *BoostQueryNodeBuilder::mids$ = NULL;
              bool BoostQueryNodeBuilder::live$ = false;

              jclass BoostQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeBuilder::BoostQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query BoostQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BoostQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeBuilder, t_BoostQueryNodeBuilder, ::java::lang::Object, BoostQueryNodeBuilder, t_BoostQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeBuilder), module, "BoostQueryNodeBuilder", 0);
              }

              void t_BoostQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "class_", make_descriptor(BoostQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeBuilder::wrap_Object(BoostQueryNodeBuilder(((t_BoostQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreQuery::class$ = NULL;
        jmethodID *ConstantScoreQuery::mids$ = NULL;
        bool ConstantScoreQuery::live$ = false;

        jclass ConstantScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        ::org::apache::lucene::search::Weight ConstantScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean ConstantScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void ConstantScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter ConstantScoreQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint ConstantScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String ConstantScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data);
        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data);
        static PyGetSetDef t_ConstantScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_ConstantScoreQuery, filter),
          DECLARE_GET_FIELD(t_ConstantScoreQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreQuery__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreQuery, t_ConstantScoreQuery, ::org::apache::lucene::search::Query, ConstantScoreQuery, t_ConstantScoreQuery_init_, 0, 0, t_ConstantScoreQuery__fields_, 0, 0);

        void t_ConstantScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreQuery), module, "ConstantScoreQuery", 0);
        }

        void t_ConstantScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "class_", make_descriptor(ConstantScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreQuery::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreQuery::wrap_Object(ConstantScoreQuery(((t_ConstantScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs$Pair::class$ = NULL;
          jmethodID *PairOutputs$Pair::mids$ = NULL;
          jfieldID *PairOutputs$Pair::fids$ = NULL;
          bool PairOutputs$Pair::live$ = false;

          jclass PairOutputs$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_output1] = env->getFieldID(cls, "output1", "Ljava/lang/Object;");
              fids$[fid_output2] = env->getFieldID(cls, "output2", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PairOutputs$Pair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PairOutputs$Pair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PairOutputs$Pair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output1() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output1]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output2() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output2]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data);
          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data);

          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data);
          static PyGetSetDef t_PairOutputs$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output1),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output2),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs$Pair__methods_[] = {
            DECLARE_METHOD(t_PairOutputs$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, equals, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs$Pair, t_PairOutputs$Pair, ::java::lang::Object, PairOutputs$Pair, abstract_init, 0, 0, t_PairOutputs$Pair__fields_, 0, 0);
          PyObject *t_PairOutputs$Pair::wrap_Object(const PairOutputs$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs$Pair), module, "PairOutputs$Pair", 0);
          }

          void t_PairOutputs$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "class_", make_descriptor(PairOutputs$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs$Pair::initializeClass, 1)))
              return NULL;
            return t_PairOutputs$Pair::wrap_Object(PairOutputs$Pair(((t_PairOutputs$Pair *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output1());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output2());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *PhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool PhraseSlopQueryNodeProcessor::live$ = false;

              jclass PhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNodeProcessor::PhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_PhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNodeProcessor), module, "PhraseSlopQueryNodeProcessor", 0);
              }

              void t_PhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(PhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNodeProcessor::wrap_Object(PhraseSlopQueryNodeProcessor(((t_PhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/MinimizationOperations.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *MinimizationOperations::class$ = NULL;
          jmethodID *MinimizationOperations::mids$ = NULL;
          bool MinimizationOperations::live$ = false;

          jclass MinimizationOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/MinimizationOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_minimize_fc7cf394] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_minimizeHopcroft_fc7cf394] = env->getStaticMethodID(cls, "minimizeHopcroft", "(Lorg/apache/lucene/util/automaton/Automaton;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void MinimizationOperations::minimize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_minimize_fc7cf394], a0.this$);
          }

          void MinimizationOperations::minimizeHopcroft(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_minimizeHopcroft_fc7cf394], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_MinimizationOperations__methods_[] = {
            DECLARE_METHOD(t_MinimizationOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimizeHopcroft, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinimizationOperations, t_MinimizationOperations, ::java::lang::Object, MinimizationOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_MinimizationOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(MinimizationOperations), module, "MinimizationOperations", 0);
          }

          void t_MinimizationOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "class_", make_descriptor(MinimizationOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "wrapfn_", make_descriptor(t_MinimizationOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinimizationOperations::initializeClass, 1)))
              return NULL;
            return t_MinimizationOperations::wrap_Object(MinimizationOperations(((t_MinimizationOperations *) arg)->object.this$));
          }
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinimizationOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::MinimizationOperations::minimize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::MinimizationOperations::minimizeHopcroft(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "minimizeHopcroft", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeFilter.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "java/lang/Long.h"
#include "java/lang/Float.h"
#include "java/lang/Number.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeFilter::class$ = NULL;
        jmethodID *NumericRangeFilter::mids$ = NULL;
        bool NumericRangeFilter::live$ = false;

        jclass NumericRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_dba8ce37] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newDoubleRange_086f57c9] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_a2bb5c27] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_ba518bd5] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_0551a8cf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_eeb70fc1] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_557bc96b] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_b95b6e4d] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Number NumericRangeFilter::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeFilter::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeFilter::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericRangeFilter::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeFilter::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_dba8ce37], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_086f57c9], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_a2bb5c27], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ba518bd5], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_0551a8cf], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_eeb70fc1], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_557bc96b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_b95b6e4d], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args);
        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data);
        static PyGetSetDef t_NumericRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeFilter, max),
          DECLARE_GET_FIELD(t_NumericRangeFilter, min),
          DECLARE_GET_FIELD(t_NumericRangeFilter, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeFilter__methods_[] = {
          DECLARE_METHOD(t_NumericRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeFilter, t_NumericRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, NumericRangeFilter, abstract_init, 0, 0, t_NumericRangeFilter__fields_, 0, 0);
        PyObject *t_NumericRangeFilter::wrap_Object(const NumericRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeFilter), module, "NumericRangeFilter", 0);
        }

        void t_NumericRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "class_", make_descriptor(NumericRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeFilter::initializeClass, 1)))
            return NULL;
          return t_NumericRangeFilter::wrap_Object(NumericRangeFilter(((t_NumericRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher$LeafSlice::class$ = NULL;
        jmethodID *IndexSearcher$LeafSlice::mids$ = NULL;
        bool IndexSearcher$LeafSlice::live$ = false;

        jclass IndexSearcher$LeafSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher$LeafSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_683a6c7f] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher$LeafSlice::IndexSearcher$LeafSlice(const JArray< ::org::apache::lucene::index::AtomicReaderContext > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_683a6c7f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexSearcher$LeafSlice__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice, ::java::lang::Object, IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice_init_, 0, 0, 0, 0, 0);

        void t_IndexSearcher$LeafSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher$LeafSlice), module, "IndexSearcher$LeafSlice", 0);
        }

        void t_IndexSearcher$LeafSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "class_", make_descriptor(IndexSearcher$LeafSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher$LeafSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher$LeafSlice::wrap_Object(IndexSearcher$LeafSlice(((t_IndexSearcher$LeafSlice *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::AtomicReaderContext > a0((jobject) NULL);
          IndexSearcher$LeafSlice object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = IndexSearcher$LeafSlice(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector::class$ = NULL;
        jmethodID *TimeLimitingCollector::mids$ = NULL;
        bool TimeLimitingCollector::live$ = false;

        jclass TimeLimitingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d1481a7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;Lorg/apache/lucene/util/Counter;J)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getGlobalCounter_781dd30a] = env->getStaticMethodID(cls, "getGlobalCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_getGlobalTimerThread_91bdd0a8] = env->getStaticMethodID(cls, "getGlobalTimerThread", "()Lorg/apache/lucene/search/TimeLimitingCollector$TimerThread;");
            mids$[mid_isGreedy_54c6a16a] = env->getMethodID(cls, "isGreedy", "()Z");
            mids$[mid_setBaseline_54c6a166] = env->getMethodID(cls, "setBaseline", "()V");
            mids$[mid_setBaseline_0ee6df2f] = env->getMethodID(cls, "setBaseline", "(J)V");
            mids$[mid_setCollector_77379ce0] = env->getMethodID(cls, "setCollector", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setGreedy_bb0c767f] = env->getMethodID(cls, "setGreedy", "(Z)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector::TimeLimitingCollector(const ::org::apache::lucene::search::Collector & a0, const ::org::apache::lucene::util::Counter & a1, jlong a2) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d1481a7a, a0.this$, a1.this$, a2)) {}

        jboolean TimeLimitingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TimeLimitingCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::Counter TimeLimitingCollector::getGlobalCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Counter(env->callStaticObjectMethod(cls, mids$[mid_getGlobalCounter_781dd30a]));
        }

        ::org::apache::lucene::search::TimeLimitingCollector$TimerThread TimeLimitingCollector::getGlobalTimerThread()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TimeLimitingCollector$TimerThread(env->callStaticObjectMethod(cls, mids$[mid_getGlobalTimerThread_91bdd0a8]));
        }

        jboolean TimeLimitingCollector::isGreedy() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isGreedy_54c6a16a]);
        }

        void TimeLimitingCollector::setBaseline() const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_54c6a166]);
        }

        void TimeLimitingCollector::setBaseline(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_0ee6df2f], a0);
        }

        void TimeLimitingCollector::setCollector(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCollector_77379ce0], a0.this$);
        }

        void TimeLimitingCollector::setGreedy(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGreedy_bb0c767f], a0);
        }

        void TimeLimitingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TimeLimitingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self);
        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args);
        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data);
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TimeLimitingCollector, baseline),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, collector),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalCounter),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalTimerThread),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector, greedy),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, nextReader),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalCounter, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalTimerThread, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, isGreedy, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setBaseline, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setCollector, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setGreedy, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector, t_TimeLimitingCollector, ::org::apache::lucene::search::Collector, TimeLimitingCollector, t_TimeLimitingCollector_init_, 0, 0, t_TimeLimitingCollector__fields_, 0, 0);

        void t_TimeLimitingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector), module, "TimeLimitingCollector", 0);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimerThread", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimerThread)));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimeExceededException", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimeExceededException)));
        }

        void t_TimeLimitingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "class_", make_descriptor(TimeLimitingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector::wrap_Object(TimeLimitingCollector(((t_TimeLimitingCollector *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          ::org::apache::lucene::util::Counter a1((jobject) NULL);
          jlong a2;
          TimeLimitingCollector object((jobject) NULL);

          if (!parseArgs(args, "kkJ", ::org::apache::lucene::search::Collector::initializeClass, ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TimeLimitingCollector(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isGreedy());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.setBaseline());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.setBaseline(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBaseline", args);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCollector(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCollector", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setGreedy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGreedy", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setBaseline(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "baseline", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Collector value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &value))
            {
              INT_CALL(self->object.setCollector(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "collector", arg);
          return -1;
        }

        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::util::Counter value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isGreedy());
          Py_RETURN_BOOL(value);
        }
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setGreedy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "greedy", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilterFactory::class$ = NULL;
          jmethodID *HindiStemFilterFactory::mids$ = NULL;
          bool HindiStemFilterFactory::live$ = false;

          jclass HindiStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilterFactory::HindiStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HindiStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilterFactory, t_HindiStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiStemFilterFactory, t_HindiStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilterFactory), module, "HindiStemFilterFactory", 0);
          }

          void t_HindiStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "class_", make_descriptor(HindiStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilterFactory::wrap_Object(HindiStemFilterFactory(((t_HindiStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Long::class$ = NULL;
    jmethodID *Long::mids$ = NULL;
    bool Long::live$ = false;
    jlong Long::MAX_VALUE = (jlong) 0;
    jlong Long::MIN_VALUE = (jlong) 0;
    jint Long::SIZE = (jint) 0;
    ::java::lang::Class *Long::TYPE = NULL;

    jclass Long::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Long");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_0ee6df30] = env->getStaticMethodID(cls, "bitCount", "(J)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_a7e12cbb] = env->getStaticMethodID(cls, "compare", "(JJ)I");
        mids$[mid_compareTo_da55802e] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Long;)I");
        mids$[mid_decode_ee9f94be] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getLong_ee9f94be] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_getLong_9f081a1d] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
        mids$[mid_getLong_9a12142f] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_highestOneBit_0ee6df33] = env->getStaticMethodID(cls, "highestOneBit", "(J)J");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_0ee6df33] = env->getStaticMethodID(cls, "lowestOneBit", "(J)J");
        mids$[mid_numberOfLeadingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(J)I");
        mids$[mid_numberOfTrailingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(J)I");
        mids$[mid_parseLong_5fdc3f54] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;)J");
        mids$[mid_parseLong_6e53ccda] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;I)J");
        mids$[mid_reverse_0ee6df33] = env->getStaticMethodID(cls, "reverse", "(J)J");
        mids$[mid_reverseBytes_0ee6df33] = env->getStaticMethodID(cls, "reverseBytes", "(J)J");
        mids$[mid_rotateLeft_25d05c93] = env->getStaticMethodID(cls, "rotateLeft", "(JI)J");
        mids$[mid_rotateRight_25d05c93] = env->getStaticMethodID(cls, "rotateRight", "(JI)J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_0ee6df30] = env->getStaticMethodID(cls, "signum", "(J)I");
        mids$[mid_toBinaryString_3e02f30e] = env->getStaticMethodID(cls, "toBinaryString", "(J)Ljava/lang/String;");
        mids$[mid_toHexString_3e02f30e] = env->getStaticMethodID(cls, "toHexString", "(J)Ljava/lang/String;");
        mids$[mid_toOctalString_3e02f30e] = env->getStaticMethodID(cls, "toOctalString", "(J)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_3e02f30e] = env->getStaticMethodID(cls, "toString", "(J)Ljava/lang/String;");
        mids$[mid_toString_36a2b01a] = env->getStaticMethodID(cls, "toString", "(JI)Ljava/lang/String;");
        mids$[mid_valueOf_62a69723] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/Long;");
        mids$[mid_valueOf_ee9f94be] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_valueOf_212f058c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticLongField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticLongField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Long::Long(jlong a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

    Long::Long(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Long::bitCount(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_0ee6df30], a0);
    }

    jbyte Long::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Long::compare(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_a7e12cbb], a0, a1);
    }

    jint Long::compareTo(const Long & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_da55802e], a0.this$);
    }

    Long Long::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_decode_ee9f94be], a0.this$));
    }

    jdouble Long::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Long::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Long::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Long Long::getLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_ee9f94be], a0.this$));
    }

    Long Long::getLong(const ::java::lang::String & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9f081a1d], a0.this$, a1));
    }

    Long Long::getLong(const ::java::lang::String & a0, const Long & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9a12142f], a0.this$, a1.this$));
    }

    jint Long::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jlong Long::highestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_highestOneBit_0ee6df33], a0);
    }

    jint Long::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Long::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jlong Long::lowestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_lowestOneBit_0ee6df33], a0);
    }

    jint Long::numberOfLeadingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_0ee6df30], a0);
    }

    jint Long::numberOfTrailingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_0ee6df30], a0);
    }

    jlong Long::parseLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_5fdc3f54], a0.this$);
    }

    jlong Long::parseLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_6e53ccda], a0.this$, a1);
    }

    jlong Long::reverse(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverse_0ee6df33], a0);
    }

    jlong Long::reverseBytes(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverseBytes_0ee6df33], a0);
    }

    jlong Long::rotateLeft(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateLeft_25d05c93], a0, a1);
    }

    jlong Long::rotateRight(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateRight_25d05c93], a0, a1);
    }

    jshort Long::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Long::signum(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_0ee6df30], a0);
    }

    ::java::lang::String Long::toBinaryString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_3e02f30e], a0));
    }

    ::java::lang::String Long::toHexString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_3e02f30e], a0));
    }

    ::java::lang::String Long::toOctalString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Long::toString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_36a2b01a], a0, a1));
    }

    Long Long::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_62a69723], a0));
    }

    Long Long::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ee9f94be], a0.this$));
    }

    Long Long::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_212f058c], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg);
    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_equals(t_Long *self, PyObject *args);
    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args);
    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_intValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_longValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toString(t_Long *self, PyObject *args);
    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Long__methods_[] = {
      DECLARE_METHOD(t_Long, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, compareTo, METH_O),
      DECLARE_METHOD(t_Long, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, equals, METH_VARARGS),
      DECLARE_METHOD(t_Long, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, getLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Long, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, parseLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toString, METH_VARARGS),
      DECLARE_METHOD(t_Long, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Long, t_Long, ::java::lang::Number, Long, t_Long_init_, 0, 0, 0, 0, 0);

    void t_Long::install(PyObject *module)
    {
      installType(&PY_TYPE(Long), module, "Long", 0);
    }

    void t_Long::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "class_", make_descriptor(Long::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "wrapfn_", make_descriptor(unboxLong));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "boxfn_", make_descriptor(boxLong));
      env->getClass(Long::initializeClass);
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MAX_VALUE", make_descriptor(Long::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MIN_VALUE", make_descriptor(Long::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "SIZE", make_descriptor(Long::SIZE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Long::TYPE)));
    }

    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Long::initializeClass, 1)))
        return NULL;
      return t_Long::wrap_Object(Long(((t_Long *) arg)->object.this$));
    }
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Long::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long object((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg)
    {
      Long a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Long result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::decode(a0));
        return t_Long::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Long_equals(t_Long *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long a1((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Long), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLong", args);
      return NULL;
    }

    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::highestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_intValue(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Long_longValue(t_Long *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::lowestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseLong", args);
      return NULL;
    }

    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverse(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverseBytes(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateLeft(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateRight(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Long_toString(t_Long *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery::class$ = NULL;
        jmethodID *MultiTermQuery::mids$ = NULL;
        bool MultiTermQuery::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass MultiTermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getRewriteMethod_8919154b] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRewriteMethod_c3c3909e] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
            mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_FILTER_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_FILTER_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery::MultiTermQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jboolean MultiTermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String MultiTermQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod MultiTermQuery::getRewriteMethod() const
        {
          return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_8919154b]));
        }

        jint MultiTermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiTermQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiTermQuery::setRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setRewriteMethod_c3c3909e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg);
        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data);
        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data);
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiTermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery, field),
          DECLARE_GETSET_FIELD(t_MultiTermQuery, rewriteMethod),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, getRewriteMethod, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, setRewriteMethod, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery, t_MultiTermQuery, ::org::apache::lucene::search::Query, MultiTermQuery, t_MultiTermQuery_init_, 0, 0, t_MultiTermQuery__fields_, 0, 0);

        void t_MultiTermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery), module, "MultiTermQuery", 0);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "ConstantScoreAutoRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsBoostOnlyBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsScoringBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "RewriteMethod", make_descriptor(&PY_TYPE(MultiTermQuery$RewriteMethod)));
        }

        void t_MultiTermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "class_", make_descriptor(MultiTermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MultiTermQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_FILTER_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery::wrap_Object(MultiTermQuery(((t_MultiTermQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          MultiTermQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = MultiTermQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
          OBJ_CALL(result = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
        }

        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setRewriteMethod(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
          return NULL;
        }

        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
          OBJ_CALL(value = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
        }
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
            {
              INT_CALL(self->object.setRewriteMethod(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoLockFactory::class$ = NULL;
        jmethodID *NoLockFactory::mids$ = NULL;
        bool NoLockFactory::live$ = false;

        jclass NoLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getNoLockFactory_a2b6ff3e] = env->getStaticMethodID(cls, "getNoLockFactory", "()Lorg/apache/lucene/store/NoLockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        NoLockFactory NoLockFactory::getNoLockFactory()
        {
          jclass cls = env->getClass(initializeClass);
          return NoLockFactory(env->callStaticObjectMethod(cls, mids$[mid_getNoLockFactory_a2b6ff3e]));
        }

        ::org::apache::lucene::store::Lock NoLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type);
        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data);
        static PyGetSetDef t_NoLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_NoLockFactory, noLockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NoLockFactory__methods_[] = {
          DECLARE_METHOD(t_NoLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NoLockFactory, getNoLockFactory, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoLockFactory, t_NoLockFactory, ::org::apache::lucene::store::LockFactory, NoLockFactory, abstract_init, 0, 0, t_NoLockFactory__fields_, 0, 0);

        void t_NoLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NoLockFactory), module, "NoLockFactory", 0);
        }

        void t_NoLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "class_", make_descriptor(NoLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NoLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoLockFactory::initializeClass, 1)))
            return NULL;
          return t_NoLockFactory::wrap_Object(NoLockFactory(((t_NoLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type)
        {
          NoLockFactory result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::NoLockFactory::getNoLockFactory());
          return t_NoLockFactory::wrap_Object(result);
        }

        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data)
        {
          NoLockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getNoLockFactory());
          return t_NoLockFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *Token::class$ = NULL;
            jmethodID *Token::mids$ = NULL;
            jfieldID *Token::fids$ = NULL;
            bool Token::live$ = false;

            jclass Token::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/Token");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                mids$[mid_newToken_1162c488] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_newToken_b6d076fa] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

            ::java::lang::Object Token::getValue() const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
            }

            Token Token::newToken(jint a0)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_1162c488], a0));
            }

            Token Token::newToken(jint a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b6d076fa], a0, a1.this$));
            }

            ::java::lang::String Token::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint Token::_get_beginColumn() const
            {
              return env->getIntField(this$, fids$[fid_beginColumn]);
            }

            void Token::_set_beginColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginColumn], a0);
            }

            jint Token::_get_beginLine() const
            {
              return env->getIntField(this$, fids$[fid_beginLine]);
            }

            void Token::_set_beginLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginLine], a0);
            }

            jint Token::_get_endColumn() const
            {
              return env->getIntField(this$, fids$[fid_endColumn]);
            }

            void Token::_set_endColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endColumn], a0);
            }

            jint Token::_get_endLine() const
            {
              return env->getIntField(this$, fids$[fid_endLine]);
            }

            void Token::_set_endLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endLine], a0);
            }

            ::java::lang::String Token::_get_image() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
            }

            void Token::_set_image(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_image], a0.this$);
            }

            jint Token::_get_kind() const
            {
              return env->getIntField(this$, fids$[fid_kind]);
            }

            void Token::_set_kind(jint a0) const
            {
              env->setIntField(this$, fids$[fid_kind], a0);
            }

            Token Token::_get_next() const
            {
              return Token(env->getObjectField(this$, fids$[fid_next]));
            }

            void Token::_set_next(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_next], a0.this$);
            }

            Token Token::_get_specialToken() const
            {
              return Token(env->getObjectField(this$, fids$[fid_specialToken]));
            }

            void Token::_set_specialToken(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Token_getValue(t_Token *self);
            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
            static PyObject *t_Token_toString(t_Token *self, PyObject *args);
            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endLine(t_Token *self, void *data);
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__image(t_Token *self, void *data);
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__kind(t_Token *self, void *data);
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__next(t_Token *self, void *data);
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

            static PyObject *t_Token_get__value(t_Token *self, void *data);
            static PyGetSetDef t_Token__fields_[] = {
              DECLARE_GETSET_FIELD(t_Token, beginColumn),
              DECLARE_GETSET_FIELD(t_Token, beginLine),
              DECLARE_GETSET_FIELD(t_Token, endColumn),
              DECLARE_GETSET_FIELD(t_Token, endLine),
              DECLARE_GETSET_FIELD(t_Token, image),
              DECLARE_GETSET_FIELD(t_Token, kind),
              DECLARE_GETSET_FIELD(t_Token, next),
              DECLARE_GETSET_FIELD(t_Token, specialToken),
              DECLARE_GET_FIELD(t_Token, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Token__methods_[] = {
              DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
              DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_Token, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

            void t_Token::install(PyObject *module)
            {
              installType(&PY_TYPE(Token), module, "Token", 0);
            }

            void t_Token::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                return NULL;
              return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
            }
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Token::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Token object((jobject) NULL);

                  INT_CALL(object = Token());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = Token(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    INT_CALL(object = Token(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Token_getValue(t_Token *self)
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0));
                    return t_Token::wrap_Object(result);
                  }
                }
                break;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0, a1));
                    return t_Token::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "newToken", args);
              return NULL;
            }

            static PyObject *t_Token_toString(t_Token *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__endLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__image(t_Token *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_image());
              return j2p(value);
            }
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_image(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "image", arg);
              return -1;
            }

            static PyObject *t_Token_get__kind(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_kind());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_kind(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "kind", arg);
              return -1;
            }

            static PyObject *t_Token_get__next(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_next());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_next(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "next", arg);
              return -1;
            }

            static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_specialToken());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_specialToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
              return -1;
            }

            static PyObject *t_Token_get__value(t_Token *self, void *data)
            {
              ::java::lang::Object value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Lowest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Lowest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Lowest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Lowest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Lowest::ToParentBlockJoinFieldComparator$Lowest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Lowest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Lowest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Lowest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Lowest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Lowest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Lowest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Lowest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(const ToParentBlockJoinFieldComparator$Lowest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), module, "ToParentBlockJoinFieldComparator$Lowest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(ToParentBlockJoinFieldComparator$Lowest(((t_ToParentBlockJoinFieldComparator$Lowest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Lowest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Lowest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MinPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MinPayloadFunction::class$ = NULL;
          jmethodID *MinPayloadFunction::mids$ = NULL;
          bool MinPayloadFunction::live$ = false;

          jclass MinPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MinPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinPayloadFunction::MinPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MinPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MinPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MinPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MinPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MinPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MinPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinPayloadFunction, t_MinPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MinPayloadFunction, t_MinPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MinPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MinPayloadFunction), module, "MinPayloadFunction", 0);
          }

          void t_MinPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "class_", make_descriptor(MinPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MinPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MinPayloadFunction::wrap_Object(MinPayloadFunction(((t_MinPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MinPayloadFunction object((jobject) NULL);

            INT_CALL(object = MinPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$MemoryOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$MemoryOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$MemoryOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$MemoryOrdinalMap::DirectoryTaxonomyWriter$MemoryOrdinalMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$MemoryOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), module, "DirectoryTaxonomyWriter$MemoryOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$MemoryOrdinalMap(((t_DirectoryTaxonomyWriter$MemoryOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              DirectoryTaxonomyWriter$MemoryOrdinalMap object((jobject) NULL);

              INT_CALL(object = DirectoryTaxonomyWriter$MemoryOrdinalMap());
              self->object = object;

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IntegerEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IntegerEncoder::class$ = NULL;
          jmethodID *IntegerEncoder::mids$ = NULL;
          bool IntegerEncoder::live$ = false;

          jclass IntegerEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IntegerEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntegerEncoder::IntegerEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IntegerEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args);

          static PyMethodDef t_IntegerEncoder__methods_[] = {
            DECLARE_METHOD(t_IntegerEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntegerEncoder, t_IntegerEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IntegerEncoder, t_IntegerEncoder_init_, 0, 0, 0, 0, 0);

          void t_IntegerEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IntegerEncoder), module, "IntegerEncoder", 0);
          }

          void t_IntegerEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "class_", make_descriptor(IntegerEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "wrapfn_", make_descriptor(t_IntegerEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntegerEncoder::initializeClass, 1)))
              return NULL;
            return t_IntegerEncoder::wrap_Object(IntegerEncoder(((t_IntegerEncoder *) arg)->object.this$));
          }
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntegerEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds)
          {
            IntegerEncoder object((jobject) NULL);

            INT_CALL(object = IntegerEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntegerEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFloatFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFloatFunction::class$ = NULL;
            jmethodID *MultiFloatFunction::mids$ = NULL;
            bool MultiFloatFunction::live$ = false;

            jclass MultiFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFloatFunction::MultiFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}

            void MultiFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MultiFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MultiFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args);

            static PyMethodDef t_MultiFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFloatFunction, t_MultiFloatFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFloatFunction, t_MultiFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFloatFunction), module, "MultiFloatFunction", 0);
            }

            void t_MultiFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "class_", make_descriptor(MultiFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFloatFunction::wrap_Object(MultiFloatFunction(((t_MultiFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MultiFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MultiFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianAnalyzer::class$ = NULL;
          jmethodID *IndonesianAnalyzer::mids$ = NULL;
          bool IndonesianAnalyzer::live$ = false;
          ::java::lang::String *IndonesianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IndonesianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IndonesianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data);
          static PyGetSetDef t_IndonesianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IndonesianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndonesianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IndonesianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianAnalyzer, t_IndonesianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IndonesianAnalyzer, t_IndonesianAnalyzer_init_, 0, 0, t_IndonesianAnalyzer__fields_, 0, 0);

          void t_IndonesianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianAnalyzer), module, "IndonesianAnalyzer", 0);
          }

          void t_IndonesianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "class_", make_descriptor(IndonesianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IndonesianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IndonesianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IndonesianAnalyzer::wrap_Object(IndonesianAnalyzer(((t_IndonesianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::id::IndonesianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingTermBuilder::class$ = NULL;
            jmethodID *BoostingTermBuilder::mids$ = NULL;
            bool BoostingTermBuilder::live$ = false;

            jclass BoostingTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingTermBuilder::BoostingTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingTermBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingTermBuilder, t_BoostingTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, BoostingTermBuilder, t_BoostingTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingTermBuilder), module, "BoostingTermBuilder", 0);
            }

            void t_BoostingTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "class_", make_descriptor(BoostingTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingTermBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingTermBuilder::wrap_Object(BoostingTermBuilder(((t_BoostingTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              BoostingTermBuilder object((jobject) NULL);

              INT_CALL(object = BoostingTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FuzzyConfig::class$ = NULL;
              jmethodID *FuzzyConfig::mids$ = NULL;
              bool FuzzyConfig::live$ = false;

              jclass FuzzyConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_setMinSimilarity_06298cab] = env->getMethodID(cls, "setMinSimilarity", "(F)V");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyConfig::FuzzyConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              jfloat FuzzyConfig::getMinSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
              }

              jint FuzzyConfig::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              void FuzzyConfig::setMinSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setMinSimilarity_06298cab], a0);
              }

              void FuzzyConfig::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyConfig, minSimilarity),
                DECLARE_GETSET_FIELD(t_FuzzyConfig, prefixLength),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyConfig__methods_[] = {
                DECLARE_METHOD(t_FuzzyConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, getMinSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, setMinSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyConfig, setPrefixLength, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyConfig, t_FuzzyConfig, ::java::lang::Object, FuzzyConfig, t_FuzzyConfig_init_, 0, 0, t_FuzzyConfig__fields_, 0, 0);

              void t_FuzzyConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyConfig), module, "FuzzyConfig", 0);
              }

              void t_FuzzyConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "class_", make_descriptor(FuzzyConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "wrapfn_", make_descriptor(t_FuzzyConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyConfig::initializeClass, 1)))
                  return NULL;
                return t_FuzzyConfig::wrap_Object(FuzzyConfig(((t_FuzzyConfig *) arg)->object.this$));
              }
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds)
              {
                FuzzyConfig object((jobject) NULL);

                INT_CALL(object = FuzzyConfig());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setMinSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setMinSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setMinSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "minSimilarity", arg);
                return -1;
              }

              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilterFactory::class$ = NULL;
          jmethodID *CJKWidthFilterFactory::mids$ = NULL;
          bool CJKWidthFilterFactory::live$ = false;

          jclass CJKWidthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilterFactory::CJKWidthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKWidthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CJKWidthFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args);
          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self);
          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data);
          static PyGetSetDef t_CJKWidthFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CJKWidthFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKWidthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilterFactory, t_CJKWidthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKWidthFilterFactory, t_CJKWidthFilterFactory_init_, 0, 0, t_CJKWidthFilterFactory__fields_, 0, 0);

          void t_CJKWidthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilterFactory), module, "CJKWidthFilterFactory", 0);
          }

          void t_CJKWidthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "class_", make_descriptor(CJKWidthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilterFactory::wrap_Object(CJKWidthFilterFactory(((t_CJKWidthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKWidthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKWidthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderManager.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderManager::class$ = NULL;
        jmethodID *ReaderManager::mids$ = NULL;
        bool ReaderManager::live$ = false;

        jclass ReaderManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7015519a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Z)V");
            mids$[mid_decRef_1e43081e] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_getRefCount_1e430801] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/index/DirectoryReader;)I");
            mids$[mid_tryIncRef_1e430812] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/index/DirectoryReader;)Z");
            mids$[mid_refreshIfNeeded_5bb3c60f] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderManager::ReaderManager(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_7015519a, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args);
        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data);
        static PyGetSetDef t_ReaderManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderManager__methods_[] = {
          DECLARE_METHOD(t_ReaderManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderManager, t_ReaderManager, ::org::apache::lucene::search::ReferenceManager, ReaderManager, t_ReaderManager_init_, 0, 0, t_ReaderManager__fields_, 0, 0);
        PyObject *t_ReaderManager::wrap_Object(const ReaderManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReaderManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReaderManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderManager), module, "ReaderManager", 0);
        }

        void t_ReaderManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "class_", make_descriptor(ReaderManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "wrapfn_", make_descriptor(t_ReaderManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderManager::initializeClass, 1)))
            return NULL;
          return t_ReaderManager::wrap_Object(ReaderManager(((t_ReaderManager *) arg)->object.this$));
        }
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ReaderManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
            jmethodID *QueryParserTokenManager::mids$ = NULL;
            jfieldID *QueryParserTokenManager::fids$ = NULL;
            bool QueryParserTokenManager::live$ = false;
            JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

            jclass QueryParserTokenManager::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_init$_5ba65d1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_ReInit_5ba65d1b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                mids$[mid_jjFillToken_353aefd6] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ba65d1b, a0.this$, a1)) {}

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5ba65d1b], a0.this$, a1);
            }

            void QueryParserTokenManager::SwitchTo(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParserTokenManager::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
            }

            ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
            {
              return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
            }

            void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
            {
              env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
            static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
              DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
              DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserTokenManager__methods_[] = {
              DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
              DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

            void t_QueryParserTokenManager::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
            }

            void t_QueryParserTokenManager::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserTokenManager::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
            }

            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
                return NULL;
              return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
            }
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.ReInit(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.SwitchTo(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setDebugStream(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
              return NULL;
            }

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
            {
              {
                ::java::io::PrintStream value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                {
                  INT_CALL(self->object.setDebugStream(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
              return -1;
            }

            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexDeletionPolicy::class$ = NULL;
        jmethodID *IndexDeletionPolicy::mids$ = NULL;
        bool IndexDeletionPolicy::live$ = false;

        jclass IndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void IndexDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg);

        static PyMethodDef t_IndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_IndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, onCommit, METH_O),
          DECLARE_METHOD(t_IndexDeletionPolicy, onInit, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexDeletionPolicy, t_IndexDeletionPolicy, ::java::lang::Object, IndexDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexDeletionPolicy), module, "IndexDeletionPolicy", 0);
        }

        void t_IndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "class_", make_descriptor(IndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_IndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_IndexDeletionPolicy::wrap_Object(IndexDeletionPolicy(((t_IndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onInit", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/RollingCharBuffer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *RollingCharBuffer::class$ = NULL;
          jmethodID *RollingCharBuffer::mids$ = NULL;
          bool RollingCharBuffer::live$ = false;

          jclass RollingCharBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/RollingCharBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
              mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
              mids$[mid_get_acd005cf] = env->getMethodID(cls, "get", "(II)[C");
              mids$[mid_reset_cf2e3c10] = env->getMethodID(cls, "reset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RollingCharBuffer::RollingCharBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void RollingCharBuffer::freeBefore(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
          }

          jint RollingCharBuffer::get(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
          }

          JArray< jchar > RollingCharBuffer::get(jint a0, jint a1) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_get_acd005cf], a0, a1));
          }

          void RollingCharBuffer::reset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg);
          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args);
          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg);

          static PyMethodDef t_RollingCharBuffer__methods_[] = {
            DECLARE_METHOD(t_RollingCharBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, freeBefore, METH_O),
            DECLARE_METHOD(t_RollingCharBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_RollingCharBuffer, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RollingCharBuffer, t_RollingCharBuffer, ::java::lang::Object, RollingCharBuffer, t_RollingCharBuffer_init_, 0, 0, 0, 0, 0);

          void t_RollingCharBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(RollingCharBuffer), module, "RollingCharBuffer", 0);
          }

          void t_RollingCharBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "class_", make_descriptor(RollingCharBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingCharBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RollingCharBuffer::initializeClass, 1)))
              return NULL;
            return t_RollingCharBuffer::wrap_Object(RollingCharBuffer(((t_RollingCharBuffer *) arg)->object.this$));
          }
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RollingCharBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds)
          {
            RollingCharBuffer object((jobject) NULL);

            INT_CALL(object = RollingCharBuffer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.freeBefore(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                JArray< jchar > result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermIndexStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermIndexStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermIndexStatus::fids$ = NULL;
        bool CheckIndex$Status$TermIndexStatus::live$ = false;

        jclass CheckIndex$Status$TermIndexStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermIndexStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockTreeStats] = env->getFieldID(cls, "blockTreeStats", "Ljava/util/Map;");
            fids$[fid_delTermCount] = env->getFieldID(cls, "delTermCount", "J");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_termCount] = env->getFieldID(cls, "termCount", "J");
            fids$[fid_totFreq] = env->getFieldID(cls, "totFreq", "J");
            fids$[fid_totPos] = env->getFieldID(cls, "totPos", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Map CheckIndex$Status$TermIndexStatus::_get_blockTreeStats() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_blockTreeStats]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_blockTreeStats(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_blockTreeStats], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_delTermCount() const
        {
          return env->getLongField(this$, fids$[fid_delTermCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_delTermCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_delTermCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermIndexStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_termCount() const
        {
          return env->getLongField(this$, fids$[fid_termCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_termCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_termCount], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totFreq() const
        {
          return env->getLongField(this$, fids$[fid_totFreq]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFreq], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totPos() const
        {
          return env->getLongField(this$, fids$[fid_totPos]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totPos(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totPos], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermIndexStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, blockTreeStats),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, delTermCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, termCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totFreq),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totPos),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermIndexStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermIndexStatus, t_CheckIndex$Status$TermIndexStatus, ::java::lang::Object, CheckIndex$Status$TermIndexStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermIndexStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermIndexStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermIndexStatus), module, "CheckIndex$Status$TermIndexStatus", 0);
        }

        void t_CheckIndex$Status$TermIndexStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermIndexStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermIndexStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermIndexStatus::wrap_Object(CheckIndex$Status$TermIndexStatus(((t_CheckIndex$Status$TermIndexStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_blockTreeStats());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_blockTreeStats(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockTreeStats", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_delTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_delTermCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delTermCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_termCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_termCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFreq", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totPos());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totPos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totPos", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$SortInfo::class$ = NULL;
        jmethodID *OfflineSorter$SortInfo::mids$ = NULL;
        jfieldID *OfflineSorter$SortInfo::fids$ = NULL;
        bool OfflineSorter$SortInfo::live$ = false;

        jclass OfflineSorter$SortInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$SortInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bufferSize] = env->getFieldID(cls, "bufferSize", "J");
            fids$[fid_lines] = env->getFieldID(cls, "lines", "I");
            fids$[fid_mergeRounds] = env->getFieldID(cls, "mergeRounds", "I");
            fids$[fid_mergeTime] = env->getFieldID(cls, "mergeTime", "J");
            fids$[fid_readTime] = env->getFieldID(cls, "readTime", "J");
            fids$[fid_sortTime] = env->getFieldID(cls, "sortTime", "J");
            fids$[fid_tempMergeFiles] = env->getFieldID(cls, "tempMergeFiles", "I");
            fids$[fid_totalTime] = env->getFieldID(cls, "totalTime", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$SortInfo::OfflineSorter$SortInfo(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

        ::java::lang::String OfflineSorter$SortInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OfflineSorter$SortInfo::_get_bufferSize() const
        {
          return env->getLongField(this$, fids$[fid_bufferSize]);
        }

        jint OfflineSorter$SortInfo::_get_lines() const
        {
          return env->getIntField(this$, fids$[fid_lines]);
        }

        void OfflineSorter$SortInfo::_set_lines(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lines], a0);
        }

        jint OfflineSorter$SortInfo::_get_mergeRounds() const
        {
          return env->getIntField(this$, fids$[fid_mergeRounds]);
        }

        void OfflineSorter$SortInfo::_set_mergeRounds(jint a0) const
        {
          env->setIntField(this$, fids$[fid_mergeRounds], a0);
        }

        jlong OfflineSorter$SortInfo::_get_mergeTime() const
        {
          return env->getLongField(this$, fids$[fid_mergeTime]);
        }

        void OfflineSorter$SortInfo::_set_mergeTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_mergeTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_readTime() const
        {
          return env->getLongField(this$, fids$[fid_readTime]);
        }

        void OfflineSorter$SortInfo::_set_readTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_readTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_sortTime() const
        {
          return env->getLongField(this$, fids$[fid_sortTime]);
        }

        void OfflineSorter$SortInfo::_set_sortTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_sortTime], a0);
        }

        jint OfflineSorter$SortInfo::_get_tempMergeFiles() const
        {
          return env->getIntField(this$, fids$[fid_tempMergeFiles]);
        }

        void OfflineSorter$SortInfo::_set_tempMergeFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_tempMergeFiles], a0);
        }

        jlong OfflineSorter$SortInfo::_get_totalTime() const
        {
          return env->getLongField(this$, fids$[fid_totalTime]);
        }

        void OfflineSorter$SortInfo::_set_totalTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTime], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args);
        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);

        static PyGetSetDef t_OfflineSorter$SortInfo__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter$SortInfo, bufferSize),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, lines),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeRounds),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, readTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, sortTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, tempMergeFiles),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, totalTime),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter$SortInfo__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$SortInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$SortInfo, t_OfflineSorter$SortInfo, ::java::lang::Object, OfflineSorter$SortInfo, t_OfflineSorter$SortInfo_init_, 0, 0, t_OfflineSorter$SortInfo__fields_, 0, 0);

        void t_OfflineSorter$SortInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$SortInfo), module, "OfflineSorter$SortInfo", 0);
        }

        void t_OfflineSorter$SortInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "class_", make_descriptor(OfflineSorter$SortInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$SortInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$SortInfo::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$SortInfo::wrap_Object(OfflineSorter$SortInfo(((t_OfflineSorter$SortInfo *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$SortInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
          OfflineSorter$SortInfo object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
          {
            INT_CALL(object = OfflineSorter$SortInfo(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OfflineSorter$SortInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_bufferSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lines());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lines(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lines", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeRounds());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_mergeRounds(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeRounds", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_mergeTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_mergeTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_readTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_readTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "readTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_sortTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_sortTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sortTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_tempMergeFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_tempMergeFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "tempMergeFiles", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTime", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene40SegmentInfoReader::mids$ = NULL;
          bool Lucene40SegmentInfoReader::live$ = false;

          jclass Lucene40SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoReader::Lucene40SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene40SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoReader), module, "Lucene40SegmentInfoReader", 0);
          }

          void t_Lucene40SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoReader::wrap_Object(Lucene40SegmentInfoReader(((t_Lucene40SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy::class$ = NULL;
        jmethodID *MergePolicy::mids$ = NULL;
        bool MergePolicy::live$ = false;

        jclass MergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_54c6a174] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_54c6a174] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_5d1c7645] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_isMerged_70dc8488] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy::MergePolicy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble MergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_54c6a174]);
        }

        jdouble MergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_54c6a174]);
        }

        void MergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645], a0);
        }

        void MergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_5d1c7645], a0);
        }

        jboolean MergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy_close(t_MergePolicy *self);
        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self);
        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self);
        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_MergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy__methods_[] = {
          DECLARE_METHOD(t_MergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, close, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, getMaxCFSSegmentSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, getNoCFSRatio, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, setMaxCFSSegmentSizeMB, METH_O),
          DECLARE_METHOD(t_MergePolicy, setNoCFSRatio, METH_O),
          DECLARE_METHOD(t_MergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy, t_MergePolicy, ::java::lang::Object, MergePolicy, t_MergePolicy_init_, 0, 0, t_MergePolicy__fields_, 0, 0);

        void t_MergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy), module, "MergePolicy", 0);
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeAbortedException", make_descriptor(&PY_TYPE(MergePolicy$MergeAbortedException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeException", make_descriptor(&PY_TYPE(MergePolicy$MergeException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeSpecification", make_descriptor(&PY_TYPE(MergePolicy$MergeSpecification)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "OneMerge", make_descriptor(&PY_TYPE(MergePolicy$OneMerge)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergePolicy$DocMap)));
        }

        void t_MergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "class_", make_descriptor(MergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy::initializeClass, 1)))
            return NULL;
          return t_MergePolicy::wrap_Object(MergePolicy(((t_MergePolicy *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy object((jobject) NULL);

          INT_CALL(object = MergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy_close(t_MergePolicy *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedDeletesMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxCFSSegmentSizeMB", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNoCFSRatio", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataOutput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataOutput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataOutput::live$ = false;

        jclass PagedBytes$PagedBytesDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2279e4ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes;)V");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataOutput::PagedBytes$PagedBytesDataOutput(const ::org::apache::lucene::util::PagedBytes & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_2279e4ea, a0.this$)) {}

        jlong PagedBytes$PagedBytesDataOutput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        void PagedBytes$PagedBytesDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void PagedBytes$PagedBytesDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes$PagedBytesDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataOutput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput, ::org::apache::lucene::store::DataOutput, PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput_init_, 0, 0, t_PagedBytes$PagedBytesDataOutput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataOutput), module, "PagedBytes$PagedBytesDataOutput", 0);
        }

        void t_PagedBytes$PagedBytesDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataOutput::wrap_Object(PagedBytes$PagedBytesDataOutput(((t_PagedBytes$PagedBytesDataOutput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes a0((jobject) NULL);
          PagedBytes$PagedBytesDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::PagedBytes::initializeClass, &a0))
          {
            INT_CALL(object = PagedBytes$PagedBytesDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$StemmerOverrideMap::class$ = NULL;
          jmethodID *StemmerOverrideFilter$StemmerOverrideMap::mids$ = NULL;
          bool StemmerOverrideFilter$StemmerOverrideMap::live$ = false;

          jclass StemmerOverrideFilter$StemmerOverrideMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6d8e5bb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Z)V");
              mids$[mid_get_b662c4bb] = env->getMethodID(cls, "get", "([CILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$StemmerOverrideMap::StemmerOverrideFilter$StemmerOverrideMap(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6d8e5bb9, a0.this$, a1)) {}

          ::org::apache::lucene::util::BytesRef StemmerOverrideFilter$StemmerOverrideMap::get(const JArray< jchar > & a0, jint a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b662c4bb], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::util::fst::FST$BytesReader StemmerOverrideFilter$StemmerOverrideMap::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilter$StemmerOverrideMap__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilter$StemmerOverrideMap, bytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilter$StemmerOverrideMap__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, get, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, getBytesReader, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap, ::java::lang::Object, StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap_init_, 0, 0, t_StemmerOverrideFilter$StemmerOverrideMap__fields_, 0, 0);

          void t_StemmerOverrideFilter$StemmerOverrideMap::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), module, "StemmerOverrideFilter$StemmerOverrideMap", 0);
          }

          void t_StemmerOverrideFilter$StemmerOverrideMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$StemmerOverrideMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(StemmerOverrideFilter$StemmerOverrideMap(((t_StemmerOverrideFilter$StemmerOverrideMap *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            StemmerOverrideFilter$StemmerOverrideMap object((jobject) NULL);

            if (!parseArgs(args, "KZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter$StemmerOverrideMap(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CIKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Row.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/io/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Row::class$ = NULL;
      jmethodID *Row::mids$ = NULL;
      bool Row::live$ = false;

      jclass Row::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Row");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getCmd_35927258] = env->getMethodID(cls, "getCmd", "(Ljava/lang/Character;)I");
          mids$[mid_getCnt_35927258] = env->getMethodID(cls, "getCnt", "(Ljava/lang/Character;)I");
          mids$[mid_getRef_35927258] = env->getMethodID(cls, "getRef", "(Ljava/lang/Character;)I");
          mids$[mid_print_1b7c898b] = env->getMethodID(cls, "print", "(Ljava/io/PrintStream;)V");
          mids$[mid_setCmd_d2bbdccf] = env->getMethodID(cls, "setCmd", "(Ljava/lang/Character;I)V");
          mids$[mid_setRef_d2bbdccf] = env->getMethodID(cls, "setRef", "(Ljava/lang/Character;I)V");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");
          mids$[mid_uniformCmd_bb0c7660] = env->getMethodID(cls, "uniformCmd", "(Z)I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Row::Row() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Row::Row(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      jint Row::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Row::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Row::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      jint Row::getCmd(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCmd_35927258], a0.this$);
      }

      jint Row::getCnt(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCnt_35927258], a0.this$);
      }

      jint Row::getRef(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getRef_35927258], a0.this$);
      }

      void Row::print(const ::java::io::PrintStream & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_1b7c898b], a0.this$);
      }

      void Row::setCmd(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCmd_d2bbdccf], a0.this$, a1);
      }

      void Row::setRef(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setRef_d2bbdccf], a0.this$, a1);
      }

      void Row::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }

      jint Row::uniformCmd(jboolean a0) const
      {
        return env->callIntMethod(this$, mids$[mid_uniformCmd_bb0c7660], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Row_getCells(t_Row *self);
      static PyObject *t_Row_getCellsPnt(t_Row *self);
      static PyObject *t_Row_getCellsVal(t_Row *self);
      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg);
      static PyObject *t_Row_print(t_Row *self, PyObject *arg);
      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args);
      static PyObject *t_Row_setRef(t_Row *self, PyObject *args);
      static PyObject *t_Row_store(t_Row *self, PyObject *arg);
      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_get__cells(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data);
      static PyGetSetDef t_Row__fields_[] = {
        DECLARE_GET_FIELD(t_Row, cells),
        DECLARE_GET_FIELD(t_Row, cellsPnt),
        DECLARE_GET_FIELD(t_Row, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Row__methods_[] = {
        DECLARE_METHOD(t_Row, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCmd, METH_O),
        DECLARE_METHOD(t_Row, getCnt, METH_O),
        DECLARE_METHOD(t_Row, getRef, METH_O),
        DECLARE_METHOD(t_Row, print, METH_O),
        DECLARE_METHOD(t_Row, setCmd, METH_VARARGS),
        DECLARE_METHOD(t_Row, setRef, METH_VARARGS),
        DECLARE_METHOD(t_Row, store, METH_O),
        DECLARE_METHOD(t_Row, uniformCmd, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Row, t_Row, ::java::lang::Object, Row, t_Row_init_, 0, 0, t_Row__fields_, 0, 0);

      void t_Row::install(PyObject *module)
      {
        installType(&PY_TYPE(Row), module, "Row", 0);
      }

      void t_Row::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "class_", make_descriptor(Row::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "wrapfn_", make_descriptor(t_Row::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Row::initializeClass, 1)))
          return NULL;
        return t_Row::wrap_Object(Row(((t_Row *) arg)->object.this$));
      }
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Row::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Row object((jobject) NULL);

            INT_CALL(object = Row());
            self->object = object;
            break;
          }
          goto err;
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Row object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Row(a0));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Row_getCells(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsPnt(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsVal(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCnt(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCnt", arg);
        return NULL;
      }

      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getRef(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRef", arg);
        return NULL;
      }

      static PyObject *t_Row_print(t_Row *self, PyObject *arg)
      {
        ::java::io::PrintStream a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
        {
          OBJ_CALL(self->object.print(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "print", arg);
        return NULL;
      }

      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setCmd(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCmd", args);
        return NULL;
      }

      static PyObject *t_Row_setRef(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setRef(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRef", args);
        return NULL;
      }

      static PyObject *t_Row_store(t_Row *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg)
      {
        jboolean a0;
        jint result;

        if (!parseArg(arg, "Z", &a0))
        {
          OBJ_CALL(result = self->object.uniformCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "uniformCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_get__cells(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupHeadsCollector::class$ = NULL;
            jmethodID *TermAllGroupHeadsCollector::mids$ = NULL;
            bool TermAllGroupHeadsCollector::live$ = false;

            jclass TermAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_create_3e5305de] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");
                mids$[mid_create_cf6bc864] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_3e5305de], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_cf6bc864], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupHeadsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, create, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupHeadsCollector, t_TermAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, TermAllGroupHeadsCollector, abstract_init, 0, 0, t_TermAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupHeadsCollector::wrap_Object(const TermAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupHeadsCollector), module, "TermAllGroupHeadsCollector", 0);
            }

            void t_TermAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(TermAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupHeadsCollector::wrap_Object(TermAllGroupHeadsCollector(((t_TermAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  jint a2;
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1, a2));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "create", args);
              return NULL;
            }
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MutableBits::class$ = NULL;
        jmethodID *MutableBits::mids$ = NULL;
        bool MutableBits::live$ = false;

        jclass MutableBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MutableBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MutableBits::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg);

        static PyMethodDef t_MutableBits__methods_[] = {
          DECLARE_METHOD(t_MutableBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, clear, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MutableBits, t_MutableBits, ::org::apache::lucene::util::Bits, MutableBits, abstract_init, 0, 0, 0, 0, 0);

        void t_MutableBits::install(PyObject *module)
        {
          installType(&PY_TYPE(MutableBits), module, "MutableBits", 0);
        }

        void t_MutableBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "class_", make_descriptor(MutableBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "wrapfn_", make_descriptor(t_MutableBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MutableBits::initializeClass, 1)))
            return NULL;
          return t_MutableBits::wrap_Object(MutableBits(((t_MutableBits *) arg)->object.this$));
        }
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MutableBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.clear(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clear", arg);
          return NULL;
        }
      }
    }
  }
}
